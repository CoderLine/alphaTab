<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AlphaTab</name>
    </assembly>
    <members>
        <member name="T:AlphaTab.Environment">
            <summary>
            This public class represents the global alphaTab environment where
            alphaTab looks for information like available layout engines
            staves etc.
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.ICanvas">
            <summary>
            This is the base public interface for canvas implementations on different plattforms.
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.IPathCanvas">
            <summary>
            This is the path drawing API for canvas implementations
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Model.Font">
            <summary>
            This container public class can store the definition for a font and it's style.
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Model.TextAlign">
            <summary>
            This public enum lists all different text alignments
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Model.TextBaseline">
            <summary>
            This public enum lists all base line modes
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Svg.FontSizes">
            <summary>
            This public class stores text widths for several fonts and allows width calculation 
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Svg.SupportedFonts">
            <summary>
            The supported fonts by the FontSizes public class
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Svg.CssFontSvgCanvas">
            <summary>
            This SVG canvas renders the music symbols by adding a CSS class 'at' to all elements. 
            </summary>
        </member>
        <member name="T:AlphaTab.Platform.Svg.SvgCanvas">
            <summary>
             A canvas implementation storing SVG data
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.GeneralMidi">
            <summary>
            This public class provides names for all general midi instruments.
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Generator.IMidiFileHandler">
            <summary>
            A handler is responsible for writing midi events to a custom structure
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Generator.MidiFileGenerator">
            <summary>
            This generator creates a midi file using a score. 
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Generator.MidiFileHandler">
            <summary>
            This handler is responsible for writing midi events
            to a MidiFile object.
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.MidiUtils.QuarterTime">
            <summary>
            The amount of ticks per quarter note used within this midi system.
            (Pulses Per Quarter Note)
            </summary>
        </member>
        <member name="F:AlphaTab.Audio.MidiUtils.PercussionChannel">
            <summary>
            The default midi channel used for percussion
            </summary>
        </member>
        <member name="M:AlphaTab.Audio.MidiUtils.TicksToMillis(System.Int32,System.Int32)">
            <summary>
            Converts a duration value to its ticks equivalent.
            </summary>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Audio.MidiUtils.ToTicks(AlphaTab.Model.Duration)">
            <summary>
            Converts a duration value to its ticks equivalent.
            </summary>
            <param name="duration"></param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Audio.MidiUtils.ValueToTicks(System.Int32)">
            <summary>
            Converts a numerical value to its ticks equivalent.
            </summary>
            <param name="duration">the numerical proportion to convert. (i.E. timesignature denominator, note duration,...)</param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Audio.Model.MidiController">
            <summary>
            Contains all midi controller definitions
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Model.MidiEvent">
            <summary>
            A midi event is a timed midi message. 
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Model.MidiFile">
            <summary>
            A midi file consists of multiple tracks including a
            info track for multi-track messages 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Model.MidiFile.InfoTrack">
            <summary>
            Gets or sets the index of the track used for midi events
            affecting all tracks. (like the tempo)
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Model.MidiMessage">
            <summary>
            Represents a midi message. 
            </summary>
        </member>
        <member name="P:AlphaTab.Audio.Model.MidiMessage.Data">
            <summary>
            The raw midi message data
            </summary>
        </member>
        <member name="T:AlphaTab.Audio.Model.MidiTrack">
            <summary>
            Represents a single midi track. A midi track contains
            a linked list of midi es and supports sorted inserting of 
            midi es into this track.
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.AlphaTexImporter">
            <summary>
            This importer can parse alphaTex markup into a score structure. 
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.CreateDefaultScore">
            <summary>
            Initializes the song with some required default values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.ParseClefFromString(System.String)">
            <summary>
            Converts a clef string into the clef value.
            </summary>
            <param name="str">the string to convert</param>
            <returns>the clef value</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.ParseClefFromInt(System.Int32)">
            <summary>
            Converts a clef tuning into the clef value.
            </summary>
            <param name="i">the tuning value to convert</param>
            <returns>the clef value</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.ParseKeySignature(System.String)">
            <summary>
            Converts a keysignature string into the assocciated value.
            </summary>
            <param name="str">the string to convert</param>
            <returns>the assocciated keysignature value</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.NextChar">
            <summary>
            Reads the next character of the source stream.
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.NewSy">
            <summary>
            Reads the next terminal symbol.
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.IsLetter(System.Int32)">
            <summary>
            Checks if the given character is a letter.
            (no control characters, whitespaces, numbers or dots)
            </summary>
            <param name="code">the character</param>
            <returns>true if the given character is a letter, otherwise false.</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.IsTerminal(System.Int32)">
            <summary>
            Checks if the given charater is a non terminal.
            </summary>
            <param name="ch">the character</param>
            <returns>true if the given character is a terminal, otherwise false.</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.IsDigit(System.Int32)">
            <summary>
            Checks if the given character is a digit. 
            </summary>
            <param name="code">the character</param>
            <returns>true if the given character is a digit, otherwise false.</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.ReadName">
            <summary>
            Reads a string from the stream.
            </summary>
            <returns>the read string.</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.ReadNumber">
            <summary>
            Reads a number from the stream.
            </summary>
            <returns>the read number.</returns>
        </member>
        <member name="M:AlphaTab.Importer.AlphaTexImporter.ApplyBeatEffect(AlphaTab.Model.Beat)">
            <summary>
            Tries to apply a beat effect to the given beat.
            </summary>
            <returns>true if a effect could be applied, otherwise false</returns>
        </member>
        <member name="T:AlphaTab.Importer.AlphaTexSymbols">
            <summary>
            A list of terminals recognized by the alphaTex-parser
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.Gp3To5Importer.ReadStringIntUnused">
            <summary>
             Skips an integer (4byte) and reads a string using 
             a bytesize
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Importer.Gp3To5Importer.ReadStringInt">
            <summary>
            Reads an integer as size, and then the string itself
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Importer.Gp3To5Importer.ReadStringIntByte">
            <summary>
            Reads an integer as size, skips a byte and reads the string itself
            </summary>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Importer.Gp3To5Importer.ReadStringByteLength(System.Int32)">
            <summary>
            Reads a byte as size and the string itself.
            Additionally it is ensured the specified amount of bytes is read. 
            </summary>
            <param name="length">the amount of bytes to read</param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Importer.GpxFile">
            <summary>
            this public class represents a file within the GpxFileSystem
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.GpxFileSystem">
            <summary>
            This public class represents the file system structure
            stored within a GPX container file. 
            </summary>
        </member>
        <member name="P:AlphaTab.Importer.GpxFileSystem.FileFilter">
            <summary>
            You can set a file filter method using this setter. On parsing
            the filestructure this function can determine based on the filename 
            whether this file will be available after loading. 
            This way we can reduce the amount of memory we store.
            </summary>
        </member>
        <member name="P:AlphaTab.Importer.GpxFileSystem.Files">
            <summary>
            Gets the list of files stored in this FileSystem.
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.#ctor">
            <summary>
            Creates a new GpxFileSystem instance
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.Load(AlphaTab.IO.IReadable)">
            <summary>
            Load a complete FileSystem to the memory.
            </summary>
            <param name="s">the binary source to read from.</param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.ReadHeader(AlphaTab.IO.BitReader)">
            <summary>
            Reads the 4 byte header as a string.
            </summary>
            <param name="src">the BitInput to read from</param>
            <returns>a string with 4 characters representing the header.</returns>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.Decompress(AlphaTab.IO.BitReader,System.Boolean)">
            <summary>
            Decompresses the given bitinput using the GPX compression format. Only use this method
            if you are sure the binary data is compressed using the GPX format. Otherwise unexpected
            behavior can occure. 
            </summary>
            <param name="src">the bitInput to read the data from</param>
            <param name="skipHeader">true if the header should NOT be included in the result byteset, otherwise false</param>
            <returns>the decompressed byte data. if skipHeader is set to false the BCFS header is included.</returns>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.ReadBlock(AlphaTab.IO.BitReader)">
            <summary>
            Reads a block from the given data source.
            </summary>
            <param name="data">the data source</param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.ReadUncompressedBlock(System.Byte[])">
            <summary>
            Reads an uncompressed data block into the model.
            </summary>
            <param name="data">the data store to read from.</param>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a zeroterminated ascii string from the given source
            </summary>
            <param name="data">the data source to read from</param>
            <param name="offset">the offset to start reading from</param>
            <param name="length">the max length to read</param>
            <returns>the ascii string read from the datasource.</returns>
        </member>
        <member name="M:AlphaTab.Importer.GpxFileSystem.GetInteger(System.Byte[],System.Int32)">
            <summary>
            Reads an 4 byte signed integer from the given source
            </summary>
            <param name="data">the data source to read from </param>
            <param name="offset">offset the offset to start reading from</param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Importer.GpxImporter">
            <summary>
            This ScoreImporter can read Guitar Pro 6 (gpx) files.
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.GpxRhythm">
            <summary>
            This structure represents a duration within a gpx model.
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.GpxParser">
            <summary>
            This public class can parse a score.gpif xml file into the model structure
            </summary>
        </member>
        <member name="F:AlphaTab.Importer.GpxParser.BendPointPositionFactor">
            <summary>
            GPX range: 0-100
            Internal range: 0 - 60
            </summary>
        </member>
        <member name="F:AlphaTab.Importer.GpxParser.BendPointValueFactor">
            <summary>
            GPX Range: 0-300      
            Internal Range: 0-12
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.MixTableChange">
            <summary>
            A mixtablechange describes several track changes. 
            </summary>
        </member>
        <member name="T:AlphaTab.Importer.ScoreImporter">
            <summary>
            This is the base public class for creating new song importers which 
            enable reading scores from any binary datasource
            </summary>
        </member>
        <member name="M:AlphaTab.Importer.ScoreImporter.BuildImporters">
            Gets all default ScoreImporters
            @return
        </member>
        <member name="T:AlphaTab.Importer.ScoreLoader">
            <summary>
            The ScoreLoader enables you easy loading of Scores using all 
            available importers
            </summary>
        </member>
        <member name="T:AlphaTab.IO.BitReader">
            <summary>
            This utility public class allows bitwise reading of a stream
            </summary>
        </member>
        <member name="T:AlphaTab.Model.AccentuationType">
            <summary>
            Lists all types of note acceuntations
            </summary>
        </member>
        <member name="T:AlphaTab.Model.AccidentalType">
            <summary>
            Defines all possible accidentals for notes.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Automation">
            <summary>
            Automations are used to change the behaviour of a song.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.AutomationType">
            <summary>
            This public enumeration lists all types of automations.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Bar">
            <summary>
            A bar is a single block within a track, also known as Measure.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Bar.GlobalBarId">
            <summary>
            This is a global counter for all beats. We use it 
            at several locations for lookup tables. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Beat">
            <summary>
            A beat is a single block within a bar. A beat is a combination
            of several notes played at the same time. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Beat.GlobalBeatId">
            <summary>
            This is a global counter for all beats. We use it 
            at several locations for lookup tables. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Beat.Start">
            <summary>
            The timeline position of the voice within the current bar. (unit: midi ticks)
            </summary>
        </member>
        <member name="M:AlphaTab.Model.Beat.CalculateDuration">
            <summary>
            Calculates the time spent in this bar. (unit: midi ticks)
            </summary>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Model.BendPoint">
            <summary>
            A single point of a bending graph. Used to 
            describe WhammyBar and String Bending effects.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.BrushType">
            <summary>
            Lists all types of how to brush multiple notes on a beat. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Chord">
            <summary>
            A chord definition.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Chord.FirstFret">
            <summary>
            Indicates the first fret of the chord diagram.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Chord.Strings">
            <summary>
            Gets or sets the frets played on the individual strings for this chord. 
            - The order in this list goes from the highest string to the lowest string.  
            - -1 indicates that the string is not played. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Chord.BarreFrets">
            <summary>
            Gets or sets a list of frets where the finger should hold a barre 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Clef">
            <summary>
            This public enumeration lists all supported Clefs.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.CrescendoType">
            <summary>
            Lists all Crescendo and Decrescendo types. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Duration">
            <summary>
            Lists all durations of a beat.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.DynamicValue">
            <summary>
            Lists all dynamics.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.Unknown">
            <summary>
            Unknown type (not documented)
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.NoOrDead">
            <summary>
            No finger, dead note
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.Thumb">
            <summary>
            The thumb
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.IndexFinger">
            <summary>
            The index finger
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.MiddleFinger">
            <summary>
            The middle finger
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.AnnularFinger">
            <summary>
            The annular finger
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Fingers.LittleFinger">
            <summary>
            The little finger
            </summary>
        </member>
        <member name="T:AlphaTab.Model.GraceType">
            <summary>
            Lists all types of grace notes
            </summary>
        </member>
        <member name="T:AlphaTab.Model.HarmonicType">
            <summary>
            Lists all harmonic types.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.KeySignatureType">
            <summary>
            This public enumeration lists all available types of KeySignatures
            </summary>
        </member>
        <member name="T:AlphaTab.Model.MasterBar">
            <summary>
            The MasterBar stores information about a bar which affects
            all tracks.
            </summary>
        </member>
        <member name="F:AlphaTab.Model.MasterBar.MaxAlternateEndings">
            <summary>
            The maximum alternate endings.  (1 byte with 8 bitflags)
            </summary>
        </member>
        <member name="P:AlphaTab.Model.MasterBar.Start">
            <summary>
            The timeline position of the voice within the whole score. (unit: midi ticks)
            </summary>
        </member>
        <member name="M:AlphaTab.Model.MasterBar.CalculateDuration">
            <summary>
            Calculates the time spent in this bar. (unit: midi ticks)
            </summary>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Model.ModelUtils">
            <summary>
            This public class contains some utilities for working with model public classes
            </summary>
        </member>
        <member name="T:AlphaTab.Model.NoteAccidentalMode">
            <summary>
            Lists the modes how accidentals are handled for notes
            </summary>
        </member>
        <member name="F:AlphaTab.Model.NoteAccidentalMode.Default">
            <summary>
            Accidentals are calculated automatically. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.NoteAccidentalMode.SwapAccidentals">
            <summary>
            If the default behavior calculates a Sharp, use flat instead (and vice versa).
            </summary>
        </member>
        <member name="F:AlphaTab.Model.NoteAccidentalMode.ForceNatural">
            <summary>
            This will move the note one line down and applies a Naturalize. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.NoteAccidentalMode.ForceSharp">
            <summary>
            This will move the note one line down and applies a Sharp. 
            </summary>
        </member>
        <member name="F:AlphaTab.Model.NoteAccidentalMode.ForceFlat">
            <summary>
            This will move the note one line up and applies a Flat. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Note">
            <summary>
            A note is a single played sound on a fretted instrument. 
            It consists of a fret offset and a string on which the note is played on.
            It also can be modified by a lot of different effects.  
            </summary>
        </member>
        <member name="F:AlphaTab.Model.Note.GlobalNoteId">
            <summary>
            This is a global counter for all notes. We use it 
            at several locations for lookup tables. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Note.String">
            <summary>
            Gets or sets the string number where the note is placed. 
            1 is the lowest string on the guitar and the bottom line on the tablature. 
            It then increases the the number of strings on available on the track. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.PickStrokeType">
            <summary>
            Lists all types of pick strokes.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.PlaybackInformation">
            <summary>
            This public class stores the midi specific information of a track needed
            for playback.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.RepeatGroup">
            <summary>
            This public class can store the information about a group of measures which are repeated
            </summary>
        </member>
        <member name="P:AlphaTab.Model.RepeatGroup.MasterBars">
            <summary>
            All masterbars repeated within this group
            </summary>
        </member>
        <member name="P:AlphaTab.Model.RepeatGroup.Openings">
            <summary>
            a list of masterbars which open the group. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.RepeatGroup.Closings">
            <summary>
            a list of masterbars which close the group. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.RepeatGroup.IsClosed">
            <summary>
             true if the repeat group was closed well
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Score">
            <summary>
            The score is the root node of the complete 
            model. It stores the basic information of 
            a song and stores the sub components. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Album">
            <summary>
            The album of this song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Artist">
            <summary>
            The artist who performs this song.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Copyright">
            <summary>
            The owner of the copyright of this song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Instructions">
            <summary>
            Additional instructions
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Music">
            <summary>
            The author of the music. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Notices">
            <summary>
            Some additional notes about the song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.SubTitle">
            <summary>
            The subtitle of the song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Title">
            <summary>
            The title of the song. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Words">
            <summary>
            The author of the song lyrics
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Score.Tab">
            <summary>
            The author of this tablature.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Section">
            <summary>
            This public class is used to describe the beginning of a 
            section within a song. It acts like a marker. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.SlideType">
            <summary>
            This public enum lists all different types of finger slides on a string.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Staff">
            <summary>
            This class describes a single staff within a track. There are instruments like pianos
            where a single track can contain multiple staffs. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Track">
            <summary>
            This public class describes a single track or instrument of score
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Track.TranspositionPitch">
            <summary>
            Gets or sets the number of semitones this track should be
            transposed. This applies to rendering and playback.
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Track.DisplayTranspositionPitch">
            <summary>
            Gets or sets the number of semitones this track should be 
            transposed. This applies only to rendering. 
            </summary>
        </member>
        <member name="P:AlphaTab.Model.Track.Tuning">
            <summary>
            Get or set the guitar tuning of the guitar. This tuning also indicates the number of strings shown in the
            guitar tablature. Unlike the <see cref="P:AlphaTab.Model.Note.String"/> property this array directly represents
            the order of the tracks shown in the tablature. The first item is the most top tablature line. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.TripletFeel">
            <summary>
            This public enumeration lists all feels of triplets. 
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Tuning">
            <summary>
            This public class represents a predefined string tuning.
            </summary>
        </member>
        <member name="M:AlphaTab.Model.TuningParser.IsTuning(System.String)">
            <summary>
            Checks if the given string is a tuning inticator.
            </summary>Checks if the given string is a tuning inticator.
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Model.VibratoType">
            <summary>
            This public enum lists all vibrato types that can be performed.
            </summary>
        </member>
        <member name="T:AlphaTab.Model.Voice">
            <summary>
            A voice represents a group of beats 
            that can be played during a bar. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.BarRendererBase">
            <summary>
            This is the base public class for creating blocks which can render bars.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.BarRendererBase.IsLinkedToPrevious">
            <summary>
            Gets or sets whether this renderer is linked to the next one 
            by some glyphs like a vibrato effect
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.BarRendererBase.TopPadding">
            <summary>
            Gets the top padding for the main content of the renderer. 
            Can be used to specify where i.E. the score lines of the notation start.
            </summary>
            <returns></returns>
        </member>
        <member name="P:AlphaTab.Rendering.BarRendererBase.BottomPadding">
            <summary>
            Gets the bottom padding for the main content of the renderer. 
            Can be used to specify where i.E. the score lines of the notation end.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.BeatXPosition">
            <summary>
            Lists the different position modes for <see cref="M:AlphaTab.Rendering.BarRendererBase.GetBeatX(AlphaTab.Model.Beat,AlphaTab.Rendering.BeatXPosition)"/>
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.BeatXPosition.PreNotes">
            <summary>
            Gets the pre-notes position which is located before the accidentals
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.BeatXPosition.OnNotes">
            <summary>
            Gets the on-notes position which is located after the accidentals but before the note heads. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.BeatXPosition.PostNotes">
            <summary>
            Get the post-notes position which is located at after the note heads. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.BeatXPosition.EndBeat">
            <summary>
            Get the end-beat position which is located at the end of the beat. This position is almost
            equal to the pre-notes position of the next beat.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.BarRendererFactory">
            <summary>
            This is the base public class for creating factories providing BarRenderers
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.EffectBarGlyphSizing">
            <summary>
            Lists all sizing types of the effect bar glyphs
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.EffectBarGlyphSizing.SinglePreBeat">
            <summary>
            The effect glyph is placed above the pre-beat glyph which is before 
            the actual note in the area where also accidentals are renderered. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.EffectBarGlyphSizing.SingleOnBeat">
            <summary>
            The effect glyph is placed above the on-beat glyph which is where
            the actual note head glyphs are placed. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.EffectBarGlyphSizing.GroupedBeforeBeat">
            <summary>
            The effect glyph is placed above the on-beat glyph and expaded to the 
            on-beat position of the next beat.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.EffectBarGlyphSizing.GroupedOnBeat">
            <summary>
            The effect glyph is placed above the on-beat glyph and expaded to the 
            on-beat position of the next beat.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.EffectBarGlyphSizing.FullBar">
            <summary>
            The effect glyph is placed on the whole bar covering the whole width
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.EffectBarRenderer">
            <summary>
            This renderer is responsible for displaying effects above or below the other staves
            like the vibrato. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Glyphs.EffectGlyph">
            <summary>
            Effect-Glyphs implementing this public interface get notified
            as they are expanded over multiple beats.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Glyphs.EffectGlyph.Beat">
            <summary>
            Gets or sets the beat where the glyph belongs to.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Glyphs.EffectGlyph.NextGlyph">
            <summary>
            Gets or sets the next glyph of the same type in case 
            the effect glyph is expanded when using <see cref="F:AlphaTab.Rendering.EffectBarGlyphSizing.GroupedOnBeat"/>.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Glyphs.EffectGlyph.PreviousGlyph">
            <summary>
            Gets or sets the previous glyph of the same type in case 
            the effect glyph is expanded when using <see cref="F:AlphaTab.Rendering.EffectBarGlyphSizing.GroupedOnBeat"/>.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Glyphs.Glyph">
            <summary>
            A glyph is a single symbol which can be added to a GlyphBarRenderer for automated
            layouting and drawing of stacked symbols.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Glyphs.GlyphGroup">
            <summary>
            This glyph allows to group several other glyphs to be
            drawn at the same x position
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Glyphs.GroupedEffectGlyph.IsLinkedWithPrevious">
            <summary>
            Gets a value whether this glyph is linked with a previous glyph for rendering. 
            This means this glyph will not be rendered itself, but rendered as part of the very first glyph of this link-group.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Glyphs.GroupedEffectGlyph.IsLinkedWithNext">
            <summary>
            Gets a value whether this glyph is linked with the next glyph for rendering. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Glyphs.SpacingGlyph">
            <summary>
            This simple glyph allows to put an empty region in to a BarRenderer.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Glyphs.TieGlyph.PaintTie(AlphaTab.Platform.ICanvas,System.Single,System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            paints a tie between the two given points
            </summary>
            <param name="canvas"></param>
            <param name="scale"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="down"></param>
        </member>
        <member name="T:AlphaTab.Rendering.Glyphs.VoiceContainerGlyph">
            <summary>
            This glyph acts as container for handling
            multiple voice rendering
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.IEffectBarRendererInfo">
            <summary>
            A public class implementing this public interface can provide the 
            data needed by a EffectBarRenderer to create effect glyphs dynamically.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.IEffectBarRendererInfo.EffectId">
            <summary>
            Gets the unique effect name for this effect. (Used for grouping)
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.IEffectBarRendererInfo.CanShareBand">
            <summary>
            Gets a value indicating whether this effect can share the space 
            with other effects if required. 
            (Example: tempo and dynamics don't share their space with other effects, a let-ring and palm-mute will share the space if possible)
            </summary>
            <returns>true if this effect bar should only be created once for the first track, otherwise false.</returns>
        </member>
        <member name="P:AlphaTab.Rendering.IEffectBarRendererInfo.HideOnMultiTrack">
            <summary>
            Gets a value indicating whether this effect glyphs
            should only be added once on the first track if multiple tracks are rendered.
            (Example: this allows to render the tempo changes only once)
            </summary>
            <returns>true if this effect bar should only be created once for the first track, otherwise false.</returns>
        </member>
        <member name="M:AlphaTab.Rendering.IEffectBarRendererInfo.ShouldCreateGlyph(AlphaTab.Model.Beat)">
            <summary>
            Checks whether the given beat has the appropriate effect set and
            needs a glyph creation 
            </summary>
            <param name="beat">the beat storing the data</param>
            <returns>true if the beat has the effect set, otherwise false.</returns>
        </member>
        <member name="P:AlphaTab.Rendering.IEffectBarRendererInfo.SizingMode">
            <summary>
            Gets the sizing mode of the glyphs created by this info.
            </summary>
            <returns>the sizing mode to apply to the glyphs during layout</returns>
        </member>
        <member name="M:AlphaTab.Rendering.IEffectBarRendererInfo.CreateNewGlyph(AlphaTab.Rendering.BarRendererBase,AlphaTab.Model.Beat)">
            <summary>
            Creates a new effect glyph for the given beat. 
            </summary>
            <param name="renderer">the renderer which requests for glyph creation</param>
            <param name="beat">the beat storing the data</param>
            <returns>the glyph which needs to be added to the renderer</returns>
        </member>
        <member name="M:AlphaTab.Rendering.IEffectBarRendererInfo.CanExpand(AlphaTab.Model.Beat,AlphaTab.Model.Beat)">
            <summary>
            Checks whether an effect glyph can be expanded to a particular beat.
            </summary>
            <param name="from">the beat which already has the glyph applied</param>
            <param name="to">the beat which the glyph should get expanded to</param>
            <returns> true if the glyph can be expanded, false if a new glyph needs to be created.</returns>
        </member>
        <member name="T:AlphaTab.Rendering.Layout.HeaderFooterElements">
            <summary>
            A list of the elements which can be shown in the header and footer 
            of a rendered song sheet. All values can be combined using bit-operators as they are flags. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.None">
            <summary>
            No elements get rendered. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.Title">
            <summary>
            Enables rendering of the title.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.SubTitle">
            <summary>
            Enables rendering of the subtitle.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.Artist">
            <summary>
            Enables rendering of the artist.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.Album">
            <summary>
            Enables rendering of the album.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.Words">
            <summary>
            Enables rendering of the words.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.Music">
            <summary>
            Enables rendering of the music.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.WordsAndMusic">
            <summary>
            Enables rendering of the words and music.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.Copyright">
            <summary>
            Enables rendering of the copyright.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.PageNumber">
            <summary>
            Enables rendering of the page number.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Layout.HeaderFooterElements.All">
            <summary>
            Enables rendering of all elements. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Layout.HorizontalScreenLayout">
            <summary>
            This layout arranges the bars all horizontally
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Layout.PageViewLayout">
            <summary>
            This layout arranges the bars into a fixed width and dynamic height region. 
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Layout.PageViewLayout.FitGroup(AlphaTab.Rendering.Staves.StaveGroup)">
            <summary>
            Realignes the bars in this line according to the available space
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Layout.ScoreLayout">
            <summary>
            This is the base public class for creating new layouting engines for the score renderer. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.RenderingResources">
            <summary>
            This public class contains central definitions for controlling the visual appearance. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.ScoreBarRenderer">
            <summary>
            This BarRenderer renders a bar using standard music notation. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.ScoreBarRenderer.SharpKsSteps">
            <summary>
            The step offsets of sharp symbols for sharp key signatures.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.ScoreBarRenderer.FlatKsSteps">
            <summary>
            The step offsets of sharp symbols for flat key signatures.
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.ScoreBarRenderer.GetScoreY(System.Single,System.Single)">
            <summary>
            Gets the relative y position of the given steps relative to first line. 
            </summary>
            <param name="steps">the amount of steps while 2 steps are one line</param>
            <param name="correction"></param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Rendering.ScoreBarRendererFactory">
            <summary>
            This Factory procudes ScoreBarRenderer instances
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.ScoreRenderer">
            <summary>
            This is the main wrapper of the rendering engine which 
            can render a single track of a score object into a notation sheet.
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Staves.BarLayoutingInfo">
            <summary>
            This public class stores size information about a stave. 
            It is used by the layout engine to collect the sizes of score parts
            to align the parts across multiple staves.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Staves.BarLayoutingInfo.Version">
            <summary>
            an internal version number that increments whenever a change was made. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Staves.MasterBarsRenderers">
            <summary>
            This container represents a single column of bar renderers independent from any staves. 
            This container can be used to reorganize renderers into a new staves. 
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Staves.Staff">
            <summary>
            A Staff represents a single line within a StaveGroup. 
            It stores BarRenderer instances created from a given factory. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Staves.Staff.TrackIndex">
            <summary>
            This is the index of the track being rendered. This is not the index of the track within the model, 
            but the n-th track being rendered. It is the index of the <see cref="P:AlphaTab.Rendering.ScoreRenderer.Tracks"/> array defining 
            which tracks should be rendered. 
            For single-track rendering this will always be zero.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Staves.Staff.StaveTop">
            <summary>
            This is the visual offset from top where the
            Staff contents actually start. Used for grouping 
            using a accolade
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Staves.Staff.StaveBottom">
            <summary>
            This is the visual offset from top where the
            Staff contents actually ends. Used for grouping 
            using a accolade
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Staves.StaveGroup">
            <summary>
            A Staff consists of a list of different staves and groups
            them using an accolade. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Staves.StaveGroup.IsFull">
            <summary>
            Indicates whether this line is full or not. If the line is full the
            bars can be aligned to the maximum width. If the line is not full 
            the bars will not get stretched.
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Staves.StaveGroup.Width">
            <summary>
            The width that the content bars actually need
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.TabBarRenderer">
            <summary>
            This BarRenderer renders a bar using guitar tablature notation
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.TabBarRenderer.GetTabY(System.Single,System.Single)">
            <summary>
            Gets the relative y position of the given steps relative to first line.
            </summary>
            <param name="line">the amount of steps while 2 steps are one line</param>
            <param name="correction"></param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Rendering.TabBarRendererFactory">
            <summary>
            This Factory produces TabBarRenderer instances
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.AccidentalHelper">
            <summary>
            This small utilty public class allows the assignment of accidentals within a 
            desired scope. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.AccidentalHelper.KeySignatureLookup">
            <summary>
            a lookup list containing an info whether the notes within an octave 
            need an accidental rendered. the accidental symbol is determined based on the type of key signature. 
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.AccidentalHelper.AccidentalNotes">
            <summary>
            Contains the list of notes within an octave have accidentals set.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.AccidentalHelper.StepsPerOctave">
            <summary>
            We always have 7 steps per octave. 
            (by a step the offsets inbetween score lines is meant, 
                 0 steps is on the first line (counting from top)
                 1 steps is on the space inbetween the first and the second line
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.AccidentalHelper.OctaveSteps">
            <summary>
            Those are the amount of steps for the different clefs in case of a note value 0    
            [Neutral, C3, C4, F4, G2]
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.AccidentalHelper.SharpNoteSteps">
            <summary>
            The step offsets of the notes within an octave in case of for sharp keysignatures
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.AccidentalHelper.FlatNoteSteps">
            <summary>
            The step offsets of the notes within an octave in case of for flat keysignatures
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.AccidentalHelper.ApplyAccidental(AlphaTab.Model.Note)">
            <summary>
            Calculates the accidental for the given note and assignes the value to it. 
            The new accidental type is also registered within the current scope
            </summary>
            <param name="note"></param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.BeamBarType">
            <summary>
            Lists all types how two voices can be joined with bars.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.BeamBarType.Full">
            <summary>
            Full Bar from current to next
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.BeamBarType.PartLeft">
            <summary>
            A small Bar from current to previous
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.BeamBarType.PartRight">
            <summary>
            A small bar from current to next
            </summary>
        </member>
        <member name="T:AlphaTab.Rendering.Utils.BeamingHelper">
            <summary>
            This public class helps drawing beams and bars for notes.
            </summary>
        </member>
        <member name="F:AlphaTab.Rendering.Utils.BeamingHelper._beatLineXPositions">
            <summary>
            stores the X-positions for beat indices
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.FingeringCount">
            <summary>
            the number of fingering indicators that will be drawn
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.HasTuplet">
            <summary>
            an indicator whether any beat has a tuplet on it. 
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.FirstMinNote">
            <summary>
            the first min note within this group
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.FirstMaxNote">
            <summary>
            the first max note within this group
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.LastMinNote">
            <summary>
            the last min note within this group
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.LastMaxNote">
            <summary>
            the last max note within this group
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.MinNote">
            <summary>
            the overall min note within this group
            </summary>
        </member>
        <member name="P:AlphaTab.Rendering.Utils.BeamingHelper.MaxNote">
            <summary>
            the overall max note within this group
            </summary>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.BeamingHelper.IsPositionFrom(System.String,AlphaTab.Model.Beat)">
            <summary>
            Returns whether the the position of the given beat, was registered by the staff of the given ID
            </summary>
            <param name="staffId"></param>
            <param name="beat"></param>
            <returns></returns>
        </member>
        <member name="M:AlphaTab.Rendering.Utils.PercussionMapper.MapNoteForDisplay(AlphaTab.Model.Note)">
            <summary>
            Maps the given note to a normal note value to place the note at the 
            correct line on score notation
            </summary>
            <param name="note"></param>
            <returns></returns>
        </member>
        <member name="T:AlphaTab.Settings">
            <summary>
            This public class contains instance specific settings for alphaTab
            </summary>
            <summary>
            This public class contains instance specific settings for alphaTab
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.Scale">
            <summary>
            Sets the zoom level of the rendered notation
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.Width">
            <summary>
            The initial size of the canvas during loading or the width for particular layouts (e.g. page layout).
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.Engine">
            <summary>
            The engine which should be used to render the the tablature. 
            <ul>
             <li><strong>default</strong> - Platform specific default engine</li>
             <li><strong>html5</strong> - HTML5 Canvas</li>
             <li><strong>svg</strong> -  SVG </li>
            </ul>
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.Layout">
            <summary>
            The layout specific settings
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.StretchForce">
            <summary>
            The default stretch force to use for layouting. 
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.ForcePianoFingering">
            <summary>
            Forces the fingering rendering to use always the piano finger stýle where 
            fingers are rendered as 1-5 instead of p,i,m,a,c and T,1,2,3,4.
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.Staves">
            <summary>
            The staves that should be shown in the music sheet. 
            This is one of the profiles registered in the <see cref="F:AlphaTab.Environment.StaveProfiles"/>
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.TranspositionPitches">
            <summary>
            The transposition pitch offsets for the individual tracks. 
            They apply to rendering and playback.
            </summary>
        </member>
        <member name="P:AlphaTab.Settings.DisplayTranspositionPitches">
            <summary>
            The transposition pitch offsets for the individual tracks. 
            They apply to rendering only.
            </summary>
        </member>
        <member name="P:AlphaTab.LayoutSettings.Mode">
            <summary>
            The layouting mode used to arrange the the notation.
            <ul>
             <li><strong>page</strong> - Bars are aligned in rows using a fixed width</li>
             <li><strong>horizontal</strong> - Bars are aligned horizontally in one row</li>
            </ul>
            </summary>
        </member>
        <member name="P:AlphaTab.LayoutSettings.AdditionalSettings">
            <summary>
            Additional layout mode specific settings.
            <strong>mode=page</strong>
            <ul>
             <li><strong>barsPerRow</strong> - Limit the displayed bars per row, <em>-1 for sized based limit</em> (integer, default:-1)</li>
             <li><strong>start</strong> - The bar start index to start layouting with (integer: default: 0)</li>
             <li><strong>count</strong> - The amount of bars to render overall, <em>-1 for all till the end</em>  (integer, default:-1)</li>
             <li><strong>hideInfo</strong> - Render the song information or not (boolean, default:false)</li>
             <li><strong>hideTuning</strong> - Render the tuning information or not (boolean, default:false)</li>
             <li><strong>hideTrackNames</strong> - Render the track names or not (boolean, default:false)</li>
            </ul>
            <strong>mode=horizontal</strong>
            <ul>
             <li><strong>start</strong> - The bar start index to start layouting with (integer: default: 0)</li>
             <li><strong>count</strong> - The amount of bars to render overall, <em>-1 for all till the end</em>  (integer, default:-1)</li>
             <li><strong>hideTrackNames</strong> - Render the track names or not (boolean, default:false)</li>
            </ul>
            </summary>
        </member>
        <member name="P:AlphaTab.StaveSettings.Id">
            <summary>
            The stave profile name as it is registered in <see cref="F:AlphaTab.Environment.StaveProfiles"/>
            Default Profiles: 
            <ul>
             <li><strong>score-tab</strong> - Standard music notation and guitar tablature are rendered (default)</li>
             <li><strong>score</strong> - Only standard music notation is rendered</li>
             <li><strong>tab</strong> - Only guitar tablature is rendered</li>
            </ul>
            </summary>
        </member>
        <member name="P:AlphaTab.StaveSettings.AdditionalSettings">
            <summary>
            Additional stave sspecific settings
            <strong>id=tab</strong>
            <ul>
             <li><strong>rhythm</strong> - Renders rhythm beams to tablature notes</li>
            </ul>
            </summary>
        </member>
        <member name="T:AlphaTab.Xml.XmlParser.XmlState">
            <summary>
            faster than enum
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
