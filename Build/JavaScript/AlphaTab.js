(function ($hx_exports, $global) { "use strict";
$hx_exports["alphaTab"] = $hx_exports["alphaTab"] || {};
$hx_exports["alphaTab"]["xml"] = $hx_exports["alphaTab"]["xml"] || {};
$hx_exports["alphaTab"]["xml"]["_XmlNodeType"] = $hx_exports["alphaTab"]["xml"]["_XmlNodeType"] || {};
;$hx_exports["alphaTab"]["utils"] = $hx_exports["alphaTab"]["utils"] || {};
$hx_exports["alphaTab"]["utils"]["_UnionData"] = $hx_exports["alphaTab"]["utils"]["_UnionData"] || {};
;$hx_exports["alphaTab"]["model"] = $hx_exports["alphaTab"]["model"] || {};
$hx_exports["alphaTab"]["model"]["_VibratoType"] = $hx_exports["alphaTab"]["model"]["_VibratoType"] || {};
;$hx_exports["alphaTab"]["model"]["_TripletFeel"] = $hx_exports["alphaTab"]["model"]["_TripletFeel"] || {};
;$hx_exports["alphaTab"]["model"]["_StaffKind"] = $hx_exports["alphaTab"]["model"]["_StaffKind"] || {};
;$hx_exports["alphaTab"]["model"]["_SlideType"] = $hx_exports["alphaTab"]["model"]["_SlideType"] || {};
;$hx_exports["alphaTab"]["model"]["_PickStrokeType"] = $hx_exports["alphaTab"]["model"]["_PickStrokeType"] || {};
;$hx_exports["alphaTab"]["model"]["_NoteAccidentalMode"] = $hx_exports["alphaTab"]["model"]["_NoteAccidentalMode"] || {};
;$hx_exports["alphaTab"]["model"]["_KeySignatureType"] = $hx_exports["alphaTab"]["model"]["_KeySignatureType"] || {};
;$hx_exports["alphaTab"]["model"]["_HarmonicType"] = $hx_exports["alphaTab"]["model"]["_HarmonicType"] || {};
;$hx_exports["alphaTab"]["model"]["_GraceType"] = $hx_exports["alphaTab"]["model"]["_GraceType"] || {};
;$hx_exports["alphaTab"]["model"]["_Fingers"] = $hx_exports["alphaTab"]["model"]["_Fingers"] || {};
;$hx_exports["alphaTab"]["model"]["_DynamicValue"] = $hx_exports["alphaTab"]["model"]["_DynamicValue"] || {};
;$hx_exports["alphaTab"]["model"]["_Duration"] = $hx_exports["alphaTab"]["model"]["_Duration"] || {};
;$hx_exports["alphaTab"]["model"]["_CrescendoType"] = $hx_exports["alphaTab"]["model"]["_CrescendoType"] || {};
;$hx_exports["alphaTab"]["model"]["_ClefOttavia"] = $hx_exports["alphaTab"]["model"]["_ClefOttavia"] || {};
;$hx_exports["alphaTab"]["model"]["_Clef"] = $hx_exports["alphaTab"]["model"]["_Clef"] || {};
;$hx_exports["alphaTab"]["model"]["_BrushType"] = $hx_exports["alphaTab"]["model"]["_BrushType"] || {};
;$hx_exports["alphaTab"]["model"]["_BendType"] = $hx_exports["alphaTab"]["model"]["_BendType"] || {};
;$hx_exports["alphaTab"]["model"]["_AutomationType"] = $hx_exports["alphaTab"]["model"]["_AutomationType"] || {};
;$hx_exports["alphaTab"]["model"]["_AccidentalType"] = $hx_exports["alphaTab"]["model"]["_AccidentalType"] || {};
;$hx_exports["alphaTab"]["model"]["_AccentuationType"] = $hx_exports["alphaTab"]["model"]["_AccentuationType"] || {};
;$hx_exports["alphaTab"]["io"] = $hx_exports["alphaTab"]["io"] || {};
;$hx_exports["alphaTab"]["importer"] = $hx_exports["alphaTab"]["importer"] || {};
$hx_exports["alphaTab"]["importer"]["_AlphaTexSymbols"] = $hx_exports["alphaTab"]["importer"]["_AlphaTexSymbols"] || {};
;$hx_exports["alphaTab"]["exporter"] = $hx_exports["alphaTab"]["exporter"] || {};
;$hx_exports["alphaTab"]["collections"] = $hx_exports["alphaTab"]["collections"] || {};
$hx_exports["alphaTab"]["collections"]["_StringBuilder"] = $hx_exports["alphaTab"]["collections"]["_StringBuilder"] || {};
;$hx_exports["alphaTab"]["collections"]["_FastList"] = $hx_exports["alphaTab"]["collections"]["_FastList"] || {};
;$hx_exports["alphaTab"]["collections"]["_FastDictionary"] = $hx_exports["alphaTab"]["collections"]["_FastDictionary"] || {};
;$hx_exports["alphaTab"]["rendering"] = $hx_exports["alphaTab"]["rendering"] || {};
$hx_exports["alphaTab"]["rendering"]["staves"] = $hx_exports["alphaTab"]["rendering"]["staves"] || {};
;$hx_exports["alphaTab"]["rendering"]["utils"] = $hx_exports["alphaTab"]["rendering"]["utils"] || {};
$hx_exports["alphaTab"]["rendering"]["utils"]["_BeamDirection"] = $hx_exports["alphaTab"]["rendering"]["utils"]["_BeamDirection"] || {};
;$hx_exports["alphaTab"]["rendering"]["_EffectBarGlyphSizing"] = $hx_exports["alphaTab"]["rendering"]["_EffectBarGlyphSizing"] || {};
;$hx_exports["alphaTab"]["rendering"]["glyphs"] = $hx_exports["alphaTab"]["rendering"]["glyphs"] || {};
$hx_exports["alphaTab"]["rendering"]["glyphs"]["_TripletFeelGlyph_BarType"] = $hx_exports["alphaTab"]["rendering"]["glyphs"]["_TripletFeelGlyph_BarType"] || {};
;$hx_exports["alphaTab"]["rendering"]["glyphs"]["_MusicFontSymbol"] = $hx_exports["alphaTab"]["rendering"]["glyphs"]["_MusicFontSymbol"] || {};
;$hx_exports["alphaTab"]["rendering"]["_BeatXPosition"] = $hx_exports["alphaTab"]["rendering"]["_BeatXPosition"] || {};
;$hx_exports["alphaTab"]["rendering"]["effects"] = $hx_exports["alphaTab"]["rendering"]["effects"] || {};
;$hx_exports["alphaTab"]["rendering"]["layout"] = $hx_exports["alphaTab"]["rendering"]["layout"] || {};
$hx_exports["alphaTab"]["rendering"]["layout"]["_HeaderFooterElements"] = $hx_exports["alphaTab"]["rendering"]["layout"]["_HeaderFooterElements"] || {};
;$hx_exports["alphaTab"]["audio"] = $hx_exports["alphaTab"]["audio"] || {};
$hx_exports["alphaTab"]["audio"]["generator"] = $hx_exports["alphaTab"]["audio"]["generator"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"] = $hx_exports["alphaTab"]["audio"]["synth"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["sf2"] = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["chunks"] = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["chunks"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_TransformEnum"] = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_TransformEnum"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_SourceTypeEnum"] = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_SourceTypeEnum"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_SFSampleLink"] = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_SFSampleLink"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_PolarityEnum"] = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_PolarityEnum"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_GeneratorEnum"] = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_GeneratorEnum"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_DirectionEnum"] = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_DirectionEnum"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["midi"] = $hx_exports["alphaTab"]["audio"]["synth"]["midi"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"] = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_SystemCommonTypeEnum"] = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_SystemCommonTypeEnum"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_MidiEventTypeEnum"] = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_MidiEventTypeEnum"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_MetaEventTypeEnum"] = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_MetaEventTypeEnum"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_ControllerTypeEnum"] = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_ControllerTypeEnum"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["midi"]["_MidiTrackFormat"] = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["_MidiTrackFormat"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["midi"]["_MidiTimeFormat"] = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["_MidiTimeFormat"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["_PlayerState"] = $hx_exports["alphaTab"]["audio"]["synth"]["_PlayerState"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["ds"] = $hx_exports["alphaTab"]["audio"]["synth"]["ds"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["ds"]["_SampleArray"] = $hx_exports["alphaTab"]["audio"]["synth"]["ds"]["_SampleArray"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["bank"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["patch"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["patch"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["patch"]["_IntervalType"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["patch"]["_IntervalType"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["descriptors"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["descriptors"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["descriptors"]["_Waveform"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["descriptors"]["_Waveform"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["_PanFormulaEnum"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["_PanFormulaEnum"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["_LfoState"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["_LfoState"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["_FilterType"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["_FilterType"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["_EnvelopeState"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["_EnvelopeState"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["_LoopMode"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["_LoopMode"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["_Interpolation"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["_Interpolation"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["_GeneratorState"] = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["_GeneratorState"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["util"] = $hx_exports["alphaTab"]["audio"]["synth"]["util"] || {};
;$hx_exports["alphaTab"]["audio"]["synth"]["synthesis"] = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"] || {};
$hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["_VoiceStateEnum"] = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["_VoiceStateEnum"] || {};
;$hx_exports["alphaTab"]["util"] = $hx_exports["alphaTab"]["util"] || {};
$hx_exports["alphaTab"]["util"]["_LogLevel"] = $hx_exports["alphaTab"]["util"]["_LogLevel"] || {};
;$hx_exports["alphaTab"]["platform"] = $hx_exports["alphaTab"]["platform"] || {};
$hx_exports["alphaTab"]["platform"]["javaScript"] = $hx_exports["alphaTab"]["platform"]["javaScript"] || {};
;$hx_exports["alphaTab"]["platform"]["model"] = $hx_exports["alphaTab"]["platform"]["model"] || {};
$hx_exports["alphaTab"]["platform"]["model"]["_TextBaseline"] = $hx_exports["alphaTab"]["platform"]["model"]["_TextBaseline"] || {};
;$hx_exports["alphaTab"]["platform"]["model"]["_TextAlign"] = $hx_exports["alphaTab"]["platform"]["model"]["_TextAlign"] || {};
;$hx_exports["alphaTab"]["platform"]["model"]["_FontStyle"] = $hx_exports["alphaTab"]["platform"]["model"]["_FontStyle"] || {};
;$hx_exports["alphaTab"]["platform"]["svg"] = $hx_exports["alphaTab"]["platform"]["svg"] || {};
$hx_exports["alphaTab"]["platform"]["svg"]["_SupportedFonts"] = $hx_exports["alphaTab"]["platform"]["svg"]["_SupportedFonts"] || {};
var $estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js._Boot.HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = new _List.ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _List.ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,__class__: List
};
var _List = {};
_List.ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_List.ListNode.__name__ = ["_List","ListNode"];
_List.ListNode.prototype = {
	__class__: _List.ListNode
};
Math.__name__ = ["Math"];
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
var system = {};
system.Exception = function() {
};
system.Exception.__name__ = ["system","Exception"];
system.Exception.prototype = {
	Exception_CsString: function(message) {
		this.Message = message;
		return this;
	}
	,__class__: system.Exception
};
var alphaTab = {};
alphaTab.AlphaTabException = $hx_exports["alphaTab"]["AlphaTabException"] = function() {
	system.Exception.call(this);
};
alphaTab.AlphaTabException.__name__ = ["alphaTab","AlphaTabException"];
alphaTab.AlphaTabException.__super__ = system.Exception;
alphaTab.AlphaTabException.prototype = $extend(system.Exception.prototype,{
	AlphaTabException: function(message) {
		this.Exception_CsString(message);
		this.Description = null;
		this.Description = message;
		return this;
	}
	,__class__: alphaTab.AlphaTabException
});
alphaTab.platform = {};
alphaTab.platform.IPathCanvas = $hx_exports["alphaTab"]["platform"]["IPathCanvas"] = function() { };
alphaTab.platform.IPathCanvas.__name__ = ["alphaTab","platform","IPathCanvas"];
alphaTab.platform.IPathCanvas.prototype = {
	__class__: alphaTab.platform.IPathCanvas
};
alphaTab.platform.ICanvas = $hx_exports["alphaTab"]["platform"]["ICanvas"] = function() { };
alphaTab.platform.ICanvas.__name__ = ["alphaTab","platform","ICanvas"];
alphaTab.platform.ICanvas.__interfaces__ = [alphaTab.platform.IPathCanvas];
alphaTab.platform.ICanvas.prototype = {
	__class__: alphaTab.platform.ICanvas
};
alphaTab.platform.svg = {};
alphaTab.platform.svg.SvgCanvas = $hx_exports["alphaTab"]["platform"]["svg"]["SvgCanvas"] = function() {
	this.Buffer = null;
	this._currentPath = null;
	this._currentPathIsEmpty = false;
	var this1 = "";
	this._currentPath = this1;
	this._currentPathIsEmpty = true;
	this.set_Color(new alphaTab.platform.model.Color(255,255,255,255));
	this.set_LineWidth(1);
	this.set_Font(new alphaTab.platform.model.Font("Arial",10,0));
	this.set_TextAlign(0);
	this.set_TextBaseline(0);
};
alphaTab.platform.svg.SvgCanvas.__name__ = ["alphaTab","platform","svg","SvgCanvas"];
alphaTab.platform.svg.SvgCanvas.__interfaces__ = [alphaTab.platform.IPathCanvas,alphaTab.platform.ICanvas];
alphaTab.platform.svg.SvgCanvas.prototype = {
	get_Color: function() {
		return this.__Color;
	}
	,set_Color: function(value) {
		return this.__Color = value;
	}
	,get_LineWidth: function() {
		return this.__LineWidth;
	}
	,set_LineWidth: function(value) {
		return this.__LineWidth = value;
	}
	,get_Font: function() {
		return this.__Font;
	}
	,set_Font: function(value) {
		return this.__Font = value;
	}
	,get_TextAlign: function() {
		return this.__TextAlign;
	}
	,set_TextAlign: function(value) {
		return this.__TextAlign = value;
	}
	,get_TextBaseline: function() {
		return this.__TextBaseline;
	}
	,set_TextBaseline: function(value) {
		return this.__TextBaseline = value;
	}
	,get_Resources: function() {
		return this.__Resources;
	}
	,set_Resources: function(value) {
		return this.__Resources = value;
	}
	,BeginRender: function(width,height) {
		var this1 = "";
		this.Buffer = this1;
		this.Buffer += Std.string("<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"");
		this.Buffer += Std.string(width);
		this.Buffer += Std.string("px\" height=\"");
		this.Buffer += Std.string(height);
		this.Buffer += Std.string("px\" class=\"alphaTabSurfaceSvg\">\n");
		var this2 = "";
		this._currentPath = this2;
		this._currentPathIsEmpty = true;
	}
	,BeginGroup: function(identifier) {
		this.Buffer += Std.string("<g class=\"" + identifier + "\">");
	}
	,EndGroup: function() {
		this.Buffer += Std.string("</g>");
	}
	,EndRender: function() {
		this.Buffer += Std.string("</svg>");
		return this.Buffer;
	}
	,FillRect: function(x,y,w,h) {
		if(w > 0) {
			var s = "<rect x=\"" + (system.Convert.ToInt32_Single(x) - 0) + "\" y=\"" + (system.Convert.ToInt32_Single(y) - 0) + "\" width=\"" + w + "\" height=\"" + h + "\" fill=\"" + this.get_Color().RGBA + "\" />\n";
			this.Buffer += Std.string(s);
		}
	}
	,StrokeRect: function(x,y,w,h) {
		var s = "<rect x=\"" + (system.Convert.ToInt32_Single(x) - 0) + "\" y=\"" + (system.Convert.ToInt32_Single(y) - 0) + "\" width=\"" + w + "\" height=\"" + h + "\" stroke=\"" + this.get_Color().RGBA + "\"";
		this.Buffer += Std.string(s);
		if(this.get_LineWidth() != 1) {
			var s1 = " stroke-width=\"" + this.get_LineWidth() + "\"";
			this.Buffer += Std.string(s1);
		}
		this.Buffer += Std.string(" fill=\"transparent\" />\n");
	}
	,BeginPath: function() {
	}
	,ClosePath: function() {
		this._currentPath += Std.string(" z");
	}
	,MoveTo: function(x,y) {
		this._currentPath += Std.string(" M" + (x - 0) + "," + (y - 0));
	}
	,LineTo: function(x,y) {
		this._currentPathIsEmpty = false;
		this._currentPath += Std.string(" L" + (x - 0) + "," + (y - 0));
	}
	,QuadraticCurveTo: function(cpx,cpy,x,y) {
		this._currentPathIsEmpty = false;
		this._currentPath += Std.string(" Q" + cpx + "," + cpy + "," + x + "," + y);
	}
	,BezierCurveTo: function(cp1x,cp1y,cp2x,cp2y,x,y) {
		this._currentPathIsEmpty = false;
		this._currentPath += Std.string(" C" + cp1x + "," + cp1y + "," + cp2x + "," + cp2y + "," + x + "," + y);
	}
	,FillCircle: function(x,y,radius) {
		this._currentPathIsEmpty = false;
		this._currentPath += Std.string(" M" + (x - radius) + "," + y + " A1,1 0 0,0 " + (x + radius) + "," + y + " A1,1 0 0,0 " + (x - radius) + "," + y + " z");
		this.Fill();
	}
	,Fill: function() {
		if(!this._currentPathIsEmpty) {
			this.Buffer += Std.string("<path d=\"" + this._currentPath + "\"");
			if(this.get_Color().RGBA != "#000000") {
				var s = " fill=\"" + this.get_Color().RGBA + "\"";
				this.Buffer += Std.string(s);
			}
			this.Buffer += Std.string(" stroke=\"none\"/>");
		}
		var this1 = "";
		this._currentPath = this1;
		this._currentPathIsEmpty = true;
	}
	,Stroke: function() {
		if(!this._currentPathIsEmpty) {
			var s = "<path d=\"" + this._currentPath + "\" stroke=\"" + this.get_Color().RGBA + "\"";
			if(this.get_LineWidth() != 1) {
				s = s + (" stroke-width=\"" + this.get_LineWidth() + "\"");
			}
			s = s + " fill=\"none\" />";
			this.Buffer += Std.string(s);
		}
		var this1 = "";
		this._currentPath = this1;
		this._currentPathIsEmpty = true;
	}
	,FillText: function(text,x,y) {
		if(text == "") {
			return;
		}
		var s = "<text x=\"" + system.Convert.ToInt32_Single(x) + "\" y=\"" + system.Convert.ToInt32_Single(y) + "\" style=\"font:" + this.get_Font().ToCssString(1) + "\" " + " dominant-baseline=\"" + this.GetSvgBaseLine() + "\"";
		if(this.get_Color().RGBA != "#000000") {
			s = s + (" fill=\"" + this.get_Color().RGBA + "\"");
		}
		if(this.get_TextAlign() != 0) {
			s = s + (" text-anchor=\"" + this.GetSvgTextAlignment() + "\"");
		}
		s = s + (">" + text + "</text>");
		this.Buffer += Std.string(s);
	}
	,GetSvgTextAlignment: function() {
		var _g = this.get_TextAlign();
		switch(_g) {
		case 0:
			return "start";
		case 1:
			return "middle";
		case 2:
			return "end";
		default:
		}
		return "";
	}
	,GetSvgBaseLine: function() {
		var _g = this.get_TextBaseline();
		switch(_g) {
		case 0:
			return "hanging";
		case 1:
			return "middle";
		case 2:
			return "bottom";
		default:
			return "";
		}
	}
	,MeasureText: function(text) {
		if(text == null || text.length == 0) {
			return 0;
		}
		var font = 1;
		if(this.get_Font().Family.indexOf("Times") != -1) {
			font = 0;
		}
		return alphaTab.platform.svg.FontSizes.MeasureString(text,font,this.get_Font().Size,this.get_Font().Style);
	}
	,FillMusicFontSymbol: function(x,y,scale,symbol) {
		throw new js._Boot.HaxeError("abstract");
	}
	,OnPreRender: function() {
		return null;
	}
	,OnRenderFinished: function() {
		return null;
	}
	,__class__: alphaTab.platform.svg.SvgCanvas
};
alphaTab.platform.svg.CssFontSvgCanvas = $hx_exports["alphaTab"]["platform"]["svg"]["CssFontSvgCanvas"] = function() {
	alphaTab.platform.svg.SvgCanvas.call(this);
};
alphaTab.platform.svg.CssFontSvgCanvas.__name__ = ["alphaTab","platform","svg","CssFontSvgCanvas"];
alphaTab.platform.svg.CssFontSvgCanvas.__super__ = alphaTab.platform.svg.SvgCanvas;
alphaTab.platform.svg.CssFontSvgCanvas.prototype = $extend(alphaTab.platform.svg.SvgCanvas.prototype,{
	FillMusicFontSymbol: function(x,y,scale,symbol) {
		var s = "<g transform=\"translate(" + (system.Convert.ToInt32_Single(x) - 0) + " " + (system.Convert.ToInt32_Single(y) - 0) + ")\" class=\"at\" ><text";
		this.Buffer += Std.string(s);
		if(scale != 1) {
			this.Buffer += Std.string("  style=\"font-size: " + scale * 100 + "%\"");
		}
		if(this.get_Color().RGBA != "#000000") {
			var s1 = " fill=\"" + this.get_Color().RGBA + "\"";
			this.Buffer += Std.string(s1);
		}
		this.Buffer += Std.string(">&#" + symbol + ";</text></g>");
	}
	,__class__: alphaTab.platform.svg.CssFontSvgCanvas
});
alphaTab.platform.model = {};
alphaTab.platform.model.Color = $hx_exports["alphaTab"]["platform"]["model"]["Color"] = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	this.Raw = 0;
	this.RGBA = null;
	this.Raw = a << 24 | r << 16 | g << 8 | b;
	if(this.get_A() == 255) {
		this.RGBA = "#" + alphaTab.platform.Platform.ToHexString(this.get_R(),2) + alphaTab.platform.Platform.ToHexString(this.get_G(),2) + alphaTab.platform.Platform.ToHexString(this.get_B(),2);
	} else {
		this.RGBA = "rgba(" + this.get_R() + "," + this.get_G() + "," + this.get_B() + "," + this.get_A() / 255.0 + ")";
	}
};
alphaTab.platform.model.Color.__name__ = ["alphaTab","platform","model","Color"];
alphaTab.platform.model.Color.prototype = {
	get_A: function() {
		return system.Convert.ToUInt8(this.Raw >> 24 & 255);
	}
	,get_R: function() {
		return system.Convert.ToUInt8(this.Raw >> 16 & 255);
	}
	,get_G: function() {
		return system.Convert.ToUInt8(this.Raw >> 8 & 255);
	}
	,get_B: function() {
		return system.Convert.ToUInt8(this.Raw & 255);
	}
	,__class__: alphaTab.platform.model.Color
};
alphaTab.platform.Platform = $hx_exports["alphaTab"]["platform"]["Platform"] = function() { };
alphaTab.platform.Platform.__name__ = ["alphaTab","platform","Platform"];
alphaTab.platform.Platform.ParseFloat = function(s) {
	return parseFloat(s);
};
alphaTab.platform.Platform.GetCallerName = function() {
	return arguments.callee.caller.caller.name;
};
alphaTab.platform.Platform.Log = function(logLevel,category,msg,details) {
	msg = "[AlphaTab][" + category + "] " + msg;
	var $console = $global.console;
	switch(logLevel) {
	case 0:
		break;
	case 1:
		msg = "[Debug]" + msg;
		$console.debug(msg,details);
		break;
	case 2:
		msg = "[Info]" + msg;
		$console.info(msg,details);
		break;
	case 3:
		$console.warn(msg,details);
		break;
	case 4:
		var stack = haxe.CallStack.toString(haxe.CallStack.callStack());
		$console.error(msg,stack,details);
		break;
	default:
	}
};
alphaTab.platform.Platform.NewObject = function() {
	return {}
};
alphaTab.platform.Platform.JsonExists = function(json,property) {
	return (json && property in json);
};
alphaTab.platform.Platform.JsonKeys = function(json) {
	return Object.keys(json);
};
alphaTab.platform.Platform.Log2 = function(f) {
	return Math.log2(f);
};
alphaTab.platform.Platform.ParseInt = function(s) {
	var val = parseInt(s);
	if(isNaN(val)) {
		return -2147483648;
	} else {
		return val;
	}
};
alphaTab.platform.Platform.CloneArray = function(array) {
	return new Int32Array(array);
};
alphaTab.platform.Platform.BlockCopy = function(src,srcOffset,dst,dstOffset,count) {
	dst.set(src.subarray(srcOffset,srcOffset+count), dstOffset);
};
alphaTab.platform.Platform.StringFromCharCode = function(c) {
	return String.fromCharCode(c);
};
alphaTab.platform.Platform.ReadSignedByte = function(readable) {
	var n = readable.ReadByte();
	if(n >= 128) {
		return system.Convert.ToInt8(n - 256);
	}
	return system.Convert.ToInt8(n);
};
alphaTab.platform.Platform.ToString = function(data) {
	if(!!self.TextDecoder) {
		var encoding = alphaTab.platform.Platform.DetectEncoding(data);
		var decoder = new TextDecoder(encoding);
		return decoder.decode(data);
	} else {
		var this1 = "";
		var s = this1;
		var i = 0;
		while(i < data.length) {
			var c = data[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += String.fromCharCode(c);
			} else if(c < 224) {
				s += String.fromCharCode((c & 63) << 6 | data[i++] & 127);
			} else if(c < 240) {
				s += String.fromCharCode((c & 31) << 12 | (data[i++] & 127) << 6 | data[i++] & 127);
			} else {
				var u = (c & 15) << 18 | (data[i++] & 127) << 12 | (data[i++] & 127) << 6 | data[i++] & 127;
				s += String.fromCharCode((u >> 18) + 55232);
				s += String.fromCharCode(u & 1023 | 56320);
			}
		}
		return s;
	}
};
alphaTab.platform.Platform.DetectEncoding = function(data) {
	if(data[0] == 254 && data[1] == 255) {
		return "utf-16be";
	}
	if(data[0] == 255 && data[1] == 254) {
		return "utf-16le";
	}
	if(data[0] == 0 && data[1] == 0 && data[2] == 254 && data[3] == 255) {
		return "utf-32be";
	}
	if(data[0] == 255 && data[1] == 254 && data[2] == 0 && data[3] == 0) {
		return "utf-32le";
	}
	return "utf-8";
};
alphaTab.platform.Platform.StringToByteArray = function(contents) {
	var this1 = new Uint8Array(contents.length);
	var byteArray = this1;
	var i = 0;
	while(i < contents.length) {
		var this2 = system.Convert.ToUInt16(HxOverrides.cca(contents,i));
		byteArray[i] = system.Convert.ToUInt8(this2);
		++i;
	}
	return byteArray;
};
alphaTab.platform.Platform.S4 = function() {
	return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
};
alphaTab.platform.Platform.NewGuid = function() {
	var lhs = alphaTab.platform.Platform.S4() + alphaTab.platform.Platform.S4();
	var this1 = system.Convert.ToUInt16(45);
	var lhs1 = lhs + String.fromCharCode(this1) + alphaTab.platform.Platform.S4();
	var this2 = system.Convert.ToUInt16(45);
	var lhs2 = lhs1 + String.fromCharCode(this2) + alphaTab.platform.Platform.S4();
	var this3 = system.Convert.ToUInt16(45);
	var lhs3 = lhs2 + String.fromCharCode(this3) + alphaTab.platform.Platform.S4();
	var this4 = system.Convert.ToUInt16(45);
	return lhs3 + String.fromCharCode(this4) + alphaTab.platform.Platform.S4() + alphaTab.platform.Platform.S4() + alphaTab.platform.Platform.S4();
};
alphaTab.platform.Platform.Member_Object_CsString1 = function(s,name) {
	return s[name];
};
alphaTab.platform.Platform.Member_Object_CsString_T1 = function(s,name,value) {
	return s[name] = value;
};
alphaTab.platform.Platform.Match = function(s,regex) {
	return s.match(regex);
};
alphaTab.platform.Platform.IsTruthy = function(o) {
	return !(!o);
};
alphaTab.platform.Platform.IsNaN = function(v) {
	return isNaN(v);
};
alphaTab.platform.Platform.TypeOf = function(o) {
	return typeof(o);
};
alphaTab.platform.Platform.ArrayBufferToByteArray = function(data) {
	return new Uint8Array(data);
};
alphaTab.platform.Platform.ToDouble = function(bytes) {
	var array = new Float64Array(bytes.buffer);
	return array[0];
};
alphaTab.platform.Platform.ClearIntArray = function(array) {
	var i = 0;
	while(i < array.length) {
		array[i] = 0;
		++i;
	}
};
alphaTab.platform.Platform.ClearShortArray = function(array) {
	var i = 0;
	while(i < array.length) {
		array[i] = 0;
		++i;
	}
};
alphaTab.platform.Platform.RandomDouble = function() {
	return Math.random();
};
alphaTab.platform.Platform.get_SupportsWebAudio = function() {
	return !!window.ScriptProcessorNode;
};
alphaTab.platform.Platform.get_SupportsWebWorkers = function() {
	return !!window.Worker;
};
alphaTab.platform.Platform.get_ForceFlash = function() {
	return !!window.ForceFlash;
};
alphaTab.platform.Platform.get_SupportsTextDecoder = function() {
	return !!self.TextDecoder;
};
alphaTab.platform.Platform.ArrayCopy_Int32Array_Int32_Int32Array_Int32_Int32 = function(src,srcOffset,dst,dstOffset,count) {
	dst.set(src.subarray(srcOffset,srcOffset+count), dstOffset);
};
alphaTab.platform.Platform.ArrayCopy_Int16Array_Int32_Int16Array_Int32_Int32 = function(src,srcOffset,dst,dstOffset,count) {
	dst.set(src.subarray(srcOffset,srcOffset+count), dstOffset);
};
alphaTab.platform.Platform.ArrayCopy_ByteArray_Int32_ByteArray_Int32_Int32 = function(src,srcOffset,dst,dstOffset,count) {
	dst.set(src.subarray(srcOffset,srcOffset+count), dstOffset);
};
alphaTab.platform.Platform.ArrayCopy_TArray_Int32_TArray_Int32_Int321 = function(src,srcOffset,dst,dstOffset,count) {
	var i = 0;
	while(i < count) {
		dst[dstOffset + i] = src[srcOffset + i];
		++i;
	}
};
alphaTab.platform.Platform.Reverse = function(array) {
	array.reverse();
};
alphaTab.platform.Platform.GetTypeName = function(obj) {
	return Type.getClassName(obj == null ? null : js.Boot.getClass(obj));
};
alphaTab.platform.Platform.IsStringNumber = function(s,allowSign) {
	if(allowSign == null) {
		allowSign = true;
	}
	if(s.length == 0) {
		return false;
	}
	var this1 = system.Convert.ToUInt16(HxOverrides.cca(s,0));
	var c = this1;
	return alphaTab.platform.Platform.IsCharNumber(c,allowSign);
};
alphaTab.platform.Platform.IsCharNumber = function(c,allowSign) {
	if(allowSign == null) {
		allowSign = true;
	}
	if(!(allowSign && c == 45)) {
		if(c >= 48) {
			return c <= 57;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
alphaTab.platform.Platform.IsWhiteSpace = function(c) {
	if(!(c == 32 || c == 11 || c == 13 || c == 10)) {
		return c == 9;
	} else {
		return true;
	}
};
alphaTab.platform.Platform.ToHexString = function(n,digits) {
	if(digits == null) {
		digits = 0;
	}
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		var this1 = system.Convert.ToUInt16(HxOverrides.cca(hexChars,n & 15));
		s = String.fromCharCode(this1) + s;
		n = n >> 4;
		if(!(n > 0)) {
			break;
		}
	}
	while(s.length < digits) s = "0" + s;
	return s;
};
alphaTab.platform.Platform.ToUInt32 = function(i) {
	return system.Convert.ToUInt32(i);
};
alphaTab.platform.Platform.ToInt16 = function(i) {
	return system.Convert.ToInt16(i);
};
alphaTab.platform.Platform.ToUInt16 = function(i) {
	return system.Convert.ToUInt16(i);
};
alphaTab.platform.Platform.ToUInt8 = function(i) {
	return system.Convert.ToUInt8(i);
};
system.Convert = function() { };
system.Convert.__name__ = ["system","Convert"];
system.Convert.ToInt8 = function(v) {
	system.Convert._int32Buffer[0] = v;
	return system.Convert._int8Buffer[0];
};
system.Convert.ToUInt8 = function(v) {
	system.Convert._int32Buffer[0] = v;
	return system.Convert._uint8Buffer[0];
};
system.Convert.ToInt16 = function(v) {
	system.Convert._int32Buffer[0] = v;
	return system.Convert._int16Buffer[0];
};
system.Convert.ToUInt16 = function(v) {
	system.Convert._int32Buffer[0] = v;
	return system.Convert._uint16Buffer[0];
};
system.Convert.ToUInt32 = function(v) {
	system.Convert._int32Buffer[0] = v;
	return system.Convert._uint32Buffer[0];
};
system.Convert.ToInt32_Double = function(v) {
	if(v >= 0) {
		if(v < 2147483647.5) {
			return v | 0;
		}
	} else if(v >= -2147483648.5) {
		return v | 0;
	}
	throw new js._Boot.HaxeError(new system.OverflowException("Value was either too large or too small for a Int32."));
};
system.Convert.ToInt32_Single = function(v) {
	var this1 = v;
	return system.Convert.ToInt32_Double(this1);
};
alphaTab.platform.model.Font = $hx_exports["alphaTab"]["platform"]["model"]["Font"] = function(family,size,style) {
	if(style == null) {
		style = 0;
	}
	this._css = null;
	this.Family = null;
	this.Size = 0.0;
	this.Style = 0;
	this.Family = family;
	this.Size = size;
	this.Style = style;
	this._css = this.ToCssString(1);
};
alphaTab.platform.model.Font.__name__ = ["alphaTab","platform","model","Font"];
alphaTab.platform.model.Font.prototype = {
	get_IsBold: function() {
		return (this.Style & 1) != 0;
	}
	,get_IsItalic: function() {
		return (this.Style & 2) != 0;
	}
	,Clone: function() {
		return new alphaTab.platform.model.Font(this.Family,this.Size,this.Style);
	}
	,ToCssString: function(scale) {
		if(scale == null) {
			scale = 1;
		}
		if(this._css != null && scale == 1) {
			return this._css;
		}
		var this1 = "";
		var buf = this1;
		if(this.get_IsBold()) {
			buf += Std.string("bold ");
		}
		if(this.get_IsItalic()) {
			buf += Std.string("italic ");
		}
		buf += Std.string(this.Size * scale);
		buf += Std.string("px ");
		buf += Std.string("'");
		buf += Std.string(this.Family);
		buf += Std.string("'");
		return buf;
	}
	,__class__: alphaTab.platform.model.Font
};
alphaTab.platform.javaScript = {};
alphaTab.platform.javaScript.Html5Canvas = $hx_exports["alphaTab"]["platform"]["javaScript"]["Html5Canvas"] = function() {
	this._canvas = null;
	this._context = null;
	this._color = null;
	this._font = null;
	this._musicFont = null;
	this._color = new alphaTab.platform.model.Color(0,0,0,255);
	var fontElement = window.document.createElement("span");
	fontElement.classList.add("at");
	window.document.body.appendChild(fontElement);
	var style = window.getComputedStyle(fontElement);
	var s = style.fontSize;
	this._musicFont = new alphaTab.platform.model.Font(style.fontFamily,parseFloat(s),0);
};
alphaTab.platform.javaScript.Html5Canvas.__name__ = ["alphaTab","platform","javaScript","Html5Canvas"];
alphaTab.platform.javaScript.Html5Canvas.__interfaces__ = [alphaTab.platform.ICanvas];
alphaTab.platform.javaScript.Html5Canvas.prototype = {
	get_Resources: function() {
		return this.__Resources;
	}
	,set_Resources: function(value) {
		return this.__Resources = value;
	}
	,OnPreRender: function() {
		return null;
	}
	,OnRenderFinished: function() {
		return null;
	}
	,BeginRender: function(width,height) {
		this._canvas = js.Boot.__cast(window.document.createElement("canvas") , HTMLCanvasElement);
		var tmp = system.Convert.ToInt32_Single(width);
		this._canvas.width = tmp;
		var tmp1 = system.Convert.ToInt32_Single(height);
		this._canvas.height = tmp1;
		this._canvas.style.width = Std.string(width) + "px";
		this._canvas.style.height = Std.string(height) + "px";
		this._context = this._canvas.getContext("2d");
		this._context.textBaseline = "top";
	}
	,EndRender: function() {
		var result = this._canvas;
		this._canvas = null;
		return result;
	}
	,get_Color: function() {
		return this._color;
	}
	,set_Color: function(value) {
		if(this._color.RGBA == value.RGBA) {
			return this.get_Color();
		}
		this._color = value;
		this._context.strokeStyle = value.RGBA;
		this._context.fillStyle = value.RGBA;
		return this.get_Color();
	}
	,get_LineWidth: function() {
		return this._context.lineWidth;
	}
	,set_LineWidth: function(value) {
		this._context.lineWidth = value;
		return this.get_LineWidth();
	}
	,FillRect: function(x,y,w,h) {
		if(w > 0) {
			this._context.fillRect(system.Convert.ToInt32_Single(x) - 0.5,system.Convert.ToInt32_Single(y) - 0.5,w,h);
		}
	}
	,StrokeRect: function(x,y,w,h) {
		this._context.strokeRect(x - 0.5,y - 0.5,w,h);
	}
	,BeginPath: function() {
		this._context.beginPath();
	}
	,ClosePath: function() {
		this._context.closePath();
	}
	,MoveTo: function(x,y) {
		this._context.moveTo(x - 0.5,y - 0.5);
	}
	,LineTo: function(x,y) {
		this._context.lineTo(x - 0.5,y - 0.5);
	}
	,QuadraticCurveTo: function(cpx,cpy,x,y) {
		this._context.quadraticCurveTo(cpx,cpy,x,y);
	}
	,BezierCurveTo: function(cp1x,cp1y,cp2x,cp2y,x,y) {
		this._context.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y);
	}
	,FillCircle: function(x,y,radius) {
		this._context.beginPath();
		this._context.arc(x,y,radius,0,6.28318530717958,true);
		this.Fill();
	}
	,Fill: function() {
		this._context.fill();
	}
	,Stroke: function() {
		this._context.stroke();
	}
	,get_Font: function() {
		return this._font;
	}
	,set_Font: function(value) {
		this._font = value;
		var tmp = value.ToCssString(1);
		this._context.font = tmp;
		return this.get_Font();
	}
	,get_TextAlign: function() {
		var _g = this._context.textAlign;
		switch(_g) {
		case "center":
			return 1;
		case "left":
			return 0;
		case "right":
			return 2;
		default:
			return 0;
		}
	}
	,set_TextAlign: function(value) {
		switch(value) {
		case 0:
			this._context.textAlign = "left";
			break;
		case 1:
			this._context.textAlign = "center";
			break;
		case 2:
			this._context.textAlign = "right";
			break;
		default:
		}
		return this.get_TextAlign();
	}
	,get_TextBaseline: function() {
		var _g = this._context.textBaseline;
		switch(_g) {
		case "bottom":
			return 2;
		case "middle":
			return 1;
		case "top":
			return 0;
		default:
			return 0;
		}
	}
	,set_TextBaseline: function(value) {
		switch(value) {
		case 0:
			this._context.textBaseline = "top";
			break;
		case 1:
			this._context.textBaseline = "middle";
			break;
		case 2:
			this._context.textBaseline = "bottom";
			break;
		default:
		}
		return this.get_TextBaseline();
	}
	,BeginGroup: function(identifier) {
	}
	,EndGroup: function() {
	}
	,FillText: function(text,x,y) {
		this._context.fillText(text,x,y);
	}
	,MeasureText: function(text) {
		return js.Boot.__cast(this._context.measureText(text).width , Float);
	}
	,FillMusicFontSymbol: function(x,y,scale,symbol) {
		if(symbol == -1) {
			return;
		}
		var baseLine = this._context.textBaseline;
		var font = this._context.font;
		var tmp = this._musicFont.ToCssString(scale);
		this._context.font = tmp;
		this._context.textBaseline = "middle";
		this._context.fillText(String.fromCharCode(symbol),x,y);
		this._context.textBaseline = baseLine;
		this._context.font = font;
	}
	,__class__: alphaTab.platform.javaScript.Html5Canvas
};
alphaTab.platform.javaScript.JQueryAlphaTab = $hx_exports["alphaTab"]["platform"]["javaScript"]["JQueryAlphaTab"] = function() {
	var this1 = [];
	this._initListeners = this1;
};
alphaTab.platform.javaScript.JQueryAlphaTab.__name__ = ["alphaTab","platform","javaScript","JQueryAlphaTab"];
alphaTab.platform.javaScript.JQueryAlphaTab.Restore = function(selector) {
	$(selector).empty().removeData("alphaTab");
};
alphaTab.platform.javaScript.JQueryAlphaTab.prototype = {
	Exec: function(element,method,args) {
		if(typeof(method) != 'string') {
			args = [method];
			method = "init";
		}
		var tmp;
		var this1 = system.Convert.ToUInt16(HxOverrides.cca(method,0));
		if(!(this1 == 95)) {
			tmp = method == "Exec";
		} else {
			tmp = true;
		}
		if(tmp) {
			return null;
		}
		var jElement = $(element);
		var context = jElement.data("alphaTab");
		if(method == "destroy" && !(!(!context))) {
			return null;
		}
		if(method != "init" && !(!(!context))) {
			throw new Error("alphaTab not initialized");
		}
		var apiMethod = this[method];
		if(!(!apiMethod)) {
			var realArgs = [ jElement, context ].concat(args);
			return apiMethod.apply(this,realArgs);
		} else {
			alphaTab.util.Logger.Error("Api","Method '" + method + "' does not exist on jQuery.alphaTab",null);
			return null;
		}
	}
	,init: function(element,context,options) {
		if(!(!(!context))) {
			context = new alphaTab.platform.javaScript.AlphaTabApi(element[0],options);
			element.data("alphaTab",context);
			var listener = $iterator(this._initListeners)();
			while(listener.hasNext()) {
				var listener1 = listener.next();
				listener1(element,context,options);
			}
		}
	}
	,destroy: function(element,context) {
		element.removeData("alphaTab");
		context.Destroy();
	}
	,tex: function(element,context,tex) {
		context.Tex(tex);
	}
	,tracks: function(element,context,tracks) {
		if(tracks) {
			context.SetTracks(tracks,true);
		}
		return context.get_Tracks();
	}
	,api: function(element,context) {
		return context;
	}
	,score: function(element,context,score) {
		if(!(!score)) {
			context.ScoreLoaded(score,true);
		}
		return context.Score;
	}
	,renderer: function(element,context) {
		return context.Renderer;
	}
	,layout: function(element,context,layout) {
		if(!(!layout)) {
			context.UpdateLayout(layout);
		}
		return context.Settings.Layout;
	}
	,print: function(element,context,width) {
		context.Print(width);
	}
	,player: function(element,context) {
		return context.Player;
	}
	,playerOptions: function(element,context,options) {
		if(!(!options)) {
			alphaTab.Settings.FillPlayerOptions(context.Settings,options,false,null);
		}
		return context.Settings;
	}
	,cursorOptions: function(element,context,options) {
		return this.playerOptions(element,context,options);
	}
	,playerState: function(element,context) {
		if(context.Player == null) {
			return 0;
		}
		return context.Player.get_State();
	}
	,masterVolume: function(element,context,masterVolume) {
		if(context.Player == null) {
			return 0;
		}
		if(!(!masterVolume)) {
			context.Player.set_MasterVolume(masterVolume);
		}
		return context.Player.get_MasterVolume();
	}
	,playbackSpeed: function(element,context,playbackSpeed) {
		if(context.Player == null) {
			return 0;
		}
		if(!(!playbackSpeed)) {
			context.Player.set_PlaybackSpeed(playbackSpeed);
		}
		return context.Player.get_PlaybackSpeed();
	}
	,metronomeVolume: function(element,context,metronomeVolume) {
		if(context.Player == null) {
			return 0;
		}
		if(!(!metronomeVolume)) {
			context.Player.set_MetronomeVolume(metronomeVolume);
		}
		return context.Player.get_MetronomeVolume();
	}
	,tickPosition: function(element,context,tickPosition) {
		if(context.Player == null) {
			return 0;
		}
		if(!(!tickPosition)) {
			context.Player.set_TickPosition(tickPosition);
		}
		return context.Player.get_TickPosition();
	}
	,playbackRange: function(element,context,playbackRange) {
		if(context.Player == null) {
			return null;
		}
		if(!(!playbackRange)) {
			context.Player.set_PlaybackRange(playbackRange);
		}
		return context.Player.get_PlaybackRange();
	}
	,loop: function(element,context,loop) {
		if(context.Player == null) {
			return false;
		}
		if(!(!loop)) {
			context.Player.set_IsLooping(loop);
		}
		return context.Player.get_IsLooping();
	}
	,autoScroll: function(element,context,autoScroll) {
		if(context.Player == null) {
			return null;
		}
		if(!(!autoScroll)) {
			context.Settings.ScrollMode = autoScroll;
		}
		return context.Settings.ScrollMode;
	}
	,play: function(element,context) {
		context.Play();
	}
	,pause: function(element,context) {
		context.Pause();
	}
	,playPause: function(element,context) {
		context.PlayPause();
	}
	,stop: function(element,context) {
		context.Stop();
	}
	,loadSoundFont: function(element,context,value) {
		context.LoadSoundFont(value);
	}
	,muteTrack: function(element,context,tracks,mute) {
		context.SetTrackMute(tracks,mute);
	}
	,soloTrack: function(element,context,tracks,solo) {
		context.SetTrackSolo(tracks,solo);
	}
	,trackVolume: function(element,context,tracks,volume) {
		context.SetTrackVolume(tracks,volume);
	}
	,_oninit: function(listener) {
		this._initListeners.push(listener);
	}
	,__class__: alphaTab.platform.javaScript.JQueryAlphaTab
};
alphaTab.util = {};
alphaTab.util.Logger = $hx_exports["alphaTab"]["util"]["Logger"] = function() {
};
alphaTab.util.Logger.__name__ = ["alphaTab","util","Logger"];
alphaTab.util.Logger.Debug = function(category,msg,details) {
	alphaTab.util.Logger.Log(1,category,msg,details);
};
alphaTab.util.Logger.Warning = function(category,msg,details) {
	alphaTab.util.Logger.Log(3,category,msg,details);
};
alphaTab.util.Logger.Info = function(category,msg,details) {
	alphaTab.util.Logger.Log(2,category,msg,details);
};
alphaTab.util.Logger.Error = function(category,msg,details) {
	alphaTab.util.Logger.Log(4,category,msg,details);
};
alphaTab.util.Logger.Log = function(logLevel,category,msg,details) {
	if(logLevel < alphaTab.util.Logger.LogLevel) {
		return;
	}
	alphaTab.platform.Platform.Log(logLevel,category,msg,details);
};
alphaTab.util.Logger.prototype = {
	__class__: alphaTab.util.Logger
};
var haxe = {};
haxe.CallStack = function() { };
haxe.CallStack.__name__ = ["haxe","CallStack"];
haxe.CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe.CallStack.wrapCallSite != null) {
				site = haxe.CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe.StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe.StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe.CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe.CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		if (e instanceof js._Boot.HaxeError) e = e.val;
		var a = haxe.CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe.CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe.CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe.CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe.CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null ? "null" : "" + cname;
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
haxe.CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe.StackItem.FilePos(meth == "Anonymous function" ? haxe.StackItem.LocalFunction() : meth == "Global code" ? null : haxe.StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe.StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var js = {};
js.Boot = function() { };
js.Boot.__name__ = ["js","Boot"];
js.Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js.Boot.__nativeClassName(o);
		if(name != null) {
			return js.Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js.Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js.Boot.__string_rec(o[i],s);
					} else {
						str += js.Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js.Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
};
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js.Boot.__interfLoop(js.Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js.Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js.Boot.__cast = function(o,t) {
	if(js.Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js._Boot.HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js.Boot.__nativeClassName = function(o) {
	var name = js.Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js.Boot.__isNativeObj = function(o) {
	return js.Boot.__nativeClassName(o) != null;
};
js.Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
haxe.StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
haxe.StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; };
alphaTab.platform.javaScript.AlphaTabWebWorker = $hx_exports["alphaTab"]["platform"]["javaScript"]["AlphaTabWebWorker"] = function(main) {
	this._renderer = null;
	this._main = null;
	this._main = main;
	this._main.addEventListener("message",$bind(this,this.HandleMessage),false);
};
alphaTab.platform.javaScript.AlphaTabWebWorker.__name__ = ["alphaTab","platform","javaScript","AlphaTabWebWorker"];
alphaTab.platform.javaScript.AlphaTabWebWorker.Init = function() {
	new alphaTab.platform.javaScript.AlphaTabWebWorker($global);
};
alphaTab.platform.javaScript.AlphaTabWebWorker.prototype = {
	HandleMessage: function(e) {
		var _gthis = this;
		var data = (js.Boot.__cast(e , MessageEvent)).data;
		var cmd = data ? data.cmd : "";
		switch(cmd) {
		case "alphaTab.initialize":
			var settings = alphaTab.Settings.FromJson(data.settings,null);
			alphaTab.util.Logger.LogLevel = settings.LogLevel;
			this._renderer = new alphaTab.rendering.ScoreRenderer(settings);
			this._renderer.PartialRenderFinished = system._EventAction1.EventAction1_Impl_.add(this._renderer.PartialRenderFinished,function(result) {
				_gthis._main.postMessage({ cmd : "alphaTab.partialRenderFinished", result : result});
			});
			this._renderer.RenderFinished = system._EventAction1.EventAction1_Impl_.add(this._renderer.RenderFinished,function(result1) {
				_gthis._main.postMessage({ cmd : "alphaTab.renderFinished", result : result1});
			});
			this._renderer.PostRenderFinished = system._EventAction.EventAction_Impl_.add(this._renderer.PostRenderFinished,function() {
				_gthis._main.postMessage({ cmd : "alphaTab.postRenderFinished", boundsLookup : _gthis._renderer.get_BoundsLookup().ToJson()});
			});
			this._renderer.PreRender = system._EventAction1.EventAction1_Impl_.add(this._renderer.PreRender,function(result2) {
				_gthis._main.postMessage({ cmd : "alphaTab.preRender", result : result2});
			});
			this._renderer.Error = system._EventAction2.EventAction2_Impl_.add(this._renderer.Error,$bind(this,this.Error));
			break;
		case "alphaTab.invalidate":
			this._renderer.Invalidate();
			break;
		case "alphaTab.render":
			var score = alphaTab.model.JsonConverter.JsObjectToScore(data.score);
			this.RenderMultiple(score,data.trackIndexes);
			break;
		case "alphaTab.resize":
			this._renderer.Resize(data.width);
			break;
		case "alphaTab.updateSettings":
			this.UpdateSettings(data.settings);
			break;
		default:
		}
	}
	,UpdateSettings: function(settings) {
		this._renderer.UpdateSettings(alphaTab.Settings.FromJson(settings,null));
	}
	,RenderMultiple: function(score,trackIndexes) {
		try {
			this._renderer.Render(score,trackIndexes);
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				this.Error("render",e);
			} else throw(e);
		}
	}
	,Error: function(type,e) {
		alphaTab.util.Logger.Error(type,"An unexpected error occurred in worker",e);
		var error = JSON.parse(JSON.stringify(e));
		var e2 = e;
		if(e2.message) {
			error.message = e2.message;
		}
		if(e2.stack) {
			error.stack = e2.stack;
		}
		if(e2.constructor && e2.constructor.name) {
			error.type = e2.constructor.name;
		}
		this._main.postMessage({ cmd : "alphaTab.error", error : { type : type, detail : error}});
	}
	,__class__: alphaTab.platform.javaScript.AlphaTabWebWorker
};
alphaTab.platform.javaScript.AlphaSynthWebWorker = $hx_exports["alphaTab"]["platform"]["javaScript"]["AlphaSynthWebWorker"] = function(main,id) {
	this._player = null;
	this._main = null;
	this._main = main;
	this._main.addEventListener("message",$bind(this,this.HandleMessage));
	this._player = new alphaTab.audio.synth.AlphaSynth(new alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput());
	this._player.PositionChanged = system._EventAction1.EventAction1_Impl_.add(this._player.PositionChanged,$bind(this,this.OnPositionChanged));
	this._player.PlayerStateChanged = system._EventAction1.EventAction1_Impl_.add(this._player.PlayerStateChanged,$bind(this,this.OnPlayerStateChanged));
	this._player.Finished = system._EventAction1.EventAction1_Impl_.add(this._player.Finished,$bind(this,this.OnFinished));
	this._player.SoundFontLoaded = system._EventAction.EventAction_Impl_.add(this._player.SoundFontLoaded,$bind(this,this.OnSoundFontLoaded));
	this._player.SoundFontLoadFailed = system._EventAction.EventAction_Impl_.add(this._player.SoundFontLoadFailed,$bind(this,this.OnSoundFontLoadFailed));
	this._player.SoundFontLoadFailed = system._EventAction.EventAction_Impl_.add(this._player.SoundFontLoadFailed,$bind(this,this.OnSoundFontLoadFailed));
	this._player.MidiLoaded = system._EventAction.EventAction_Impl_.add(this._player.MidiLoaded,$bind(this,this.OnMidiLoaded));
	this._player.MidiLoadFailed = system._EventAction.EventAction_Impl_.add(this._player.MidiLoadFailed,$bind(this,this.OnMidiLoadFailed));
	this._player.ReadyForPlayback = system._EventAction.EventAction_Impl_.add(this._player.ReadyForPlayback,$bind(this,this.OnReadyForPlayback));
	this._main.postMessage({ cmd : "alphaSynth." + "ready"});
};
alphaTab.platform.javaScript.AlphaSynthWebWorker.__name__ = ["alphaTab","platform","javaScript","AlphaSynthWebWorker"];
alphaTab.platform.javaScript.AlphaSynthWebWorker.Init = function() {
	var main = $global;
	main.addEventListener("message",function(e) {
		var data = e.data;
		var cmd = data.cmd;
		if(cmd == "alphaSynth.initialize") {
			alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.PreferredSampleRate = data.sampleRate;
			alphaTab.util.Logger.LogLevel = data.logLevel;
			new alphaTab.platform.javaScript.AlphaSynthWebWorker(main,data.id);
		}
	});
};
alphaTab.platform.javaScript.AlphaSynthWebWorker.prototype = {
	HandleMessage: function(e) {
		var data = e.data;
		var cmd = data.cmd;
		switch(cmd) {
		case "alphaSynth.loadMidi":
			this._player.LoadMidi(alphaTab.model.JsonConverter.JsObjectToMidiFile(data.midi));
			break;
		case "alphaSynth.loadSoundFontBytes":
			this._player.LoadSoundFont(data.data);
			break;
		case "alphaSynth.pause":
			this._player.Pause();
			break;
		case "alphaSynth.play":
			this._player.Play();
			break;
		case "alphaSynth.playPause":
			this._player.PlayPause();
			break;
		case "alphaSynth.resetChannelStates":
			this._player.ResetChannelStates();
			break;
		case "alphaSynth.setChannelMute":
			this._player.SetChannelMute(data.channel,data.mute);
			break;
		case "alphaSynth.setChannelProgram":
			this._player.SetChannelProgram(data.channel,data.program);
			break;
		case "alphaSynth.setChannelSolo":
			this._player.SetChannelSolo(data.channel,data.solo);
			break;
		case "alphaSynth.setChannelVolume":
			this._player.SetChannelVolume(data.channel,data.volume);
			break;
		case "alphaSynth.setIsLooping":
			this._player.set_IsLooping(data.value);
			break;
		case "alphaSynth.setLogLevel":
			alphaTab.util.Logger.LogLevel = data.value;
			break;
		case "alphaSynth.setMasterVolume":
			this._player.set_MasterVolume(data.value);
			break;
		case "alphaSynth.setMetronomeVolume":
			this._player.set_MetronomeVolume(data.value);
			break;
		case "alphaSynth.setPlaybackRange":
			this._player.set_PlaybackRange(data.value);
			break;
		case "alphaSynth.setPlaybackSpeed":
			this._player.set_PlaybackSpeed(data.value);
			break;
		case "alphaSynth.setTickPosition":
			this._player.set_TickPosition(data.value);
			break;
		case "alphaSynth.setTimePosition":
			this._player.set_TimePosition(data.value);
			break;
		case "alphaSynth.stop":
			this._player.Stop();
			break;
		default:
		}
	}
	,OnPositionChanged: function(e) {
		this._main.postMessage({ cmd : "alphaSynth." + "positionChanged", currentTime : e.CurrentTime, endTime : e.EndTime, currentTick : e.CurrentTick, endTick : e.EndTick});
	}
	,OnPlayerStateChanged: function(e) {
		this._main.postMessage({ cmd : "alphaSynth." + "playerStateChanged", state : e.State});
	}
	,OnFinished: function(isLooping) {
		this._main.postMessage({ cmd : "alphaSynth." + "finished", isLooping : isLooping});
	}
	,OnSoundFontLoaded: function() {
		this._main.postMessage({ cmd : "alphaSynth." + "soundFontLoaded"});
	}
	,OnSoundFontLoadFailed: function() {
		this._main.postMessage({ cmd : "alphaSynth." + "soundFontLoadFailed"});
	}
	,OnMidiLoaded: function() {
		this._main.postMessage({ cmd : "alphaSynth." + "midiLoaded"});
	}
	,OnMidiLoadFailed: function() {
		this._main.postMessage({ cmd : "alphaSynth." + "midiLoaded"});
	}
	,OnReadyForPlayback: function() {
		this._main.postMessage({ cmd : "alphaSynth." + "readyForPlayback"});
	}
	,SendLog: function(level,s) {
		this._main.postMessage({ cmd : "alphaSynth." + "log", level : level, message : s});
	}
	,__class__: alphaTab.platform.javaScript.AlphaSynthWebWorker
};
alphaTab.audio = {};
alphaTab.audio.synth = {};
alphaTab.audio.synth.ISynthOutput = $hx_exports["alphaTab"]["audio"]["synth"]["ISynthOutput"] = function() { };
alphaTab.audio.synth.ISynthOutput.__name__ = ["alphaTab","audio","synth","ISynthOutput"];
alphaTab.audio.synth.ISynthOutput.prototype = {
	__class__: alphaTab.audio.synth.ISynthOutput
};
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput = $hx_exports["alphaTab"]["platform"]["javaScript"]["AlphaSynthWorkerSynthOutput"] = function() {
};
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.__name__ = ["alphaTab","platform","javaScript","AlphaSynthWorkerSynthOutput"];
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.__interfaces__ = [alphaTab.audio.synth.ISynthOutput];
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.prototype = {
	get_SampleRate: function() {
		return alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.PreferredSampleRate;
	}
	,Open: function() {
		alphaTab.util.Logger.Debug("AlphaSynth","Initializing webworker worker",null);
		this._worker = $global;
		this._worker.addEventListener("message",$bind(this,this.HandleMessage));
		system._EventAction.EventAction_Impl_.Invoke(this.Ready);
	}
	,HandleMessage: function(e) {
		var data = e.data;
		var cmd = data.cmd;
		switch(cmd) {
		case "alphaSynth.output.finished":
			system._EventAction.EventAction_Impl_.Invoke(this.Finished);
			break;
		case "alphaSynth.output.sampleRequest":
			system._EventAction.EventAction_Impl_.Invoke(this.SampleRequest);
			break;
		case "alphaSynth.output.samplesPlayed":
			system._EventAction1.EventAction1_Impl_.Invoke(this.SamplesPlayed,data.samples);
			break;
		default:
		}
	}
	,add_Ready: function(value) {
		return this.Ready = system._EventAction.EventAction_Impl_.add(this.Ready,value);
	}
	,remove_Ready: function(value) {
		return this.Ready = system._EventAction.EventAction_Impl_.sub(this.Ready,value);
	}
	,add_SamplesPlayed: function(value) {
		return this.SamplesPlayed = system._EventAction1.EventAction1_Impl_.add(this.SamplesPlayed,value);
	}
	,remove_SamplesPlayed: function(value) {
		return this.SamplesPlayed = system._EventAction1.EventAction1_Impl_.sub(this.SamplesPlayed,value);
	}
	,add_SampleRequest: function(value) {
		return this.SampleRequest = system._EventAction.EventAction_Impl_.add(this.SampleRequest,value);
	}
	,remove_SampleRequest: function(value) {
		return this.SampleRequest = system._EventAction.EventAction_Impl_.sub(this.SampleRequest,value);
	}
	,add_Finished: function(value) {
		return this.Finished = system._EventAction.EventAction_Impl_.add(this.Finished,value);
	}
	,remove_Finished: function(value) {
		return this.Finished = system._EventAction.EventAction_Impl_.sub(this.Finished,value);
	}
	,SequencerFinished: function() {
		this._worker.postMessage({ cmd : "alphaSynth." + "output." + "sequencerFinished"});
	}
	,AddSamples: function(samples) {
		this._worker.postMessage({ cmd : "alphaSynth." + "output." + "addSamples", samples : samples});
	}
	,Play: function() {
		this._worker.postMessage({ cmd : "alphaSynth." + "output." + "play"});
	}
	,Pause: function() {
		this._worker.postMessage({ cmd : "alphaSynth." + "output." + "pause"});
	}
	,ResetSamples: function() {
		this._worker.postMessage({ cmd : "alphaSynth." + "output." + "resetSamples"});
	}
	,__class__: alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput
};
alphaTab.audio.synth.IAlphaSynth = $hx_exports["alphaTab"]["audio"]["synth"]["IAlphaSynth"] = function() { };
alphaTab.audio.synth.IAlphaSynth.__name__ = ["alphaTab","audio","synth","IAlphaSynth"];
alphaTab.audio.synth.IAlphaSynth.prototype = {
	__class__: alphaTab.audio.synth.IAlphaSynth
};
alphaTab.audio.synth.AlphaSynth = $hx_exports["alphaTab"]["audio"]["synth"]["AlphaSynth"] = function(output) {
	var _gthis = this;
	this._sequencer = null;
	this._synthesizer = null;
	this._outputIsReady = false;
	this._state = 0;
	this._logLevel = 0;
	this._isSoundFontLoaded = false;
	this._isMidiLoaded = false;
	this._tickPosition = 0;
	this._timePosition = 0.0;
	this.Output = null;
	alphaTab.util.Logger.Debug("AlphaSynth","Initializing player",null);
	this._state = 0;
	alphaTab.util.Logger.Debug("AlphaSynth","Creating output",null);
	this.Output = output;
	this.Output.Ready = system._EventAction.EventAction_Impl_.add(this.Output.Ready,function() {
		_gthis._outputIsReady = true;
		_gthis.CheckReadyForPlayback();
	});
	this.Output.Finished = system._EventAction.EventAction_Impl_.add(this.Output.Finished,function() {
		_gthis.Stop();
		alphaTab.util.Logger.Debug("AlphaSynth","Finished playback",null);
		_gthis.OnFinished(_gthis._sequencer.IsLooping);
		if(_gthis._sequencer.IsLooping) {
			_gthis.Play();
		}
	});
	this.Output.SampleRequest = system._EventAction.EventAction_Impl_.add(this.Output.SampleRequest,function() {
		_gthis._sequencer.FillMidiEventQueue();
		_gthis._synthesizer.Synthesize();
		_gthis.Output.AddSamples(_gthis._synthesizer.SampleBuffer);
		_gthis._sequencer.CheckForStop();
	});
	this.Output.SamplesPlayed = system._EventAction1.EventAction1_Impl_.add(this.Output.SamplesPlayed,$bind(this,this.OnSamplesPlayed));
	alphaTab.util.Logger.Debug("AlphaSynth","Creating synthesizer",null);
	this._synthesizer = new alphaTab.audio.synth.synthesis.Synthesizer(this.Output.get_SampleRate(),2,441,3,100);
	this._sequencer = new alphaTab.audio.synth.MidiFileSequencer(this._synthesizer);
	this._sequencer.Finished = system._EventAction.EventAction_Impl_.add(this._sequencer.Finished,($_=this.Output,$bind($_,$_.SequencerFinished)));
	alphaTab.util.Logger.Debug("AlphaSynth","Opening output",null);
	this.Output.Open();
};
alphaTab.audio.synth.AlphaSynth.__name__ = ["alphaTab","audio","synth","AlphaSynth"];
alphaTab.audio.synth.AlphaSynth.__interfaces__ = [alphaTab.audio.synth.IAlphaSynth];
alphaTab.audio.synth.AlphaSynth.prototype = {
	get_IsReady: function() {
		return this._outputIsReady;
	}
	,get_IsReadyForPlayback: function() {
		if(this.get_IsReady() && this._isSoundFontLoaded) {
			return this._isMidiLoaded;
		} else {
			return false;
		}
	}
	,get_State: function() {
		return this._state;
	}
	,get_LogLevel: function() {
		return alphaTab.util.Logger.LogLevel;
	}
	,set_LogLevel: function(value) {
		alphaTab.util.Logger.LogLevel = value;
		return this.get_LogLevel();
	}
	,get_MasterVolume: function() {
		return this._synthesizer.MasterVolume;
	}
	,set_MasterVolume: function(value) {
		value = alphaTab.audio.synth.util.SynthHelper.ClampF(value,0,10);
		this._synthesizer.MasterVolume = value;
		return this.get_MasterVolume();
	}
	,get_MetronomeVolume: function() {
		return this._synthesizer.get_MetronomeVolume();
	}
	,set_MetronomeVolume: function(value) {
		value = alphaTab.audio.synth.util.SynthHelper.ClampF(value,0,10);
		this._synthesizer.set_MetronomeVolume(value);
		return this.get_MetronomeVolume();
	}
	,get_PlaybackSpeed: function() {
		return this._sequencer.PlaybackSpeed;
	}
	,set_PlaybackSpeed: function(value) {
		value = alphaTab.audio.synth.util.SynthHelper.ClampD(value,0.125,8);
		var oldSpeed = this._sequencer.PlaybackSpeed;
		this._sequencer.PlaybackSpeed = value;
		this.UpdateTimePosition(this._timePosition * (oldSpeed / value));
		return this.get_PlaybackSpeed();
	}
	,get_TickPosition: function() {
		return this._tickPosition;
	}
	,set_TickPosition: function(value) {
		this.set_TimePosition(this._sequencer.TickPositionToTimePosition(value));
		return this.get_TickPosition();
	}
	,get_TimePosition: function() {
		return this._timePosition;
	}
	,set_TimePosition: function(value) {
		alphaTab.util.Logger.Debug("AlphaSynth","Seeking to position " + value + "ms",null);
		this._sequencer.Seek(value);
		this.UpdateTimePosition(value);
		this.Output.ResetSamples();
		return this.get_TimePosition();
	}
	,get_PlaybackRange: function() {
		return this._sequencer.get_PlaybackRange();
	}
	,set_PlaybackRange: function(value) {
		this._sequencer.set_PlaybackRange(value);
		if(value != null) {
			this.set_TickPosition(value.StartTick);
		}
		return this.get_PlaybackRange();
	}
	,get_IsLooping: function() {
		return this._sequencer.IsLooping;
	}
	,set_IsLooping: function(value) {
		this._sequencer.IsLooping = value;
		return this.get_IsLooping();
	}
	,Play: function() {
		if(this.get_State() == 1 || !this.get_IsReadyForPlayback()) {
			return;
		}
		alphaTab.util.Logger.Debug("AlphaSynth","Starting playback",null);
		this._state = 1;
		this.OnPlayerStateChanged(new alphaTab.audio.synth.PlayerStateChangedEventArgs(this._state));
		this.Output.Play();
	}
	,Pause: function() {
		if(this.get_State() == 0 || !this.get_IsReadyForPlayback()) {
			return;
		}
		alphaTab.util.Logger.Debug("AlphaSynth","Pausing playback",null);
		this._state = 0;
		this.OnPlayerStateChanged(new alphaTab.audio.synth.PlayerStateChangedEventArgs(this._state));
		this.Output.Pause();
		this._synthesizer.NoteOffAll(false);
	}
	,PlayPause: function() {
		if(this.get_State() == 1 || !this.get_IsReadyForPlayback()) {
			this.Pause();
		} else {
			this.Play();
		}
	}
	,Stop: function() {
		if(!this.get_IsReadyForPlayback()) {
			return;
		}
		alphaTab.util.Logger.Debug("AlphaSynth","Stopping playback",null);
		this.Pause();
		this.set_TickPosition(this._sequencer.get_PlaybackRange() != null ? this._sequencer.get_PlaybackRange().StartTick : 0);
	}
	,LoadSoundFont: function(data) {
		this.Pause();
		var input = alphaTab.io.ByteBuffer.FromBuffer(data);
		try {
			alphaTab.util.Logger.Info("AlphaSynth","Loading soundfont from bytes",null);
			var bank = new alphaTab.audio.synth.bank.PatchBank();
			bank.LoadSf2(input);
			this._synthesizer.LoadBank(bank);
			this._isSoundFontLoaded = true;
			this.OnSoundFontLoaded();
			alphaTab.util.Logger.Info("AlphaSynth","soundFont successfully loaded",null);
			this.CheckReadyForPlayback();
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				alphaTab.util.Logger.Error("AlphaSynth","Could not load soundfont from bytes " + Std.string(e),null);
				this.OnSoundFontLoadFailed();
			} else throw(e);
		}
	}
	,CheckReadyForPlayback: function() {
		if(this.get_IsReadyForPlayback()) {
			this.OnReadyForPlayback();
		}
	}
	,LoadMidi: function(midiFile) {
		this.Stop();
		try {
			alphaTab.util.Logger.Info("AlphaSynth","Loading midi from model",null);
			this._sequencer.LoadMidi(midiFile);
			this._isMidiLoaded = true;
			this.OnMidiLoaded();
			alphaTab.util.Logger.Info("AlphaSynth","Midi successfully loaded",null);
			this.CheckReadyForPlayback();
			this.set_TickPosition(0);
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				alphaTab.util.Logger.Error("AlphaSynth","Could not load midi from model " + Std.string(e),null);
				this.OnMidiLoadFailed();
			} else throw(e);
		}
	}
	,SetChannelMute: function(channel,mute) {
		this._synthesizer.SetChannelMute(channel,mute);
	}
	,ResetChannelStates: function() {
		this._synthesizer.ResetChannelStates();
	}
	,SetChannelSolo: function(channel,solo) {
		this._synthesizer.SetChannelSolo(channel,solo);
	}
	,SetChannelVolume: function(channel,volume) {
		var this1 = 0;
		var this2 = 10;
		volume = alphaTab.audio.synth.util.SynthHelper.ClampD(volume,this1,this2);
		this._synthesizer.SetChannelVolume(channel,volume);
	}
	,SetChannelProgram: function(channel,program) {
		program = alphaTab.audio.synth.util.SynthHelper.ClampB(program,0,127);
		this._sequencer.SetChannelProgram(channel,program);
		this._synthesizer.SetChannelProgram(channel,program);
	}
	,On: function(events,action) {
	}
	,OnSamplesPlayed: function(sampleCount) {
		var playedMillis = sampleCount / js.Boot.__cast(this._synthesizer.SampleRate , Float) * 1000;
		this.UpdateTimePosition(this._timePosition + playedMillis);
	}
	,UpdateTimePosition: function(timePosition) {
		var currentTime = this._timePosition = timePosition;
		var currentTick = this._tickPosition = this._sequencer.TimePositionToTickPosition(currentTime);
		var endTime = this._sequencer.get_EndTime();
		var endTick = this._sequencer.EndTick;
		alphaTab.util.Logger.Debug("AlphaSynth","Position changed: (time: " + currentTime + "/" + endTime + ", tick: " + currentTick + "/" + endTime + ", Active Voices: " + this._synthesizer.get_ActiveVoices() + ", Free Voices: " + this._synthesizer.get_FreeVoices() + ")",null);
		this.OnPositionChanged(new alphaTab.audio.synth.PositionChangedEventArgs(currentTime,endTime,currentTick,endTick));
	}
	,OnFinished: function(isLooping) {
		var _e = this.Finished;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.Invoke(_e,p);
		};
		if(handler != null) {
			handler(isLooping);
		}
	}
	,OnPlayerStateChanged: function(e) {
		var _e = this.PlayerStateChanged;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.Invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,OnSoundFontLoaded: function() {
		var _e = this.SoundFontLoaded;
		var handler = function() {
			system._EventAction.EventAction_Impl_.Invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,OnReadyForPlayback: function() {
		var _e = this.ReadyForPlayback;
		var handler = function() {
			system._EventAction.EventAction_Impl_.Invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,OnSoundFontLoadFailed: function() {
		var _e = this.SoundFontLoadFailed;
		var handler = function() {
			system._EventAction.EventAction_Impl_.Invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,OnMidiLoaded: function() {
		var _e = this.MidiLoaded;
		var handler = function() {
			system._EventAction.EventAction_Impl_.Invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,OnMidiLoadFailed: function() {
		var _e = this.MidiLoadFailed;
		var handler = function() {
			system._EventAction.EventAction_Impl_.Invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,OnPositionChanged: function(e) {
		var _e = this.PositionChanged;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.Invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,__class__: alphaTab.audio.synth.AlphaSynth
};
system._EventAction = {};
system._EventAction.EventAction_Impl_ = {};
system._EventAction.EventAction_Impl_.__name__ = ["system","_EventAction","EventAction_Impl_"];
system._EventAction.EventAction_Impl_.add = function(lhs,rhs) {
	if(lhs == null) {
		var this1 = rhs == null ? null : [rhs];
		lhs = this1;
	} else {
		lhs.push(rhs);
	}
	return lhs;
};
system._EventAction.EventAction_Impl_.sub = function(lhs,rhs) {
	var raw = lhs;
	var index = raw.indexOf(rhs);
	if(index != -1) {
		raw.splice(index,1);
		if(raw.length == 0) {
			return null;
		}
	}
	return lhs;
};
system._EventAction.EventAction_Impl_.Invoke = function(this1) {
	if(this1 == null) {
		return;
	}
	var _g = 0;
	while(_g < this1.length) {
		var x = this1[_g];
		++_g;
		x();
	}
};
system._EventAction1 = {};
system._EventAction1.EventAction1_Impl_ = {};
system._EventAction1.EventAction1_Impl_.__name__ = ["system","_EventAction1","EventAction1_Impl_"];
system._EventAction1.EventAction1_Impl_.add = function(lhs,rhs) {
	if(lhs == null) {
		var this1 = rhs == null ? null : [rhs];
		lhs = this1;
	} else {
		lhs.push(rhs);
	}
	return lhs;
};
system._EventAction1.EventAction1_Impl_.sub = function(lhs,rhs) {
	var raw = lhs;
	var index = raw.indexOf(rhs);
	if(index != -1) {
		raw.splice(index,1);
		if(raw.length == 0) {
			return null;
		}
	}
	return lhs;
};
system._EventAction1.EventAction1_Impl_.Invoke = function(this1,p) {
	if(this1 == null) {
		return;
	}
	var _g = 0;
	while(_g < this1.length) {
		var x = this1[_g];
		++_g;
		x(p);
	}
};
alphaTab.audio.synth.synthesis = {};
alphaTab.audio.synth.synthesis.Synthesizer = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["Synthesizer"] = function(sampleRate,audioChannels,bufferSize,bufferCount,polyphony) {
	this._voiceManager = null;
	this._synthChannels = null;
	this._layerList = null;
	this._midiEventQueue = null;
	this._midiEventCounts = null;
	this._metronomeChannel = 0;
	this._mutedChannels = null;
	this._soloChannels = null;
	this._isAnySolo = false;
	this._syn = 0.0;
	this.MicroBufferSize = 0;
	this.MicroBufferCount = 0;
	this.SampleBuffer = null;
	this.SoundBank = null;
	this.SampleRate = 0;
	this.MasterVolume = 0.0;
	var MinSampleRate = 8000;
	var MaxSampleRate = 96000;
	this.MasterVolume = 1;
	this.SampleRate = alphaTab.audio.synth.util.SynthHelper.ClampI(sampleRate,MinSampleRate,MaxSampleRate);
	this.MicroBufferSize = alphaTab.audio.synth.util.SynthHelper.ClampI(bufferSize,system.Convert.ToInt32_Double(0.001 * sampleRate),system.Convert.ToInt32_Double(0.05 * sampleRate));
	this.MicroBufferSize = system.Convert.ToInt32_Double(Math.ceil(this.MicroBufferSize / js.Boot.__cast(64 , Float)) * 64);
	this.MicroBufferCount = Math.max(1,bufferCount);
	var this1 = new Float32Array(this.MicroBufferSize * this.MicroBufferCount * audioChannels);
	this.SampleBuffer = this1;
	var this2 = new Array(17);
	this._synthChannels = this2;
	var x = 0;
	while(x < this._synthChannels.length) {
		this._synthChannels[x] = new alphaTab.audio.synth.synthesis.SynthParameters(this);
		++x;
	}
	this._metronomeChannel = this._synthChannels.length - 1;
	this._voiceManager = new alphaTab.audio.synth.synthesis.VoiceManager(alphaTab.audio.synth.util.SynthHelper.ClampI(polyphony,5,250));
	this._midiEventQueue = new alphaTab.audio.synth.ds.LinkedList();
	var this3 = new Int32Array(this.MicroBufferCount);
	this._midiEventCounts = this3;
	var this4 = new Array(15);
	this._layerList = this4;
	var this5 = {}
	this._mutedChannels = this5;
	var this6 = {}
	this._soloChannels = this6;
	this.ResetSynthControls();
};
alphaTab.audio.synth.synthesis.Synthesizer.__name__ = ["alphaTab","audio","synth","synthesis","Synthesizer"];
alphaTab.audio.synth.synthesis.Synthesizer.prototype = {
	get_ActiveVoices: function() {
		return this._voiceManager.ActiveVoices.Length;
	}
	,get_FreeVoices: function() {
		return this._voiceManager.FreeVoices.Length;
	}
	,get_MetronomeVolume: function() {
		return this._synthChannels[this._metronomeChannel].MixVolume;
	}
	,set_MetronomeVolume: function(value) {
		this._synthChannels[this._metronomeChannel].MixVolume = value;
		return this.get_MetronomeVolume();
	}
	,LoadBank: function(bank) {
		this.UnloadBank();
		this.SoundBank = bank;
	}
	,UnloadBank: function() {
		if(this.SoundBank != null) {
			this.NoteOffAll(true);
			this._voiceManager.UnloadPatches();
			this.SoundBank = null;
		}
	}
	,ResetSynthControls: function() {
		var parameters = HxOverrides.iter(this._synthChannels);
		while(parameters.hasNext()) {
			var parameters1 = parameters.next();
			parameters1.ResetControllers();
		}
		this._synthChannels[9].BankSelect = system.Convert.ToUInt8(128);
		this.ReleaseAllHoldPedals();
		this._synthChannels[this._metronomeChannel].Volume.set_Coarse(128);
		this._synthChannels[this._metronomeChannel].UpdateCurrentVolumeFromVolume();
		this._synthChannels[this._metronomeChannel].BankSelect = system.Convert.ToUInt8(128);
	}
	,ResetPrograms: function() {
		var parameters = HxOverrides.iter(this._synthChannels);
		while(parameters.hasNext()) {
			var parameters1 = parameters.next();
			parameters1.Program = 0;
		}
	}
	,Synthesize: function() {
		this.SampleBuffer = new Float32Array(this.SampleBuffer.length);
		this.FillWorkingBuffer();
	}
	,FillWorkingBuffer: function() {
		var sampleIndex = 0;
		var anySolo = this._isAnySolo;
		var x = 0;
		while(x < this.MicroBufferCount) {
			if(this._midiEventQueue.Length > 0) {
				var i = 0;
				while(i < this._midiEventCounts[x]) {
					var m = this._midiEventQueue.RemoveLast();
					if(m.IsMetronome) {
						this.NoteOff(this._metronomeChannel,37);
						this.NoteOn(this._metronomeChannel,37,95);
					} else {
						this.ProcessMidiMessage(m.Event);
					}
					++i;
				}
			}
			var node = this._voiceManager.ActiveVoices.First;
			while(node != null) {
				var channel = node.Value.VoiceParams.Channel;
				var isChannelMuted = this._mutedChannels.hasOwnProperty(channel) || anySolo && !this._soloChannels.hasOwnProperty(channel);
				node.Value.Process(sampleIndex,sampleIndex + this.MicroBufferSize * 2,isChannelMuted);
				if(node.Value.VoiceParams.State == 0) {
					var delnode = node;
					node = node.get_Next();
					this._voiceManager.RemoveVoiceFromRegistry(delnode.Value);
					this._voiceManager.ActiveVoices.Remove(delnode);
					this._voiceManager.FreeVoices.AddFirst(delnode.Value);
				} else {
					node = node.get_Next();
				}
			}
			sampleIndex = sampleIndex + this.MicroBufferSize * 2;
			++x;
		}
		alphaTab.platform.Platform.ClearIntArray(this._midiEventCounts);
	}
	,NoteOn: function(channel,note,velocity) {
		var sChan = this._synthChannels[channel];
		var inst = this.SoundBank.GetPatchByNumber(sChan.BankSelect,sChan.Program);
		if(inst == null) {
			return;
		}
		var layerCount;
		if(js.Boot.__instanceof(inst,alphaTab.audio.synth.bank.patch.MultiPatch)) {
			layerCount = (js.Boot.__cast(inst , alphaTab.audio.synth.bank.patch.MultiPatch)).FindPatches(channel,note,velocity,this._layerList);
		} else {
			layerCount = 1;
			this._layerList[0] = inst;
		}
		if(this._voiceManager.Registry[channel][note] != null) {
			var node = this._voiceManager.Registry[channel][note];
			while(node != null) {
				node.Value.Stop();
				node = node.Next;
			}
			this._voiceManager.RemoveFromRegistry(channel,note);
		}
		var x = 0;
		while(x < layerCount) {
			var notseen = true;
			var i = x - 1;
			while(i >= 0) {
				if(this._layerList[x].ExclusiveGroupTarget == this._layerList[i].ExclusiveGroupTarget) {
					notseen = false;
					break;
				}
				--i;
			}
			if(this._layerList[x].ExclusiveGroupTarget != 0 && notseen) {
				var node1 = this._voiceManager.ActiveVoices.First;
				while(node1 != null) {
					if(this._layerList[x].ExclusiveGroupTarget == node1.Value.Patch.ExclusiveGroup) {
						node1.Value.Stop();
						this._voiceManager.RemoveVoiceFromRegistry(node1.Value);
					}
					node1 = node1.get_Next();
				}
			}
			++x;
		}
		var x1 = 0;
		while(x1 < layerCount) {
			var voice = this._voiceManager.GetFreeVoice();
			if(voice == null) {
				break;
			}
			voice.Configure(channel,note,velocity,this._layerList[x1],this._synthChannels[channel]);
			this._voiceManager.AddToRegistry(voice);
			this._voiceManager.ActiveVoices.AddLast(voice);
			voice.Start();
			++x1;
		}
		var x2 = 0;
		while(x2 < layerCount) {
			this._layerList[x2] = null;
			++x2;
		}
	}
	,NoteOff: function(channel,note) {
		if(this._synthChannels[channel].HoldPedal) {
			var node = this._voiceManager.Registry[channel][note];
			while(node != null) {
				node.Value.VoiceParams.NoteOffPending = true;
				node = node.Next;
			}
		} else {
			var node1 = this._voiceManager.Registry[channel][note];
			while(node1 != null) {
				node1.Value.Stop();
				node1 = node1.Next;
			}
			this._voiceManager.RemoveFromRegistry(channel,note);
		}
	}
	,NoteOffAll: function(immediate) {
		var node = this._voiceManager.ActiveVoices.First;
		if(immediate) {
			this._voiceManager.ClearRegistry();
			while(node != null) {
				node.Value.StopImmediately();
				var delnode = node;
				node = node.get_Next();
				this._voiceManager.ActiveVoices.Remove(delnode);
				this._voiceManager.FreeVoices.AddFirst(delnode.Value);
			}
		} else {
			while(node != null) {
				var voiceParams = node.Value.VoiceParams;
				if(voiceParams.State == 2) {
					if(this._synthChannels[voiceParams.Channel].HoldPedal) {
						voiceParams.NoteOffPending = true;
					} else {
						node.Value.Stop();
						this._voiceManager.RemoveVoiceFromRegistry(node.Value);
					}
				}
				node = node.get_Next();
			}
		}
	}
	,NoteOffAllChannel: function(channel,immediate) {
		var node = this._voiceManager.ActiveVoices.First;
		while(node != null) if(channel == node.Value.VoiceParams.Channel) {
			if(immediate) {
				node.Value.StopImmediately();
				var delnode = node;
				node = node.get_Next();
				this._voiceManager.ActiveVoices.Remove(delnode);
				this._voiceManager.FreeVoices.AddFirst(delnode.Value);
			} else {
				if(this._synthChannels[channel].HoldPedal) {
					node.Value.VoiceParams.NoteOffPending = true;
				} else {
					node.Value.Stop();
				}
				node = node.get_Next();
			}
		}
	}
	,ProcessMidiMessage: function(e) {
		alphaTab.util.Logger.Debug("Midi","Processing midi " + e.get_Command(),null);
		var command = e.get_Command();
		var channel = e.get_Channel();
		var data1 = e.get_Data1();
		var data2 = e.get_Data2();
		switch(command) {
		case 128:
			this.NoteOff(channel,data1);
			break;
		case 144:
			if(data2 == 0) {
				this.NoteOff(channel,data1);
			} else {
				this.NoteOn(channel,data1,data2);
			}
			break;
		case 160:
			break;
		case 176:
			var _g = js.Boot.__cast(data1 , Int);
			switch(_g) {
			case 0:
				if(channel == 9) {
					data2 = data2 + 128;
				}
				if(this.SoundBank.IsBankLoaded(data2)) {
					this._synthChannels[channel].BankSelect = system.Convert.ToUInt8(data2);
				} else {
					this._synthChannels[channel].BankSelect = system.Convert.ToUInt8(channel == 9 ? 128 : 0);
				}
				break;
			case 1:
				this._synthChannels[channel].ModRange.set_Coarse(system.Convert.ToUInt8(data2));
				this._synthChannels[channel].UpdateCurrentMod();
				break;
			case 6:
				var _g1 = this._synthChannels[channel].Rpn.get_Combined();
				switch(_g1) {
				case 0:
					this._synthChannels[channel].PitchBendRangeCoarse = system.Convert.ToUInt8(data2);
					this._synthChannels[channel].UpdateCurrentPitch();
					break;
				case 1:
					this._synthChannels[channel].MasterFineTune.set_Coarse(system.Convert.ToUInt8(data2));
					break;
				case 2:
					this._synthChannels[channel].MasterCoarseTune = system.Convert.ToInt16(data2 - 64);
					break;
				default:
				}
				break;
			case 7:
				this._synthChannels[channel].Volume.set_Coarse(system.Convert.ToUInt8(data2));
				this._synthChannels[channel].UpdateCurrentVolumeFromVolume();
				break;
			case 10:
				this._synthChannels[channel].Pan.set_Coarse(system.Convert.ToUInt8(data2));
				this._synthChannels[channel].UpdateCurrentPan();
				break;
			case 11:
				this._synthChannels[channel].Expression.set_Coarse(system.Convert.ToUInt8(data2));
				this._synthChannels[channel].UpdateCurrentVolumeFromExpression();
				break;
			case 33:
				this._synthChannels[channel].ModRange.set_Fine(system.Convert.ToUInt8(data2));
				this._synthChannels[channel].UpdateCurrentMod();
				break;
			case 38:
				var _g2 = this._synthChannels[channel].Rpn.get_Combined();
				switch(_g2) {
				case 0:
					this._synthChannels[channel].PitchBendRangeFine = system.Convert.ToUInt8(data2);
					this._synthChannels[channel].UpdateCurrentPitch();
					break;
				case 1:
					this._synthChannels[channel].MasterFineTune.set_Fine(system.Convert.ToUInt8(data2));
					break;
				default:
				}
				break;
			case 39:
				this._synthChannels[channel].Volume.set_Fine(system.Convert.ToUInt8(data2));
				this._synthChannels[channel].UpdateCurrentVolumeFromVolume();
				break;
			case 42:
				this._synthChannels[channel].Pan.set_Fine(system.Convert.ToUInt8(data2));
				this._synthChannels[channel].UpdateCurrentPan();
				break;
			case 43:
				this._synthChannels[channel].Expression.set_Fine(system.Convert.ToUInt8(data2));
				this._synthChannels[channel].UpdateCurrentVolumeFromExpression();
				break;
			case 64:
				if(this._synthChannels[channel].HoldPedal && !(data2 > 63)) {
					this.ReleaseHoldPedal(channel);
				}
				this._synthChannels[channel].HoldPedal = data2 > 63;
				break;
			case 68:
				this._synthChannels[channel].LegatoPedal = data2 > 63;
				break;
			case 98:
				this._synthChannels[channel].Rpn.set_Combined(16383);
				break;
			case 99:
				this._synthChannels[channel].Rpn.set_Combined(16383);
				break;
			case 100:
				this._synthChannels[channel].Rpn.set_Fine(system.Convert.ToUInt8(data2));
				break;
			case 101:
				this._synthChannels[channel].Rpn.set_Coarse(system.Convert.ToUInt8(data2));
				break;
			case 121:
				this._synthChannels[channel].Expression.set_Combined(16383);
				this._synthChannels[channel].ModRange.set_Combined(0);
				if(this._synthChannels[channel].HoldPedal) {
					this.ReleaseHoldPedal(channel);
				}
				this._synthChannels[channel].HoldPedal = false;
				this._synthChannels[channel].LegatoPedal = false;
				this._synthChannels[channel].Rpn.set_Combined(16383);
				this._synthChannels[channel].PitchBend.set_Combined(8192);
				this._synthChannels[channel].ChannelAfterTouch = 0;
				this._synthChannels[channel].UpdateCurrentPitch();
				this._synthChannels[channel].UpdateCurrentVolumeFromExpression();
				break;
			case 123:
				this.NoteOffAll(false);
				break;
			default:
				return;
			}
			break;
		case 192:
			this._synthChannels[channel].Program = system.Convert.ToUInt8(data1);
			break;
		case 208:
			this._synthChannels[channel].ChannelAfterTouch = system.Convert.ToUInt8(data2);
			break;
		case 224:
			this._synthChannels[channel].PitchBend.set_Coarse(system.Convert.ToUInt8(data2));
			this._synthChannels[channel].PitchBend.set_Fine(system.Convert.ToUInt8(data1));
			this._synthChannels[channel].UpdateCurrentPitch();
			break;
		default:
		}
		this.OnMidiEventProcessed(e);
	}
	,OnMidiEventProcessed: function(e) {
		var _e = this.MidiEventProcessed;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.Invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,ReleaseAllHoldPedals: function() {
		var node = this._voiceManager.ActiveVoices.First;
		while(node != null) {
			if(node.Value.VoiceParams.NoteOffPending) {
				node.Value.Stop();
				this._voiceManager.RemoveVoiceFromRegistry(node.Value);
			}
			node = node.get_Next();
		}
	}
	,ReleaseHoldPedal: function(channel) {
		var node = this._voiceManager.ActiveVoices.First;
		while(node != null) {
			if(node.Value.VoiceParams.Channel == channel && node.Value.VoiceParams.NoteOffPending) {
				node.Value.Stop();
				this._voiceManager.RemoveVoiceFromRegistry(node.Value);
			}
			node = node.get_Next();
		}
	}
	,DispatchEvent: function(i,synthEvent) {
		this._midiEventQueue.AddFirst(synthEvent);
		var tmp = i;
		var tmp1 = this._midiEventCounts[tmp];
		this._midiEventCounts[tmp] = tmp1 + 1;
	}
	,SetChannelMute: function(channel,mute) {
		if(mute) {
			this._mutedChannels[channel] = true;
		} else {
			var this1 = this._mutedChannels;
			delete this1[channel];
		}
	}
	,ResetChannelStates: function() {
		var this1 = {}
		this._mutedChannels = this1;
		var this2 = {}
		this._soloChannels = this2;
		this._isAnySolo = false;
	}
	,SetChannelSolo: function(channel,solo) {
		if(solo) {
			this._soloChannels[channel] = true;
		} else {
			var this1 = this._soloChannels;
			delete this1[channel];
		}
		var this2 = this._soloChannels;
		this._isAnySolo = Object.keys(this2).length > 0;
	}
	,SetChannelProgram: function(channel,program) {
		if(channel < 0 || channel >= this._synthChannels.length) {
			return;
		}
		this._synthChannels[channel].Program = program;
	}
	,SetChannelVolume: function(channel,volume) {
		if(channel < 0 || channel >= this._synthChannels.length) {
			return;
		}
		this._synthChannels[channel].MixVolume = js.Boot.__cast(volume , Float);
	}
	,__class__: alphaTab.audio.synth.synthesis.Synthesizer
};
alphaTab.audio.synth.util = {};
alphaTab.audio.synth.util.SynthHelper = $hx_exports["alphaTab"]["audio"]["synth"]["util"]["SynthHelper"] = function() {
};
alphaTab.audio.synth.util.SynthHelper.__name__ = ["alphaTab","audio","synth","util","SynthHelper"];
alphaTab.audio.synth.util.SynthHelper.SwapEndianess = function(data,bits) {
	bits = bits / 8 | 0;
	var this1 = new Uint8Array(bits);
	var swapArray = this1;
	var x = 0;
	while(x < data.length) {
		swapArray.set(data.subarray(x,x+bits), 0);
		swapArray.reverse();
		data.set(swapArray.subarray(0,0+bits), x);
		x = x + bits;
	}
};
alphaTab.audio.synth.util.SynthHelper.ClampB = function(value,min,max) {
	if(value <= min) {
		return min;
	} else if(value >= max) {
		return max;
	} else {
		return value;
	}
};
alphaTab.audio.synth.util.SynthHelper.ClampD = function(value,min,max) {
	if(value <= min) {
		return min;
	} else if(value >= max) {
		return max;
	} else {
		return value;
	}
};
alphaTab.audio.synth.util.SynthHelper.ClampF = function(value,min,max) {
	if(value <= min) {
		return min;
	} else if(value >= max) {
		return max;
	} else {
		return value;
	}
};
alphaTab.audio.synth.util.SynthHelper.ClampI = function(value,min,max) {
	if(value <= min) {
		return min;
	} else if(value >= max) {
		return max;
	} else {
		return value;
	}
};
alphaTab.audio.synth.util.SynthHelper.ClampS = function(value,min,max) {
	if(value <= min) {
		return min;
	} else if(value >= max) {
		return max;
	} else {
		return value;
	}
};
alphaTab.audio.synth.util.SynthHelper.NearestPowerOfTwo = function(value) {
	return Math.pow(2,Math.round(Math.log(value) / Math.log(2)));
};
alphaTab.audio.synth.util.SynthHelper.SamplesFromTime = function(sampleRate,seconds) {
	return sampleRate * seconds;
};
alphaTab.audio.synth.util.SynthHelper.TimeFromSamples = function(sampleRate,samples) {
	return samples / js.Boot.__cast(sampleRate , Float);
};
alphaTab.audio.synth.util.SynthHelper.DBtoLinear = function(dBvalue) {
	return Math.pow(10.0,dBvalue / 20.0);
};
alphaTab.audio.synth.util.SynthHelper.LineartoDB = function(linearvalue) {
	return 20.0 * (Math.log(linearvalue) / Math.log(10));
};
alphaTab.audio.synth.util.SynthHelper.FrequencyToKey = function(frequency,rootkey) {
	return 12.0 * (Math.log(frequency / 440.0) / Math.log(2.0)) + rootkey;
};
alphaTab.audio.synth.util.SynthHelper.KeyToFrequency = function(key,rootkey) {
	return Math.pow(2.0,(key - rootkey) / 12.0) * 440.0;
};
alphaTab.audio.synth.util.SynthHelper.SemitoneToPitch = function(key) {
	if(key < -127) {
		key = -127;
	} else if(key > 127) {
		key = 127;
	}
	var this1 = alphaTab.audio.synth.util.Tables.SemitoneTable(127 + key);
	return this1;
};
alphaTab.audio.synth.util.SynthHelper.CentsToPitch = function(cents) {
	var key = cents / 100 | 0;
	cents = cents - key * 100;
	if(key < -127) {
		key = -127;
	} else if(key > 127) {
		key = 127;
	}
	var this1 = alphaTab.audio.synth.util.Tables.SemitoneTable(127 + key) * alphaTab.audio.synth.util.Tables.CentTable(100 + cents);
	return this1;
};
alphaTab.audio.synth.util.SynthHelper.prototype = {
	__class__: alphaTab.audio.synth.util.SynthHelper
};
system.OverflowException = function(message) {
	if(message == null) {
		message = "";
	}
	system.Exception.call(this);
	this.Exception_CsString(message);
};
system.OverflowException.__name__ = ["system","OverflowException"];
system.OverflowException.__super__ = system.Exception;
system.OverflowException.prototype = $extend(system.Exception.prototype,{
	__class__: system.OverflowException
});
alphaTab.audio.synth.synthesis.SynthParameters = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["SynthParameters"] = function(synth) {
	this.Program = 0;
	this.BankSelect = 0;
	this.ChannelAfterTouch = 0;
	this.Pan = null;
	this.Volume = null;
	this.Expression = null;
	this.ModRange = null;
	this.PitchBend = null;
	this.PitchBendRangeCoarse = 0;
	this.PitchBendRangeFine = 0;
	this.MasterCoarseTune = 0;
	this.MasterFineTune = null;
	this.HoldPedal = false;
	this.LegatoPedal = false;
	this.Rpn = null;
	this.Synth = null;
	this.CurrentVolume = 0.0;
	this.CurrentPitch = 0;
	this.CurrentMod = 0;
	this.CurrentPan = null;
	this.MixVolume = 0.0;
	this.Synth = synth;
	this.Pan = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(0);
	this.Volume = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(0);
	this.Expression = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(0);
	this.ModRange = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(0);
	this.PitchBend = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(0);
	this.MasterFineTune = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(0);
	this.Rpn = new alphaTab.audio.synth.synthesis.CCValue().CCValue_Int16(0);
	this.MixVolume = 1;
	this.CurrentPan = new alphaTab.audio.synth.bank.components.PanComponent();
	this.ResetControllers();
};
alphaTab.audio.synth.synthesis.SynthParameters.__name__ = ["alphaTab","audio","synth","synthesis","SynthParameters"];
alphaTab.audio.synth.synthesis.SynthParameters.prototype = {
	ResetControllers: function() {
		this.Program = 0;
		this.BankSelect = 0;
		this.ChannelAfterTouch = 0;
		this.Pan.set_Combined(8192);
		this.Volume.set_Fine(0);
		this.Volume.set_Coarse(100);
		this.Expression.set_Combined(16383);
		this.ModRange.set_Combined(0);
		this.PitchBend.set_Combined(8192);
		this.PitchBendRangeCoarse = 2;
		this.PitchBendRangeFine = 0;
		this.MasterCoarseTune = 0;
		this.MasterFineTune.set_Combined(8192);
		this.HoldPedal = false;
		this.LegatoPedal = false;
		this.Rpn.set_Combined(16383);
		this.UpdateCurrentPan();
		this.UpdateCurrentPitch();
		this.UpdateCurrentVolumeFromExpression();
	}
	,UpdateCurrentPitch: function() {
		this.CurrentPitch = system.Convert.ToInt32_Double((this.PitchBend.get_Combined() - 8192.0) / 8192.0 * (100 * this.PitchBendRangeCoarse + this.PitchBendRangeFine));
	}
	,UpdateCurrentMod: function() {
		this.CurrentMod = system.Convert.ToInt32_Double(100 * (this.ModRange.get_Combined() / 16383.0));
	}
	,UpdateCurrentPan: function() {
		var value = 3.14159265358979 / 2.0 * (this.Pan.get_Combined() / 16383.0);
		this.CurrentPan.Left = js.Boot.__cast(Math.cos(value) , Float);
		this.CurrentPan.Right = js.Boot.__cast(Math.sin(value) , Float);
	}
	,UpdateCurrentVolumeFromVolume: function() {
		var this1 = 16383;
		this.CurrentVolume = this.Volume.get_Combined() / this1;
		this.CurrentVolume = this.CurrentVolume * this.CurrentVolume;
	}
	,UpdateCurrentVolumeFromExpression: function() {
		var this1 = 16383;
		this.CurrentVolume = this.Expression.get_Combined() / this1;
		this.CurrentVolume = this.CurrentVolume * this.CurrentVolume;
	}
	,__class__: alphaTab.audio.synth.synthesis.SynthParameters
};
alphaTab.audio.synth.synthesis.CCValue = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["CCValue"] = function() {
};
alphaTab.audio.synth.synthesis.CCValue.__name__ = ["alphaTab","audio","synth","synthesis","CCValue"];
alphaTab.audio.synth.synthesis.CCValue.prototype = {
	get_Coarse: function() {
		return this._coarseValue;
	}
	,set_Coarse: function(value) {
		this._coarseValue = value;
		this.UpdateCombined();
		return this.get_Coarse();
	}
	,get_Fine: function() {
		return this._fineValue;
	}
	,set_Fine: function(value) {
		this._fineValue = value;
		this.UpdateCombined();
		return this.get_Fine();
	}
	,get_Combined: function() {
		return this._combined;
	}
	,set_Combined: function(value) {
		this._combined = value;
		this.UpdateCoarseFinePair();
		return this.get_Combined();
	}
	,CCValue_Byte_Byte: function(coarse,fine) {
		this._coarseValue = 0;
		this._fineValue = 0;
		this._combined = 0;
		this._coarseValue = coarse;
		this._fineValue = fine;
		this._combined = 0;
		this.UpdateCombined();
		return this;
	}
	,CCValue_Int16: function(combined) {
		this._coarseValue = 0;
		this._fineValue = 0;
		this._combined = 0;
		this._coarseValue = 0;
		this._fineValue = 0;
		this._combined = combined;
		this.UpdateCoarseFinePair();
		return this;
	}
	,UpdateCombined: function() {
		if(true) {
			this._combined = system.Convert.ToInt16(this._coarseValue << 7 | this._fineValue);
		} else {
			this._combined = system.Convert.ToInt16(this._fineValue << 7 | this._coarseValue);
		}
	}
	,UpdateCoarseFinePair: function() {
		if(true) {
			this._coarseValue = system.Convert.ToUInt8(this._combined >> 7);
			this._fineValue = system.Convert.ToUInt8(this._combined & 127);
		} else {
			this._fineValue = system.Convert.ToUInt8(this._combined >> 7);
			this._coarseValue = system.Convert.ToUInt8(this._combined & 127);
		}
	}
	,__class__: alphaTab.audio.synth.synthesis.CCValue
};
alphaTab.audio.synth.bank = {};
alphaTab.audio.synth.bank.components = {};
alphaTab.audio.synth.bank.components.PanComponent = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["PanComponent"] = function() {
};
alphaTab.audio.synth.bank.components.PanComponent.__name__ = ["alphaTab","audio","synth","bank","components","PanComponent"];
alphaTab.audio.synth.bank.components.PanComponent.prototype = {
	SetValue: function(value,formula) {
		value = alphaTab.audio.synth.util.SynthHelper.ClampF(value,-1,1);
		var dvalue;
		switch(formula) {
		case 0:
			dvalue = 3.14159265358979 / 2.0 * (value + 1) / 2.0;
			this.Left = js.Boot.__cast(Math.cos(dvalue) , Float);
			this.Right = js.Boot.__cast(Math.sin(dvalue) , Float);
			break;
		case 1:
			this.Left = js.Boot.__cast(.5 + value * -.5 , Float);
			this.Right = js.Boot.__cast(.5 + value * .5 , Float);
			break;
		case 2:
			dvalue = 3.14159265358979 / 2.0 * (value + 1.0) / 2.0;
			this.Left = js.Boot.__cast(Math.cos(dvalue) / 0.707106781186 , Float);
			this.Right = js.Boot.__cast(Math.sin(dvalue) / 0.707106781186 , Float);
			break;
		default:
			throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid pan law selected."));
		}
	}
	,__class__: alphaTab.audio.synth.bank.components.PanComponent
};
alphaTab.audio.synth.synthesis.VoiceManager = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["VoiceManager"] = function(voiceCount) {
	this._voicePool = null;
	this._vNodes = null;
	this.Polyphony = 0;
	this.FreeVoices = null;
	this.ActiveVoices = null;
	this.Registry = null;
	this.Polyphony = voiceCount;
	var this1 = new Array(voiceCount);
	this._voicePool = this1;
	this._vNodes = new alphaTab.audio.synth.ds.LinkedList();
	this.FreeVoices = new alphaTab.audio.synth.ds.LinkedList();
	this.ActiveVoices = new alphaTab.audio.synth.ds.LinkedList();
	var i = 0;
	while(i < voiceCount) {
		var v = new alphaTab.audio.synth.synthesis.Voice();
		this._voicePool[i] = v;
		this._vNodes.AddLast(new alphaTab.audio.synth.synthesis.VoiceNode());
		this.FreeVoices.AddLast(v);
		++i;
	}
	var this2 = new Array(17);
	this.Registry = this2;
	var i1 = 0;
	while(i1 < this.Registry.length) {
		var this3 = this.Registry;
		var this4 = new Array(128);
		this3[i1] = this4;
		++i1;
	}
};
alphaTab.audio.synth.synthesis.VoiceManager.__name__ = ["alphaTab","audio","synth","synthesis","VoiceManager"];
alphaTab.audio.synth.synthesis.VoiceManager.prototype = {
	GetFreeVoice: function() {
		if(this.FreeVoices.Length > 0) {
			var voice = this.FreeVoices.First.Value;
			this.FreeVoices.RemoveFirst();
			return voice;
		}
		return this.StealQuietestVoice();
	}
	,AddToRegistry: function(voice) {
		var node = this._vNodes.RemoveLast();
		node.Value = voice;
		node.Next = this.Registry[voice.VoiceParams.Channel][voice.VoiceParams.Note];
		this.Registry[voice.VoiceParams.Channel][voice.VoiceParams.Note] = node;
	}
	,RemoveFromRegistry: function(channel,note) {
		var node = this.Registry[channel][note];
		while(node != null) {
			this._vNodes.AddLast(node);
			node = node.Next;
		}
		this.Registry[channel][note] = null;
	}
	,RemoveVoiceFromRegistry: function(voice) {
		var node = this.Registry[voice.VoiceParams.Channel][voice.VoiceParams.Note];
		if(node == null) {
			return;
		}
		if(node.Value == voice) {
			this.Registry[voice.VoiceParams.Channel][voice.VoiceParams.Note] = node.Next;
			this._vNodes.AddLast(node);
		} else {
			var node2 = node;
			node = node.Next;
			while(node != null) {
				if(node.Value == voice) {
					node2.Next = node.Next;
					this._vNodes.AddLast(node);
					return;
				}
				node2 = node;
				node = node.Next;
			}
		}
	}
	,ClearRegistry: function() {
		var node = this.ActiveVoices.First;
		while(node != null) {
			var vnode = this.Registry[node.Value.VoiceParams.Channel][node.Value.VoiceParams.Note];
			while(vnode != null) {
				this._vNodes.AddLast(vnode);
				vnode = vnode.Next;
			}
			this.Registry[node.Value.VoiceParams.Channel][node.Value.VoiceParams.Note] = null;
			node = node.get_Next();
		}
	}
	,UnloadPatches: function() {
		var v = HxOverrides.iter(this._voicePool);
		while(v.hasNext()) {
			var v1 = v.next();
			v1.Configure(0,0,0,null,null);
			var current = this._vNodes.First;
			while(current != null) {
				current.Value.Value = null;
				current = current.get_Next();
			}
		}
	}
	,StealQuietestVoice: function() {
		var voiceVolume = 1000.0;
		var quietest = null;
		var node = this.ActiveVoices.First;
		while(node != null) {
			if(node.Value.VoiceParams.State != 2) {
				var volume = node.Value.VoiceParams.get_CombinedVolume();
				if(volume < voiceVolume) {
					quietest = node;
					var this1 = volume;
					voiceVolume = this1;
				}
			}
			node = node.get_Next();
		}
		if(quietest == null) {
			quietest = this.ActiveVoices.First;
		}
		this.RemoveVoiceFromRegistry(quietest.Value);
		this.ActiveVoices.Remove(quietest);
		quietest.Value.VoiceParams.State = 0;
		return quietest.Value;
	}
	,__class__: alphaTab.audio.synth.synthesis.VoiceManager
};
alphaTab.audio.synth.ds = {};
alphaTab.audio.synth.ds.LinkedList = $hx_exports["alphaTab"]["audio"]["synth"]["ds"]["LinkedList"] = function() {
	this.First = null;
	this.Length = 0;
	this.Length = 0;
};
alphaTab.audio.synth.ds.LinkedList.__name__ = ["alphaTab","audio","synth","ds","LinkedList"];
alphaTab.audio.synth.ds.LinkedList.prototype = {
	AddFirst: function(value) {
		var node = new alphaTab.audio.synth.ds.LinkedListNode();
		node.Value = value;
		if(this.First == null) {
			this.InsertNodeToEmptyList(node);
		} else {
			this.InsertNodeBefore(this.First,node);
			this.First = node;
		}
	}
	,AddLast: function(value) {
		var node = new alphaTab.audio.synth.ds.LinkedListNode();
		node.Value = value;
		if(this.First == null) {
			this.InsertNodeToEmptyList(node);
		} else {
			this.InsertNodeBefore(this.First,node);
		}
	}
	,RemoveFirst: function() {
		if(this.First == null) {
			return null;
		}
		var v = this.First.Value;
		this.Remove(this.First);
		return v;
	}
	,RemoveLast: function() {
		if(this.First == null) {
			return null;
		}
		var v = this.First._prev != null ? this.First._prev.Value : null;
		this.Remove(this.First._prev);
		return v;
	}
	,Remove: function(n) {
		if(n._next == n) {
			this.First = null;
		} else {
			n._next._prev = n._prev;
			n._prev._next = n._next;
			if(this.First == n) {
				this.First = n._next;
			}
		}
		n.Invalidate();
		this.Length--;
	}
	,InsertNodeBefore: function(node,newNode) {
		newNode._next = node;
		newNode._prev = node._prev;
		node._prev._next = newNode;
		node._prev = newNode;
		newNode._list = this;
		this.Length++;
	}
	,InsertNodeToEmptyList: function(node) {
		node._next = node;
		node._prev = node;
		node._list = this;
		this.First = node;
		this.Length++;
	}
	,__class__: alphaTab.audio.synth.ds.LinkedList
};
alphaTab.audio.synth.synthesis.Voice = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["Voice"] = function() {
	this.Patch = null;
	this.VoiceParams = null;
	this.VoiceParams = new alphaTab.audio.synth.synthesis.VoiceParameters();
};
alphaTab.audio.synth.synthesis.Voice.__name__ = ["alphaTab","audio","synth","synthesis","Voice"];
alphaTab.audio.synth.synthesis.Voice.prototype = {
	Start: function() {
		if(this.VoiceParams.State != 0) {
			return;
		}
		if(this.Patch.Start(this.VoiceParams)) {
			this.VoiceParams.State = 2;
		}
	}
	,Stop: function() {
		if(this.VoiceParams.State != 2) {
			return;
		}
		this.VoiceParams.State = 1;
		this.Patch.Stop(this.VoiceParams);
	}
	,StopImmediately: function() {
		this.VoiceParams.State = 0;
	}
	,Process: function(startIndex,endIndex,isMuted) {
		if(this.VoiceParams.State == 0) {
			return;
		}
		this.Patch.Process(this.VoiceParams,startIndex,endIndex,isMuted);
	}
	,Configure: function(channel,note,velocity,patch,synthParams) {
		this.VoiceParams.Reset();
		this.VoiceParams.Channel = channel;
		this.VoiceParams.Note = note;
		this.VoiceParams.Velocity = velocity;
		this.VoiceParams.SynthParams = synthParams;
		this.Patch = patch;
	}
	,__class__: alphaTab.audio.synth.synthesis.Voice
};
alphaTab.audio.synth.synthesis.VoiceParameters = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["VoiceParameters"] = function() {
	this.mix1 = 0.0;
	this.mix2 = 0.0;
	this.Channel = 0;
	this.Note = 0;
	this.Velocity = 0;
	this.NoteOffPending = false;
	this.State = 0;
	this.PitchOffset = 0;
	this.VolOffset = 0.0;
	this.BlockBuffer = null;
	this.PData = null;
	this.SynthParams = null;
	this.GeneratorParams = null;
	this.Envelopes = null;
	this.Filters = null;
	this.Lfos = null;
	var this1 = new Float32Array(64);
	this.BlockBuffer = this1;
	var this2 = new Array(4);
	this.PData = this2;
	var this3 = new Array(4);
	this.GeneratorParams = this3;
	var this4 = new Array(4);
	this.Envelopes = this4;
	var this5 = new Array(4);
	this.Filters = this5;
	var this6 = new Array(4);
	this.Lfos = this6;
	var x = 0;
	while(x < 4) {
		this.GeneratorParams[x] = new alphaTab.audio.synth.bank.components.generators.GeneratorParameters();
		this.Envelopes[x] = new alphaTab.audio.synth.bank.components.Envelope();
		this.Filters[x] = new alphaTab.audio.synth.bank.components.Filter();
		this.Lfos[x] = new alphaTab.audio.synth.bank.components.Lfo();
		++x;
	}
};
alphaTab.audio.synth.synthesis.VoiceParameters.__name__ = ["alphaTab","audio","synth","synthesis","VoiceParameters"];
alphaTab.audio.synth.synthesis.VoiceParameters.prototype = {
	get_CombinedVolume: function() {
		return this.mix1 + this.mix2;
	}
	,Reset: function() {
		this.NoteOffPending = false;
		this.PitchOffset = 0;
		this.VolOffset = 0;
		var i = 0;
		while(i < this.PData.length) {
			var this1 = this.PData;
			var this2 = new DataView(new ArrayBuffer(8));
			this1[i] = this2;
			++i;
		}
		this.mix1 = 0;
		this.mix2 = 0;
	}
	,MixMonoToMonoInterp: function(startIndex,volume) {
		var inc = (volume - this.mix1) / 64;
		var i = 0;
		while(i < this.BlockBuffer.length) {
			this.mix1 = this.mix1 + inc;
			var this1 = this.SynthParams.Synth.SampleBuffer;
			var index = startIndex + i;
			this1[index] = this.SynthParams.Synth.SampleBuffer[startIndex + i] + this.BlockBuffer[i] * this.mix1;
			++i;
		}
		this.mix1 = volume;
	}
	,MixMonoToStereoInterp: function(startIndex,leftVol,rightVol) {
		var inc_l = (leftVol - this.mix1) / 64;
		var inc_r = (rightVol - this.mix2) / 64;
		var i = 0;
		while(i < this.BlockBuffer.length) {
			this.mix1 = this.mix1 + inc_l;
			this.mix2 = this.mix2 + inc_r;
			var this1 = this.SynthParams.Synth.SampleBuffer;
			this1[startIndex] = this.SynthParams.Synth.SampleBuffer[startIndex] + this.BlockBuffer[i] * this.mix1;
			var this2 = this.SynthParams.Synth.SampleBuffer;
			var index = startIndex + 1;
			this2[index] = this.SynthParams.Synth.SampleBuffer[startIndex + 1] + this.BlockBuffer[i] * this.mix2;
			startIndex = startIndex + 2;
			++i;
		}
		this.mix1 = leftVol;
		this.mix2 = rightVol;
	}
	,MixStereoToStereoInterp: function(startIndex,leftVol,rightVol) {
		var inc_l = (leftVol - this.mix1) / 64;
		var inc_r = (rightVol - this.mix2) / 64;
		var i = 0;
		while(i < this.BlockBuffer.length) {
			this.mix1 = this.mix1 + inc_l;
			this.mix2 = this.mix2 + inc_r;
			var this1 = this.SynthParams.Synth.SampleBuffer;
			var index = startIndex + i;
			this1[index] = this.SynthParams.Synth.SampleBuffer[startIndex + i] + this.BlockBuffer[i] * this.mix1;
			++i;
			var this2 = this.SynthParams.Synth.SampleBuffer;
			var index1 = startIndex + i;
			this2[index1] = this.SynthParams.Synth.SampleBuffer[startIndex + i] + this.BlockBuffer[i] * this.mix2;
			++i;
		}
		this.mix1 = leftVol;
		this.mix2 = rightVol;
	}
	,__class__: alphaTab.audio.synth.synthesis.VoiceParameters
};
alphaTab.audio.synth.bank.components.generators = {};
alphaTab.audio.synth.bank.components.generators.GeneratorParameters = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["GeneratorParameters"] = function() {
	this.Phase = 0.0;
	this.CurrentStart = 0.0;
	this.CurrentEnd = 0.0;
	this.CurrentState = 0;
	this.Phase = 0;
	this.CurrentStart = 0;
	this.CurrentEnd = 0;
	this.CurrentState = 0;
};
alphaTab.audio.synth.bank.components.generators.GeneratorParameters.__name__ = ["alphaTab","audio","synth","bank","components","generators","GeneratorParameters"];
alphaTab.audio.synth.bank.components.generators.GeneratorParameters.prototype = {
	QuickSetup: function(generator) {
		this.CurrentStart = generator.StartPhase;
		this.Phase = this.CurrentStart + generator.Offset;
		var _g = generator.LoopMode;
		switch(_g) {
		case 2:case 3:
			if(this.Phase >= generator.EndPhase) {
				this.CurrentState = 3;
			} else if(this.Phase >= generator.LoopEndPhase) {
				this.CurrentState = 2;
				this.CurrentEnd = generator.EndPhase;
			} else if(this.Phase >= generator.LoopStartPhase) {
				this.CurrentState = 1;
				this.CurrentEnd = generator.LoopEndPhase;
				this.CurrentStart = generator.LoopStartPhase;
			} else {
				this.CurrentState = 0;
				this.CurrentEnd = generator.LoopStartPhase;
			}
			break;
		default:
			this.CurrentEnd = generator.EndPhase;
			if(this.Phase >= this.CurrentEnd) {
				this.CurrentState = 3;
			} else {
				this.CurrentState = 2;
			}
		}
	}
	,__class__: alphaTab.audio.synth.bank.components.generators.GeneratorParameters
};
alphaTab.audio.synth.bank.components.Envelope = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["Envelope"] = function() {
	this._stages = null;
	this._index = 0;
	this._stage = null;
	this.Value = 0.0;
	this.CurrentStage = 0;
	this.Depth = 0.0;
	this.Value = 0;
	this.Depth = 0;
	var this1 = new Array(7);
	this._stages = this1;
	var x = 0;
	while(x < this._stages.length) {
		this._stages[x] = new alphaTab.audio.synth.bank.components.EnvelopeStage();
		this._stages[x].Graph = alphaTab.audio.synth.util.Tables.EnvelopeTables(0);
		++x;
	}
	this._stages[3].Reverse = true;
	this._stages[5].Reverse = true;
	this._stages[6].Time = 100000000;
	this.CurrentStage = 0;
	this._stage = this._stages[this.CurrentStage];
};
alphaTab.audio.synth.bank.components.Envelope.__name__ = ["alphaTab","audio","synth","bank","components","Envelope"];
alphaTab.audio.synth.bank.components.Envelope.prototype = {
	QuickSetupSf2: function(sampleRate,note,keyNumToHold,keyNumToDecay,isVolumeEnvelope,envelopeInfo) {
		this.Depth = envelopeInfo.Depth;
		this._stages[0].Offset = 0;
		this._stages[0].Scale = 0;
		this._stages[0].Time = Math.max(0,system.Convert.ToInt32_Single(sampleRate * envelopeInfo.DelayTime));
		this._stages[1].Offset = envelopeInfo.StartLevel;
		this._stages[1].Scale = envelopeInfo.PeakLevel - envelopeInfo.StartLevel;
		this._stages[1].Time = Math.max(0,system.Convert.ToInt32_Single(sampleRate * envelopeInfo.AttackTime));
		this._stages[1].Graph = alphaTab.audio.synth.util.Tables.EnvelopeTables(envelopeInfo.AttackGraph);
		this._stages[2].Offset = 0;
		this._stages[2].Scale = envelopeInfo.PeakLevel;
		var this1 = sampleRate * envelopeInfo.HoldTime * Math.pow(2,(60 - note) * keyNumToHold / 1200.0);
		this._stages[2].Time = system.Convert.ToInt32_Double(Math.max(0,this1));
		this._stages[3].Offset = envelopeInfo.SustainLevel;
		this._stages[3].Scale = envelopeInfo.PeakLevel - envelopeInfo.SustainLevel;
		if(envelopeInfo.SustainLevel == envelopeInfo.PeakLevel) {
			this._stages[3].Time = 0;
		} else {
			this._stages[3].Time = Math.max(0,system.Convert.ToInt32_Single(sampleRate * envelopeInfo.DecayTime * Math.pow(2,(60 - note) * keyNumToDecay / 1200.0)));
		}
		this._stages[3].Graph = alphaTab.audio.synth.util.Tables.EnvelopeTables(envelopeInfo.DecayGraph);
		this._stages[4].Offset = 0;
		this._stages[4].Scale = envelopeInfo.SustainLevel;
		this._stages[4].Time = system.Convert.ToInt32_Single(sampleRate * envelopeInfo.SustainTime);
		this._stages[5].Scale = this._stages[3].Time == 0 && this._stages[4].Time == 0 ? envelopeInfo.PeakLevel : this._stages[4].Scale;
		if(isVolumeEnvelope) {
			this._stages[5].Offset = -100;
			this._stages[5].Scale = this._stages[5].Scale + 100;
			this._stages[6].Scale = -100;
		} else {
			this._stages[5].Offset = 0;
			this._stages[6].Scale = 0;
		}
		this._stages[5].Time = Math.max(0,system.Convert.ToInt32_Single(sampleRate * envelopeInfo.ReleaseTime));
		this._stages[5].Graph = alphaTab.audio.synth.util.Tables.EnvelopeTables(envelopeInfo.ReleaseGraph);
		this._index = 0;
		this.Value = 0;
		this.CurrentStage = 0;
		while(this._stages[this.CurrentStage].Time == 0) this.CurrentStage++;
		this._stage = this._stages[this.CurrentStage];
	}
	,Increment: function(samples) {
		while(true) {
			var neededSamples = this._stage.Time - this._index;
			if(neededSamples > samples) {
				this._index = this._index + samples;
				samples = 0;
			} else {
				this._index = 0;
				if(this.CurrentStage != 6) {
					while(true) {
						this._stage = this._stages[++this.CurrentStage | 0];
						if(!(this._stage.Time == 0)) {
							break;
						}
					}
				}
				samples = samples - neededSamples;
			}
			if(!(samples > 0)) {
				break;
			}
		}
		var i = system.Convert.ToInt32_Double(this._stage.Graph.length * (this._index / js.Boot.__cast(this._stage.Time , Float)));
		if(this._stage.Reverse) {
			var this1 = 1;
			this.Value = (this1 - this._stage.Graph[i]) * this._stage.Scale + this._stage.Offset;
		} else {
			this.Value = this._stage.Graph[i] * this._stage.Scale + this._stage.Offset;
		}
	}
	,Release: function(lowerLimit) {
		if(this.Value <= lowerLimit) {
			this._index = 0;
			this.CurrentStage = 6;
			this._stage = this._stages[this.CurrentStage];
		} else if(this.CurrentStage < 5) {
			this._index = 0;
			this.CurrentStage = 5;
			this._stage = this._stages[this.CurrentStage];
			this._stage.Scale = this.Value;
		}
	}
	,ReleaseSf2VolumeEnvelope: function() {
		if(this.Value <= -100) {
			this._index = 0;
			this.CurrentStage = 6;
			this._stage = this._stages[this.CurrentStage];
		} else if(this.CurrentStage < 5) {
			this._index = 0;
			this.CurrentStage = 5;
			this._stage = this._stages[this.CurrentStage];
			this._stage.Offset = -100;
			this._stage.Scale = 100 + this.Value;
		}
	}
	,__class__: alphaTab.audio.synth.bank.components.Envelope
};
alphaTab.audio.synth.bank.components.EnvelopeStage = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["EnvelopeStage"] = function() {
	this.Time = 0;
	this.Graph = null;
	this.Scale = 0.0;
	this.Offset = 0.0;
	this.Reverse = false;
	this.Time = 0;
	this.Graph = null;
	this.Scale = 0;
	this.Offset = 0;
	this.Reverse = false;
};
alphaTab.audio.synth.bank.components.EnvelopeStage.__name__ = ["alphaTab","audio","synth","bank","components","EnvelopeStage"];
alphaTab.audio.synth.bank.components.EnvelopeStage.prototype = {
	__class__: alphaTab.audio.synth.bank.components.EnvelopeStage
};
alphaTab.audio.synth.util.Tables = $hx_exports["alphaTab"]["audio"]["synth"]["util"]["Tables"] = function() {
};
alphaTab.audio.synth.util.Tables.__name__ = ["alphaTab","audio","synth","util","Tables"];
alphaTab.audio.synth.util.Tables.EnvelopeTables = function(index) {
	if(!alphaTab.audio.synth.util.Tables._isInitialized) {
		alphaTab.audio.synth.util.Tables.Init();
	}
	return alphaTab.audio.synth.util.Tables._envelopeTables[index];
};
alphaTab.audio.synth.util.Tables.SemitoneTable = function(index) {
	if(!alphaTab.audio.synth.util.Tables._isInitialized) {
		alphaTab.audio.synth.util.Tables.Init();
	}
	return alphaTab.audio.synth.util.Tables._semitoneTable[index];
};
alphaTab.audio.synth.util.Tables.CentTable = function(index) {
	if(!alphaTab.audio.synth.util.Tables._isInitialized) {
		alphaTab.audio.synth.util.Tables.Init();
	}
	return alphaTab.audio.synth.util.Tables._centTable[index];
};
alphaTab.audio.synth.util.Tables.SincTable = function(index) {
	if(!alphaTab.audio.synth.util.Tables._isInitialized) {
		alphaTab.audio.synth.util.Tables.Init();
	}
	return alphaTab.audio.synth.util.Tables._sincTable[index];
};
alphaTab.audio.synth.util.Tables.Init = function() {
	var EnvelopeSize = 64;
	var ExponentialCoeff = .09;
	var this1 = new Array(4);
	alphaTab.audio.synth.util.Tables._envelopeTables = this1;
	alphaTab.audio.synth.util.Tables._envelopeTables[0] = alphaTab.audio.synth.util.Tables.RemoveDenormals(alphaTab.audio.synth.util.Tables.CreateSustainTable(EnvelopeSize));
	alphaTab.audio.synth.util.Tables._envelopeTables[1] = alphaTab.audio.synth.util.Tables.RemoveDenormals(alphaTab.audio.synth.util.Tables.CreateLinearTable(EnvelopeSize));
	alphaTab.audio.synth.util.Tables._envelopeTables[2] = alphaTab.audio.synth.util.Tables.RemoveDenormals(alphaTab.audio.synth.util.Tables.CreateExponentialTable(EnvelopeSize,ExponentialCoeff));
	alphaTab.audio.synth.util.Tables._envelopeTables[3] = alphaTab.audio.synth.util.Tables.RemoveDenormals(alphaTab.audio.synth.util.Tables.CreateSineTable(EnvelopeSize));
	alphaTab.audio.synth.util.Tables._centTable = alphaTab.audio.synth.util.Tables.CreateCentTable();
	alphaTab.audio.synth.util.Tables._semitoneTable = alphaTab.audio.synth.util.Tables.CreateSemitoneTable();
	alphaTab.audio.synth.util.Tables._sincTable = alphaTab.audio.synth.util.Tables.CreateSincTable(16,64,.43,alphaTab.audio.synth.util.Tables.HammingWindow);
	alphaTab.audio.synth.util.Tables._isInitialized = true;
};
alphaTab.audio.synth.util.Tables.CreateSquareTable = function(size,k) {
	var FourOverPi = 1.2732395447351641;
	var this1 = new Float32Array(size);
	var squaretable = this1;
	var inc = 1.0 / size;
	var phase = 0.0;
	var x = 0;
	while(x < size) {
		var value = 0.0;
		var i = 1;
		while(i < k + 1) {
			var twokminus1 = 2 * i - 1;
			value = value + Math.sin(2.0 * 3.14159265358979 * twokminus1 * phase) / twokminus1;
			++i;
		}
		squaretable[x] = alphaTab.audio.synth.util.SynthHelper.ClampF(js.Boot.__cast(FourOverPi * value , Float),-1,1);
		phase = phase + inc;
		++x;
	}
	return squaretable;
};
alphaTab.audio.synth.util.Tables.CreateCentTable = function() {
	var this1 = new Float32Array(201);
	var cents = this1;
	var x = 0;
	while(x < cents.length) {
		cents[x] = js.Boot.__cast(Math.pow(2.0,(x - 100.0) / 1200.0) , Float);
		++x;
	}
	return cents;
};
alphaTab.audio.synth.util.Tables.CreateSemitoneTable = function() {
	var this1 = new Float32Array(255);
	var table = this1;
	var x = 0;
	while(x < table.length) {
		table[x] = js.Boot.__cast(Math.pow(2.0,(x - 127.0) / 12.0) , Float);
		++x;
	}
	return table;
};
alphaTab.audio.synth.util.Tables.CreateSustainTable = function(size) {
	var this1 = new Float32Array(size);
	var table = this1;
	var x = 0;
	while(x < size) {
		table[x] = 1;
		++x;
	}
	return table;
};
alphaTab.audio.synth.util.Tables.CreateLinearTable = function(size) {
	var this1 = new Float32Array(size);
	var table = this1;
	var x = 0;
	while(x < size) {
		table[x] = x / js.Boot.__cast(size - 1 , Float);
		++x;
	}
	return table;
};
alphaTab.audio.synth.util.Tables.CreateExponentialTable = function(size,coeff) {
	coeff = alphaTab.audio.synth.util.SynthHelper.ClampF(coeff,.001,.9);
	var this1 = new Float32Array(size);
	var graph = this1;
	var val = 0.0;
	var x = 0;
	while(x < size) {
		graph[x] = js.Boot.__cast(val , Float);
		val = val + coeff * (1.58730158730158721 - val);
		++x;
	}
	var x1 = 0;
	while(x1 < size) {
		graph[x1] = graph[x1] / graph[graph.length - 1];
		++x1;
	}
	return graph;
};
alphaTab.audio.synth.util.Tables.CreateSineTable = function(size) {
	var this1 = new Float32Array(size);
	var graph = this1;
	var inc = js.Boot.__cast(4.71238898038468523 , Float) / (size - 1);
	var phase = 0.0;
	var x = 0;
	while(x < size) {
		graph[x] = js.Boot.__cast(Math.abs(Math.sin(phase)) , Float);
		phase = phase + inc;
		++x;
	}
	return graph;
};
alphaTab.audio.synth.util.Tables.RemoveDenormals = function(data) {
	var x = 0;
	while(x < data.length) {
		if(Math.abs(data[x]) < 1e-38) {
			data[x] = 0;
		}
		++x;
	}
	return data;
};
alphaTab.audio.synth.util.Tables.VonHannWindow = function(i,size) {
	return js.Boot.__cast(0.5 - 0.5 * Math.cos(2.0 * 3.14159265358979 * (0.5 + i / size)) , Float);
};
alphaTab.audio.synth.util.Tables.HammingWindow = function(i,size) {
	return js.Boot.__cast(0.54 - 0.46 * Math.cos(2.0 * 3.14159265358979 * i / size) , Float);
};
alphaTab.audio.synth.util.Tables.BlackmanWindow = function(i,size) {
	var this1 = 12.56637061435916 * i / size;
	return js.Boot.__cast(0.42659 - 0.49656 * Math.cos(2.0 * 3.14159265358979 * i / size) + 0.076849 * Math.cos(this1) , Float);
};
alphaTab.audio.synth.util.Tables.CreateSincTable = function(windowSize,resolution,cornerRatio,windowFunction) {
	var subWindow = (windowSize / 2 | 0) + 1;
	var this1 = new Float32Array(subWindow * resolution);
	var table = this1;
	var this2 = 2.0 * cornerRatio;
	var gain = this2;
	var x = 0;
	while(x < subWindow) {
		var y = 0;
		while(y < resolution) {
			var a = x + y / js.Boot.__cast(resolution , Float);
			var sinc = 2.0 * 3.14159265358979 * cornerRatio * a;
			if(Math.abs(sinc) > 0.00001) {
				sinc = Math.sin(sinc) / sinc;
			} else {
				sinc = 1.0;
			}
			var index = x * 64 + y;
			table[index] = js.Boot.__cast(gain * sinc * windowFunction(a,windowSize) , Float);
			++y;
		}
		++x;
	}
	return table;
};
alphaTab.audio.synth.util.Tables.prototype = {
	__class__: alphaTab.audio.synth.util.Tables
};
alphaTab.audio.synth.bank.components.Filter = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["Filter"] = function() {
	this._a1 = 0.0;
	this._a2 = 0.0;
	this._b1 = 0.0;
	this._b2 = 0.0;
	this._m1 = 0.0;
	this._m2 = 0.0;
	this._m3 = 0.0;
	this._cutOff = 0.0;
	this._resonance = 0.0;
	this.FilterMethod = 0;
	this.CoeffNeedsUpdating = false;
	this._a1 = 0;
	this._a2 = 0;
	this._b1 = 0;
	this._b2 = 0;
	this._m1 = 0;
	this._m2 = 0;
	this._m3 = 0;
	this.FilterMethod = 0;
	this.set_CutOff(0);
	this.set_Resonance(0);
};
alphaTab.audio.synth.bank.components.Filter.__name__ = ["alphaTab","audio","synth","bank","components","Filter"];
alphaTab.audio.synth.bank.components.Filter.prototype = {
	get_CutOff: function() {
		return this._cutOff;
	}
	,set_CutOff: function(value) {
		this._cutOff = value;
		this.CoeffNeedsUpdating = true;
		return this.get_CutOff();
	}
	,get_Resonance: function() {
		return this._resonance;
	}
	,set_Resonance: function(value) {
		this._resonance = value;
		this.CoeffNeedsUpdating = true;
		return this.get_Resonance();
	}
	,get_Enabled: function() {
		return this.FilterMethod != 0;
	}
	,Disable: function() {
		this.FilterMethod = 0;
	}
	,QuickSetup: function(sampleRate,note,velocity,filterInfo) {
		this.CoeffNeedsUpdating = false;
		var this1 = filterInfo.CutOff;
		this.set_CutOff(this1);
		var this2 = filterInfo.Resonance;
		this.set_Resonance(this2);
		this.FilterMethod = filterInfo.FilterMethod;
		this._a1 = 0;
		this._a2 = 0;
		this._b1 = 0;
		this._b2 = 0;
		this._m1 = 0;
		this._m2 = 0;
		this._m3 = 0;
		if(this.get_CutOff() <= 0 || this.get_Resonance() <= 0) {
			this.FilterMethod = 0;
		}
		if(this.FilterMethod != 0) {
			this.set_CutOff(this.get_CutOff() * alphaTab.audio.synth.util.SynthHelper.CentsToPitch((note - filterInfo.RootKey) * filterInfo.KeyTrack + system.Convert.ToInt32_Single(velocity * filterInfo.VelTrack)));
			this.UpdateCoefficients(sampleRate);
		}
	}
	,ApplyFilter_Single: function(sample) {
		var _g = this.FilterMethod;
		switch(_g) {
		case 1:case 2:
			this._m3 = sample - this._a1 * this._m1 - this._a2 * this._m2;
			sample = this._b2 * (this._m3 + this._m2) + this._b1 * this._m1;
			this._m2 = this._m1;
			this._m1 = this._m3;
			return sample;
		case 3:
			this._m1 = this._m1 + this._a1 * (sample - this._m1);
			return this._m1;
		default:
			return 0;
		}
	}
	,ApplyFilter_SampleArray: function(data) {
		var _g = this.FilterMethod;
		switch(_g) {
		case 1:case 2:
			var x = 0;
			while(x < data.length) {
				this._m3 = data[x] - this._a1 * this._m1 - this._a2 * this._m2;
				data[x] = this._b2 * (this._m3 + this._m2) + this._b1 * this._m1;
				this._m2 = this._m1;
				this._m1 = this._m3;
				++x;
			}
			break;
		case 3:
			var x1 = 0;
			while(x1 < data.length) {
				this._m1 = this._m1 + this._a1 * (data[x1] - this._m1);
				data[x1] = this._m1;
				++x1;
			}
			break;
		default:
		}
	}
	,ApplyFilterInterp: function(data,sampleRate) {
		var ic = this.GenerateFilterCoeff(this.get_CutOff() / sampleRate,this.get_Resonance());
		var a1_inc = (ic[0] - this._a1) / data.length;
		var a2_inc = (ic[1] - this._a2) / data.length;
		var b1_inc = (ic[2] - this._b1) / data.length;
		var b2_inc = (ic[3] - this._b2) / data.length;
		var _g = this.FilterMethod;
		switch(_g) {
		case 1:case 2:
			var x = 0;
			while(x < data.length) {
				this._a1 = this._a1 + a1_inc;
				this._a2 = this._a2 + a2_inc;
				this._b1 = this._b1 + b1_inc;
				this._b2 = this._b2 + b2_inc;
				this._m3 = data[x] - this._a1 * this._m1 - this._a2 * this._m2;
				data[x] = this._b2 * (this._m3 + this._m2) + this._b1 * this._m1;
				this._m2 = this._m1;
				this._m1 = this._m3;
				++x;
			}
			this._a1 = ic[0];
			this._a2 = ic[1];
			this._b1 = ic[2];
			this._b2 = ic[3];
			break;
		case 3:
			var x1 = 0;
			while(x1 < data.length) {
				this._a1 = this._a1 + a1_inc;
				this._m1 = this._m1 + this._a1 * (data[x1] - this._m1);
				data[x1] = this._m1;
				++x1;
			}
			this._a1 = ic[0];
			break;
		default:
		}
		this.CoeffNeedsUpdating = false;
	}
	,UpdateCoefficients: function(sampleRate) {
		var coeff = this.GenerateFilterCoeff(this.get_CutOff() / sampleRate,this.get_Resonance());
		this._a1 = coeff[0];
		this._a2 = coeff[1];
		this._b1 = coeff[2];
		this._b2 = coeff[3];
		this.CoeffNeedsUpdating = false;
	}
	,GenerateFilterCoeff: function(fc,q) {
		fc = alphaTab.audio.synth.util.SynthHelper.ClampD(fc,1e-38,.49);
		var this1 = new Float32Array(4);
		var coeff = this1;
		var _g = this.FilterMethod;
		switch(_g) {
		case 1:
			var w0 = 2.0 * 3.14159265358979 * fc;
			var cosw0 = Math.cos(w0);
			var alpha = Math.sin(w0) / (2.0 * q);
			var a0inv = 1.0 / (1.0 + alpha);
			coeff[0] = js.Boot.__cast(-2.0 * cosw0 * a0inv , Float);
			coeff[1] = js.Boot.__cast((1.0 - alpha) * a0inv , Float);
			coeff[2] = js.Boot.__cast((1.0 - cosw0) * a0inv * (1.0 / Math.sqrt(q)) , Float);
			var this2 = 0.5;
			coeff[3] = this._b1 * this2;
			break;
		case 2:
			var w01 = 2.0 * 3.14159265358979 * fc;
			var cosw01 = Math.cos(w01);
			var alpha1 = Math.sin(w01) / (2.0 * q);
			var a0inv1 = 1.0 / (1.0 + alpha1);
			var qinv = 1.0 / Math.sqrt(q);
			coeff[0] = js.Boot.__cast(-2.0 * cosw01 * a0inv1 , Float);
			coeff[1] = js.Boot.__cast((1.0 - alpha1) * a0inv1 , Float);
			coeff[2] = js.Boot.__cast((-1.0 - cosw01) * a0inv1 * qinv , Float);
			coeff[3] = js.Boot.__cast((1.0 + cosw01) * a0inv1 * qinv * 0.5 , Float);
			break;
		case 3:
			var this3 = 1.0;
			coeff[0] = this3 - js.Boot.__cast(Math.exp(-6.28318530717958 * fc) , Float);
			break;
		default:
		}
		return coeff;
	}
	,__class__: alphaTab.audio.synth.bank.components.Filter
};
alphaTab.audio.synth.bank.components.Lfo = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["Lfo"] = function() {
	this._phase = 0.0;
	this._increment = 0.0;
	this._delayTime = 0;
	this._generator = null;
	this.Frequency = 0.0;
	this.CurrentState = 0;
	this.Value = 0.0;
	this.Depth = 0.0;
	this.CurrentState = 0;
	this._generator = alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSine;
	this._delayTime = 0;
	this._increment = 0;
	this._phase = 0;
	this.Frequency = 0;
	this.CurrentState = 0;
	this.Value = 0;
	this.Depth = 0;
};
alphaTab.audio.synth.bank.components.Lfo.__name__ = ["alphaTab","audio","synth","bank","components","Lfo"];
alphaTab.audio.synth.bank.components.Lfo.prototype = {
	QuickSetup: function(sampleRate,lfoInfo) {
		this._generator = lfoInfo.Generator;
		this._delayTime = system.Convert.ToInt32_Single(sampleRate * lfoInfo.DelayTime);
		this.Frequency = lfoInfo.Frequency;
		this._increment = this._generator.Period * this.Frequency / sampleRate;
		var this1 = lfoInfo.Depth;
		this.Depth = this1;
		this.Reset();
	}
	,Increment: function(amount) {
		if(this.CurrentState == 0) {
			this._phase = this._phase - amount;
			if(this._phase <= 0.0) {
				this._phase = this._generator.LoopStartPhase + this._increment * -this._phase;
				var this1 = this._generator.GetValue(this._phase);
				this.Value = this1;
				this.CurrentState = 1;
			}
		} else {
			this._phase = this._phase + this._increment * amount;
			if(this._phase >= this._generator.LoopEndPhase) {
				this._phase = this._generator.LoopStartPhase + (this._phase - this._generator.LoopEndPhase) % (this._generator.LoopEndPhase - this._generator.LoopStartPhase);
			}
			var this2 = this._generator.GetValue(this._phase);
			this.Value = this2;
		}
	}
	,Reset: function() {
		this.Value = 0;
		if(this._delayTime > 0) {
			var this1 = this._delayTime;
			this._phase = this1;
			this.CurrentState = 0;
		} else {
			this._phase = 0.0;
			this.CurrentState = 1;
		}
	}
	,__class__: alphaTab.audio.synth.bank.components.Lfo
};
alphaTab.audio.synth.bank.descriptors = {};
alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["descriptors"]["GeneratorDescriptor"] = function() {
	this.LoopMethod = 0;
	this.SamplerType = 0;
	this.AssetName = null;
	this.EndPhase = 0.0;
	this.StartPhase = 0.0;
	this.LoopEndPhase = 0.0;
	this.LoopStartPhase = 0.0;
	this.Offset = 0.0;
	this.Period = 0.0;
	this.RootKey = 0;
	this.KeyTrack = 0;
	this.VelTrack = 0;
	this.Tune = 0;
	this.LoopMethod = 0;
	this.SamplerType = 0;
	this.AssetName = "null";
	this.EndPhase = -1;
	this.StartPhase = -1;
	this.LoopEndPhase = -1;
	this.LoopStartPhase = -1;
	this.Offset = 0;
	this.Period = -1;
	this.RootKey = -1 | 0;
	this.KeyTrack = 100;
	this.VelTrack = 0;
	this.Tune = 0;
};
alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor.__name__ = ["alphaTab","audio","synth","bank","descriptors","GeneratorDescriptor"];
alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor.prototype = {
	__class__: alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor
};
alphaTab.audio.synth.bank.components.generators.Generator = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["Generator"] = function(description) {
	this.LoopMode = 0;
	this.LoopStartPhase = 0.0;
	this.LoopEndPhase = 0.0;
	this.StartPhase = 0.0;
	this.EndPhase = 0.0;
	this.Offset = 0.0;
	this.Period = 0.0;
	this.Frequency = 0.0;
	this.RootKey = 0;
	this.KeyTrack = 0;
	this.VelocityTrack = 0;
	this.Tune = 0;
	this.LoopMode = description.LoopMethod;
	this.LoopStartPhase = description.LoopStartPhase;
	this.LoopEndPhase = description.LoopEndPhase;
	this.StartPhase = description.StartPhase;
	this.EndPhase = description.EndPhase;
	this.Offset = description.Offset;
	this.Period = description.Period;
	this.Frequency = 0;
	this.RootKey = description.RootKey;
	this.KeyTrack = description.KeyTrack;
	this.VelocityTrack = description.VelTrack;
	this.Tune = description.Tune;
};
alphaTab.audio.synth.bank.components.generators.Generator.__name__ = ["alphaTab","audio","synth","bank","components","generators","Generator"];
alphaTab.audio.synth.bank.components.generators.Generator.prototype = {
	Release: function(generatorParams) {
		if(this.LoopMode == 3) {
			generatorParams.CurrentState = 2;
			generatorParams.CurrentStart = this.StartPhase;
			generatorParams.CurrentEnd = this.EndPhase;
		}
	}
	,GetValue: function(phase) {
		throw new js._Boot.HaxeError("abstract");
	}
	,GetValues: function(generatorParams,blockBuffer,increment) {
		var proccessed = 0;
		while(true) {
			var samplesAvailable = system.Convert.ToInt32_Double(Math.ceil((generatorParams.CurrentEnd - generatorParams.Phase) / increment));
			if(samplesAvailable > blockBuffer.length - proccessed) {
				while(proccessed < blockBuffer.length) {
					var index = proccessed++;
					blockBuffer[index] = this.GetValue(generatorParams.Phase);
					generatorParams.Phase = generatorParams.Phase + increment;
				}
			} else {
				var endProccessed = proccessed + samplesAvailable;
				while(proccessed < endProccessed) {
					var index1 = proccessed++;
					blockBuffer[index1] = this.GetValue(generatorParams.Phase);
					generatorParams.Phase = generatorParams.Phase + increment;
				}
				var _g = generatorParams.CurrentState;
				switch(_g) {
				case 0:
					generatorParams.CurrentStart = this.LoopStartPhase;
					generatorParams.CurrentEnd = this.LoopEndPhase;
					generatorParams.CurrentState = 1;
					break;
				case 1:
					generatorParams.Phase = generatorParams.Phase + (generatorParams.CurrentStart - generatorParams.CurrentEnd);
					break;
				case 2:
					generatorParams.CurrentState = 3;
					while(proccessed < blockBuffer.length) {
						var index2 = proccessed++;
						blockBuffer[index2] = 0;
					}
					break;
				default:
				}
			}
			if(!(proccessed < blockBuffer.length)) {
				break;
			}
		}
	}
	,__class__: alphaTab.audio.synth.bank.components.generators.Generator
};
alphaTab.audio.synth.bank.components.generators.SawGenerator = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["SawGenerator"] = function(description) {
	alphaTab.audio.synth.bank.components.generators.Generator.call(this,description);
	if(this.EndPhase < 0) {
		this.EndPhase = 1;
	}
	if(this.StartPhase < 0) {
		this.StartPhase = 0;
	}
	if(this.LoopEndPhase < 0) {
		this.LoopEndPhase = this.EndPhase;
	}
	if(this.LoopStartPhase < 0) {
		this.LoopStartPhase = this.StartPhase;
	}
	if(this.Period < 0) {
		this.Period = 1;
	}
	if(this.RootKey < 0) {
		this.RootKey = 69;
	}
	this.Frequency = 440;
};
alphaTab.audio.synth.bank.components.generators.SawGenerator.__name__ = ["alphaTab","audio","synth","bank","components","generators","SawGenerator"];
alphaTab.audio.synth.bank.components.generators.SawGenerator.__super__ = alphaTab.audio.synth.bank.components.generators.Generator;
alphaTab.audio.synth.bank.components.generators.SawGenerator.prototype = $extend(alphaTab.audio.synth.bank.components.generators.Generator.prototype,{
	GetValue: function(phase) {
		return js.Boot.__cast(2.0 * (phase - Math.floor(phase + 0.5)) , Float);
	}
	,__class__: alphaTab.audio.synth.bank.components.generators.SawGenerator
});
alphaTab.audio.synth.bank.components.generators.SineGenerator = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["SineGenerator"] = function(description) {
	alphaTab.audio.synth.bank.components.generators.Generator.call(this,description);
	if(this.EndPhase < 0) {
		this.EndPhase = 2.0 * 3.14159265358979;
	}
	if(this.StartPhase < 0) {
		this.StartPhase = 0;
	}
	if(this.LoopEndPhase < 0) {
		this.LoopEndPhase = this.EndPhase;
	}
	if(this.LoopStartPhase < 0) {
		this.LoopStartPhase = this.StartPhase;
	}
	if(this.Period < 0) {
		this.Period = 2.0 * 3.14159265358979;
	}
	if(this.RootKey < 0) {
		this.RootKey = 69;
	}
	this.Frequency = 440;
};
alphaTab.audio.synth.bank.components.generators.SineGenerator.__name__ = ["alphaTab","audio","synth","bank","components","generators","SineGenerator"];
alphaTab.audio.synth.bank.components.generators.SineGenerator.__super__ = alphaTab.audio.synth.bank.components.generators.Generator;
alphaTab.audio.synth.bank.components.generators.SineGenerator.prototype = $extend(alphaTab.audio.synth.bank.components.generators.Generator.prototype,{
	GetValue: function(phase) {
		return js.Boot.__cast(Math.sin(phase) , Float);
	}
	,__class__: alphaTab.audio.synth.bank.components.generators.SineGenerator
});
alphaTab.audio.synth.bank.components.generators.SquareGenerator = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["SquareGenerator"] = function(description) {
	alphaTab.audio.synth.bank.components.generators.Generator.call(this,description);
	if(this.EndPhase < 0) {
		this.EndPhase = 2.0 * 3.14159265358979;
	}
	if(this.StartPhase < 0) {
		this.StartPhase = 0;
	}
	if(this.LoopEndPhase < 0) {
		this.LoopEndPhase = this.EndPhase;
	}
	if(this.LoopStartPhase < 0) {
		this.LoopStartPhase = this.StartPhase;
	}
	if(this.Period < 0) {
		this.Period = 2.0 * 3.14159265358979;
	}
	if(this.RootKey < 0) {
		this.RootKey = 69;
	}
	this.Frequency = 440;
};
alphaTab.audio.synth.bank.components.generators.SquareGenerator.__name__ = ["alphaTab","audio","synth","bank","components","generators","SquareGenerator"];
alphaTab.audio.synth.bank.components.generators.SquareGenerator.__super__ = alphaTab.audio.synth.bank.components.generators.Generator;
alphaTab.audio.synth.bank.components.generators.SquareGenerator.prototype = $extend(alphaTab.audio.synth.bank.components.generators.Generator.prototype,{
	GetValue: function(phase) {
		var v = Math.sin(phase);
		var this1 = v < 0 ? -1 : v > 0 ? 1 : 0;
		return this1;
	}
	,__class__: alphaTab.audio.synth.bank.components.generators.SquareGenerator
});
alphaTab.audio.synth.bank.components.generators.TriangleGenerator = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["TriangleGenerator"] = function(description) {
	alphaTab.audio.synth.bank.components.generators.Generator.call(this,description);
	if(this.EndPhase < 0) {
		this.EndPhase = 1.25;
	}
	if(this.StartPhase < 0) {
		this.StartPhase = 0.25;
	}
	if(this.LoopEndPhase < 0) {
		this.LoopEndPhase = this.EndPhase;
	}
	if(this.LoopStartPhase < 0) {
		this.LoopStartPhase = this.StartPhase;
	}
	if(this.Period < 0) {
		this.Period = 1;
	}
	if(this.RootKey < 0) {
		this.RootKey = 69;
	}
	this.Frequency = 440;
};
alphaTab.audio.synth.bank.components.generators.TriangleGenerator.__name__ = ["alphaTab","audio","synth","bank","components","generators","TriangleGenerator"];
alphaTab.audio.synth.bank.components.generators.TriangleGenerator.__super__ = alphaTab.audio.synth.bank.components.generators.Generator;
alphaTab.audio.synth.bank.components.generators.TriangleGenerator.prototype = $extend(alphaTab.audio.synth.bank.components.generators.Generator.prototype,{
	GetValue: function(phase) {
		return js.Boot.__cast(Math.abs(phase - Math.floor(phase + 0.5)) * 4.0 - 1.0 , Float);
	}
	,__class__: alphaTab.audio.synth.bank.components.generators.TriangleGenerator
});
alphaTab.audio.synth.bank.components.generators.DefaultGenerators = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["DefaultGenerators"] = function() {
};
alphaTab.audio.synth.bank.components.generators.DefaultGenerators.__name__ = ["alphaTab","audio","synth","bank","components","generators","DefaultGenerators"];
alphaTab.audio.synth.bank.components.generators.DefaultGenerators.prototype = {
	__class__: alphaTab.audio.synth.bank.components.generators.DefaultGenerators
};
alphaTab.audio.synth.synthesis.VoiceNode = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["VoiceNode"] = function() {
};
alphaTab.audio.synth.synthesis.VoiceNode.__name__ = ["alphaTab","audio","synth","synthesis","VoiceNode"];
alphaTab.audio.synth.synthesis.VoiceNode.prototype = {
	__class__: alphaTab.audio.synth.synthesis.VoiceNode
};
alphaTab.audio.synth.MidiFileSequencer = $hx_exports["alphaTab"]["audio"]["synth"]["MidiFileSequencer"] = function(synthesizer) {
	this._synthesizer = null;
	this._tempoChanges = null;
	this._firstProgramEventPerChannel = null;
	this._synthData = null;
	this._division = 0;
	this._eventIndex = 0;
	this._currentTime = 0.0;
	this._playbackRange = null;
	this._playbackRangeStartTime = 0.0;
	this._playbackRangeEndTime = 0.0;
	this._endTime = 0.0;
	this.IsLooping = false;
	this.EndTick = 0;
	this.PlaybackSpeed = 0.0;
	this._synthesizer = synthesizer;
	var this1 = {}
	this._firstProgramEventPerChannel = this1;
	var this2 = [];
	this._tempoChanges = this2;
	this.PlaybackSpeed = 1;
};
alphaTab.audio.synth.MidiFileSequencer.__name__ = ["alphaTab","audio","synth","MidiFileSequencer"];
alphaTab.audio.synth.MidiFileSequencer.prototype = {
	get_PlaybackRange: function() {
		return this._playbackRange;
	}
	,set_PlaybackRange: function(value) {
		this._playbackRange = value;
		if(value != null) {
			this._playbackRangeStartTime = this.TickPositionToTimePositionWithSpeed(value.StartTick,1);
			this._playbackRangeEndTime = this.TickPositionToTimePositionWithSpeed(value.EndTick,1);
		}
		return this.get_PlaybackRange();
	}
	,get_EndTime: function() {
		return this._endTime / this.PlaybackSpeed;
	}
	,Seek: function(timePosition) {
		if(timePosition < 0) {
			timePosition = 0;
		}
		timePosition = timePosition * this.PlaybackSpeed;
		if(this.get_PlaybackRange() != null) {
			if(timePosition < this._playbackRangeStartTime) {
				timePosition = this._playbackRangeStartTime;
			} else if(timePosition > this._playbackRangeEndTime) {
				timePosition = this._playbackRangeEndTime;
			}
		}
		if(timePosition > this._currentTime) {
			this.SilentProcess(timePosition - this._currentTime);
		} else if(timePosition < this._currentTime) {
			this._currentTime = 0;
			this._eventIndex = 0;
			this._synthesizer.NoteOffAll(true);
			this._synthesizer.ResetPrograms();
			this._synthesizer.ResetSynthControls();
			this.SilentProcess(timePosition);
		}
	}
	,SilentProcess: function(milliseconds) {
		if(milliseconds <= 0) {
			return;
		}
		this._currentTime = this._currentTime + milliseconds;
		while(this._eventIndex < this._synthData.length && this._synthData[this._eventIndex].Time < this._currentTime) {
			var m = this._synthData[this._eventIndex];
			if(!m.IsMetronome) {
				this._synthesizer.ProcessMidiMessage(m.Event);
			}
			this._eventIndex++;
		}
	}
	,LoadMidi: function(midiFile) {
		var this1 = [];
		this._tempoChanges = this1;
		this._division = midiFile.Division;
		this._eventIndex = 0;
		this._currentTime = 0;
		var this2 = [];
		this._synthData = this2;
		var bpm = 120;
		var absTick = 0;
		var absTime = 0.0;
		var metronomeLength = 0;
		var metronomeTick = 0;
		var metronomeTime = 0.0;
		var mEvent = $iterator(midiFile.Events)();
		while(mEvent.hasNext()) {
			var mEvent1 = mEvent.next();
			var synthData = new alphaTab.audio.synth.synthesis.SynthEvent(this._synthData.length,mEvent1);
			this._synthData.push(synthData);
			absTick = mEvent1.Tick;
			absTime = mEvent1.Tick * (60000.0 / (bpm * midiFile.Division));
			synthData.Time = absTime;
			if(mEvent1.get_Command() == 255 && mEvent1.get_Data1() == 81) {
				var meta = js.Boot.__cast(mEvent1 , alphaTab.audio.synth.midi.event.MetaNumberEvent);
				bpm = 60000000 / js.Boot.__cast(meta.Value , Float);
				this._tempoChanges.push(new alphaTab.audio.synth.MidiFileSequencerTempoChange(bpm,absTick,system.Convert.ToInt32_Double(absTime)));
			} else if(mEvent1.get_Command() == 255 && mEvent1.get_Data1() == 88) {
				var meta1 = js.Boot.__cast(mEvent1 , alphaTab.audio.synth.midi.event.MetaDataEvent);
				var this3 = meta1.Data[1];
				var timeSignatureDenominator = system.Convert.ToInt32_Double(Math.pow(2,this3));
				metronomeLength = system.Convert.ToInt32_Double(this._division * (4.0 / timeSignatureDenominator));
			} else if(mEvent1.get_Command() == 192) {
				var channel = mEvent1.get_Channel();
				if(!this._firstProgramEventPerChannel.hasOwnProperty(channel)) {
					this._firstProgramEventPerChannel[channel] = synthData;
				}
			}
			if(metronomeLength > 0) {
				while(metronomeTick < absTick) {
					var metronome = alphaTab.audio.synth.synthesis.SynthEvent.NewMetronomeEvent(this._synthData.length,metronomeLength);
					this._synthData.push(metronome);
					metronome.Time = metronomeTime;
					metronomeTick = metronomeTick + metronomeLength;
					metronomeTime = metronomeTime + metronomeLength * (60000.0 / (bpm * midiFile.Division));
				}
			}
		}
		var comparison = function(a,b) {
			if(a.Time > b.Time) {
				return 1;
			} else if(a.Time < b.Time) {
				return -1;
			}
			return a.EventIndex - b.EventIndex;
		};
		this._synthData.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
		this._endTime = absTime;
		this.EndTick = absTick;
	}
	,FillMidiEventQueue: function() {
		var millisecondsPerBuffer = this._synthesizer.MicroBufferSize / js.Boot.__cast(this._synthesizer.SampleRate , Float) * 1000 * this.PlaybackSpeed;
		var i = 0;
		while(i < this._synthesizer.MicroBufferCount) {
			this._currentTime = this._currentTime + millisecondsPerBuffer;
			while(this._eventIndex < this._synthData.length && this._synthData[this._eventIndex].Time < this._currentTime) {
				this._synthesizer.DispatchEvent(i,this._synthData[this._eventIndex]);
				this._eventIndex++;
			}
			++i;
		}
	}
	,TickPositionToTimePosition: function(tickPosition) {
		return this.TickPositionToTimePositionWithSpeed(tickPosition,this.PlaybackSpeed);
	}
	,TimePositionToTickPosition: function(timePosition) {
		return this.TimePositionToTickPositionWithSpeed(timePosition,this.PlaybackSpeed);
	}
	,TickPositionToTimePositionWithSpeed: function(tickPosition,playbackSpeed) {
		var timePosition = 0.0;
		var bpm = 120.0;
		var lastChange = 0;
		var i = 0;
		while(i < this._tempoChanges.length) {
			var c = this._tempoChanges[i];
			if(tickPosition < c.Ticks) {
				break;
			}
			var this1 = c.Time;
			timePosition = this1;
			bpm = c.Bpm;
			lastChange = c.Ticks;
			++i;
		}
		tickPosition = tickPosition - lastChange;
		timePosition = timePosition + tickPosition * (60000.0 / (bpm * this._division));
		return timePosition / playbackSpeed;
	}
	,TimePositionToTickPositionWithSpeed: function(timePosition,playbackSpeed) {
		timePosition = timePosition * playbackSpeed;
		var ticks = 0;
		var bpm = 120.0;
		var lastChange = 0;
		var i = 0;
		while(i < this._tempoChanges.length) {
			var c = this._tempoChanges[i];
			if(timePosition < c.Time) {
				break;
			}
			ticks = c.Ticks;
			bpm = c.Bpm;
			lastChange = c.Time;
			++i;
		}
		timePosition = timePosition - lastChange;
		ticks = ticks + system.Convert.ToInt32_Double(timePosition / (60000.0 / (bpm * this._division)));
		return ticks + 1;
	}
	,OnFinished: function() {
		var _e = this.Finished;
		var finished = function() {
			system._EventAction.EventAction_Impl_.Invoke(_e);
		};
		if(finished != null) {
			finished();
		}
	}
	,CheckForStop: function() {
		if(this.get_PlaybackRange() == null && this._currentTime >= this._endTime) {
			this._currentTime = 0;
			this._eventIndex = 0;
			this._synthesizer.NoteOffAll(true);
			this._synthesizer.ResetPrograms();
			this._synthesizer.ResetSynthControls();
			this.OnFinished();
		} else if(this.get_PlaybackRange() != null && this._currentTime >= this._playbackRangeEndTime) {
			var this1 = this.get_PlaybackRange().StartTick;
			this._currentTime = this1;
			this._eventIndex = 0;
			this._synthesizer.NoteOffAll(true);
			this._synthesizer.ResetPrograms();
			this._synthesizer.ResetSynthControls();
			this.OnFinished();
		}
	}
	,SetChannelProgram: function(channel,program) {
		if(this._firstProgramEventPerChannel.hasOwnProperty(channel)) {
			this._firstProgramEventPerChannel[channel].Event.set_Data1(program);
		}
	}
	,__class__: alphaTab.audio.synth.MidiFileSequencer
};
alphaTab.rendering = {};
alphaTab.rendering.layout = {};
alphaTab.rendering.layout.ScoreLayout = $hx_exports["alphaTab"]["rendering"]["layout"]["ScoreLayout"] = function(renderer) {
	this._barRendererLookup = null;
	this.Renderer = null;
	this.Width = 0.0;
	this.Height = 0.0;
	this.ScoreInfoGlyphs = null;
	this.TuningGlyph = null;
	this.Renderer = renderer;
	var this1 = {}
	this._barRendererLookup = this1;
};
alphaTab.rendering.layout.ScoreLayout.__name__ = ["alphaTab","rendering","layout","ScoreLayout"];
alphaTab.rendering.layout.ScoreLayout.prototype = {
	get_Name: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_SupportsResize: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,Resize: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,LayoutAndRender: function() {
		this.CreateScoreInfoGlyphs();
		this.DoLayoutAndRender();
	}
	,DoLayoutAndRender: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,CreateScoreInfoGlyphs: function() {
		alphaTab.util.Logger.Info("ScoreLayout","Creating score info glyphs",null);
		var flags = this.Renderer.Settings.Layout.Get("hideInfo",false) ? 0 : 511;
		var score = this.Renderer.Score;
		var res = this.Renderer.RenderingResources;
		var this1 = {}
		this.ScoreInfoGlyphs = this1;
		var tmp;
		var s = score.Title;
		if(!(s == null || s.length == 0)) {
			tmp = (flags & 1) != 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.ScoreInfoGlyphs[1] = new alphaTab.rendering.glyphs.TextGlyph(0,0,score.Title,res.TitleFont,1);
		}
		var tmp1;
		var s1 = score.SubTitle;
		if(!(s1 == null || s1.length == 0)) {
			tmp1 = (flags & 2) != 0;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			this.ScoreInfoGlyphs[2] = new alphaTab.rendering.glyphs.TextGlyph(0,0,score.SubTitle,res.SubTitleFont,1);
		}
		var tmp2;
		var s2 = score.Artist;
		if(!(s2 == null || s2.length == 0)) {
			tmp2 = (flags & 4) != 0;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			this.ScoreInfoGlyphs[4] = new alphaTab.rendering.glyphs.TextGlyph(0,0,score.Artist,res.SubTitleFont,1);
		}
		var tmp3;
		var s3 = score.Album;
		if(!(s3 == null || s3.length == 0)) {
			tmp3 = (flags & 8) != 0;
		} else {
			tmp3 = false;
		}
		if(tmp3) {
			this.ScoreInfoGlyphs[8] = new alphaTab.rendering.glyphs.TextGlyph(0,0,score.Album,res.SubTitleFont,1);
		}
		var tmp4;
		var tmp5;
		var s4 = score.Music;
		if(!(s4 == null || s4.length == 0)) {
			tmp5 = score.Music == score.Words;
		} else {
			tmp5 = false;
		}
		if(tmp5) {
			tmp4 = (flags & 64) != 0;
		} else {
			tmp4 = false;
		}
		if(tmp4) {
			this.ScoreInfoGlyphs[64] = new alphaTab.rendering.glyphs.TextGlyph(0,0,"Music and Words by " + score.Words,res.WordsFont,1);
		} else {
			var tmp6;
			var s5 = score.Music;
			if(!(s5 == null || s5.length == 0)) {
				tmp6 = (flags & 32) != 0;
			} else {
				tmp6 = false;
			}
			if(tmp6) {
				this.ScoreInfoGlyphs[32] = new alphaTab.rendering.glyphs.TextGlyph(0,0,"Music by " + score.Music,res.WordsFont,2);
			}
			var tmp7;
			var s6 = score.Words;
			if(!(s6 == null || s6.length == 0)) {
				tmp7 = (flags & 16) != 0;
			} else {
				tmp7 = false;
			}
			if(tmp7) {
				this.ScoreInfoGlyphs[16] = new alphaTab.rendering.glyphs.TextGlyph(0,0,"Words by " + score.Words,res.WordsFont,0);
			}
		}
		if(!this.Renderer.Settings.Layout.Get("hideTuning",false)) {
			var staffWithTuning = null;
			var track = HxOverrides.iter(this.Renderer.Tracks);
			while(track.hasNext()) {
				var track1 = track.next();
				var staff = $iterator(track1.Staves)();
				while(staff.hasNext()) {
					var staff1 = staff.next();
					if(staff1.StaffKind != 2 && staff1.get_IsStringed() && staff1.Tuning.length > 0) {
						staffWithTuning = staff1;
						break;
					}
				}
				if(staffWithTuning != null) {
					break;
				}
			}
			if(staffWithTuning != null) {
				var tuning = alphaTab.model.Tuning.FindTuning(staffWithTuning.Tuning);
				if(tuning != null) {
					this.TuningGlyph = new alphaTab.rendering.glyphs.TuningGlyph(0,0,this.get_Scale(),this.Renderer.RenderingResources,tuning);
				}
			}
		}
	}
	,get_Scale: function() {
		return this.Renderer.Settings.Scale;
	}
	,CreateEmptyStaveGroup: function() {
		var group = new alphaTab.rendering.staves.StaveGroup();
		group.Layout = this;
		var trackIndex = 0;
		while(trackIndex < this.Renderer.Tracks.length) {
			var track = this.Renderer.Tracks[trackIndex];
			var hasScore = false;
			var hasTab = false;
			var staff = $iterator(track.Staves)();
			while(staff.hasNext()) {
				var staff1 = staff.next();
				var _g = staff1.StaffKind;
				switch(_g) {
				case 0:
					hasTab = true;
					break;
				case 1:
					hasScore = true;
					break;
				case 2:
					break;
				case 3:
					hasScore = true;
					hasTab = true;
					break;
				default:
				}
			}
			var staffIndex = 0;
			while(staffIndex < track.Staves.length) {
				var staff2 = track.Staves[staffIndex];
				var staveProfile;
				if(staff2.StaffKind == 2) {
					staveProfile = "score";
				} else if(staff2.StaffKind == 0) {
					if(hasScore) {
						staveProfile = "tab-mixed";
					} else {
						staveProfile = "tab";
					}
				} else if(staff2.get_IsStringed()) {
					staveProfile = this.Renderer.Settings.Staves.Id;
				} else {
					staveProfile = "score";
				}
				var profile = alphaTab.Environment.StaveProfiles.hasOwnProperty(staveProfile) ? alphaTab.Environment.StaveProfiles[staveProfile] : alphaTab.Environment.StaveProfiles["default"];
				var factory = HxOverrides.iter(profile);
				while(factory.hasNext()) {
					var factory1 = factory.next();
					if(factory1.CanCreate(track,staff2)) {
						group.AddStaff(track,new alphaTab.rendering.staves.Staff(trackIndex,staff2,factory1));
					}
				}
				++staffIndex;
			}
			++trackIndex;
		}
		return group;
	}
	,RegisterBarRenderer: function(key,renderer) {
		if(!this._barRendererLookup.hasOwnProperty(key)) {
			var this1 = this._barRendererLookup;
			var this2 = {}
			this1[key] = this2;
		}
		this._barRendererLookup[key][renderer.Bar.Id] = renderer;
	}
	,UnregisterBarRenderer: function(key,renderer) {
		if(this._barRendererLookup.hasOwnProperty(key)) {
			var lookup = this._barRendererLookup[key];
			var key1 = renderer.Bar.Id;
			delete lookup[key1];
		}
	}
	,GetRendererForBar: function(key,bar) {
		var barRendererId = bar.Id;
		if(this._barRendererLookup.hasOwnProperty(key) && this._barRendererLookup[key].hasOwnProperty(barRendererId)) {
			return this._barRendererLookup[key][barRendererId];
		}
		return null;
	}
	,RenderAnnotation: function() {
		var _gthis = this;
		var msg = "Rendered using alphaTab (http://www.alphaTab.net)";
		var canvas = this.Renderer.Canvas;
		var resources = this.Renderer.RenderingResources;
		var height = resources.CopyrightFont.Size * 2;
		this.Height = this.Height + height;
		var x = this.Width / 2;
		canvas.BeginRender(this.Width,height);
		canvas.set_Color(resources.MainGlyphColor);
		canvas.set_Font(resources.CopyrightFont);
		canvas.set_TextAlign(1);
		canvas.FillText(msg,x,resources.CopyrightFont.Size);
		var result = canvas.EndRender();
		var tmp = this.Renderer;
		var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
		_tmp.Width = _gthis.Width;
		_tmp.Height = height;
		_tmp.RenderResult = result;
		_tmp.TotalWidth = _gthis.Width;
		_tmp.TotalHeight = _gthis.Height;
		_tmp.FirstMasterBarIndex = -1;
		_tmp.LastMasterBarIndex = -1;
		tmp.OnPartialRenderFinished(_tmp);
	}
	,__class__: alphaTab.rendering.layout.ScoreLayout
};
alphaTab.rendering.layout.PageViewLayout = $hx_exports["alphaTab"]["rendering"]["layout"]["PageViewLayout"] = function(renderer) {
	alphaTab.rendering.layout.ScoreLayout.call(this,renderer);
	this._groups = null;
	this._allMasterBarRenderers = null;
	this._barsFromPreviousGroup = null;
	this._endBarIndex = 0;
};
alphaTab.rendering.layout.PageViewLayout.__name__ = ["alphaTab","rendering","layout","PageViewLayout"];
alphaTab.rendering.layout.PageViewLayout.__super__ = alphaTab.rendering.layout.ScoreLayout;
alphaTab.rendering.layout.PageViewLayout.prototype = $extend(alphaTab.rendering.layout.ScoreLayout.prototype,{
	get_Name: function() {
		return "PageView";
	}
	,DoLayoutAndRender: function() {
		var x = alphaTab.rendering.layout.PageViewLayout.PagePadding[0];
		var y = alphaTab.rendering.layout.PageViewLayout.PagePadding[1];
		var this1 = this.Renderer.Settings.Width;
		this.Width = this1;
		var this2 = [];
		this._allMasterBarRenderers = this2;
		y = this.LayoutAndRenderScoreInfo(x,y,-1);
		y = this.LayoutAndRenderScore(x,y);
		this.Height = y + alphaTab.rendering.layout.PageViewLayout.PagePadding[3];
	}
	,get_SupportsResize: function() {
		return true;
	}
	,Resize: function() {
		var x = alphaTab.rendering.layout.PageViewLayout.PagePadding[0];
		var y = alphaTab.rendering.layout.PageViewLayout.PagePadding[1];
		var this1 = this.Renderer.Settings.Width;
		this.Width = this1;
		var oldHeight = this.Height;
		y = this.LayoutAndRenderScoreInfo(x,y,oldHeight);
		y = this.ResizeAndRenderScore(x,y,oldHeight);
		this.Height = y + alphaTab.rendering.layout.PageViewLayout.PagePadding[3];
	}
	,LayoutAndRenderScoreInfo: function(x,y,totalHeight) {
		if(totalHeight == null) {
			totalHeight = -1;
		}
		var _gthis = this;
		alphaTab.util.Logger.Info(this.get_Name(),"Layouting score info",null);
		var scale = this.get_Scale();
		var res = this.Renderer.RenderingResources;
		var centeredGlyphs = [1,2,4,8,64];
		var i = 0;
		while(i < centeredGlyphs.length) {
			if(this.ScoreInfoGlyphs.hasOwnProperty(centeredGlyphs[i])) {
				var glyph = this.ScoreInfoGlyphs[centeredGlyphs[i]];
				var this1 = 2;
				glyph.X = this.Width / this1;
				glyph.Y = y;
				glyph.TextAlign = 1;
				y = y + glyph.Font.Size;
			}
			++i;
		}
		var musicOrWords = false;
		var musicOrWordsHeight = 0;
		if(this.ScoreInfoGlyphs.hasOwnProperty(32)) {
			var glyph1 = this.ScoreInfoGlyphs[32];
			glyph1.X = this.Width - alphaTab.rendering.layout.PageViewLayout.PagePadding[2];
			glyph1.Y = y;
			glyph1.TextAlign = 2;
			musicOrWords = true;
			musicOrWordsHeight = glyph1.Font.Size;
		}
		if(this.ScoreInfoGlyphs.hasOwnProperty(16)) {
			var glyph2 = this.ScoreInfoGlyphs[16];
			glyph2.X = x;
			glyph2.Y = y;
			glyph2.TextAlign = 0;
			musicOrWords = true;
			musicOrWordsHeight = glyph2.Font.Size;
		}
		if(musicOrWords) {
			y = y + musicOrWordsHeight;
		}
		if(this.TuningGlyph != null) {
			y = y + 20 * scale;
			this.TuningGlyph.X = x;
			this.TuningGlyph.Y = y;
			y = y + this.TuningGlyph.Height;
		}
		y = y + 20 * scale;
		var canvas = this.Renderer.Canvas;
		canvas.BeginRender(this.Width,y);
		canvas.set_Color(res.ScoreInfoColor);
		canvas.set_TextAlign(1);
		var this2 = this.ScoreInfoGlyphs;
		var key = $iterator(Object.keys(this2))();
		while(key.hasNext()) {
			var key1 = key.next();
			this.ScoreInfoGlyphs[key1].Paint(0,0,canvas);
		}
		if(this.TuningGlyph != null) {
			this.TuningGlyph.Paint(0,0,canvas);
		}
		var result = canvas.EndRender();
		var tmp = this.Renderer;
		var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
		_tmp.Width = _gthis.Width;
		_tmp.Height = y;
		_tmp.RenderResult = result;
		_tmp.TotalWidth = _gthis.Width;
		_tmp.TotalHeight = totalHeight < 0 ? y : totalHeight;
		_tmp.FirstMasterBarIndex = -1;
		_tmp.LastMasterBarIndex = -1;
		tmp.OnPartialRenderFinished(_tmp);
		return y;
	}
	,ResizeAndRenderScore: function(x,y,oldHeight) {
		var canvas = this.Renderer.Canvas;
		if(this.Renderer.Settings.Layout.Get("barsPerRow",-1) != -1) {
			var i = 0;
			while(i < this._groups.length) {
				var group = this._groups[i];
				this.FitGroup(group);
				group.FinalizeGroup();
				y = y + this.PaintGroup(group,oldHeight,canvas);
				++i;
			}
		} else {
			var this1 = [];
			this._groups = this1;
			var currentIndex = 0;
			var maxWidth = this.get_MaxWidth();
			var group1 = this.CreateEmptyStaveGroup();
			group1.Index = this._groups.length;
			group1.X = x;
			group1.Y = y;
			while(currentIndex < this._allMasterBarRenderers.length) {
				var renderers = this._allMasterBarRenderers[currentIndex];
				if(group1.Width + renderers.Width <= maxWidth || group1.MasterBarsRenderers.length == 0) {
					group1.AddMasterBarRenderers(this.Renderer.Tracks,renderers);
					++currentIndex;
				} else {
					group1.IsFull = true;
					group1.IsLast = this._endBarIndex == group1.get_LastBarIndex();
					this._groups.push(group1);
					this.FitGroup(group1);
					group1.FinalizeGroup();
					y = y + this.PaintGroup(group1,oldHeight,canvas);
					group1 = this.CreateEmptyStaveGroup();
					group1.Index = this._groups.length;
					group1.X = x;
					group1.Y = y;
				}
			}
			group1.IsLast = this._endBarIndex == group1.get_LastBarIndex();
			this.FitGroup(group1);
			group1.FinalizeGroup();
			y = y + this.PaintGroup(group1,oldHeight,canvas);
		}
		return y;
	}
	,LayoutAndRenderScore: function(x,y) {
		var score = this.Renderer.Score;
		var canvas = this.Renderer.Canvas;
		var startIndex = this.Renderer.Settings.Layout.Get("start",1);
		--startIndex;
		startIndex = Math.min(score.MasterBars.length - 1,Math.max(0,startIndex));
		var currentBarIndex = startIndex;
		this._endBarIndex = this.Renderer.Settings.Layout.Get("count",score.MasterBars.length);
		if(this._endBarIndex < 0) {
			this._endBarIndex = score.MasterBars.length;
		}
		this._endBarIndex = startIndex + this._endBarIndex - 1;
		this._endBarIndex = Math.min(score.MasterBars.length - 1,Math.max(0,this._endBarIndex));
		var this1 = [];
		this._groups = this1;
		while(currentBarIndex <= this._endBarIndex) {
			var group = this.CreateStaveGroup(currentBarIndex,this._endBarIndex);
			this._groups.push(group);
			group.X = x;
			group.Y = y;
			currentBarIndex = group.get_LastBarIndex() + 1;
			this.FitGroup(group);
			group.FinalizeGroup();
			alphaTab.util.Logger.Info(this.get_Name(),"Rendering partial from bar " + group.get_FirstBarIndex() + " to " + group.get_LastBarIndex(),null);
			y = y + this.PaintGroup(group,y,canvas);
		}
		return y;
	}
	,PaintGroup: function(group,totalHeight,canvas) {
		var height = group.get_Height() + 20 * this.get_Scale();
		canvas.BeginRender(this.Width,height);
		this.Renderer.Canvas.set_Color(this.Renderer.RenderingResources.MainGlyphColor);
		this.Renderer.Canvas.set_TextAlign(0);
		group.Paint(0,-group.Y,canvas);
		totalHeight = totalHeight + height;
		var result = canvas.EndRender();
		var args = new alphaTab.rendering.RenderFinishedEventArgs();
		args.TotalWidth = this.Width;
		args.TotalHeight = totalHeight;
		args.Width = this.Width;
		args.Height = height;
		args.RenderResult = result;
		args.FirstMasterBarIndex = group.get_FirstBarIndex();
		args.LastMasterBarIndex = group.get_LastBarIndex();
		this.Renderer.OnPartialRenderFinished(args);
		return height;
	}
	,FitGroup: function(group) {
		if(group.IsFull || group.Width > this.get_MaxWidth()) {
			group.ScaleToWidth(this.get_MaxWidth());
		}
		this.Width = Math.max(this.Width,group.Width);
	}
	,CreateStaveGroup: function(currentBarIndex,endIndex) {
		var group = this.CreateEmptyStaveGroup();
		group.Index = this._groups.length;
		var barsPerRow = this.Renderer.Settings.Layout.Get("barsPerRow",-1);
		var maxWidth = this.get_MaxWidth();
		var end = endIndex + 1;
		var i = currentBarIndex;
		while(i < end) {
			var renderers;
			if(this._barsFromPreviousGroup != null && this._barsFromPreviousGroup.MasterBar.Index == i) {
				renderers = group.AddMasterBarRenderers(this.Renderer.Tracks,this._barsFromPreviousGroup);
			} else {
				renderers = group.AddBars(this.Renderer.Tracks,i);
				this._allMasterBarRenderers.push(renderers);
			}
			this._barsFromPreviousGroup = null;
			var groupIsFull = false;
			if(barsPerRow == -1 && (group.Width >= maxWidth && group.MasterBarsRenderers.length != 0)) {
				groupIsFull = true;
			} else if(group.MasterBarsRenderers.length == barsPerRow + 1) {
				groupIsFull = true;
			}
			if(groupIsFull) {
				group.RevertLastBar();
				group.IsFull = true;
				group.IsLast = false;
				this._barsFromPreviousGroup = renderers;
				return group;
			}
			group.X = 0;
			++i;
		}
		group.IsLast = endIndex == group.get_LastBarIndex();
		return group;
	}
	,get_MaxWidth: function() {
		return this.Renderer.Settings.Width - alphaTab.rendering.layout.PageViewLayout.PagePadding[0] - alphaTab.rendering.layout.PageViewLayout.PagePadding[2];
	}
	,__class__: alphaTab.rendering.layout.PageViewLayout
});
alphaTab.rendering.layout.HorizontalScreenLayout = $hx_exports["alphaTab"]["rendering"]["layout"]["HorizontalScreenLayout"] = function(renderer) {
	alphaTab.rendering.layout.ScoreLayout.call(this,renderer);
	this._group = null;
};
alphaTab.rendering.layout.HorizontalScreenLayout.__name__ = ["alphaTab","rendering","layout","HorizontalScreenLayout"];
alphaTab.rendering.layout.HorizontalScreenLayout.__super__ = alphaTab.rendering.layout.ScoreLayout;
alphaTab.rendering.layout.HorizontalScreenLayout.prototype = $extend(alphaTab.rendering.layout.ScoreLayout.prototype,{
	get_Name: function() {
		return "HorizontalScreen";
	}
	,get_SupportsResize: function() {
		return false;
	}
	,Resize: function() {
	}
	,DoLayoutAndRender: function() {
		var _gthis = this;
		var score = this.Renderer.Score;
		var canvas = this.Renderer.Canvas;
		var startIndex = this.Renderer.Settings.Layout.Get("start",1);
		--startIndex;
		startIndex = Math.min(score.MasterBars.length - 1,Math.max(0,startIndex));
		var currentBarIndex = startIndex;
		var endBarIndex = this.Renderer.Settings.Layout.Get("count",score.MasterBars.length);
		if(endBarIndex < 0) {
			endBarIndex = score.MasterBars.length;
		}
		endBarIndex = startIndex + endBarIndex - 1;
		endBarIndex = Math.min(score.MasterBars.length - 1,Math.max(0,endBarIndex));
		this._group = this.CreateEmptyStaveGroup();
		this._group.IsLast = true;
		this._group.X = alphaTab.rendering.layout.HorizontalScreenLayout.PagePadding[0];
		this._group.Y = alphaTab.rendering.layout.HorizontalScreenLayout.PagePadding[1];
		var countPerPartial = this.Renderer.Settings.Layout.Get("countPerPartial",10);
		var this1 = [];
		var partials = this1;
		var currentPartial = new alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo();
		while(currentBarIndex <= endBarIndex) {
			var result = this._group.AddBars(this.Renderer.Tracks,currentBarIndex);
			if(currentPartial.MasterBars.length == 0 && result.IsLinkedToPrevious && partials.length > 0) {
				var previousPartial = partials[partials.length - 1];
				previousPartial.MasterBars.push(score.MasterBars[currentBarIndex]);
				previousPartial.Width = previousPartial.Width + result.Width;
			} else {
				currentPartial.MasterBars.push(score.MasterBars[currentBarIndex]);
				currentPartial.Width = currentPartial.Width + result.Width;
				if(currentPartial.MasterBars.length >= countPerPartial) {
					if(partials.length == 0) {
						currentPartial.Width = currentPartial.Width + (this._group.X + this._group.AccoladeSpacing);
					}
					partials.push(currentPartial);
					alphaTab.util.Logger.Info(this.get_Name(),"Finished partial from bar " + currentPartial.MasterBars[0].Index + " to " + currentPartial.MasterBars[currentPartial.MasterBars.length - 1].Index,null);
					currentPartial = new alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo();
				}
			}
			++currentBarIndex;
		}
		if(currentPartial.MasterBars.length > 0) {
			if(partials.length == 0) {
				currentPartial.Width = currentPartial.Width + (this._group.X + this._group.AccoladeSpacing);
			}
			partials.push(currentPartial);
			alphaTab.util.Logger.Info(this.get_Name(),"Finished partial from bar " + currentPartial.MasterBars[0].Index + " to " + currentPartial.MasterBars[currentPartial.MasterBars.length - 1].Index,null);
		}
		this._group.FinalizeGroup();
		this.Height = this._group.Y + this._group.get_Height() + alphaTab.rendering.layout.HorizontalScreenLayout.PagePadding[3];
		this.Width = this._group.X + this._group.Width + alphaTab.rendering.layout.HorizontalScreenLayout.PagePadding[2];
		currentBarIndex = 0;
		var i = 0;
		while(i < partials.length) {
			var partial = partials[i];
			canvas.BeginRender(partial.Width,this.Height);
			canvas.set_Color(this.Renderer.RenderingResources.MainGlyphColor);
			canvas.set_TextAlign(0);
			var renderX = this._group.GetBarX(partial.MasterBars[0].Index) + this._group.AccoladeSpacing;
			if(i == 0) {
				renderX = renderX - (this._group.X + this._group.AccoladeSpacing);
			}
			alphaTab.util.Logger.Info(this.get_Name(),"Rendering partial from bar " + partial.MasterBars[0].Index + " to " + partial.MasterBars[partial.MasterBars.length - 1].Index,null);
			this._group.PaintPartial(-renderX,this._group.Y,this.Renderer.Canvas,currentBarIndex,partial.MasterBars.length);
			var result1 = canvas.EndRender();
			var tmp = this.Renderer;
			var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
			_tmp.TotalWidth = _gthis.Width;
			_tmp.TotalHeight = _gthis.Height;
			_tmp.Width = partial.Width;
			_tmp.Height = _gthis.Height;
			_tmp.RenderResult = result1;
			_tmp.FirstMasterBarIndex = partial.MasterBars[0].Index;
			_tmp.LastMasterBarIndex = partial.MasterBars[partial.MasterBars.length - 1].Index;
			tmp.OnPartialRenderFinished(_tmp);
			currentBarIndex = currentBarIndex + partial.MasterBars.length;
			++i;
		}
	}
	,__class__: alphaTab.rendering.layout.HorizontalScreenLayout
});
alphaTab.rendering.IEffectBarRendererInfo = $hx_exports["alphaTab"]["rendering"]["IEffectBarRendererInfo"] = function() { };
alphaTab.rendering.IEffectBarRendererInfo.__name__ = ["alphaTab","rendering","IEffectBarRendererInfo"];
alphaTab.rendering.IEffectBarRendererInfo.prototype = {
	__class__: alphaTab.rendering.IEffectBarRendererInfo
};
alphaTab.rendering.effects = {};
alphaTab.rendering.effects.TempoEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["TempoEffectInfo"] = function() {
};
alphaTab.rendering.effects.TempoEffectInfo.__name__ = ["alphaTab","rendering","effects","TempoEffectInfo"];
alphaTab.rendering.effects.TempoEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.TempoEffectInfo.prototype = {
	get_EffectId: function() {
		return "tempo";
	}
	,get_HideOnMultiTrack: function() {
		return true;
	}
	,get_CanShareBand: function() {
		return false;
	}
	,get_SizingMode: function() {
		return 0;
	}
	,ShouldCreateGlyph: function(beat) {
		if(beat.Voice.Bar.Staff.Index == 0 && beat.Voice.Index == 0 && beat.Index == 0) {
			if(beat.Voice.Bar.get_MasterBar().TempoAutomation == null) {
				return beat.Voice.Bar.Index == 0;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,CreateNewGlyph: function(renderer,beat) {
		var tempo;
		if(beat.Voice.Bar.get_MasterBar().TempoAutomation != null) {
			tempo = system.Convert.ToInt32_Single(beat.Voice.Bar.get_MasterBar().TempoAutomation.Value);
		} else {
			tempo = beat.Voice.Bar.Staff.Track.Score.Tempo;
		}
		return new alphaTab.rendering.glyphs.TempoGlyph(0,0,tempo);
	}
	,CanExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.TempoEffectInfo
};
alphaTab.rendering.effects.TripletFeelEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["TripletFeelEffectInfo"] = function() {
};
alphaTab.rendering.effects.TripletFeelEffectInfo.__name__ = ["alphaTab","rendering","effects","TripletFeelEffectInfo"];
alphaTab.rendering.effects.TripletFeelEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.TripletFeelEffectInfo.prototype = {
	get_EffectId: function() {
		return "triplet-feel";
	}
	,get_HideOnMultiTrack: function() {
		return true;
	}
	,get_CanShareBand: function() {
		return false;
	}
	,get_SizingMode: function() {
		return 0;
	}
	,ShouldCreateGlyph: function(beat) {
		if(beat.Index == 0) {
			if(!(beat.Voice.Bar.get_MasterBar().Index == 0 && beat.Voice.Bar.get_MasterBar().TripletFeel != 0)) {
				if(beat.Voice.Bar.get_MasterBar().Index > 0) {
					return beat.Voice.Bar.get_MasterBar().TripletFeel != beat.Voice.Bar.get_MasterBar().PreviousMasterBar.TripletFeel;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.TripletFeelGlyph(beat.Voice.Bar.get_MasterBar().TripletFeel);
	}
	,CanExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.TripletFeelEffectInfo
};
alphaTab.rendering.effects.MarkerEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["MarkerEffectInfo"] = function() {
};
alphaTab.rendering.effects.MarkerEffectInfo.__name__ = ["alphaTab","rendering","effects","MarkerEffectInfo"];
alphaTab.rendering.effects.MarkerEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.MarkerEffectInfo.prototype = {
	get_EffectId: function() {
		return "marker";
	}
	,get_HideOnMultiTrack: function() {
		return true;
	}
	,get_CanShareBand: function() {
		return true;
	}
	,get_SizingMode: function() {
		return 0;
	}
	,ShouldCreateGlyph: function(beat) {
		if(beat.Voice.Bar.Staff.Index == 0 && beat.Voice.Index == 0 && beat.Index == 0) {
			return beat.Voice.Bar.get_MasterBar().get_IsSectionStart();
		} else {
			return false;
		}
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.TextGlyph(0,0,beat.Voice.Bar.get_MasterBar().Section.Text,renderer.get_Resources().MarkerFont,0);
	}
	,CanExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.MarkerEffectInfo
};
alphaTab.rendering.effects.TextEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["TextEffectInfo"] = function() {
};
alphaTab.rendering.effects.TextEffectInfo.__name__ = ["alphaTab","rendering","effects","TextEffectInfo"];
alphaTab.rendering.effects.TextEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.TextEffectInfo.prototype = {
	get_EffectId: function() {
		return "text";
	}
	,get_HideOnMultiTrack: function() {
		return false;
	}
	,get_CanShareBand: function() {
		return false;
	}
	,get_SizingMode: function() {
		return 1;
	}
	,ShouldCreateGlyph: function(beat) {
		var s = beat.Text;
		return !(s == null || StringTools.trim(s).length == 0);
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.TextGlyph(0,0,beat.Text,renderer.get_Resources().EffectFont,0);
	}
	,CanExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.TextEffectInfo
};
alphaTab.rendering.effects.ChordsEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["ChordsEffectInfo"] = function() {
};
alphaTab.rendering.effects.ChordsEffectInfo.__name__ = ["alphaTab","rendering","effects","ChordsEffectInfo"];
alphaTab.rendering.effects.ChordsEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.ChordsEffectInfo.prototype = {
	get_EffectId: function() {
		return "chords";
	}
	,get_HideOnMultiTrack: function() {
		return false;
	}
	,get_CanShareBand: function() {
		return true;
	}
	,get_SizingMode: function() {
		return 1;
	}
	,ShouldCreateGlyph: function(beat) {
		return beat.get_HasChord();
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.TextGlyph(0,0,beat.get_Chord().Name,renderer.get_Resources().EffectFont,0);
	}
	,CanExpand: function(from,to) {
		return false;
	}
	,__class__: alphaTab.rendering.effects.ChordsEffectInfo
};
alphaTab.rendering.effects.NoteEffectInfoBase = $hx_exports["alphaTab"]["rendering"]["effects"]["NoteEffectInfoBase"] = function() {
};
alphaTab.rendering.effects.NoteEffectInfoBase.__name__ = ["alphaTab","rendering","effects","NoteEffectInfoBase"];
alphaTab.rendering.effects.NoteEffectInfoBase.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.NoteEffectInfoBase.prototype = {
	ShouldCreateGlyph: function(beat) {
		var this1 = [];
		this.LastCreateInfo = this1;
		var i = 0;
		var j = beat.Notes.length;
		while(i < j) {
			var n = beat.Notes[i];
			if(this.ShouldCreateGlyphForNote(n)) {
				this.LastCreateInfo.push(n);
			}
			++i;
		}
		return this.LastCreateInfo.length > 0;
	}
	,ShouldCreateGlyphForNote: function(note) {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_EffectId: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_HideOnMultiTrack: function() {
		return false;
	}
	,get_CanShareBand: function() {
		return true;
	}
	,get_SizingMode: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,CreateNewGlyph: function(renderer,beat) {
		throw new js._Boot.HaxeError("abstract");
	}
	,CanExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.NoteEffectInfoBase
};
alphaTab.rendering.effects.TrillEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["TrillEffectInfo"] = function() {
	alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
};
alphaTab.rendering.effects.TrillEffectInfo.__name__ = ["alphaTab","rendering","effects","TrillEffectInfo"];
alphaTab.rendering.effects.TrillEffectInfo.__super__ = alphaTab.rendering.effects.NoteEffectInfoBase;
alphaTab.rendering.effects.TrillEffectInfo.prototype = $extend(alphaTab.rendering.effects.NoteEffectInfoBase.prototype,{
	get_EffectId: function() {
		return "trill";
	}
	,ShouldCreateGlyphForNote: function(note) {
		return note.get_IsTrill();
	}
	,get_SizingMode: function() {
		return 1;
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.TrillGlyph(0,0);
	}
	,__class__: alphaTab.rendering.effects.TrillEffectInfo
});
alphaTab.rendering.effects.BeatVibratoEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["BeatVibratoEffectInfo"] = function() {
};
alphaTab.rendering.effects.BeatVibratoEffectInfo.__name__ = ["alphaTab","rendering","effects","BeatVibratoEffectInfo"];
alphaTab.rendering.effects.BeatVibratoEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.BeatVibratoEffectInfo.prototype = {
	get_EffectId: function() {
		return "beat-vibrato";
	}
	,get_HideOnMultiTrack: function() {
		return false;
	}
	,get_CanShareBand: function() {
		return true;
	}
	,get_SizingMode: function() {
		return 3;
	}
	,ShouldCreateGlyph: function(beat) {
		return beat.Vibrato != 0;
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.VibratoGlyph(0,5 * renderer.get_Scale(),1.4);
	}
	,CanExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.BeatVibratoEffectInfo
};
alphaTab.rendering.effects.NoteVibratoEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["NoteVibratoEffectInfo"] = function() {
	alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
};
alphaTab.rendering.effects.NoteVibratoEffectInfo.__name__ = ["alphaTab","rendering","effects","NoteVibratoEffectInfo"];
alphaTab.rendering.effects.NoteVibratoEffectInfo.__super__ = alphaTab.rendering.effects.NoteEffectInfoBase;
alphaTab.rendering.effects.NoteVibratoEffectInfo.prototype = $extend(alphaTab.rendering.effects.NoteEffectInfoBase.prototype,{
	get_EffectId: function() {
		return "note-vibrato";
	}
	,ShouldCreateGlyphForNote: function(note) {
		if(!(note.Vibrato != 0)) {
			if(note.IsTieDestination) {
				return note.TieOrigin.Vibrato != 0;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,get_SizingMode: function() {
		return 3;
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.VibratoGlyph(0,5 * renderer.get_Scale(),1.2);
	}
	,__class__: alphaTab.rendering.effects.NoteVibratoEffectInfo
});
alphaTab.rendering.effects.AlternateEndingsEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["AlternateEndingsEffectInfo"] = function() {
};
alphaTab.rendering.effects.AlternateEndingsEffectInfo.__name__ = ["alphaTab","rendering","effects","AlternateEndingsEffectInfo"];
alphaTab.rendering.effects.AlternateEndingsEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.AlternateEndingsEffectInfo.prototype = {
	get_EffectId: function() {
		return "alternate-feel";
	}
	,get_HideOnMultiTrack: function() {
		return true;
	}
	,get_CanShareBand: function() {
		return false;
	}
	,get_SizingMode: function() {
		return 4;
	}
	,ShouldCreateGlyph: function(beat) {
		if(beat.Index == 0) {
			return beat.Voice.Bar.get_MasterBar().AlternateEndings != 0;
		} else {
			return false;
		}
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.AlternateEndingsGlyph(0,0,beat.Voice.Bar.get_MasterBar().AlternateEndings);
	}
	,CanExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.AlternateEndingsEffectInfo
};
alphaTab.rendering.BarRendererFactory = $hx_exports["alphaTab"]["rendering"]["BarRendererFactory"] = function() {
	this.IsInAccolade = false;
	this.HideOnMultiTrack = false;
	this.HideOnPercussionTrack = false;
	this.IsInAccolade = true;
	this.HideOnPercussionTrack = false;
	this.HideOnMultiTrack = false;
};
alphaTab.rendering.BarRendererFactory.__name__ = ["alphaTab","rendering","BarRendererFactory"];
alphaTab.rendering.BarRendererFactory.prototype = {
	get_StaffId: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,CanCreate: function(track,staff) {
		if(!(!this.HideOnPercussionTrack)) {
			return staff.StaffKind != 2;
		} else {
			return true;
		}
	}
	,Create: function(renderer,bar,staveSettings) {
		throw new js._Boot.HaxeError("abstract");
	}
	,__class__: alphaTab.rendering.BarRendererFactory
};
alphaTab.rendering.EffectBarRendererFactory = $hx_exports["alphaTab"]["rendering"]["EffectBarRendererFactory"] = function(staffId,infos) {
	alphaTab.rendering.BarRendererFactory.call(this);
	this._infos = null;
	this._staffId = null;
	this._infos = infos;
	this._staffId = staffId;
	this.IsInAccolade = false;
};
alphaTab.rendering.EffectBarRendererFactory.__name__ = ["alphaTab","rendering","EffectBarRendererFactory"];
alphaTab.rendering.EffectBarRendererFactory.__super__ = alphaTab.rendering.BarRendererFactory;
alphaTab.rendering.EffectBarRendererFactory.prototype = $extend(alphaTab.rendering.BarRendererFactory.prototype,{
	get_StaffId: function() {
		return this._staffId;
	}
	,Create: function(renderer,bar,staveSettings) {
		return new alphaTab.rendering.EffectBarRenderer(renderer,bar,this._infos);
	}
	,__class__: alphaTab.rendering.EffectBarRendererFactory
});
alphaTab.rendering.ScoreBarRendererFactory = $hx_exports["alphaTab"]["rendering"]["ScoreBarRendererFactory"] = function() {
	alphaTab.rendering.BarRendererFactory.call(this);
};
alphaTab.rendering.ScoreBarRendererFactory.__name__ = ["alphaTab","rendering","ScoreBarRendererFactory"];
alphaTab.rendering.ScoreBarRendererFactory.__super__ = alphaTab.rendering.BarRendererFactory;
alphaTab.rendering.ScoreBarRendererFactory.prototype = $extend(alphaTab.rendering.BarRendererFactory.prototype,{
	get_StaffId: function() {
		return "score";
	}
	,Create: function(renderer,bar,staveSettings) {
		return new alphaTab.rendering.ScoreBarRenderer(renderer,bar);
	}
	,__class__: alphaTab.rendering.ScoreBarRendererFactory
});
alphaTab.rendering.effects.CrescendoEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["CrescendoEffectInfo"] = function() {
};
alphaTab.rendering.effects.CrescendoEffectInfo.__name__ = ["alphaTab","rendering","effects","CrescendoEffectInfo"];
alphaTab.rendering.effects.CrescendoEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.CrescendoEffectInfo.prototype = {
	get_EffectId: function() {
		return "crescendo";
	}
	,get_HideOnMultiTrack: function() {
		return false;
	}
	,get_CanShareBand: function() {
		return true;
	}
	,get_SizingMode: function() {
		return 3;
	}
	,ShouldCreateGlyph: function(beat) {
		return beat.Crescendo != 0;
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.CrescendoGlyph(0,0,beat.Crescendo);
	}
	,CanExpand: function(from,to) {
		return from.Crescendo == to.Crescendo;
	}
	,__class__: alphaTab.rendering.effects.CrescendoEffectInfo
};
alphaTab.rendering.effects.DynamicsEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["DynamicsEffectInfo"] = function() {
};
alphaTab.rendering.effects.DynamicsEffectInfo.__name__ = ["alphaTab","rendering","effects","DynamicsEffectInfo"];
alphaTab.rendering.effects.DynamicsEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.DynamicsEffectInfo.prototype = {
	get_EffectId: function() {
		return "dynamics";
	}
	,get_HideOnMultiTrack: function() {
		return false;
	}
	,get_CanShareBand: function() {
		return false;
	}
	,get_SizingMode: function() {
		return 1;
	}
	,ShouldCreateGlyph: function(beat) {
		if(beat.Voice.Index == 0) {
			if(!(beat.Index == 0 && beat.Voice.Bar.Index == 0)) {
				if(beat.PreviousBeat != null) {
					return beat.Dynamic != beat.PreviousBeat.Dynamic;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.DynamicsGlyph(0,0,beat.Dynamic);
	}
	,CanExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.DynamicsEffectInfo
};
alphaTab.rendering.effects.LyricsEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["LyricsEffectInfo"] = function() {
};
alphaTab.rendering.effects.LyricsEffectInfo.__name__ = ["alphaTab","rendering","effects","LyricsEffectInfo"];
alphaTab.rendering.effects.LyricsEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.LyricsEffectInfo.prototype = {
	get_EffectId: function() {
		return "lyrics";
	}
	,get_HideOnMultiTrack: function() {
		return false;
	}
	,get_CanShareBand: function() {
		return false;
	}
	,get_SizingMode: function() {
		return 1;
	}
	,ShouldCreateGlyph: function(beat) {
		return beat.Lyrics != null;
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.LyricsGlyph(0,0,beat.Lyrics,renderer.get_Resources().EffectFont,1);
	}
	,CanExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.LyricsEffectInfo
};
alphaTab.rendering.effects.TapEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["TapEffectInfo"] = function() {
};
alphaTab.rendering.effects.TapEffectInfo.__name__ = ["alphaTab","rendering","effects","TapEffectInfo"];
alphaTab.rendering.effects.TapEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.TapEffectInfo.prototype = {
	get_EffectId: function() {
		return "tap";
	}
	,get_HideOnMultiTrack: function() {
		return false;
	}
	,get_CanShareBand: function() {
		return true;
	}
	,get_SizingMode: function() {
		return 1;
	}
	,ShouldCreateGlyph: function(beat) {
		if(!(beat.Slap || beat.Pop)) {
			return beat.Tap;
		} else {
			return true;
		}
	}
	,CreateNewGlyph: function(renderer,beat) {
		var res = renderer.get_Resources();
		if(beat.Slap) {
			return new alphaTab.rendering.glyphs.TextGlyph(0,0,"S",res.EffectFont,0);
		}
		if(beat.Pop) {
			return new alphaTab.rendering.glyphs.TextGlyph(0,0,"P",res.EffectFont,0);
		}
		return new alphaTab.rendering.glyphs.TextGlyph(0,0,"T",res.EffectFont,0);
	}
	,CanExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.TapEffectInfo
};
alphaTab.rendering.effects.FadeInEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["FadeInEffectInfo"] = function() {
};
alphaTab.rendering.effects.FadeInEffectInfo.__name__ = ["alphaTab","rendering","effects","FadeInEffectInfo"];
alphaTab.rendering.effects.FadeInEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.FadeInEffectInfo.prototype = {
	get_EffectId: function() {
		return "fade-in";
	}
	,get_HideOnMultiTrack: function() {
		return false;
	}
	,get_CanShareBand: function() {
		return true;
	}
	,get_SizingMode: function() {
		return 1;
	}
	,ShouldCreateGlyph: function(beat) {
		return beat.FadeIn;
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.FadeInGlyph(0,0);
	}
	,CanExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.FadeInEffectInfo
};
alphaTab.rendering.effects.HarmonicsEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["HarmonicsEffectInfo"] = function() {
	alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
};
alphaTab.rendering.effects.HarmonicsEffectInfo.__name__ = ["alphaTab","rendering","effects","HarmonicsEffectInfo"];
alphaTab.rendering.effects.HarmonicsEffectInfo.HarmonicToString = function(type) {
	switch(type) {
	case 1:
		return "N.H.";
	case 2:
		return "A.H.";
	case 3:
		return "P.H.";
	case 4:
		return "T.H.";
	case 5:
		return "S.H.";
	case 6:
		return "Fdbk.";
	default:
	}
	return "";
};
alphaTab.rendering.effects.HarmonicsEffectInfo.__super__ = alphaTab.rendering.effects.NoteEffectInfoBase;
alphaTab.rendering.effects.HarmonicsEffectInfo.prototype = $extend(alphaTab.rendering.effects.NoteEffectInfoBase.prototype,{
	get_EffectId: function() {
		return "harmonics";
	}
	,ShouldCreateGlyphForNote: function(note) {
		if(!note.get_IsHarmonic()) {
			return false;
		}
		if(note.Beat != this._beat || note.HarmonicType > this._beatType) {
			this._beat = note.Beat;
			this._beatType = note.HarmonicType;
		}
		return true;
	}
	,get_SizingMode: function() {
		return 1;
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.TextGlyph(0,0,alphaTab.rendering.effects.HarmonicsEffectInfo.HarmonicToString(this._beatType),renderer.get_Resources().EffectFont,0);
	}
	,__class__: alphaTab.rendering.effects.HarmonicsEffectInfo
});
alphaTab.rendering.effects.LetRingEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["LetRingEffectInfo"] = function() {
	alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
};
alphaTab.rendering.effects.LetRingEffectInfo.__name__ = ["alphaTab","rendering","effects","LetRingEffectInfo"];
alphaTab.rendering.effects.LetRingEffectInfo.__super__ = alphaTab.rendering.effects.NoteEffectInfoBase;
alphaTab.rendering.effects.LetRingEffectInfo.prototype = $extend(alphaTab.rendering.effects.NoteEffectInfoBase.prototype,{
	get_EffectId: function() {
		return "let-ring";
	}
	,get_CanShareBand: function() {
		return false;
	}
	,ShouldCreateGlyphForNote: function(note) {
		return note.IsLetRing;
	}
	,get_SizingMode: function() {
		return 3;
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.LineRangedGlyph("LetRing");
	}
	,__class__: alphaTab.rendering.effects.LetRingEffectInfo
});
alphaTab.rendering.effects.CapoEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["CapoEffectInfo"] = function() {
};
alphaTab.rendering.effects.CapoEffectInfo.__name__ = ["alphaTab","rendering","effects","CapoEffectInfo"];
alphaTab.rendering.effects.CapoEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.CapoEffectInfo.prototype = {
	get_EffectId: function() {
		return "capo";
	}
	,get_HideOnMultiTrack: function() {
		return false;
	}
	,get_CanShareBand: function() {
		return false;
	}
	,get_SizingMode: function() {
		return 1;
	}
	,ShouldCreateGlyph: function(beat) {
		if(beat.Index == 0 && beat.Voice.Bar.Index == 0) {
			return beat.Voice.Bar.Staff.Capo != 0;
		} else {
			return false;
		}
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.TextGlyph(0,0,"Capo. fret " + beat.Voice.Bar.Staff.Capo,renderer.get_Resources().EffectFont,0);
	}
	,CanExpand: function(from,to) {
		return false;
	}
	,__class__: alphaTab.rendering.effects.CapoEffectInfo
};
alphaTab.rendering.effects.PalmMuteEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["PalmMuteEffectInfo"] = function() {
	alphaTab.rendering.effects.NoteEffectInfoBase.call(this);
};
alphaTab.rendering.effects.PalmMuteEffectInfo.__name__ = ["alphaTab","rendering","effects","PalmMuteEffectInfo"];
alphaTab.rendering.effects.PalmMuteEffectInfo.__super__ = alphaTab.rendering.effects.NoteEffectInfoBase;
alphaTab.rendering.effects.PalmMuteEffectInfo.prototype = $extend(alphaTab.rendering.effects.NoteEffectInfoBase.prototype,{
	get_EffectId: function() {
		return "palm-mute";
	}
	,ShouldCreateGlyphForNote: function(note) {
		return note.IsPalmMute;
	}
	,get_SizingMode: function() {
		return 3;
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.LineRangedGlyph("P.M.");
	}
	,__class__: alphaTab.rendering.effects.PalmMuteEffectInfo
});
alphaTab.rendering.effects.PickStrokeEffectInfo = $hx_exports["alphaTab"]["rendering"]["effects"]["PickStrokeEffectInfo"] = function() {
};
alphaTab.rendering.effects.PickStrokeEffectInfo.__name__ = ["alphaTab","rendering","effects","PickStrokeEffectInfo"];
alphaTab.rendering.effects.PickStrokeEffectInfo.__interfaces__ = [alphaTab.rendering.IEffectBarRendererInfo];
alphaTab.rendering.effects.PickStrokeEffectInfo.prototype = {
	get_EffectId: function() {
		return "pick-stroke";
	}
	,get_HideOnMultiTrack: function() {
		return false;
	}
	,get_CanShareBand: function() {
		return true;
	}
	,get_SizingMode: function() {
		return 1;
	}
	,ShouldCreateGlyph: function(beat) {
		return beat.PickStroke != 0;
	}
	,CreateNewGlyph: function(renderer,beat) {
		return new alphaTab.rendering.glyphs.PickStrokeGlyph(0,0,beat.PickStroke);
	}
	,CanExpand: function(from,to) {
		return true;
	}
	,__class__: alphaTab.rendering.effects.PickStrokeEffectInfo
};
alphaTab.rendering.TabBarRendererFactory = $hx_exports["alphaTab"]["rendering"]["TabBarRendererFactory"] = function(showTimeSignature,showRests,showTiedNotes) {
	alphaTab.rendering.BarRendererFactory.call(this);
	this._showTimeSignature = false;
	this._showRests = false;
	this._showTiedNotes = false;
	this._showTimeSignature = showTimeSignature;
	this._showRests = showRests;
	this._showTiedNotes = showTiedNotes;
	this.HideOnPercussionTrack = true;
};
alphaTab.rendering.TabBarRendererFactory.__name__ = ["alphaTab","rendering","TabBarRendererFactory"];
alphaTab.rendering.TabBarRendererFactory.__super__ = alphaTab.rendering.BarRendererFactory;
alphaTab.rendering.TabBarRendererFactory.prototype = $extend(alphaTab.rendering.BarRendererFactory.prototype,{
	get_StaffId: function() {
		return "tab";
	}
	,CanCreate: function(track,staff) {
		if(staff.Tuning.length > 0) {
			return alphaTab.rendering.BarRendererFactory.prototype.CanCreate.call(this,track,staff);
		} else {
			return false;
		}
	}
	,Create: function(renderer,bar,staveSettings) {
		var tabBarRenderer = new alphaTab.rendering.TabBarRenderer(renderer,bar);
		tabBarRenderer.ShowRests = this._showRests;
		tabBarRenderer.ShowTimeSignature = this._showTimeSignature;
		tabBarRenderer.ShowTiedNotes = this._showTiedNotes;
		tabBarRenderer.RenderRhythm = staveSettings.Get("rhythm",tabBarRenderer.RenderRhythm);
		tabBarRenderer.RhythmHeight = staveSettings.Get("rhythmHeight",tabBarRenderer.RhythmHeight);
		tabBarRenderer.RhythmBeams = staveSettings.Get("rhythmBeams",tabBarRenderer.RhythmBeams);
		return tabBarRenderer;
	}
	,__class__: alphaTab.rendering.TabBarRendererFactory
});
alphaTab.Environment = $hx_exports["alphaTab"]["Environment"] = function() {
};
alphaTab.Environment.__name__ = ["alphaTab","Environment"];
alphaTab.Environment.PlatformInit = function() {
	alphaTab.Environment.RenderEngines["svg"] = function() {
		return new alphaTab.platform.svg.CssFontSvgCanvas();
	};
	alphaTab.Environment.RenderEngines["default"] = function() {
		return new alphaTab.platform.svg.CssFontSvgCanvas();
	};
	alphaTab.Environment.RenderEngines["html5"] = function() {
		return new alphaTab.platform.javaScript.Html5Canvas();
	};
	alphaTab.Environment.CheckFontLoad();
	alphaTab.Environment.RegisterJQueryPlugin();
	Math.log2 = Math.log2 || function(x) { return Math.log(x) * Math.LOG2E; };
	if($global.document) {
		window.AudioContext = window.AudioContext || window.webkitAudioContext;
		var document = window.document;
		var this1 = "";
		var vbAjaxLoader = this1;
		vbAjaxLoader = vbAjaxLoader + ("<script type=\"text/vbscript\">" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("Function VbAjaxLoader(method, fileName)" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    Dim xhr" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    Set xhr = CreateObject(\"Microsoft.XMLHTTP\")" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    xhr.Open method, fileName, False" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    xhr.setRequestHeader \"Accept-Charset\", \"x-user-defined\"" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    xhr.send" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    Dim byteArray()" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    if xhr.Status = 200 Then" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("        Dim byteString" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("        Dim i" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("        byteString=xhr.responseBody" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("        ReDim byteArray(LenB(byteString))" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("        For i = 1 To LenB(byteString)" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("            byteArray(i-1) = AscB(MidB(byteString, i, 1))" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("        Next" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    End If" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("    VbAjaxLoader=byteArray" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("End Function" + "\r\n");
		vbAjaxLoader = vbAjaxLoader + ("</script>" + "\r\n");
		var s = vbAjaxLoader;
		document.write(s);
		var scriptElement = document.currentScript;
		if(!(!(!scriptElement))) {
			try {
				var error = new Error();
				var stack = error.stack;
				if(!(!(!stack))) {
					throw error;
				}
				alphaTab.Environment.ScriptFile = alphaTab.Environment.ScriptFileFromStack(stack);
			} catch( e ) {
				if (e instanceof js._Boot.HaxeError) e = e.val;
				if( js.Boot.__instanceof(e,Error) ) {
					var stack1 = e.stack;
					if(!(!(!stack1))) {
						scriptElement = document.querySelector("script[data-alphatab]\")");
					} else {
						alphaTab.Environment.ScriptFile = alphaTab.Environment.ScriptFileFromStack(stack1);
					}
				} else throw(e);
			}
		}
		var s1 = alphaTab.Environment.ScriptFile;
		if(s1 == null || s1.length == 0) {
			if(!(!(!scriptElement))) {
				alphaTab.util.Logger.Warning("Environment","Could not automatically find alphaTab script file for worker, please add the data-alphatab attribute to the script tag that includes alphaTab or provide it when initializing alphaTab",null);
			} else {
				alphaTab.Environment.ScriptFile = scriptElement.src;
			}
		}
	} else {
		alphaTab.platform.javaScript.AlphaTabWebWorker.Init();
		alphaTab.platform.javaScript.AlphaSynthWebWorker.Init();
	}
};
alphaTab.Environment.RegisterJQueryPlugin = function() {
	var json = $global;
	if((json && "jQuery" in json)) {
		var jquery = window["jQuery"];
		var api = new alphaTab.platform.javaScript.JQueryAlphaTab();
		jquery.fn.alphaTab = function(method) {
			var _this = this;
			if(_this.length == 1) {
				var _this1 = _this[0];
				var tmp = Array.prototype.slice.call(arguments, 1);
				return api.Exec(_this1,method,tmp);
			} else {
				return this.each(function() {
					var tmp1 = Array.prototype.slice.call(arguments, 1);
					api.Exec(this,method,tmp1);
				});
			}
		};
		jquery.alphaTab = { restore : alphaTab.platform.javaScript.JQueryAlphaTab.Restore};
		jquery.fn.alphaTab.fn = api;
	}
};
alphaTab.Environment.ScriptFileFromStack = function(stack) {
	var matches = stack.match("(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?");
	if(!(!(!matches))) {
		matches = stack.match("^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?");
		if(!(!(!matches))) {
			matches = stack.match("\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?");
			if(!(!(!matches))) {
				return null;
			}
		}
	}
	return matches[1];
};
alphaTab.Environment.CheckFontLoad = function() {
	var isWorker = typeof(WorkerGlobalScope) !== 'undefined' && self instanceof WorkerGlobalScope;
	if(isWorker) {
		alphaTab.Environment.IsFontLoaded = false;
		return;
	}
	var cssFontLoadingModuleSupported = !(!window.document.fonts) && !(!window.document.fonts["load"]);
	if(cssFontLoadingModuleSupported) {
		var checkFont = null;
		checkFont = function() {
			window.document.fonts.load("1em alphaTab").then(function(_) {
				if(window.document.fonts.check("1em alphaTab")) {
					alphaTab.Environment.IsFontLoaded = true;
				} else {
					window.setTimeout(function() {
						checkFont();
					},250);
				}
				return true;
			});
		};
		checkFont();
	} else {
		var checkFont1 = null;
		checkFont1 = function() {
			var document = window.document;
			var testItem = document.getElementById("alphaTabFontChecker");
			if(testItem == null) {
				testItem = document.createElement("div");
				testItem.setAttribute("id","alphaTabFontChecker");
				testItem.style.opacity = "0";
				testItem.style.position = "absolute";
				testItem.style.left = "0";
				testItem.style.top = "0";
				testItem.style.fontSize = "100px";
				testItem.classList.add("at");
				testItem.innerHTML = "&#" + 57424 + ";";
				document.body.appendChild(testItem);
			}
			var width = testItem.offsetWidth;
			if(width > 30 && width < 100) {
				alphaTab.Environment.IsFontLoaded = true;
				document.body.removeChild(testItem);
			} else {
				window.setTimeout(function() {
					checkFont1();
				},250);
			}
		};
		window.addEventListener("DOMContentLoaded",function() {
			checkFont1();
		});
	}
};
alphaTab.Environment.Init = function() {
	var this1 = {}
	alphaTab.Environment.RenderEngines = this1;
	var this2 = {}
	alphaTab.Environment.LayoutEngines = this2;
	var this3 = {}
	alphaTab.Environment.StaveProfiles = this3;
	alphaTab.Environment.PlatformInit();
	alphaTab.Environment.LayoutEngines["default"] = function(r) {
		return new alphaTab.rendering.layout.PageViewLayout(r);
	};
	alphaTab.Environment.LayoutEngines["page"] = function(r1) {
		return new alphaTab.rendering.layout.PageViewLayout(r1);
	};
	alphaTab.Environment.LayoutEngines["horizontal"] = function(r2) {
		return new alphaTab.rendering.layout.HorizontalScreenLayout(r2);
	};
	alphaTab.Environment.StaveProfiles["default"] = alphaTab.Environment.StaveProfiles["score-tab"] = [new alphaTab.rendering.EffectBarRendererFactory("score-effects",[new alphaTab.rendering.effects.TempoEffectInfo(),new alphaTab.rendering.effects.TripletFeelEffectInfo(),new alphaTab.rendering.effects.MarkerEffectInfo(),new alphaTab.rendering.effects.TextEffectInfo(),new alphaTab.rendering.effects.ChordsEffectInfo(),new alphaTab.rendering.effects.TrillEffectInfo(),new alphaTab.rendering.effects.BeatVibratoEffectInfo(),new alphaTab.rendering.effects.NoteVibratoEffectInfo(),new alphaTab.rendering.effects.AlternateEndingsEffectInfo()]),new alphaTab.rendering.ScoreBarRendererFactory(),new alphaTab.rendering.EffectBarRendererFactory("tab-effects",[new alphaTab.rendering.effects.CrescendoEffectInfo(),new alphaTab.rendering.effects.DynamicsEffectInfo(),new alphaTab.rendering.effects.LyricsEffectInfo(),new alphaTab.rendering.effects.TrillEffectInfo(),new alphaTab.rendering.effects.BeatVibratoEffectInfo(),new alphaTab.rendering.effects.NoteVibratoEffectInfo(),new alphaTab.rendering.effects.TapEffectInfo(),new alphaTab.rendering.effects.FadeInEffectInfo(),new alphaTab.rendering.effects.HarmonicsEffectInfo(),new alphaTab.rendering.effects.LetRingEffectInfo(),new alphaTab.rendering.effects.CapoEffectInfo(),new alphaTab.rendering.effects.PalmMuteEffectInfo(),new alphaTab.rendering.effects.PickStrokeEffectInfo()]),new alphaTab.rendering.TabBarRendererFactory(false,false,false)];
	alphaTab.Environment.StaveProfiles["score"] = [new alphaTab.rendering.EffectBarRendererFactory("score-effects",[new alphaTab.rendering.effects.TempoEffectInfo(),new alphaTab.rendering.effects.TripletFeelEffectInfo(),new alphaTab.rendering.effects.MarkerEffectInfo(),new alphaTab.rendering.effects.TextEffectInfo(),new alphaTab.rendering.effects.ChordsEffectInfo(),new alphaTab.rendering.effects.TrillEffectInfo(),new alphaTab.rendering.effects.BeatVibratoEffectInfo(),new alphaTab.rendering.effects.NoteVibratoEffectInfo(),new alphaTab.rendering.effects.FadeInEffectInfo(),new alphaTab.rendering.effects.LetRingEffectInfo(),new alphaTab.rendering.effects.PalmMuteEffectInfo(),new alphaTab.rendering.effects.PickStrokeEffectInfo(),new alphaTab.rendering.effects.AlternateEndingsEffectInfo()]),new alphaTab.rendering.ScoreBarRendererFactory(),new alphaTab.rendering.EffectBarRendererFactory("score-bottom-effects",[new alphaTab.rendering.effects.CrescendoEffectInfo(),new alphaTab.rendering.effects.DynamicsEffectInfo(),new alphaTab.rendering.effects.LyricsEffectInfo()])];
	alphaTab.Environment.StaveProfiles["tab"] = [new alphaTab.rendering.EffectBarRendererFactory("tab-effects",[new alphaTab.rendering.effects.TempoEffectInfo(),new alphaTab.rendering.effects.TripletFeelEffectInfo(),new alphaTab.rendering.effects.MarkerEffectInfo(),new alphaTab.rendering.effects.TextEffectInfo(),new alphaTab.rendering.effects.ChordsEffectInfo(),new alphaTab.rendering.effects.TripletFeelEffectInfo(),new alphaTab.rendering.effects.TrillEffectInfo(),new alphaTab.rendering.effects.BeatVibratoEffectInfo(),new alphaTab.rendering.effects.NoteVibratoEffectInfo(),new alphaTab.rendering.effects.TapEffectInfo(),new alphaTab.rendering.effects.FadeInEffectInfo(),new alphaTab.rendering.effects.HarmonicsEffectInfo(),new alphaTab.rendering.effects.LetRingEffectInfo(),new alphaTab.rendering.effects.CapoEffectInfo(),new alphaTab.rendering.effects.PalmMuteEffectInfo(),new alphaTab.rendering.effects.PickStrokeEffectInfo(),new alphaTab.rendering.effects.AlternateEndingsEffectInfo()]),new alphaTab.rendering.TabBarRendererFactory(true,true,true),new alphaTab.rendering.EffectBarRendererFactory("tab-bottom-effects",[new alphaTab.rendering.effects.LyricsEffectInfo()])];
	alphaTab.Environment.StaveProfiles["tab-mixed"] = [new alphaTab.rendering.EffectBarRendererFactory("tab-effects",[new alphaTab.rendering.effects.TempoEffectInfo(),new alphaTab.rendering.effects.TripletFeelEffectInfo(),new alphaTab.rendering.effects.MarkerEffectInfo(),new alphaTab.rendering.effects.TextEffectInfo(),new alphaTab.rendering.effects.ChordsEffectInfo(),new alphaTab.rendering.effects.TripletFeelEffectInfo(),new alphaTab.rendering.effects.TrillEffectInfo(),new alphaTab.rendering.effects.BeatVibratoEffectInfo(),new alphaTab.rendering.effects.NoteVibratoEffectInfo(),new alphaTab.rendering.effects.TapEffectInfo(),new alphaTab.rendering.effects.FadeInEffectInfo(),new alphaTab.rendering.effects.HarmonicsEffectInfo(),new alphaTab.rendering.effects.LetRingEffectInfo(),new alphaTab.rendering.effects.CapoEffectInfo(),new alphaTab.rendering.effects.PalmMuteEffectInfo(),new alphaTab.rendering.effects.PickStrokeEffectInfo(),new alphaTab.rendering.effects.AlternateEndingsEffectInfo()]),new alphaTab.rendering.TabBarRendererFactory(false,false,false),new alphaTab.rendering.EffectBarRendererFactory("tab-bottom-effects",[new alphaTab.rendering.effects.LyricsEffectInfo()])];
};
alphaTab.Environment.prototype = {
	__class__: alphaTab.Environment
};
alphaTab.LayoutSettings = $hx_exports["alphaTab"]["LayoutSettings"] = function() {
	this.Mode = null;
	this.AdditionalSettings = null;
	var this1 = {}
	this.AdditionalSettings = this1;
};
alphaTab.LayoutSettings.__name__ = ["alphaTab","LayoutSettings"];
alphaTab.LayoutSettings.get_Defaults = function() {
	var settings = new alphaTab.LayoutSettings();
	settings.Mode = "page";
	return settings;
};
alphaTab.LayoutSettings.prototype = {
	Get: function(key,def) {
		var this1 = this.AdditionalSettings;
		var key1 = key.toLowerCase();
		if(this1.hasOwnProperty(key1)) {
			return this.AdditionalSettings[key.toLowerCase()];
		}
		return def;
	}
	,__class__: alphaTab.LayoutSettings
};
alphaTab.Main = $hx_exports["alphaTab"]["Main"] = function() { };
alphaTab.Main.__name__ = ["alphaTab","Main"];
alphaTab.Main.main = function() {
};
alphaTab.Settings = $hx_exports["alphaTab"]["Settings"] = function() {
};
alphaTab.Settings.__name__ = ["alphaTab","Settings"];
alphaTab.Settings.SetDefaults = function(settings) {
	settings.UseWebWorker = true;
	settings.ScrollMode = "vertical";
	settings.ScrollSpeed = 300;
	settings.ScrollElement = "html,body";
	settings.BeatCursorWidth = 3;
};
alphaTab.Settings.FillPlayerOptions = function(settings,json,setDefaults,dataAttributes) {
	if((json && "cursor" in json)) {
		settings.EnableCursor = json.cursor;
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("cursor")) {
		settings.EnableCursor = dataAttributes["cursor"];
	} else if(setDefaults) {
		settings.EnableCursor = true;
	}
	if(settings.EnableCursor) {
		if((json && "playerOffset" in json)) {
			alphaTab.Settings.FillCursorOffset(settings,json.playerOffset);
		} else if(dataAttributes != null && dataAttributes.hasOwnProperty("playerOffset")) {
			alphaTab.Settings.FillCursorOffset(settings,dataAttributes["playerOffset"]);
		}
	}
	if((json && "handleClick" in json)) {
		settings.EnableSeekByClick = json.handleClick;
	} else if(setDefaults) {
		settings.EnableSeekByClick = true;
	}
	if((json && "autoScroll" in json)) {
		settings.ScrollMode = json.autoScroll;
	} else if(setDefaults) {
		settings.ScrollMode = "vertical";
	}
	if((json && "scrollSpeed" in json)) {
		settings.ScrollSpeed = json.scrollSpeed;
	} else if(setDefaults) {
		settings.ScrollSpeed = 300;
	}
	if((json && "scrollSpeed" in json)) {
		settings.ScrollElement = json.scrollSpeed;
	} else if(setDefaults) {
		settings.ScrollElement = "html,body";
	}
	if((json && "beatCursorWidth" in json)) {
		settings.BeatCursorWidth = json.beatCursorWidth;
	} else if(setDefaults) {
		settings.BeatCursorWidth = 3;
	}
};
alphaTab.Settings.FromJson = function(json,dataAttributes) {
	if(js.Boot.__instanceof(json,alphaTab.Settings)) {
		return js.Boot.__cast(json , alphaTab.Settings);
	}
	var settings = alphaTab.Settings.get_Defaults();
	settings.ScriptFile = alphaTab.Environment.ScriptFile;
	alphaTab.Settings.FillFromJson(settings,json,dataAttributes);
	return settings;
};
alphaTab.Settings.FillFromJson = function(settings,json,dataAttributes) {
	var global = $global;
	if(global.document && global.ALPHATAB_ROOT) {
		settings.ScriptFile = global.ALPHATAB_ROOT;
		settings.ScriptFile = alphaTab.Settings.EnsureFullUrl(settings.ScriptFile);
		settings.ScriptFile = alphaTab.Settings.AppendScriptName(settings.ScriptFile);
	} else {
		settings.ScriptFile = alphaTab.Environment.ScriptFile;
	}
	if(global.document && global.ALPHATAB_FONT) {
		settings.FontDirectory = global.ALPHATAB_FONT;
		settings.FontDirectory = alphaTab.Settings.EnsureFullUrl(settings.FontDirectory);
	} else {
		settings.FontDirectory = settings.ScriptFile;
		var s = settings.FontDirectory;
		if(!(s == null || s.length == 0)) {
			var this1 = settings.FontDirectory;
			var this2 = system.Convert.ToUInt16(47);
			var lastSlash = this1.lastIndexOf(String.fromCharCode(this2));
			if(lastSlash >= 0) {
				settings.FontDirectory = HxOverrides.substr(settings.FontDirectory,0,lastSlash) + "/Font/";
			}
		}
	}
	if((json && "logging" in json)) {
		settings.LogLevel = alphaTab.Settings.DecodeLogLevel(json.log);
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("logging")) {
		settings.LogLevel = alphaTab.Settings.DecodeLogLevel(dataAttributes["logging"]);
	}
	if((json && "useWorker" in json)) {
		settings.UseWebWorker = json.useWorker;
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("useWorker")) {
		settings.UseWebWorker = !(!dataAttributes["useWorker"]);
	}
	if((json && "scale" in json)) {
		settings.Scale = json.scale;
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("scale")) {
		settings.Scale = dataAttributes["scale"];
	}
	if((json && "width" in json)) {
		settings.Width = json.width;
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("width")) {
		settings.Width = dataAttributes["width"];
	}
	if((json && "engine" in json)) {
		settings.Engine = json.engine;
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("engine")) {
		settings.Engine = dataAttributes["engine"];
	}
	if((json && "stretchForce" in json)) {
		settings.StretchForce = json.stretchForce;
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("stretchForce")) {
		settings.StretchForce = dataAttributes["stretchForce"];
	}
	if((json && "forcePianoFingering" in json)) {
		settings.ForcePianoFingering = json.forcePianoFingering;
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("forcePianoFingering")) {
		settings.ForcePianoFingering = dataAttributes["forcePianoFingering"];
	}
	if((json && "lazy" in json)) {
		settings.DisableLazyLoading = !json.lazy;
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("lazy")) {
		settings.DisableLazyLoading = !(!(!dataAttributes["lazy"]));
	}
	if((json && "transpositionPitches" in json)) {
		settings.TranspositionPitches = json.transpositionPitches;
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("transpositionPitches")) {
		var pitchOffsets = dataAttributes["transpositionPitches"];
		if(pitchOffsets != null && pitchOffsets["length"]) {
			settings.TranspositionPitches = pitchOffsets;
		}
	}
	if((json && "displayTranspositionPitches" in json)) {
		settings.DisplayTranspositionPitches = json.displayTranspositionPitches;
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("displayTranspositionPitches")) {
		var pitchOffsets1 = dataAttributes["displayTranspositionPitches"];
		if(pitchOffsets1 != null && pitchOffsets1["length"]) {
			settings.DisplayTranspositionPitches = pitchOffsets1;
		}
	}
	if((json && "scriptFile" in json)) {
		settings.ScriptFile = alphaTab.Settings.EnsureFullUrl(json.scriptFile);
		settings.ScriptFile = alphaTab.Settings.AppendScriptName(settings.ScriptFile);
	}
	if((json && "fontDirectory" in json)) {
		settings.FontDirectory = alphaTab.Settings.EnsureFullUrl(json.fontDirectory);
	}
	if((json && "layout" in json)) {
		settings.Layout = alphaTab.Settings.LayoutFromJson(json.layout);
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("layout")) {
		settings.Layout = alphaTab.Settings.LayoutFromJson(dataAttributes["layout"]);
	}
	if(dataAttributes != null) {
		var key = $iterator(Object.keys(dataAttributes))();
		while(key.hasNext()) {
			var key1 = key.next();
			if(StringTools.startsWith(key1,"layout")) {
				var property = HxOverrides.substr(key1,6,null);
				settings.Layout.AdditionalSettings[property.toLowerCase()] = dataAttributes[key1];
			}
		}
	}
	if((json && "staves" in json)) {
		settings.Staves = alphaTab.Settings.StavesFromJson(json.staves);
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("staves")) {
		settings.Staves = alphaTab.Settings.StavesFromJson(dataAttributes["staves"]);
	}
	if(dataAttributes != null) {
		var key2 = $iterator(Object.keys(dataAttributes))();
		while(key2.hasNext()) {
			var key3 = key2.next();
			if(StringTools.startsWith(key3,"staves")) {
				var property1 = HxOverrides.substr(key3,6,null);
				settings.Staves.AdditionalSettings[property1.toLowerCase()] = dataAttributes[key3];
			}
		}
	}
	if((json && "player" in json)) {
		settings.EnablePlayer = true;
		settings.SoundFontFile = json.player;
	} else if(dataAttributes != null && dataAttributes.hasOwnProperty("player")) {
		settings.EnablePlayer = true;
		settings.SoundFontFile = dataAttributes["player"];
	}
	if(settings.EnablePlayer) {
		alphaTab.Settings.FillPlayerOptions(settings,json,true,dataAttributes);
	}
	if((json && "importer" in json)) {
		var json1 = json.importer;
		var keys2 = Object.keys(json1);
		var key21 = HxOverrides.iter(keys2);
		while(key21.hasNext()) {
			var key22 = key21.next();
			settings.ImporterSettings[key22.toLowerCase()] = json.importer[key22];
		}
	} else if(dataAttributes != null) {
		var key4 = $iterator(Object.keys(dataAttributes))();
		while(key4.hasNext()) {
			var key5 = key4.next();
			if(StringTools.startsWith(key5,"importer")) {
				var property2 = HxOverrides.substr(key5,8,null);
				settings.ImporterSettings[property2.toLowerCase()] = dataAttributes[key5];
			}
		}
	}
};
alphaTab.Settings.DecodeLogLevel = function(log) {
	if(typeof(log) == "number") {
		return log;
	}
	if(typeof(log) == "string") {
		var s = log;
		var _g = s.toLowerCase();
		switch(_g) {
		case "debug":
			return 1;
		case "error":
			return 4;
		case "info":
			return 2;
		case "none":
			return 0;
		case "warning":
			return 3;
		default:
		}
	}
	return 2;
};
alphaTab.Settings.FillCursorOffset = function(settings,playerOffset) {
	if(typeof(playerOffset) == "number") {
		settings.ScrollOffsetX = playerOffset;
		settings.ScrollOffsetY = playerOffset;
	} else if((playerOffset && "length" in playerOffset)) {
		var offsets = playerOffset;
		settings.ScrollOffsetX = offsets[0];
		settings.ScrollOffsetY = offsets[1];
	}
};
alphaTab.Settings.StavesFromJson = function(json) {
	var staveSettings;
	if(typeof(json) == "string") {
		staveSettings = new alphaTab.StaveSettings(json);
	} else if(json.id) {
		staveSettings = new alphaTab.StaveSettings(json.id);
		if(json.additionalSettings) {
			var json1 = json.additionalSettings;
			var keys2 = Object.keys(json1);
			var key2 = HxOverrides.iter(keys2);
			while(key2.hasNext()) {
				var key21 = key2.next();
				staveSettings.AdditionalSettings[key21.toLowerCase()] = json.additionalSettings[key21];
			}
		}
	} else {
		return new alphaTab.StaveSettings("score-tab");
	}
	return staveSettings;
};
alphaTab.Settings.LayoutFromJson = function(json) {
	var layout = new alphaTab.LayoutSettings();
	if(typeof(json) == "string") {
		layout.Mode = json;
	} else {
		if(json.mode) {
			layout.Mode = json.mode;
		}
		if(json.additionalSettings) {
			var json1 = json.additionalSettings;
			var keys = Object.keys(json1);
			var key = HxOverrides.iter(keys);
			while(key.hasNext()) {
				var key1 = key.next();
				layout.AdditionalSettings[key1.toLowerCase()] = json.additionalSettings[key1];
			}
		}
	}
	return layout;
};
alphaTab.Settings.AppendScriptName = function(url) {
	if(!(url == null || url.length == 0) && !StringTools.endsWith(url,".js")) {
		if(!StringTools.endsWith(url,"/")) {
			url = url + "/";
		}
		url = url + "AlphaTab.js";
	}
	return url;
};
alphaTab.Settings.EnsureFullUrl = function(relativeUrl) {
	var global = $global;
	if(!StringTools.startsWith(relativeUrl,"http") && !StringTools.startsWith(relativeUrl,"https") && !StringTools.startsWith(relativeUrl,"file")) {
		var this1 = "";
		var root = this1;
		root += Std.string(global.location.protocol);
		root += Std.string("//");
		if(global.location.hostname) {
			root += Std.string(global.location.hostname);
		}
		if(global.location.port) {
			root += Std.string(":");
			root += Std.string(global.location.port);
		}
		root += Std.string(global.location.pathname.split("/").slice(0,-1).join("/"));
		root += Std.string(relativeUrl);
		if(!StringTools.endsWith(root,"/")) {
			root += Std.string("/");
		}
		return root;
	}
	return relativeUrl;
};
alphaTab.Settings.get_Defaults = function() {
	var settings = new alphaTab.Settings();
	settings.Scale = 1.0;
	settings.StretchForce = 1;
	settings.Width = -1;
	settings.Engine = "default";
	var this1 = new Int32Array(0);
	settings.TranspositionPitches = this1;
	var this2 = new Int32Array(0);
	settings.DisplayTranspositionPitches = this2;
	var this3 = {}
	settings.ImporterSettings = this3;
	settings.Layout = alphaTab.LayoutSettings.get_Defaults();
	settings.Staves = new alphaTab.StaveSettings("default");
	settings.LogLevel = 2;
	alphaTab.Settings.SetDefaults(settings);
	return settings;
};
alphaTab.Settings.prototype = {
	ToJson: function() {
		var json = {}
		json.useWorker = this.UseWebWorker;
		json.scale = this.Scale;
		json.width = this.Width;
		json.engine = this.Engine;
		json.stretchForce = this.StretchForce;
		json.forcePianoFingering = this.ForcePianoFingering;
		json.transpositionPitches = this.TranspositionPitches;
		json.displayTranspositionPitches = this.DisplayTranspositionPitches;
		json.logging = this.LogLevel;
		json.scriptFile = this.ScriptFile;
		json.fontDirectory = this.FontDirectory;
		json.lazy = this.DisableLazyLoading;
		json.layout = {}
		json.layout.mode = this.Layout.Mode;
		json.layout.additionalSettings = {}
		var this1 = this.Layout.AdditionalSettings;
		var setting = $iterator(Object.keys(this1))();
		while(setting.hasNext()) {
			var setting1 = setting.next();
			json.layout.additionalSettings[setting1] = this.Layout.AdditionalSettings[setting1];
		}
		json.importer = {}
		var this2 = this.ImporterSettings;
		var setting2 = $iterator(Object.keys(this2))();
		while(setting2.hasNext()) {
			var setting3 = setting2.next();
			json.importer[setting3] = this.ImporterSettings[setting3];
		}
		json.staves = {}
		json.staves.id = this.Staves.Id;
		json.staves.additionalSettings = {}
		var this3 = this.Staves.AdditionalSettings;
		var additionalSetting = $iterator(Object.keys(this3))();
		while(additionalSetting.hasNext()) {
			var additionalSetting1 = additionalSetting.next();
			json.staves.additionalSettings[additionalSetting1] = this.Staves.AdditionalSettings[additionalSetting1];
		}
		return json;
	}
	,__class__: alphaTab.Settings
};
alphaTab.StaveSettings = $hx_exports["alphaTab"]["StaveSettings"] = function(id) {
	this.Id = null;
	this.AdditionalSettings = null;
	this.Id = id;
	var this1 = {}
	this.AdditionalSettings = this1;
};
alphaTab.StaveSettings.__name__ = ["alphaTab","StaveSettings"];
alphaTab.StaveSettings.prototype = {
	Get: function(key,def) {
		var this1 = this.AdditionalSettings;
		var key1 = key.toLowerCase();
		if(this1.hasOwnProperty(key1)) {
			return this.AdditionalSettings[key.toLowerCase()];
		}
		return def;
	}
	,__class__: alphaTab.StaveSettings
};
alphaTab.audio.BeatTickLookup = $hx_exports["alphaTab"]["audio"]["BeatTickLookup"] = function() {
};
alphaTab.audio.BeatTickLookup.__name__ = ["alphaTab","audio","BeatTickLookup"];
alphaTab.audio.BeatTickLookup.prototype = {
	__class__: alphaTab.audio.BeatTickLookup
};
alphaTab.audio.GeneralMidi = $hx_exports["alphaTab"]["audio"]["GeneralMidi"] = function() {
};
alphaTab.audio.GeneralMidi.__name__ = ["alphaTab","audio","GeneralMidi"];
alphaTab.audio.GeneralMidi.GetValue = function(name) {
	if(alphaTab.audio.GeneralMidi._values == null) {
		var this1 = {}
		alphaTab.audio.GeneralMidi._values = this1;
		alphaTab.audio.GeneralMidi._values["acousticgrandpiano"] = 0;
		alphaTab.audio.GeneralMidi._values["brightacousticpiano"] = 1;
		alphaTab.audio.GeneralMidi._values["electricgrandpiano"] = 2;
		alphaTab.audio.GeneralMidi._values["honkytonkpiano"] = 3;
		alphaTab.audio.GeneralMidi._values["electricpiano1"] = 4;
		alphaTab.audio.GeneralMidi._values["electricpiano2"] = 5;
		alphaTab.audio.GeneralMidi._values["harpsichord"] = 6;
		alphaTab.audio.GeneralMidi._values["clavinet"] = 7;
		alphaTab.audio.GeneralMidi._values["celesta"] = 8;
		alphaTab.audio.GeneralMidi._values["glockenspiel"] = 9;
		alphaTab.audio.GeneralMidi._values["musicbox"] = 10;
		alphaTab.audio.GeneralMidi._values["vibraphone"] = 11;
		alphaTab.audio.GeneralMidi._values["marimba"] = 12;
		alphaTab.audio.GeneralMidi._values["xylophone"] = 13;
		alphaTab.audio.GeneralMidi._values["tubularbells"] = 14;
		alphaTab.audio.GeneralMidi._values["dulcimer"] = 15;
		alphaTab.audio.GeneralMidi._values["drawbarorgan"] = 16;
		alphaTab.audio.GeneralMidi._values["percussiveorgan"] = 17;
		alphaTab.audio.GeneralMidi._values["rockorgan"] = 18;
		alphaTab.audio.GeneralMidi._values["churchorgan"] = 19;
		alphaTab.audio.GeneralMidi._values["reedorgan"] = 20;
		alphaTab.audio.GeneralMidi._values["accordion"] = 21;
		alphaTab.audio.GeneralMidi._values["harmonica"] = 22;
		alphaTab.audio.GeneralMidi._values["tangoaccordion"] = 23;
		alphaTab.audio.GeneralMidi._values["acousticguitarnylon"] = 24;
		alphaTab.audio.GeneralMidi._values["acousticguitarsteel"] = 25;
		alphaTab.audio.GeneralMidi._values["electricguitarjazz"] = 26;
		alphaTab.audio.GeneralMidi._values["electricguitarclean"] = 27;
		alphaTab.audio.GeneralMidi._values["electricguitarmuted"] = 28;
		alphaTab.audio.GeneralMidi._values["overdrivenguitar"] = 29;
		alphaTab.audio.GeneralMidi._values["distortionguitar"] = 30;
		alphaTab.audio.GeneralMidi._values["guitarharmonics"] = 31;
		alphaTab.audio.GeneralMidi._values["acousticbass"] = 32;
		alphaTab.audio.GeneralMidi._values["electricbassfinger"] = 33;
		alphaTab.audio.GeneralMidi._values["electricbasspick"] = 34;
		alphaTab.audio.GeneralMidi._values["fretlessbass"] = 35;
		alphaTab.audio.GeneralMidi._values["slapbass1"] = 36;
		alphaTab.audio.GeneralMidi._values["slapbass2"] = 37;
		alphaTab.audio.GeneralMidi._values["synthbass1"] = 38;
		alphaTab.audio.GeneralMidi._values["synthbass2"] = 39;
		alphaTab.audio.GeneralMidi._values["violin"] = 40;
		alphaTab.audio.GeneralMidi._values["viola"] = 41;
		alphaTab.audio.GeneralMidi._values["cello"] = 42;
		alphaTab.audio.GeneralMidi._values["contrabass"] = 43;
		alphaTab.audio.GeneralMidi._values["tremolostrings"] = 44;
		alphaTab.audio.GeneralMidi._values["pizzicatostrings"] = 45;
		alphaTab.audio.GeneralMidi._values["orchestralharp"] = 46;
		alphaTab.audio.GeneralMidi._values["timpani"] = 47;
		alphaTab.audio.GeneralMidi._values["stringensemble1"] = 48;
		alphaTab.audio.GeneralMidi._values["stringensemble2"] = 49;
		alphaTab.audio.GeneralMidi._values["synthstrings1"] = 50;
		alphaTab.audio.GeneralMidi._values["synthstrings2"] = 51;
		alphaTab.audio.GeneralMidi._values["choiraahs"] = 52;
		alphaTab.audio.GeneralMidi._values["voiceoohs"] = 53;
		alphaTab.audio.GeneralMidi._values["synthvoice"] = 54;
		alphaTab.audio.GeneralMidi._values["orchestrahit"] = 55;
		alphaTab.audio.GeneralMidi._values["trumpet"] = 56;
		alphaTab.audio.GeneralMidi._values["trombone"] = 57;
		alphaTab.audio.GeneralMidi._values["tuba"] = 58;
		alphaTab.audio.GeneralMidi._values["mutedtrumpet"] = 59;
		alphaTab.audio.GeneralMidi._values["frenchhorn"] = 60;
		alphaTab.audio.GeneralMidi._values["brasssection"] = 61;
		alphaTab.audio.GeneralMidi._values["synthbrass1"] = 62;
		alphaTab.audio.GeneralMidi._values["synthbrass2"] = 63;
		alphaTab.audio.GeneralMidi._values["sopranosax"] = 64;
		alphaTab.audio.GeneralMidi._values["altosax"] = 65;
		alphaTab.audio.GeneralMidi._values["tenorsax"] = 66;
		alphaTab.audio.GeneralMidi._values["baritonesax"] = 67;
		alphaTab.audio.GeneralMidi._values["oboe"] = 68;
		alphaTab.audio.GeneralMidi._values["englishhorn"] = 69;
		alphaTab.audio.GeneralMidi._values["bassoon"] = 70;
		alphaTab.audio.GeneralMidi._values["clarinet"] = 71;
		alphaTab.audio.GeneralMidi._values["piccolo"] = 72;
		alphaTab.audio.GeneralMidi._values["flute"] = 73;
		alphaTab.audio.GeneralMidi._values["recorder"] = 74;
		alphaTab.audio.GeneralMidi._values["panflute"] = 75;
		alphaTab.audio.GeneralMidi._values["blownbottle"] = 76;
		alphaTab.audio.GeneralMidi._values["shakuhachi"] = 77;
		alphaTab.audio.GeneralMidi._values["whistle"] = 78;
		alphaTab.audio.GeneralMidi._values["ocarina"] = 79;
		alphaTab.audio.GeneralMidi._values["lead1square"] = 80;
		alphaTab.audio.GeneralMidi._values["lead2sawtooth"] = 81;
		alphaTab.audio.GeneralMidi._values["lead3calliope"] = 82;
		alphaTab.audio.GeneralMidi._values["lead4chiff"] = 83;
		alphaTab.audio.GeneralMidi._values["lead5charang"] = 84;
		alphaTab.audio.GeneralMidi._values["lead6voice"] = 85;
		alphaTab.audio.GeneralMidi._values["lead7fifths"] = 86;
		alphaTab.audio.GeneralMidi._values["lead8bassandlead"] = 87;
		alphaTab.audio.GeneralMidi._values["pad1newage"] = 88;
		alphaTab.audio.GeneralMidi._values["pad2warm"] = 89;
		alphaTab.audio.GeneralMidi._values["pad3polysynth"] = 90;
		alphaTab.audio.GeneralMidi._values["pad4choir"] = 91;
		alphaTab.audio.GeneralMidi._values["pad5bowed"] = 92;
		alphaTab.audio.GeneralMidi._values["pad6metallic"] = 93;
		alphaTab.audio.GeneralMidi._values["pad7halo"] = 94;
		alphaTab.audio.GeneralMidi._values["pad8sweep"] = 95;
		alphaTab.audio.GeneralMidi._values["fx1rain"] = 96;
		alphaTab.audio.GeneralMidi._values["fx2soundtrack"] = 97;
		alphaTab.audio.GeneralMidi._values["fx3crystal"] = 98;
		alphaTab.audio.GeneralMidi._values["fx4atmosphere"] = 99;
		alphaTab.audio.GeneralMidi._values["fx5brightness"] = 100;
		alphaTab.audio.GeneralMidi._values["fx6goblins"] = 101;
		alphaTab.audio.GeneralMidi._values["fx7echoes"] = 102;
		alphaTab.audio.GeneralMidi._values["fx8scifi"] = 103;
		alphaTab.audio.GeneralMidi._values["sitar"] = 104;
		alphaTab.audio.GeneralMidi._values["banjo"] = 105;
		alphaTab.audio.GeneralMidi._values["shamisen"] = 106;
		alphaTab.audio.GeneralMidi._values["koto"] = 107;
		alphaTab.audio.GeneralMidi._values["kalimba"] = 108;
		alphaTab.audio.GeneralMidi._values["bagpipe"] = 109;
		alphaTab.audio.GeneralMidi._values["fiddle"] = 110;
		alphaTab.audio.GeneralMidi._values["shanai"] = 111;
		alphaTab.audio.GeneralMidi._values["tinklebell"] = 112;
		alphaTab.audio.GeneralMidi._values["agogo"] = 113;
		alphaTab.audio.GeneralMidi._values["steeldrums"] = 114;
		alphaTab.audio.GeneralMidi._values["woodblock"] = 115;
		alphaTab.audio.GeneralMidi._values["taikodrum"] = 116;
		alphaTab.audio.GeneralMidi._values["melodictom"] = 117;
		alphaTab.audio.GeneralMidi._values["synthdrum"] = 118;
		alphaTab.audio.GeneralMidi._values["reversecymbal"] = 119;
		alphaTab.audio.GeneralMidi._values["guitarfretnoise"] = 120;
		alphaTab.audio.GeneralMidi._values["breathnoise"] = 121;
		alphaTab.audio.GeneralMidi._values["seashore"] = 122;
		alphaTab.audio.GeneralMidi._values["birdtweet"] = 123;
		alphaTab.audio.GeneralMidi._values["telephonering"] = 124;
		alphaTab.audio.GeneralMidi._values["helicopter"] = 125;
		alphaTab.audio.GeneralMidi._values["applause"] = 126;
		alphaTab.audio.GeneralMidi._values["gunshot"] = 127;
	}
	name = StringTools.replace(name.toLowerCase()," ","");
	if(alphaTab.audio.GeneralMidi._values.hasOwnProperty(name)) {
		return alphaTab.audio.GeneralMidi._values[name];
	} else {
		return 0;
	}
};
alphaTab.audio.GeneralMidi.IsPiano = function(program) {
	if(!(program <= 7)) {
		if(program >= 16) {
			return program <= 23;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
alphaTab.audio.GeneralMidi.IsGuitar = function(program) {
	if(!(program >= 24 && program <= 39 || program == 105)) {
		return program == 43;
	} else {
		return true;
	}
};
alphaTab.audio.GeneralMidi.prototype = {
	__class__: alphaTab.audio.GeneralMidi
};
alphaTab.audio.MasterBarTickLookup = $hx_exports["alphaTab"]["audio"]["MasterBarTickLookup"] = function() {
	this.Start = 0;
	this.End = 0;
	this.Tempo = 0;
	this.MasterBar = null;
	this.Beats = null;
	var this1 = [];
	this.Beats = this1;
};
alphaTab.audio.MasterBarTickLookup.__name__ = ["alphaTab","audio","MasterBarTickLookup"];
alphaTab.audio.MasterBarTickLookup.prototype = {
	Finish: function() {
		var comparison = function(a,b) {
			return a.Start - b.Start;
		};
		this.Beats.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
	}
	,AddBeat: function(beat) {
		this.Beats.push(beat);
	}
	,__class__: alphaTab.audio.MasterBarTickLookup
};
alphaTab.audio.MidiTickLookup = $hx_exports["alphaTab"]["audio"]["MidiTickLookup"] = function() {
	this.MasterBarLookup = null;
	this.MasterBars = null;
	this._currentMasterBar = null;
	var this1 = [];
	this.MasterBars = this1;
	var this2 = {}
	this.MasterBarLookup = this2;
};
alphaTab.audio.MidiTickLookup.__name__ = ["alphaTab","audio","MidiTickLookup"];
alphaTab.audio.MidiTickLookup.prototype = {
	Finish: function() {
		var i = 0;
		while(i < this.MasterBars.length) {
			this.MasterBars[i].Finish();
			++i;
		}
	}
	,FindBeat: function(tracks,tick) {
		var masterBar = this.FindMasterBar(tick);
		if(masterBar == null) {
			return null;
		}
		var this1 = {}
		var trackLookup = this1;
		var track = HxOverrides.iter(tracks);
		while(track.hasNext()) {
			var track1 = track.next();
			trackLookup[track1.Index] = true;
		}
		var beat = null;
		var index = 0;
		var beats = masterBar.Beats;
		var b = 0;
		while(b < beats.length) {
			var currentBeat = beats[b];
			if(!trackLookup.hasOwnProperty(currentBeat.Beat.Voice.Bar.Staff.Track.Index)) {
				++b;
				continue;
			}
			if(currentBeat.Start <= tick && tick < currentBeat.End) {
				if(beat == null || beat.Start < currentBeat.Start) {
					beat = beats[b];
					index = b;
				}
			} else if(currentBeat.End > tick) {
				break;
			}
			++b;
		}
		if(beat == null) {
			return null;
		}
		var nextBeat = null;
		var b1 = index + 1;
		while(b1 < beats.length) {
			var currentBeat1 = beats[b1];
			if(trackLookup.hasOwnProperty(currentBeat1.Beat.Voice.Bar.Staff.Track.Index)) {
				nextBeat = currentBeat1;
				break;
			}
			++b1;
		}
		if(nextBeat == null && masterBar.MasterBar.NextMasterBar != null) {
			var nextBar = this.GetMasterBar(masterBar.MasterBar.NextMasterBar);
			beats = nextBar.Beats;
			var b2 = 0;
			while(b2 < beats.length) {
				var currentBeat2 = beats[b2];
				if(trackLookup.hasOwnProperty(currentBeat2.Beat.Voice.Bar.Staff.Track.Index)) {
					nextBeat = currentBeat2;
					break;
				}
				++b2;
			}
		}
		var result = new alphaTab.audio.MidiTickLookupFindBeatResult();
		result.CurrentBeat = beat.Beat;
		result.NextBeat = nextBeat == null ? null : nextBeat.Beat;
		result.Duration = alphaTab.audio.MidiUtils.TicksToMillis(beat.End - beat.Start,masterBar.Tempo);
		return result;
	}
	,FindMasterBar: function(tick) {
		var bars = this.MasterBars;
		var bottom = 0;
		var top = bars.length - 1;
		while(bottom <= top) {
			var middle = (top + bottom) / 2 | 0;
			var bar = bars[middle];
			if(tick >= bar.Start && tick < bar.End) {
				return bar;
			}
			if(tick < bar.Start) {
				top = middle - 1;
			} else {
				bottom = middle + 1;
			}
		}
		return null;
	}
	,GetMasterBar: function(bar) {
		if(!this.MasterBarLookup.hasOwnProperty(bar.Index)) {
			var _tmp = new alphaTab.audio.MasterBarTickLookup();
			_tmp.Start = 0;
			_tmp.End = 0;
			var this1 = [];
			_tmp.Beats = this1;
			_tmp.MasterBar = bar;
			return _tmp;
		}
		return this.MasterBarLookup[bar.Index];
	}
	,GetMasterBarStart: function(bar) {
		if(!this.MasterBarLookup.hasOwnProperty(bar.Index)) {
			return 0;
		}
		return this.MasterBarLookup[bar.Index].Start;
	}
	,AddMasterBar: function(masterBar) {
		this.MasterBars.push(masterBar);
		this._currentMasterBar = masterBar;
		if(!this.MasterBarLookup.hasOwnProperty(masterBar.MasterBar.Index)) {
			this.MasterBarLookup[masterBar.MasterBar.Index] = masterBar;
		}
	}
	,AddBeat: function(beat) {
		this._currentMasterBar.AddBeat(beat);
	}
	,__class__: alphaTab.audio.MidiTickLookup
};
alphaTab.audio.MidiTickLookupFindBeatResult = $hx_exports["alphaTab"]["audio"]["MidiTickLookupFindBeatResult"] = function() {
};
alphaTab.audio.MidiTickLookupFindBeatResult.__name__ = ["alphaTab","audio","MidiTickLookupFindBeatResult"];
alphaTab.audio.MidiTickLookupFindBeatResult.prototype = {
	__class__: alphaTab.audio.MidiTickLookupFindBeatResult
};
alphaTab.audio.MidiUtils = $hx_exports["alphaTab"]["audio"]["MidiUtils"] = function() { };
alphaTab.audio.MidiUtils.__name__ = ["alphaTab","audio","MidiUtils"];
alphaTab.audio.MidiUtils.TicksToMillis = function(ticks,tempo) {
	return system.Convert.ToInt32_Double(ticks * (60000.0 / (tempo * 960)));
};
alphaTab.audio.MidiUtils.ToTicks = function(duration) {
	return alphaTab.audio.MidiUtils.ValueToTicks(duration);
};
alphaTab.audio.MidiUtils.ValueToTicks = function(duration) {
	var this1 = duration;
	var denomninator = this1;
	if(denomninator < 0) {
		denomninator = 1 / -denomninator;
	}
	return system.Convert.ToInt32_Single(960 * (4.0 / denomninator));
};
alphaTab.audio.MidiUtils.ApplyDot = function(ticks,doubleDotted) {
	if(doubleDotted) {
		return ticks + (ticks / 4 | 0) * 3;
	}
	return ticks + (ticks / 2 | 0);
};
alphaTab.audio.MidiUtils.ApplyTuplet = function(ticks,numerator,denominator) {
	return ticks * denominator / numerator | 0;
};
alphaTab.audio.MidiUtils.DynamicToVelocity = function(dyn) {
	return 15 + dyn * 16;
};
alphaTab.audio.generator = {};
alphaTab.audio.generator.IMidiFileHandler = $hx_exports["alphaTab"]["audio"]["generator"]["IMidiFileHandler"] = function() { };
alphaTab.audio.generator.IMidiFileHandler.__name__ = ["alphaTab","audio","generator","IMidiFileHandler"];
alphaTab.audio.generator.IMidiFileHandler.prototype = {
	__class__: alphaTab.audio.generator.IMidiFileHandler
};
alphaTab.audio.generator.AlphaSynthMidiFileHandler = $hx_exports["alphaTab"]["audio"]["generator"]["AlphaSynthMidiFileHandler"] = function(midiFile) {
	this._midiFile = null;
	this._midiFile = midiFile;
};
alphaTab.audio.generator.AlphaSynthMidiFileHandler.__name__ = ["alphaTab","audio","generator","AlphaSynthMidiFileHandler"];
alphaTab.audio.generator.AlphaSynthMidiFileHandler.__interfaces__ = [alphaTab.audio.generator.IMidiFileHandler];
alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue = function(value) {
	if(value > 127) {
		return 127;
	}
	return value;
};
alphaTab.audio.generator.AlphaSynthMidiFileHandler.prototype = {
	AddTimeSignature: function(tick,timeSignatureNumerator,timeSignatureDenominator) {
		var denominatorIndex = 0;
		while(true) {
			timeSignatureDenominator = timeSignatureDenominator >> 1;
			if(!(timeSignatureDenominator > 0)) {
				break;
			}
			++denominatorIndex;
		}
		var message = new alphaTab.audio.synth.midi.event.MetaDataEvent(tick,255,system.Convert.ToUInt8(88),new Uint8Array([system.Convert.ToUInt8(timeSignatureNumerator & 255),system.Convert.ToUInt8(denominatorIndex & 255),48,8]));
		this._midiFile.Events.push(message);
	}
	,AddRest: function(track,tick,channel) {
		var message = new alphaTab.audio.synth.midi.event.SystemExclusiveEvent(tick,system.Convert.ToUInt8(240),0,new Uint8Array([255]));
		this._midiFile.Events.push(message);
	}
	,AddNote: function(track,start,length,key,dynamicValue,channel) {
		var velocity = alphaTab.audio.MidiUtils.DynamicToVelocity(dynamicValue);
		var noteOn = new alphaTab.audio.synth.midi.event.MidiEvent(start,this.MakeCommand(system.Convert.ToUInt8(144),channel),alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(key),alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(system.Convert.ToUInt8(velocity)));
		this._midiFile.Events.push(noteOn);
		var noteOff = new alphaTab.audio.synth.midi.event.MidiEvent(start + length,this.MakeCommand(system.Convert.ToUInt8(128),channel),alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(key),alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(system.Convert.ToUInt8(velocity)));
		this._midiFile.Events.push(noteOff);
	}
	,MakeCommand: function(command,channel) {
		return system.Convert.ToUInt8(command & 240 | channel & 15);
	}
	,AddControlChange: function(track,tick,channel,controller,value) {
		var message = new alphaTab.audio.synth.midi.event.MidiEvent(tick,this.MakeCommand(system.Convert.ToUInt8(176),channel),alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(controller),alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(value));
		this._midiFile.Events.push(message);
	}
	,AddProgramChange: function(track,tick,channel,program) {
		var message = new alphaTab.audio.synth.midi.event.MidiEvent(tick,this.MakeCommand(system.Convert.ToUInt8(192),channel),alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(program),0);
		this._midiFile.Events.push(message);
	}
	,AddTempo: function(tick,tempo) {
		var tempoInUsq = 60000000 / tempo | 0;
		var message = new alphaTab.audio.synth.midi.event.MetaNumberEvent(tick,255,system.Convert.ToUInt8(81),tempoInUsq);
		this._midiFile.Events.push(message);
	}
	,AddBend: function(track,tick,channel,value) {
		var message = new alphaTab.audio.synth.midi.event.MidiEvent(tick,this.MakeCommand(system.Convert.ToUInt8(224),channel),0,alphaTab.audio.generator.AlphaSynthMidiFileHandler.FixValue(value));
		this._midiFile.Events.push(message);
	}
	,FinishTrack: function(track,tick) {
		var message = system.Convert.ToUInt8(47);
		var this1 = new Uint8Array(0);
		var message1 = new alphaTab.audio.synth.midi.event.MetaDataEvent(tick,255,message,this1);
		this._midiFile.Events.push(message1);
	}
	,__class__: alphaTab.audio.generator.AlphaSynthMidiFileHandler
};
alphaTab.audio.generator.MidiFileGenerator = $hx_exports["alphaTab"]["audio"]["generator"]["MidiFileGenerator"] = function(score,handler) {
	this._score = null;
	this._handler = null;
	this._currentTempo = 0;
	this.TickLookup = null;
	this._score = score;
	this._currentTempo = this._score.Tempo;
	this._handler = handler;
	this.TickLookup = new alphaTab.audio.MidiTickLookup();
};
alphaTab.audio.generator.MidiFileGenerator.__name__ = ["alphaTab","audio","generator","MidiFileGenerator"];
alphaTab.audio.generator.MidiFileGenerator.ToChannelShort = function(data) {
	var value = Math.max(-32768,Math.min(32767,data * 8 - 1));
	return Math.max(value,-1) + 1;
};
alphaTab.audio.generator.MidiFileGenerator.prototype = {
	Generate: function() {
		var i = 0;
		var j = this._score.Tracks.length;
		while(i < j) {
			this.GenerateTrack(this._score.Tracks[i]);
			++i;
		}
		var controller = new alphaTab.audio.generator.MidiPlaybackController(this._score);
		var previousMasterBar = null;
		while(!controller.get_Finished()) {
			var index = controller.Index;
			var bar = this._score.MasterBars[index];
			var currentTick = controller.CurrentTick;
			controller.ProcessCurrent();
			if(controller.ShouldPlay) {
				this.GenerateMasterBar(bar,previousMasterBar,currentTick);
				var i1 = 0;
				var j1 = this._score.Tracks.length;
				while(i1 < j1) {
					var track = this._score.Tracks[i1];
					var k = 0;
					var l = track.Staves.length;
					while(k < l) {
						var staff = track.Staves[k];
						if(index < staff.Bars.length) {
							this.GenerateBar(staff.Bars[index],currentTick);
						}
						++k;
					}
					++i1;
				}
			}
			controller.MoveNext();
			previousMasterBar = bar;
		}
		var i2 = 0;
		var j2 = this._score.Tracks.length;
		while(i2 < j2) {
			this._handler.FinishTrack(this._score.Tracks[i2].Index,controller.CurrentTick);
			++i2;
		}
		this.TickLookup.Finish();
	}
	,GenerateTrack: function(track) {
		this.GenerateChannel(track,system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel),track.PlaybackInfo);
		if(track.PlaybackInfo.PrimaryChannel != track.PlaybackInfo.SecondaryChannel) {
			this.GenerateChannel(track,system.Convert.ToUInt8(track.PlaybackInfo.SecondaryChannel),track.PlaybackInfo);
		}
	}
	,GenerateChannel: function(track,channel,playbackInfo) {
		var volume = alphaTab.audio.generator.MidiFileGenerator.ToChannelShort(playbackInfo.Volume);
		var balance = alphaTab.audio.generator.MidiFileGenerator.ToChannelShort(playbackInfo.Balance);
		this._handler.AddControlChange(track.Index,0,channel,system.Convert.ToUInt8(7),system.Convert.ToUInt8(volume));
		this._handler.AddControlChange(track.Index,0,channel,system.Convert.ToUInt8(10),system.Convert.ToUInt8(balance));
		this._handler.AddControlChange(track.Index,0,channel,system.Convert.ToUInt8(11),127);
		this._handler.AddControlChange(track.Index,0,channel,system.Convert.ToUInt8(100),0);
		this._handler.AddControlChange(track.Index,0,channel,system.Convert.ToUInt8(101),0);
		this._handler.AddControlChange(track.Index,0,channel,system.Convert.ToUInt8(38),0);
		this._handler.AddControlChange(track.Index,0,channel,system.Convert.ToUInt8(6),12);
		this._handler.AddProgramChange(track.Index,0,channel,system.Convert.ToUInt8(playbackInfo.Program));
	}
	,GenerateMasterBar: function(masterBar,previousMasterBar,currentTick) {
		if(previousMasterBar == null || previousMasterBar.TimeSignatureDenominator != masterBar.TimeSignatureDenominator || previousMasterBar.TimeSignatureNumerator != masterBar.TimeSignatureNumerator) {
			this._handler.AddTimeSignature(currentTick,masterBar.TimeSignatureNumerator,masterBar.TimeSignatureDenominator);
		}
		if(previousMasterBar == null) {
			this._handler.AddTempo(currentTick,masterBar.Score.Tempo);
			this._currentTempo = masterBar.Score.Tempo;
		} else if(masterBar.TempoAutomation != null) {
			this._handler.AddTempo(currentTick,system.Convert.ToInt32_Single(masterBar.TempoAutomation.Value));
			this._currentTempo = system.Convert.ToInt32_Single(masterBar.TempoAutomation.Value);
		}
		var masterBarLookup = new alphaTab.audio.MasterBarTickLookup();
		masterBarLookup.MasterBar = masterBar;
		masterBarLookup.Start = currentTick;
		masterBarLookup.Tempo = this._currentTempo;
		masterBarLookup.End = masterBarLookup.Start + masterBar.CalculateDuration();
		this.TickLookup.AddMasterBar(masterBarLookup);
	}
	,GenerateBar: function(bar,barStartTick) {
		var i = 0;
		var j = bar.Voices.length;
		while(i < j) {
			this.GenerateVoice(bar.Voices[i],barStartTick);
			++i;
		}
	}
	,GenerateVoice: function(voice,barStartTick) {
		if(voice.IsEmpty && (!voice.Bar.get_IsEmpty() || voice.Index != 0)) {
			return;
		}
		var i = 0;
		var j = voice.Beats.length;
		while(i < j) {
			this.GenerateBeat(voice.Beats[i],barStartTick);
			++i;
		}
	}
	,GenerateBeat: function(beat,barStartTick) {
		var beatStart = beat.Start;
		var audioDuration = beat.Voice.Bar.get_IsEmpty() ? beat.Voice.Bar.get_MasterBar().CalculateDuration() : beat.CalculateDuration();
		var beatLookup = new alphaTab.audio.BeatTickLookup();
		beatLookup.Start = barStartTick + beatStart;
		var realTickOffset = beat.NextBeat == null ? audioDuration : beat.NextBeat.get_AbsoluteStart() - beat.get_AbsoluteStart();
		beatLookup.End = barStartTick + beatStart + (realTickOffset > audioDuration ? realTickOffset : audioDuration);
		beatLookup.Beat = beat;
		this.TickLookup.AddBeat(beatLookup);
		var track = beat.Voice.Bar.Staff.Track;
		var i = 0;
		var j = beat.Automations.length;
		while(i < j) {
			this.GenerateAutomation(beat,beat.Automations[i],barStartTick);
			++i;
		}
		if(beat.get_IsRest()) {
			this._handler.AddRest(track.Index,barStartTick + beatStart,track.PlaybackInfo.PrimaryChannel);
		} else {
			var brushInfo = this.GetBrushInfo(beat);
			var i1 = 0;
			var j1 = beat.Notes.length;
			while(i1 < j1) {
				var n = beat.Notes[i1];
				this.GenerateNote(n,barStartTick + beatStart,audioDuration,brushInfo);
				++i1;
			}
		}
		if(beat.Vibrato != 0) {
			var phaseLength = 240;
			var bendAmplitude = 3;
			this.GenerateVibratorWithParams(beat.Voice.Bar.Staff.Track,barStartTick + beatStart,beat.CalculateDuration(),phaseLength,bendAmplitude);
		}
	}
	,GenerateNote: function(note,beatStart,beatDuration,brushInfo) {
		var track = note.Beat.Voice.Bar.Staff.Track;
		var staff = note.Beat.Voice.Bar.Staff;
		var noteKey = note.get_RealValue();
		var brushOffset = note.get_IsStringed() && note.String <= brushInfo.length ? brushInfo[note.String - 1] : 0;
		var noteStart = beatStart + brushOffset;
		var noteDuration = this.GetNoteDuration(note,beatDuration) - brushOffset;
		var dynamicValue = this.GetDynamicValue(note);
		if(!note.get_HasBend()) {
			this._handler.AddBend(track.Index,noteStart,system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel),system.Convert.ToUInt8(64));
		}
		if(note.Beat.FadeIn) {
			this.GenerateFadeIn(note,noteStart,noteDuration,noteKey,dynamicValue);
		}
		if(note.get_IsTrill() && staff.StaffKind != 2) {
			this.GenerateTrill(note,noteStart,noteDuration,noteKey,dynamicValue);
			return;
		}
		if(note.Beat.get_IsTremolo()) {
			this.GenerateTremoloPicking(note,noteStart,noteDuration,noteKey,dynamicValue);
			return;
		}
		if(note.get_HasBend()) {
			this.GenerateBend(note,noteStart,noteDuration,noteKey,dynamicValue);
		} else if(note.Beat.get_HasWhammyBar()) {
			this.GenerateWhammyBar(note,noteStart,noteDuration,noteKey,dynamicValue);
		} else if(note.SlideType != 0) {
			this.GenerateSlide(note,noteStart,noteDuration,noteKey,dynamicValue);
		} else if(note.Vibrato != 0) {
			this.GenerateVibrato(note,noteStart,noteDuration,noteKey,dynamicValue);
		}
		if(note.HarmonicType != 0) {
			this.GenerateHarmonic(note,noteStart,noteDuration,noteKey,dynamicValue);
		}
		if(!note.IsTieDestination) {
			this._handler.AddNote(track.Index,noteStart,noteDuration,system.Convert.ToUInt8(noteKey),dynamicValue,system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel));
		}
	}
	,GetNoteDuration: function(note,beatDuration) {
		return this.ApplyDurationEffects(note,beatDuration);
	}
	,ApplyDurationEffects: function(note,duration) {
		if(note.IsDead) {
			return this.ApplyStaticDuration(30,duration);
		}
		if(note.IsPalmMute) {
			return this.ApplyStaticDuration(80,duration);
		}
		if(note.IsStaccato) {
			return duration / 2 | 0;
		}
		if(note.IsTieOrigin) {
			var endNote = note.TieDestination;
			if(endNote != null) {
				if(!note.IsTieDestination) {
					var startTick = note.Beat.get_AbsoluteStart();
					var endTick = endNote.Beat.get_AbsoluteStart() + this.GetNoteDuration(endNote,endNote.Beat.CalculateDuration());
					return endTick - startTick;
				} else {
					return duration + this.GetNoteDuration(endNote,endNote.Beat.CalculateDuration());
				}
			}
		}
		return duration;
	}
	,ApplyStaticDuration: function(duration,maximum) {
		var value = this._currentTempo * duration / 60 | 0;
		return Math.min(value,maximum);
	}
	,GetDynamicValue: function(note) {
		var dynamicValue = note.Dynamic;
		if(note.Beat.Voice.Bar.Staff.StaffKind != 2 && note.HammerPullOrigin != null) {
			--dynamicValue;
		}
		if(note.IsGhost) {
			--dynamicValue;
		}
		var _g = note.Accentuated;
		switch(_g) {
		case 1:
			++dynamicValue;
			break;
		case 2:
			dynamicValue += 2;
			break;
		default:
		}
		return dynamicValue;
	}
	,GenerateFadeIn: function(note,noteStart,noteDuration,noteKey,dynamicValue) {
		var track = note.Beat.Voice.Bar.Staff.Track;
		var endVolume = alphaTab.audio.generator.MidiFileGenerator.ToChannelShort(track.PlaybackInfo.Volume);
		var volumeFactor = js.Boot.__cast(endVolume , Float) / noteDuration;
		var tickStep = 120;
		var steps = noteDuration / tickStep | 0;
		var endTick = noteStart + noteDuration;
		var i = steps - 1;
		while(i >= 0) {
			var tick = endTick - i * tickStep;
			var volume = (tick - noteStart) * volumeFactor;
			if(i == steps - 1) {
				this._handler.AddControlChange(track.Index,noteStart,system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel),system.Convert.ToUInt8(7),system.Convert.ToUInt8(system.Convert.ToInt32_Single(volume)));
				this._handler.AddControlChange(track.Index,noteStart,system.Convert.ToUInt8(track.PlaybackInfo.SecondaryChannel),system.Convert.ToUInt8(7),system.Convert.ToUInt8(system.Convert.ToInt32_Single(volume)));
			}
			this._handler.AddControlChange(track.Index,tick,system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel),system.Convert.ToUInt8(7),system.Convert.ToUInt8(system.Convert.ToInt32_Single(volume)));
			this._handler.AddControlChange(track.Index,tick,system.Convert.ToUInt8(track.PlaybackInfo.SecondaryChannel),system.Convert.ToUInt8(7),system.Convert.ToUInt8(system.Convert.ToInt32_Single(volume)));
			--i;
		}
	}
	,GenerateHarmonic: function(note,noteStart,noteDuration,noteKey,dynamicValue) {
	}
	,GenerateVibrato: function(note,noteStart,noteDuration,noteKey,dynamicValue) {
		var phaseLength = 480;
		var bendAmplitude = 2;
		var track = note.Beat.Voice.Bar.Staff.Track;
		this.GenerateVibratorWithParams(track,noteStart,noteDuration,phaseLength,bendAmplitude);
	}
	,GenerateVibratorWithParams: function(track,noteStart,noteDuration,phaseLength,bendAmplitude) {
		var resolution = 16;
		var phaseHalf = phaseLength / 2 | 0;
		noteStart = noteStart + phaseLength;
		var noteEnd = noteStart + noteDuration;
		while(noteStart < noteEnd) {
			var phase = 0;
			var phaseDuration = noteStart + phaseLength < noteEnd ? phaseLength : noteEnd - noteStart;
			while(phase < phaseDuration) {
				var bend = bendAmplitude * Math.sin(phase * 3.14159265358979 / phaseHalf);
				this._handler.AddBend(track.Index,noteStart + phase,system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel),system.Convert.ToUInt8(system.Convert.ToInt32_Double(64 + bend)));
				phase = phase + resolution;
			}
			noteStart = noteStart + phaseLength;
		}
	}
	,GenerateSlide: function(note,noteStart,noteDuration,noteKey,dynamicValue) {
	}
	,GenerateWhammyBar: function(note,noteStart,noteDuration,noteKey,dynamicValue) {
	}
	,GenerateBend: function(note,noteStart,noteDuration,noteKey,dynamicValue) {
		var track = note.Beat.Voice.Bar.Staff.Track;
		var ticksPerPosition = js.Boot.__cast(noteDuration , Float) / 60;
		var i = 0;
		while(i < note.BendPoints.length - 1) {
			var currentPoint = note.BendPoints[i];
			var nextPoint = note.BendPoints[i + 1];
			var currentBendValue = 64 + currentPoint.Value * 2.75;
			var nextBendValue = 64 + nextPoint.Value * 2.75;
			var ticksBetweenPoints = ticksPerPosition * (nextPoint.Offset - currentPoint.Offset);
			var ticksPerValue = ticksBetweenPoints / Math.abs(nextBendValue - currentBendValue);
			var tick = noteStart + ticksPerPosition * currentPoint.Offset;
			if(currentBendValue < nextBendValue) {
				while(currentBendValue <= nextBendValue) {
					var this1 = currentBendValue;
					this._handler.AddBend(track.Index,system.Convert.ToInt32_Double(tick),system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel),system.Convert.ToUInt8(system.Convert.ToInt32_Double(Math.round(this1))));
					++currentBendValue;
					tick = tick + ticksPerValue;
				}
			} else if(currentBendValue > nextBendValue) {
				while(currentBendValue >= nextBendValue) {
					var this2 = currentBendValue;
					this._handler.AddBend(track.Index,system.Convert.ToInt32_Double(tick),system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel),system.Convert.ToUInt8(system.Convert.ToInt32_Double(Math.round(this2))));
					--currentBendValue;
					tick = tick + ticksPerValue;
				}
			}
			++i;
		}
	}
	,GenerateTrill: function(note,noteStart,noteDuration,noteKey,dynamicValue) {
		var track = note.Beat.Voice.Bar.Staff.Track;
		var trillKey = note.get_StringTuning() + note.get_TrillFret();
		var trillLength = alphaTab.audio.MidiUtils.ToTicks(note.TrillSpeed);
		var realKey = true;
		var tick = noteStart;
		while(tick + 10 < noteStart + noteDuration) {
			if(tick + trillLength >= noteStart + noteDuration) {
				trillLength = noteStart + noteDuration - tick;
			}
			this._handler.AddNote(track.Index,tick,trillLength,system.Convert.ToUInt8(realKey ? trillKey : noteKey),dynamicValue,system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel));
			realKey = !realKey;
			tick = tick + trillLength;
		}
	}
	,GenerateTremoloPicking: function(note,noteStart,noteDuration,noteKey,dynamicValue) {
		var track = note.Beat.Voice.Bar.Staff.Track;
		var tpLength = alphaTab.audio.MidiUtils.ToTicks(note.Beat.TremoloSpeed);
		var tick = noteStart;
		while(tick + 10 < noteStart + noteDuration) {
			if(tick + tpLength >= noteStart + noteDuration) {
				tpLength = noteStart + noteDuration - tick;
			}
			this._handler.AddNote(track.Index,tick,tpLength,system.Convert.ToUInt8(noteKey),dynamicValue,system.Convert.ToUInt8(track.PlaybackInfo.PrimaryChannel));
			tick = tick + tpLength;
		}
	}
	,GetBrushInfo: function(beat) {
		var this1 = new Int32Array(beat.Voice.Bar.Staff.Tuning.length);
		var brushInfo = this1;
		if(beat.BrushType != 0) {
			var stringUsed = 0;
			var i = 0;
			var j = beat.Notes.length;
			while(i < j) {
				var n = beat.Notes[i];
				if(n.IsTieDestination) {
					++i;
					continue;
				}
				stringUsed = stringUsed | 1 << n.String - 1;
				++i;
			}
			if(beat.Notes.length > 0) {
				var brushMove = 0;
				var brushIncrement = this.GetBrushIncrement(beat);
				var i1 = 0;
				var j1 = beat.Voice.Bar.Staff.Tuning.length;
				while(i1 < j1) {
					var index = beat.BrushType == 4 || beat.BrushType == 2 ? i1 : brushInfo.length - 1 - i1;
					if((stringUsed & 1 << index) != 0) {
						brushInfo[index] = brushMove;
						brushMove = brushIncrement;
					}
					++i1;
				}
			}
		}
		return brushInfo;
	}
	,GetBrushIncrement: function(beat) {
		if(beat.BrushDuration == 0) {
			return 0;
		}
		var duration = beat.CalculateDuration();
		if(duration == 0) {
			return 0;
		}
		return system.Convert.ToInt32_Double(duration / 8.0 * (4.0 / beat.BrushDuration));
	}
	,GenerateAutomation: function(beat,automation,startMove) {
		var _g = automation.Type;
		switch(_g) {
		case 1:
			var volume = alphaTab.audio.generator.MidiFileGenerator.ToChannelShort(system.Convert.ToInt32_Single(automation.Value));
			this._handler.AddControlChange(beat.Voice.Bar.Staff.Track.Index,beat.Start + startMove,system.Convert.ToUInt8(beat.Voice.Bar.Staff.Track.PlaybackInfo.PrimaryChannel),system.Convert.ToUInt8(7),system.Convert.ToUInt8(volume));
			this._handler.AddControlChange(beat.Voice.Bar.Staff.Track.Index,beat.Start + startMove,system.Convert.ToUInt8(beat.Voice.Bar.Staff.Track.PlaybackInfo.SecondaryChannel),system.Convert.ToUInt8(7),system.Convert.ToUInt8(volume));
			break;
		case 2:
			this._handler.AddProgramChange(beat.Voice.Bar.Staff.Track.Index,beat.Start + startMove,system.Convert.ToUInt8(beat.Voice.Bar.Staff.Track.PlaybackInfo.PrimaryChannel),system.Convert.ToUInt8(system.Convert.ToInt32_Single(automation.Value)));
			this._handler.AddProgramChange(beat.Voice.Bar.Staff.Track.Index,beat.Start + startMove,system.Convert.ToUInt8(beat.Voice.Bar.Staff.Track.PlaybackInfo.SecondaryChannel),system.Convert.ToUInt8(system.Convert.ToInt32_Single(automation.Value)));
			break;
		case 3:
			var balance = alphaTab.audio.generator.MidiFileGenerator.ToChannelShort(system.Convert.ToInt32_Single(automation.Value));
			this._handler.AddControlChange(beat.Voice.Bar.Staff.Track.Index,beat.Start + startMove,system.Convert.ToUInt8(beat.Voice.Bar.Staff.Track.PlaybackInfo.PrimaryChannel),system.Convert.ToUInt8(10),system.Convert.ToUInt8(balance));
			this._handler.AddControlChange(beat.Voice.Bar.Staff.Track.Index,beat.Start + startMove,system.Convert.ToUInt8(beat.Voice.Bar.Staff.Track.PlaybackInfo.SecondaryChannel),system.Convert.ToUInt8(10),system.Convert.ToUInt8(balance));
			break;
		default:
		}
	}
	,__class__: alphaTab.audio.generator.MidiFileGenerator
};
alphaTab.audio.generator.MidiPlaybackController = $hx_exports["alphaTab"]["audio"]["generator"]["MidiPlaybackController"] = function(score) {
	this._score = null;
	this._repeatStartIndex = 0;
	this._repeatNumber = 0;
	this._repeatOpen = false;
	this.ShouldPlay = false;
	this.Index = 0;
	this.CurrentTick = 0;
	this._score = score;
	this.ShouldPlay = true;
	this.Index = 0;
	this.CurrentTick = 0;
};
alphaTab.audio.generator.MidiPlaybackController.__name__ = ["alphaTab","audio","generator","MidiPlaybackController"];
alphaTab.audio.generator.MidiPlaybackController.prototype = {
	get_Finished: function() {
		return this.Index >= this._score.MasterBars.length;
	}
	,ProcessCurrent: function() {
		var masterBar = this._score.MasterBars[this.Index];
		var masterBarAlternateEndings = masterBar.AlternateEndings;
		if(!masterBar.RepeatGroup.IsClosed && masterBar.RepeatGroup.Openings[masterBar.RepeatGroup.Openings.length - 1] == masterBar) {
			this._repeatNumber = 0;
			this._repeatOpen = false;
		}
		if((masterBar.IsRepeatStart || masterBar.Index == 0) && this._repeatNumber == 0) {
			this._repeatStartIndex = this.Index;
			this._repeatOpen = true;
		} else if(masterBar.IsRepeatStart) {
			this.ShouldPlay = true;
		}
		if(this._repeatOpen && masterBarAlternateEndings > 0) {
			if((masterBarAlternateEndings & 1 << this._repeatNumber) == 0) {
				this.ShouldPlay = false;
			} else {
				this.ShouldPlay = true;
			}
		}
		if(this.ShouldPlay) {
			this.CurrentTick = this.CurrentTick + masterBar.CalculateDuration();
		}
	}
	,MoveNext: function() {
		var masterBar = this._score.MasterBars[this.Index];
		var masterBarRepeatCount = masterBar.RepeatCount - 1;
		if(this._repeatOpen && masterBarRepeatCount > 0) {
			if(this._repeatNumber < masterBarRepeatCount) {
				this.Index = this._repeatStartIndex;
				this._repeatNumber++;
			} else {
				this._repeatNumber = 0;
				this._repeatOpen = false;
				this.ShouldPlay = true;
				this.Index++;
			}
		} else {
			this.Index++;
		}
	}
	,__class__: alphaTab.audio.generator.MidiPlaybackController
};
alphaTab.audio.synth.MidiFileSequencerTempoChange = $hx_exports["alphaTab"]["audio"]["synth"]["MidiFileSequencerTempoChange"] = function(bpm,ticks,time) {
	this.Bpm = 0.0;
	this.Ticks = 0;
	this.Time = 0;
	this.Bpm = bpm;
	this.Ticks = ticks;
	this.Time = time;
};
alphaTab.audio.synth.MidiFileSequencerTempoChange.__name__ = ["alphaTab","audio","synth","MidiFileSequencerTempoChange"];
alphaTab.audio.synth.MidiFileSequencerTempoChange.prototype = {
	__class__: alphaTab.audio.synth.MidiFileSequencerTempoChange
};
alphaTab.audio.synth._PlayerState = {};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["_PlayerState"]["PlayerState_Impl_"] = {};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.__name__ = ["alphaTab","audio","synth","_PlayerState","PlayerState_Impl_"];
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Paused";
	case 1:
		return "Playing";
	}
	return "";
};
alphaTab.audio.synth.PlayerStateChangedEventArgs = $hx_exports["alphaTab"]["audio"]["synth"]["PlayerStateChangedEventArgs"] = function(state) {
	this.State = 0;
	this.State = state;
};
alphaTab.audio.synth.PlayerStateChangedEventArgs.__name__ = ["alphaTab","audio","synth","PlayerStateChangedEventArgs"];
alphaTab.audio.synth.PlayerStateChangedEventArgs.prototype = {
	__class__: alphaTab.audio.synth.PlayerStateChangedEventArgs
};
alphaTab.audio.synth.PositionChangedEventArgs = $hx_exports["alphaTab"]["audio"]["synth"]["PositionChangedEventArgs"] = function(currentTime,endTime,currentTick,endTick) {
	this.CurrentTime = 0.0;
	this.EndTime = 0.0;
	this.CurrentTick = 0;
	this.EndTick = 0;
	this.CurrentTime = currentTime;
	this.EndTime = endTime;
	this.CurrentTick = currentTick;
	this.EndTick = endTick;
};
alphaTab.audio.synth.PositionChangedEventArgs.__name__ = ["alphaTab","audio","synth","PositionChangedEventArgs"];
alphaTab.audio.synth.PositionChangedEventArgs.prototype = {
	__class__: alphaTab.audio.synth.PositionChangedEventArgs
};
alphaTab.audio.synth.bank.AssetManager = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["AssetManager"] = function() {
	this.PatchAssets = null;
	this.SampleAssets = null;
	var this1 = [];
	this.PatchAssets = this1;
	var this2 = [];
	this.SampleAssets = this2;
};
alphaTab.audio.synth.bank.AssetManager.__name__ = ["alphaTab","audio","synth","bank","AssetManager"];
alphaTab.audio.synth.bank.AssetManager.prototype = {
	FindPatch: function(name) {
		var patchAsset = $iterator(this.PatchAssets)();
		while(patchAsset.hasNext()) {
			var patchAsset1 = patchAsset.next();
			if(patchAsset1.Name == name) {
				return patchAsset1;
			}
		}
		return null;
	}
	,FindSample: function(name) {
		var sampleDataAsset = $iterator(this.SampleAssets)();
		while(sampleDataAsset.hasNext()) {
			var sampleDataAsset1 = sampleDataAsset.next();
			if(sampleDataAsset1.Name == name) {
				return sampleDataAsset1;
			}
		}
		return null;
	}
	,__class__: alphaTab.audio.synth.bank.AssetManager
};
alphaTab.audio.synth.bank.PatchAsset = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["PatchAsset"] = function(name,patch) {
	this.Name = null;
	this.Patch = null;
	this.Name = name;
	this.Patch = patch;
};
alphaTab.audio.synth.bank.PatchAsset.__name__ = ["alphaTab","audio","synth","bank","PatchAsset"];
alphaTab.audio.synth.bank.PatchAsset.prototype = {
	__class__: alphaTab.audio.synth.bank.PatchAsset
};
alphaTab.audio.synth.bank.PatchBank = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["PatchBank"] = function() {
	this._bank = null;
	this._assets = null;
	this.Name = null;
	this.Comments = null;
	this.Reset();
};
alphaTab.audio.synth.bank.PatchBank.__name__ = ["alphaTab","audio","synth","bank","PatchBank"];
alphaTab.audio.synth.bank.PatchBank.prototype = {
	Reset: function() {
		var this1 = {}
		this._bank = this1;
		this._assets = new alphaTab.audio.synth.bank.AssetManager();
		this.Name = "";
		this.Comments = "";
	}
	,get_LoadedBanks: function() {
		var this1 = [];
		var banks = this1;
		var this2 = this._bank;
		var bank = $iterator(Object.keys(this2))();
		while(bank.hasNext()) {
			var bank1 = bank.next();
			banks.push(bank1);
		}
		var comparison = function(a,b) {
			return a - b;
		};
		banks.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
		return new Int32Array(banks);
	}
	,GetBank: function(bankNumber) {
		if(this._bank.hasOwnProperty(bankNumber)) {
			return this._bank[bankNumber];
		} else {
			return null;
		}
	}
	,GetPatchByNumber: function(bankNumber,patchNumber) {
		if(this._bank.hasOwnProperty(bankNumber)) {
			return this._bank[bankNumber][patchNumber];
		} else {
			return null;
		}
	}
	,GetPatchByName: function(bankNumber,name) {
		if(this._bank.hasOwnProperty(bankNumber)) {
			var patches = this._bank[bankNumber];
			var patch = HxOverrides.iter(patches);
			while(patch.hasNext()) {
				var patch1 = patch.next();
				if(patch1 != null && patch1.Name == name) {
					return patch1;
				}
			}
		}
		return null;
	}
	,IsBankLoaded: function(bankNumber) {
		return this._bank.hasOwnProperty(bankNumber);
	}
	,LoadSf2: function(input) {
		this.Reset();
		alphaTab.util.Logger.Debug("PatchBank","Reading SF2",null);
		var sf = new alphaTab.audio.synth.sf2.SoundFont();
		sf.Load(input);
		alphaTab.util.Logger.Debug("PatchBank","Building patchbank",null);
		this.Name = sf.Info.BankName;
		this.Comments = sf.Info.Comments;
		var sampleHeader = HxOverrides.iter(sf.Presets.SampleHeaders);
		while(sampleHeader.hasNext()) {
			var sampleHeader1 = sampleHeader.next();
			this._assets.SampleAssets.push(new alphaTab.audio.synth.bank.SampleDataAsset(sampleHeader1,sf.SampleData));
		}
		var sfinsts = this.ReadSf2Instruments(sf.Presets.Instruments);
		var p = HxOverrides.iter(sf.Presets.PresetHeaders);
		while(p.hasNext()) {
			var p1 = p.next();
			var globalGens = null;
			var i;
			if(p1.Zones[0].Generators.length == 0 || p1.Zones[0].Generators[p1.Zones[0].Generators.length - 1].GeneratorType != 41) {
				globalGens = p1.Zones[0].Generators;
				i = 1;
			} else {
				i = 0;
			}
			var this1 = [];
			var regionList = this1;
			while(i < p1.Zones.length) {
				var presetLoKey = 0;
				var presetHiKey = 127;
				var presetLoVel = 0;
				var presetHiVel = 127;
				if(p1.Zones[i].Generators[0].GeneratorType == 43) {
					if(true) {
						presetLoKey = alphaTab.platform.Platform.ToUInt8(p1.Zones[i].Generators[0].get_AmountInt16() & 255);
						presetHiKey = alphaTab.platform.Platform.ToUInt8(p1.Zones[i].Generators[0].get_AmountInt16() >> 8 & 255);
					} else {
						presetHiKey = alphaTab.platform.Platform.ToUInt8(p1.Zones[i].Generators[0].get_AmountInt16() & 255);
						presetLoKey = alphaTab.platform.Platform.ToUInt8(p1.Zones[i].Generators[0].get_AmountInt16() >> 8 & 255);
					}
					if(p1.Zones[i].Generators.length > 1 && p1.Zones[i].Generators[1].GeneratorType == 44) {
						if(true) {
							presetLoVel = alphaTab.platform.Platform.ToUInt8(p1.Zones[i].Generators[1].get_AmountInt16() & 255);
							presetHiVel = alphaTab.platform.Platform.ToUInt8(p1.Zones[i].Generators[1].get_AmountInt16() >> 8 & 255);
						} else {
							presetHiVel = alphaTab.platform.Platform.ToUInt8(p1.Zones[i].Generators[1].get_AmountInt16() & 255);
							presetLoVel = alphaTab.platform.Platform.ToUInt8(p1.Zones[i].Generators[1].get_AmountInt16() >> 8 & 255);
						}
					}
				} else if(p1.Zones[i].Generators[0].GeneratorType == 44) {
					if(true) {
						presetLoVel = alphaTab.platform.Platform.ToUInt8(p1.Zones[i].Generators[0].get_AmountInt16() & 255);
						presetHiVel = alphaTab.platform.Platform.ToUInt8(p1.Zones[i].Generators[0].get_AmountInt16() >> 8 & 255);
					} else {
						presetHiVel = alphaTab.platform.Platform.ToUInt8(p1.Zones[i].Generators[0].get_AmountInt16() & 255);
						presetLoVel = alphaTab.platform.Platform.ToUInt8(p1.Zones[i].Generators[0].get_AmountInt16() >> 8 & 255);
					}
				}
				if(p1.Zones[i].Generators[p1.Zones[i].Generators.length - 1].GeneratorType == 41) {
					var insts = sfinsts[p1.Zones[i].Generators[p1.Zones[i].Generators.length - 1].get_AmountInt16()];
					var inst = HxOverrides.iter(insts);
					while(inst.hasNext()) {
						var inst1 = inst.next();
						var instLoKey;
						var instHiKey;
						var instLoVel;
						var instHiVel;
						if(true) {
							instLoKey = alphaTab.platform.Platform.ToUInt8(inst1.Generators[43] & 255);
							instHiKey = alphaTab.platform.Platform.ToUInt8(inst1.Generators[43] >> 8 & 255);
							instLoVel = alphaTab.platform.Platform.ToUInt8(inst1.Generators[44] & 255);
							instHiVel = alphaTab.platform.Platform.ToUInt8(inst1.Generators[44] >> 8 & 255);
						} else {
							instHiKey = alphaTab.platform.Platform.ToUInt8(inst1.Generators[43] & 255);
							instLoKey = alphaTab.platform.Platform.ToUInt8(inst1.Generators[43] >> 8 & 255);
							instHiVel = alphaTab.platform.Platform.ToUInt8(inst1.Generators[44] & 255);
							instLoVel = alphaTab.platform.Platform.ToUInt8(inst1.Generators[44] >> 8 & 255);
						}
						if(instLoKey <= presetHiKey && presetLoKey <= instHiKey && (instLoVel <= presetHiVel && presetLoVel <= instHiVel)) {
							var r = new alphaTab.audio.synth.sf2.Sf2Region();
							var src = inst1.Generators;
							var dst = r.Generators;
							var count = r.Generators.length;
							dst.set(src.subarray(0,0+count), 0);
							this.ReadSf2Region(r,globalGens,p1.Zones[i].Generators,true);
							regionList.push(r);
						}
					}
				}
				++i;
			}
			var mp = new alphaTab.audio.synth.bank.patch.MultiPatch(p1.Name);
			mp.LoadSf2(regionList,this._assets);
			this._assets.PatchAssets.push(new alphaTab.audio.synth.bank.PatchAsset(mp.Name,mp));
			this.AssignPatchToBank(mp,p1.BankNumber,p1.PatchNumber,p1.PatchNumber);
		}
	}
	,ReadSf2Instruments: function(instruments) {
		var size = instruments.length;
		var this1 = new Array(size);
		var regions = this1;
		var x = 0;
		while(x < instruments.length) {
			var globalGens = null;
			var i;
			if(instruments[x].Zones[0].Generators.length == 0 || instruments[x].Zones[0].Generators[instruments[x].Zones[0].Generators.length - 1].GeneratorType != 53) {
				globalGens = instruments[x].Zones[0].Generators;
				i = 1;
			} else {
				i = 0;
			}
			var size1 = instruments[x].Zones.length - i;
			var this2 = new Array(size1);
			regions[x] = this2;
			var j = 0;
			while(j < regions[x].length) {
				var r = new alphaTab.audio.synth.sf2.Sf2Region();
				r.ApplyDefaultValues();
				this.ReadSf2Region(r,globalGens,instruments[x].Zones[j + i].Generators,false);
				regions[x][j] = r;
				++j;
			}
			++x;
		}
		return regions;
	}
	,ReadSf2Region: function(region,globals,gens,isRelative) {
		if(!isRelative) {
			if(globals != null) {
				var x = 0;
				while(x < globals.length) {
					region.Generators[globals[x].GeneratorType] = globals[x].get_AmountInt16();
					++x;
				}
			}
			var x1 = 0;
			while(x1 < gens.length) {
				region.Generators[gens[x1].GeneratorType] = gens[x1].get_AmountInt16();
				++x1;
			}
		} else {
			var this1 = [];
			var genList = this1;
			var generator = HxOverrides.iter(gens);
			while(generator.hasNext()) {
				var generator1 = generator.next();
				genList.push(generator1);
			}
			if(globals != null) {
				var x2 = 0;
				while(x2 < globals.length) {
					var found = false;
					var i = 0;
					while(i < genList.length) {
						if(genList[i].GeneratorType == globals[x2].GeneratorType) {
							found = true;
							break;
						}
						++i;
					}
					if(!found) {
						genList.push(globals[x2]);
					}
					++x2;
				}
			}
			var x3 = 0;
			while(x3 < genList.length) {
				var value = genList[x3].GeneratorType;
				if(value < 5 || value == 12 || value == 45 || value == 46 || value == 47 || value == 50 || value == 54 || value == 57 || value == 58) {
					++x3;
					continue;
				} else if(value == 43 || value == 44) {
					var lo_a;
					var hi_a;
					var lo_b;
					var hi_b;
					if(true) {
						lo_a = alphaTab.platform.Platform.ToUInt8(region.Generators[value] & 255);
						hi_a = alphaTab.platform.Platform.ToUInt8(region.Generators[value] >> 8 & 255);
						lo_b = alphaTab.platform.Platform.ToUInt8(genList[x3].get_AmountInt16() & 255);
						hi_b = alphaTab.platform.Platform.ToUInt8(genList[x3].get_AmountInt16() >> 8 & 255);
					} else {
						hi_a = alphaTab.platform.Platform.ToUInt8(region.Generators[value] & 255);
						lo_a = alphaTab.platform.Platform.ToUInt8(region.Generators[value] >> 8 & 255);
						hi_b = alphaTab.platform.Platform.ToUInt8(genList[x3].get_AmountInt16() & 255);
						lo_b = alphaTab.platform.Platform.ToUInt8(genList[x3].get_AmountInt16() >> 8 & 255);
					}
					lo_a = Math.max(lo_a,lo_b);
					hi_a = Math.min(hi_a,hi_b);
					if(lo_a > hi_a) {
						throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid sf2 region. The range generators do not intersect."));
					}
					if(true) {
						region.Generators[value] = alphaTab.platform.Platform.ToInt16(lo_a | hi_a << 8);
					} else {
						region.Generators[value] = alphaTab.platform.Platform.ToInt16(lo_a << 8 | hi_a);
					}
				} else {
					region.Generators[value] = alphaTab.platform.Platform.ToInt16(region.Generators[value] + genList[x3].get_AmountInt16());
				}
				++x3;
			}
		}
	}
	,AssignPatchToBank: function(patch,bankNumber,startRange,endRange) {
		if(bankNumber < 0) {
			return;
		}
		if(startRange > endRange) {
			var range = startRange;
			startRange = endRange;
			endRange = range;
		}
		if(startRange < 0 || startRange >= 128) {
			throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("startRange out of range"));
		}
		if(endRange < 0 || endRange >= 128) {
			throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("endRange out of range"));
		}
		var patches;
		if(this._bank.hasOwnProperty(bankNumber)) {
			patches = this._bank[bankNumber];
		} else {
			var this1 = new Array(128);
			patches = this1;
			this._bank[bankNumber] = patches;
		}
		var x = startRange;
		while(x <= endRange) {
			patches[x] = patch;
			++x;
		}
	}
	,__class__: alphaTab.audio.synth.bank.PatchBank
};
alphaTab.audio.synth.bank.PcmData = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["PcmData"] = function(bits,pcmData,isDataInLittleEndianFormat) {
	this.Data = null;
	this.Length = 0;
	this.BytesPerSample = 0;
	this.BytesPerSample = system.Convert.ToUInt8(bits / 8 | 0);
	this.Data = pcmData;
	this.Length = this.Data.length / this.BytesPerSample | 0;
	if(true != isDataInLittleEndianFormat) {
		alphaTab.audio.synth.util.SynthHelper.SwapEndianess(this.Data,bits);
	}
};
alphaTab.audio.synth.bank.PcmData.__name__ = ["alphaTab","audio","synth","bank","PcmData"];
alphaTab.audio.synth.bank.PcmData.Create = function(bits,pcmData,isDataInLittleEndianFormat) {
	switch(bits) {
	case 8:
		return new alphaTab.audio.synth.bank.PcmData8Bit(bits,pcmData,isDataInLittleEndianFormat);
	case 16:
		return new alphaTab.audio.synth.bank.PcmData16Bit(bits,pcmData,isDataInLittleEndianFormat);
	case 24:
		return new alphaTab.audio.synth.bank.PcmData24Bit(bits,pcmData,isDataInLittleEndianFormat);
	case 32:
		return new alphaTab.audio.synth.bank.PcmData32Bit(bits,pcmData,isDataInLittleEndianFormat);
	default:
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid PCM format. " + bits + "bit pcm data is not supported."));
	}
};
alphaTab.audio.synth.bank.PcmData.prototype = {
	get_BitsPerSample: function() {
		return this.BytesPerSample * 8;
	}
	,get_Item: function(index) {
		throw new js._Boot.HaxeError("abstract");
	}
	,__class__: alphaTab.audio.synth.bank.PcmData
};
alphaTab.audio.synth.bank.PcmData16Bit = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["PcmData16Bit"] = function(bits,pcmData,isDataInLittleEndianFormat) {
	alphaTab.audio.synth.bank.PcmData.call(this,bits,pcmData,isDataInLittleEndianFormat);
};
alphaTab.audio.synth.bank.PcmData16Bit.__name__ = ["alphaTab","audio","synth","bank","PcmData16Bit"];
alphaTab.audio.synth.bank.PcmData16Bit.__super__ = alphaTab.audio.synth.bank.PcmData;
alphaTab.audio.synth.bank.PcmData16Bit.prototype = $extend(alphaTab.audio.synth.bank.PcmData.prototype,{
	get_Item: function(index) {
		index = index * 2;
		var this1 = 32768;
		return ((this.Data[index] | this.Data[index + 1] << 8) << 16 >> 16) / this1;
	}
	,__class__: alphaTab.audio.synth.bank.PcmData16Bit
});
alphaTab.audio.synth.bank.PcmData24Bit = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["PcmData24Bit"] = function(bits,pcmData,isDataInLittleEndianFormat) {
	alphaTab.audio.synth.bank.PcmData.call(this,bits,pcmData,isDataInLittleEndianFormat);
};
alphaTab.audio.synth.bank.PcmData24Bit.__name__ = ["alphaTab","audio","synth","bank","PcmData24Bit"];
alphaTab.audio.synth.bank.PcmData24Bit.__super__ = alphaTab.audio.synth.bank.PcmData;
alphaTab.audio.synth.bank.PcmData24Bit.prototype = $extend(alphaTab.audio.synth.bank.PcmData.prototype,{
	get_Item: function(index) {
		index = index * 3;
		var this1 = 8388608;
		return ((this.Data[index] | this.Data[index + 1] << 8 | this.Data[index + 2] << 16) << 12 >> 12) / this1;
	}
	,__class__: alphaTab.audio.synth.bank.PcmData24Bit
});
alphaTab.audio.synth.bank.PcmData32Bit = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["PcmData32Bit"] = function(bits,pcmData,isDataInLittleEndianFormat) {
	alphaTab.audio.synth.bank.PcmData.call(this,bits,pcmData,isDataInLittleEndianFormat);
};
alphaTab.audio.synth.bank.PcmData32Bit.__name__ = ["alphaTab","audio","synth","bank","PcmData32Bit"];
alphaTab.audio.synth.bank.PcmData32Bit.__super__ = alphaTab.audio.synth.bank.PcmData;
alphaTab.audio.synth.bank.PcmData32Bit.prototype = $extend(alphaTab.audio.synth.bank.PcmData.prototype,{
	get_Item: function(index) {
		index = index * 4;
		var this1 = 2147483648;
		return (this.Data[index] | this.Data[index + 1] << 8 | this.Data[index + 2] << 16 | this.Data[index + 3] << 24) / this1;
	}
	,__class__: alphaTab.audio.synth.bank.PcmData32Bit
});
alphaTab.audio.synth.bank.PcmData8Bit = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["PcmData8Bit"] = function(bits,pcmData,isDataInLittleEndianFormat) {
	alphaTab.audio.synth.bank.PcmData.call(this,bits,pcmData,isDataInLittleEndianFormat);
};
alphaTab.audio.synth.bank.PcmData8Bit.__name__ = ["alphaTab","audio","synth","bank","PcmData8Bit"];
alphaTab.audio.synth.bank.PcmData8Bit.__super__ = alphaTab.audio.synth.bank.PcmData;
alphaTab.audio.synth.bank.PcmData8Bit.prototype = $extend(alphaTab.audio.synth.bank.PcmData.prototype,{
	get_Item: function(index) {
		var this1 = 255;
		var this2 = 2;
		var this3 = 1;
		return this.Data[index] / this1 * this2 - this3;
	}
	,__class__: alphaTab.audio.synth.bank.PcmData8Bit
});
alphaTab.audio.synth.bank.SampleDataAsset = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["SampleDataAsset"] = function(sample,sampleData) {
	this.Name = null;
	this.Channels = 0;
	this.SampleRate = 0;
	this.RootKey = 0;
	this.Tune = 0;
	this.Start = 0.0;
	this.End = 0.0;
	this.LoopStart = 0.0;
	this.LoopEnd = 0.0;
	this.SampleData = null;
	this.Channels = 1;
	this.Name = sample.Name;
	this.SampleRate = sample.SampleRate;
	this.RootKey = sample.RootKey;
	this.Tune = sample.Tune;
	var this1 = sample.Start;
	this.Start = this1;
	var this2 = sample.End;
	this.End = this2;
	var this3 = sample.StartLoop;
	this.LoopStart = this3;
	var this4 = sample.EndLoop;
	this.LoopEnd = this4;
	if((sample.SoundFontSampleLink & 16) != 0) {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Ogg Vobis encoded soundfonts not supported"));
	} else {
		this.SampleData = alphaTab.audio.synth.bank.PcmData.Create(sampleData.BitsPerSample,sampleData.SampleData,true);
	}
};
alphaTab.audio.synth.bank.SampleDataAsset.__name__ = ["alphaTab","audio","synth","bank","SampleDataAsset"];
alphaTab.audio.synth.bank.SampleDataAsset.prototype = {
	__class__: alphaTab.audio.synth.bank.SampleDataAsset
};
alphaTab.audio.synth.bank.components._EnvelopeState = {};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["_EnvelopeState"]["EnvelopeState_Impl_"] = {};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.__name__ = ["alphaTab","audio","synth","bank","components","_EnvelopeState","EnvelopeState_Impl_"];
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Delay";
	case 1:
		return "Attack";
	case 2:
		return "Hold";
	case 3:
		return "Decay";
	case 4:
		return "Sustain";
	case 5:
		return "Release";
	case 6:
		return "None";
	}
	return "";
};
alphaTab.audio.synth.bank.components._FilterType = {};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["_FilterType"]["FilterType_Impl_"] = {};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.__name__ = ["alphaTab","audio","synth","bank","components","_FilterType","FilterType_Impl_"];
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "BiquadLowpass";
	case 2:
		return "BiquadHighpass";
	case 3:
		return "OnePoleLowpass";
	}
	return "";
};
alphaTab.audio.synth.bank.components._LfoState = {};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["_LfoState"]["LfoState_Impl_"] = {};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.__name__ = ["alphaTab","audio","synth","bank","components","_LfoState","LfoState_Impl_"];
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Delay";
	case 1:
		return "Sustain";
	}
	return "";
};
alphaTab.audio.synth.bank.components._PanFormulaEnum = {};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["_PanFormulaEnum"]["PanFormulaEnum_Impl_"] = {};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.__name__ = ["alphaTab","audio","synth","bank","components","_PanFormulaEnum","PanFormulaEnum_Impl_"];
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Neg3dBCenter";
	case 1:
		return "Neg6dBCenter";
	case 2:
		return "ZeroCenter";
	}
	return "";
};
alphaTab.audio.synth.bank.components.generators._GeneratorState = {};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["_GeneratorState"]["GeneratorState_Impl_"] = {};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.__name__ = ["alphaTab","audio","synth","bank","components","generators","_GeneratorState","GeneratorState_Impl_"];
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "PreLoop";
	case 1:
		return "Loop";
	case 2:
		return "PostLoop";
	case 3:
		return "Finished";
	}
	return "";
};
alphaTab.audio.synth.bank.components.generators._Interpolation = {};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["_Interpolation"]["Interpolation_Impl_"] = {};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.__name__ = ["alphaTab","audio","synth","bank","components","generators","_Interpolation","Interpolation_Impl_"];
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Linear";
	case 2:
		return "Cosine";
	case 3:
		return "CubicSpline";
	case 4:
		return "Sinc";
	}
	return "";
};
alphaTab.audio.synth.bank.components.generators._LoopMode = {};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["_LoopMode"]["LoopMode_Impl_"] = {};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.__name__ = ["alphaTab","audio","synth","bank","components","generators","_LoopMode","LoopMode_Impl_"];
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "NoLoop";
	case 1:
		return "OneShot";
	case 2:
		return "Continuous";
	case 3:
		return "LoopUntilNoteOff";
	}
	return "";
};
alphaTab.audio.synth.bank.components.generators.SampleGenerator = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["components"]["generators"]["SampleGenerator"] = function() {
	alphaTab.audio.synth.bank.components.generators.Generator.call(this,new alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor());
	this.Samples = null;
};
alphaTab.audio.synth.bank.components.generators.SampleGenerator.__name__ = ["alphaTab","audio","synth","bank","components","generators","SampleGenerator"];
alphaTab.audio.synth.bank.components.generators.SampleGenerator.__super__ = alphaTab.audio.synth.bank.components.generators.Generator;
alphaTab.audio.synth.bank.components.generators.SampleGenerator.prototype = $extend(alphaTab.audio.synth.bank.components.generators.Generator.prototype,{
	GetValue: function(phase) {
		return this.Samples.get_Item(system.Convert.ToInt32_Double(phase));
	}
	,GetValues: function(generatorParams,blockBuffer,increment) {
		var proccessed = 0;
		while(true) {
			var samplesAvailable = system.Convert.ToInt32_Double(Math.ceil((generatorParams.CurrentEnd - generatorParams.Phase) / increment));
			if(samplesAvailable > blockBuffer.length - proccessed) {
				this.Interpolate(generatorParams,blockBuffer,increment,proccessed,blockBuffer.length);
				return;
			} else {
				var endProccessed = proccessed + samplesAvailable;
				this.Interpolate(generatorParams,blockBuffer,increment,proccessed,endProccessed);
				proccessed = endProccessed;
				var _g = generatorParams.CurrentState;
				switch(_g) {
				case 0:
					generatorParams.CurrentStart = this.LoopStartPhase;
					generatorParams.CurrentEnd = this.LoopEndPhase;
					generatorParams.CurrentState = 1;
					break;
				case 1:
					generatorParams.Phase = generatorParams.Phase + (generatorParams.CurrentStart - generatorParams.CurrentEnd);
					break;
				case 2:
					generatorParams.CurrentState = 3;
					while(proccessed < blockBuffer.length) {
						var index = proccessed++;
						blockBuffer[index] = 0;
					}
					break;
				default:
				}
			}
			if(!(proccessed < blockBuffer.length)) {
				break;
			}
		}
	}
	,Interpolate: function(generatorParams,blockBuffer,increment,start,end) {
		var _g = 1;
		switch(_g) {
		case 1:
			var _end = generatorParams.CurrentState == 1 ? this.LoopEndPhase - 1 : this.EndPhase - 1;
			var index;
			var s1;
			var s2;
			var mu;
			while(start < end && generatorParams.Phase < _end) {
				index = system.Convert.ToInt32_Double(generatorParams.Phase);
				s1 = this.Samples.get_Item(index);
				s2 = this.Samples.get_Item(index + 1);
				mu = js.Boot.__cast(generatorParams.Phase - index , Float);
				var index1 = start++;
				blockBuffer[index1] = s1 + mu * (s2 - s1);
				generatorParams.Phase = generatorParams.Phase + increment;
			}
			while(start < end) {
				index = system.Convert.ToInt32_Double(generatorParams.Phase);
				s1 = this.Samples.get_Item(index);
				if(generatorParams.CurrentState == 1) {
					s2 = this.Samples.get_Item(system.Convert.ToInt32_Double(generatorParams.CurrentStart));
				} else {
					s2 = s1;
				}
				mu = js.Boot.__cast(generatorParams.Phase - index , Float);
				var index2 = start++;
				blockBuffer[index2] = s1 + mu * (s2 - s1);
				generatorParams.Phase = generatorParams.Phase + increment;
			}
			break;
		case 2:
			var _end1 = generatorParams.CurrentState == 1 ? this.LoopEndPhase - 1 : this.EndPhase - 1;
			var index3;
			var s11;
			var s21;
			var mu1;
			while(start < end && generatorParams.Phase < _end1) {
				index3 = system.Convert.ToInt32_Double(generatorParams.Phase);
				s11 = this.Samples.get_Item(index3);
				s21 = this.Samples.get_Item(index3 + 1);
				var this1 = 1;
				var this2 = 0.5;
				mu1 = (this1 - js.Boot.__cast(Math.cos((generatorParams.Phase - index3) * 3.14159265358979) , Float)) * this2;
				var index4 = start++;
				var this3 = 1;
				blockBuffer[index4] = s11 * (this3 - mu1) + s21 * mu1;
				generatorParams.Phase = generatorParams.Phase + increment;
			}
			while(start < end) {
				index3 = system.Convert.ToInt32_Double(generatorParams.Phase);
				s11 = this.Samples.get_Item(index3);
				if(generatorParams.CurrentState == 1) {
					s21 = this.Samples.get_Item(system.Convert.ToInt32_Double(generatorParams.CurrentStart));
				} else {
					s21 = s11;
				}
				var this4 = 1;
				var this5 = 0.5;
				mu1 = (this4 - js.Boot.__cast(Math.cos((generatorParams.Phase - index3) * 3.14159265358979) , Float)) * this5;
				var index5 = start++;
				var this6 = 1;
				blockBuffer[index5] = s11 * (this6 - mu1) + s21 * mu1;
				generatorParams.Phase = generatorParams.Phase + increment;
			}
			break;
		case 3:
			var _end2 = generatorParams.CurrentState == 1 ? this.LoopStartPhase + 1 : this.StartPhase + 1;
			var index6;
			var s0;
			var s12;
			var s22;
			var s3;
			var mu2;
			while(start < end && generatorParams.Phase < _end2) {
				index6 = system.Convert.ToInt32_Double(generatorParams.Phase);
				if(generatorParams.CurrentState == 1) {
					s0 = this.Samples.get_Item(system.Convert.ToInt32_Double(generatorParams.CurrentEnd) - 1);
				} else {
					s0 = this.Samples.get_Item(index6);
				}
				s12 = this.Samples.get_Item(index6);
				s22 = this.Samples.get_Item(index6 + 1);
				s3 = this.Samples.get_Item(index6 + 2);
				mu2 = js.Boot.__cast(generatorParams.Phase - index6 , Float);
				var index7 = start++;
				var this7 = 1.5;
				var this8 = 1.5;
				var this9 = 0.5;
				var this10 = 2.5;
				var this11 = 2;
				var this12 = 0.5;
				var this13 = 0.5;
				blockBuffer[index7] = (-0.5 * s0 + this7 * s12 - this8 * s22 + this9 * s3) * mu2 * mu2 * mu2 + (s0 - this10 * s12 + this11 * s22 - this12 * s3) * mu2 * mu2 + (-0.5 * s0 + this13 * s22) * mu2 + s12;
				generatorParams.Phase = generatorParams.Phase + increment;
			}
			if(generatorParams.CurrentState == 1) {
				_end2 = this.LoopEndPhase - 2;
			} else {
				_end2 = this.EndPhase - 2;
			}
			while(start < end && generatorParams.Phase < _end2) {
				index6 = system.Convert.ToInt32_Double(generatorParams.Phase);
				s0 = this.Samples.get_Item(index6 - 1);
				s12 = this.Samples.get_Item(index6);
				s22 = this.Samples.get_Item(index6 + 1);
				s3 = this.Samples.get_Item(index6 + 2);
				mu2 = js.Boot.__cast(generatorParams.Phase - index6 , Float);
				var index8 = start++;
				var this14 = 1.5;
				var this15 = 1.5;
				var this16 = 0.5;
				var this17 = 2.5;
				var this18 = 2;
				var this19 = 0.5;
				var this20 = 0.5;
				blockBuffer[index8] = (-0.5 * s0 + this14 * s12 - this15 * s22 + this16 * s3) * mu2 * mu2 * mu2 + (s0 - this17 * s12 + this18 * s22 - this19 * s3) * mu2 * mu2 + (-0.5 * s0 + this20 * s22) * mu2 + s12;
				generatorParams.Phase = generatorParams.Phase + increment;
			}
			_end2 = _end2 + 1;
			while(start < end) {
				index6 = system.Convert.ToInt32_Double(generatorParams.Phase);
				s0 = this.Samples.get_Item(index6 - 1);
				s12 = this.Samples.get_Item(index6);
				if(generatorParams.Phase < _end2) {
					s22 = this.Samples.get_Item(index6 + 1);
					if(generatorParams.CurrentState == 1) {
						s3 = this.Samples.get_Item(system.Convert.ToInt32_Double(generatorParams.CurrentStart));
					} else {
						s3 = s22;
					}
				} else if(generatorParams.CurrentState == 1) {
					s22 = this.Samples.get_Item(system.Convert.ToInt32_Double(generatorParams.CurrentStart));
					s3 = this.Samples.get_Item(system.Convert.ToInt32_Double(generatorParams.CurrentStart) + 1);
				} else {
					s22 = s12;
					s3 = s12;
				}
				mu2 = js.Boot.__cast(generatorParams.Phase - index6 , Float);
				var index9 = start++;
				var this21 = 1.5;
				var this22 = 1.5;
				var this23 = 0.5;
				var this24 = 2.5;
				var this25 = 2;
				var this26 = 0.5;
				var this27 = 0.5;
				blockBuffer[index9] = (-0.5 * s0 + this21 * s12 - this22 * s22 + this23 * s3) * mu2 * mu2 * mu2 + (s0 - this24 * s12 + this25 * s22 - this26 * s3) * mu2 * mu2 + (-0.5 * s0 + this27 * s22) * mu2 + s12;
				generatorParams.Phase = generatorParams.Phase + increment;
			}
			break;
		default:
			while(start < end) {
				var index10 = start++;
				blockBuffer[index10] = this.Samples.get_Item(system.Convert.ToInt32_Double(generatorParams.Phase));
				generatorParams.Phase = generatorParams.Phase + increment;
			}
		}
	}
	,__class__: alphaTab.audio.synth.bank.components.generators.SampleGenerator
});
alphaTab.audio.synth.bank.descriptors.EnvelopeDescriptor = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["descriptors"]["EnvelopeDescriptor"] = function() {
	this.DelayTime = 0.0;
	this.AttackTime = 0.0;
	this.AttackGraph = 0;
	this.HoldTime = 0.0;
	this.DecayTime = 0.0;
	this.DecayGraph = 0;
	this.SustainTime = 0.0;
	this.ReleaseTime = 0.0;
	this.ReleaseGraph = 0;
	this.SustainLevel = 0.0;
	this.PeakLevel = 0.0;
	this.StartLevel = 0.0;
	this.Depth = 0.0;
	this.Vel2Delay = 0.0;
	this.Vel2Attack = 0.0;
	this.Vel2Hold = 0.0;
	this.Vel2Decay = 0.0;
	this.Vel2Sustain = 0.0;
	this.Vel2Release = 0.0;
	this.Vel2Depth = 0.0;
	this.DelayTime = 0;
	this.AttackTime = 0;
	this.AttackGraph = 1;
	this.HoldTime = 0;
	this.DecayTime = 0;
	this.DecayGraph = 1;
	this.SustainTime = 3600;
	this.ReleaseTime = 0;
	this.ReleaseGraph = 1;
	this.SustainLevel = 0;
	this.PeakLevel = 1;
	this.StartLevel = 0;
	this.Depth = 1;
	this.Vel2Delay = 0;
	this.Vel2Attack = 0;
	this.Vel2Hold = 0;
	this.Vel2Decay = 0;
	this.Vel2Sustain = 0;
	this.Vel2Release = 0;
	this.Vel2Depth = 0;
};
alphaTab.audio.synth.bank.descriptors.EnvelopeDescriptor.__name__ = ["alphaTab","audio","synth","bank","descriptors","EnvelopeDescriptor"];
alphaTab.audio.synth.bank.descriptors.EnvelopeDescriptor.prototype = {
	__class__: alphaTab.audio.synth.bank.descriptors.EnvelopeDescriptor
};
alphaTab.audio.synth.bank.descriptors.FilterDescriptor = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["descriptors"]["FilterDescriptor"] = function() {
	this.FilterMethod = 0;
	this.CutOff = 0.0;
	this.Resonance = 0.0;
	this.RootKey = 0;
	this.KeyTrack = 0;
	this.VelTrack = 0;
	this.FilterMethod = 0;
	this.CutOff = -1;
	this.Resonance = 1;
	this.RootKey = 60;
	this.KeyTrack = 0;
	this.VelTrack = 0;
};
alphaTab.audio.synth.bank.descriptors.FilterDescriptor.__name__ = ["alphaTab","audio","synth","bank","descriptors","FilterDescriptor"];
alphaTab.audio.synth.bank.descriptors.FilterDescriptor.prototype = {
	__class__: alphaTab.audio.synth.bank.descriptors.FilterDescriptor
};
alphaTab.audio.synth.bank.descriptors.LfoDescriptor = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["descriptors"]["LfoDescriptor"] = function() {
	this.DelayTime = 0.0;
	this.Frequency = 0.0;
	this.Depth = 0.0;
	this.Generator = null;
	this.DelayTime = 0;
	this.Frequency = 8.0;
	this.Depth = 1;
	this.Generator = alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSine;
};
alphaTab.audio.synth.bank.descriptors.LfoDescriptor.__name__ = ["alphaTab","audio","synth","bank","descriptors","LfoDescriptor"];
alphaTab.audio.synth.bank.descriptors.LfoDescriptor.prototype = {
	__class__: alphaTab.audio.synth.bank.descriptors.LfoDescriptor
};
alphaTab.audio.synth.bank.descriptors._Waveform = {};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["descriptors"]["_Waveform"]["Waveform_Impl_"] = {};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.__name__ = ["alphaTab","audio","synth","bank","descriptors","_Waveform","Waveform_Impl_"];
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Sine";
	case 1:
		return "Square";
	case 2:
		return "Saw";
	case 3:
		return "Triangle";
	case 4:
		return "SampleData";
	case 5:
		return "WhiteNoise";
	}
	return "";
};
alphaTab.audio.synth.bank.patch = {};
alphaTab.audio.synth.bank.patch._IntervalType = {};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["patch"]["_IntervalType"]["IntervalType_Impl_"] = {};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.__name__ = ["alphaTab","audio","synth","bank","patch","_IntervalType","IntervalType_Impl_"];
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "ChannelKeyVelocity";
	case 1:
		return "ChannelKey";
	case 2:
		return "KeyVelocity";
	case 3:
		return "Key";
	}
	return "";
};
alphaTab.audio.synth.bank.patch.Patch = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["patch"]["Patch"] = function(name) {
	this.ExclusiveGroupTarget = 0;
	this.ExclusiveGroup = 0;
	this.Name = null;
	this.Name = name;
	this.ExclusiveGroup = 0;
	this.ExclusiveGroupTarget = 0;
};
alphaTab.audio.synth.bank.patch.Patch.__name__ = ["alphaTab","audio","synth","bank","patch","Patch"];
alphaTab.audio.synth.bank.patch.Patch.prototype = {
	Start: function(voiceparams) {
		throw new js._Boot.HaxeError("abstract");
	}
	,Process: function(voiceparams,startIndex,endIndex,isMuted) {
		throw new js._Boot.HaxeError("abstract");
	}
	,Stop: function(voiceparams) {
		throw new js._Boot.HaxeError("abstract");
	}
	,__class__: alphaTab.audio.synth.bank.patch.Patch
};
alphaTab.audio.synth.bank.patch.MultiPatch = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["patch"]["MultiPatch"] = function(name) {
	alphaTab.audio.synth.bank.patch.Patch.call(this,name);
	this._intervalType = 0;
	this._intervalList = null;
	this._intervalType = 0;
};
alphaTab.audio.synth.bank.patch.MultiPatch.__name__ = ["alphaTab","audio","synth","bank","patch","MultiPatch"];
alphaTab.audio.synth.bank.patch.MultiPatch.__super__ = alphaTab.audio.synth.bank.patch.Patch;
alphaTab.audio.synth.bank.patch.MultiPatch.prototype = $extend(alphaTab.audio.synth.bank.patch.Patch.prototype,{
	FindPatches: function(channel,key,velocity,layers) {
		var count = 0;
		var _g = this._intervalType;
		switch(_g) {
		case 0:
			var x = 0;
			while(x < this._intervalList.length) {
				if(this._intervalList[x].CheckAllIntervals(channel,key,velocity)) {
					layers[count++] = this._intervalList[x].Patch;
					if(count == layers.length) {
						break;
					}
				}
				++x;
			}
			break;
		case 1:
			var x1 = 0;
			while(x1 < this._intervalList.length) {
				if(this._intervalList[x1].CheckChannelAndKey(channel,key)) {
					layers[count++] = this._intervalList[x1].Patch;
					if(count == layers.length) {
						break;
					}
				}
				++x1;
			}
			break;
		case 2:
			var x2 = 0;
			while(x2 < this._intervalList.length) {
				if(this._intervalList[x2].CheckKeyAndVelocity(key,velocity)) {
					layers[count++] = this._intervalList[x2].Patch;
					if(count == layers.length) {
						break;
					}
				}
				++x2;
			}
			break;
		case 3:
			var x3 = 0;
			while(x3 < this._intervalList.length) {
				if(this._intervalList[x3].CheckKey(key)) {
					layers[count++] = this._intervalList[x3].Patch;
					if(count == layers.length) {
						break;
					}
				}
				++x3;
			}
			break;
		default:
		}
		return count;
	}
	,Start: function(voiceparams) {
		return false;
	}
	,Process: function(voiceparams,startIndex,endIndex,isMuted) {
	}
	,Stop: function(voiceparams) {
	}
	,LoadSf2: function(regions,assets) {
		var size = regions.length;
		var this1 = new Array(size);
		this._intervalList = this1;
		var x = 0;
		while(x < regions.length) {
			var loKey;
			var hiKey;
			var loVel;
			var hiVel;
			if(true) {
				loKey = alphaTab.platform.Platform.ToUInt8(regions[x].Generators[43] & 255);
				hiKey = alphaTab.platform.Platform.ToUInt8(regions[x].Generators[43] >> 8 & 255);
				loVel = alphaTab.platform.Platform.ToUInt8(regions[x].Generators[44] & 255);
				hiVel = alphaTab.platform.Platform.ToUInt8(regions[x].Generators[44] >> 8 & 255);
			} else {
				hiKey = alphaTab.platform.Platform.ToUInt8(regions[x].Generators[43] & 255);
				loKey = alphaTab.platform.Platform.ToUInt8(regions[x].Generators[43] >> 8 & 255);
				hiVel = alphaTab.platform.Platform.ToUInt8(regions[x].Generators[44] & 255);
				loVel = alphaTab.platform.Platform.ToUInt8(regions[x].Generators[44] >> 8 & 255);
			}
			var sf2 = new alphaTab.audio.synth.bank.patch.Sf2Patch(this.Name + "_" + Std.string(x));
			sf2.Load(regions[x],assets);
			this._intervalList[x] = new alphaTab.audio.synth.bank.patch.PatchInterval(sf2,0,15,loKey,hiKey,loVel,hiVel);
			++x;
		}
		this.DetermineIntervalType();
	}
	,DetermineIntervalType: function() {
		var checkChannel = false;
		var checkVelocity = false;
		var x = 0;
		while(x < this._intervalList.length) {
			if(this._intervalList[x].StartChannel != 0 || this._intervalList[x].EndChannel != 15) {
				checkChannel = true;
				if(checkChannel && checkVelocity) {
					break;
				}
			}
			if(this._intervalList[x].StartVelocity != 0 || this._intervalList[x].EndVelocity != 127) {
				checkVelocity = true;
				if(checkChannel && checkVelocity) {
					break;
				}
			}
			++x;
		}
		if(checkChannel && checkVelocity) {
			this._intervalType = 0;
		} else if(checkChannel) {
			this._intervalType = 1;
		} else if(checkVelocity) {
			this._intervalType = 2;
		} else {
			this._intervalType = 3;
		}
	}
	,__class__: alphaTab.audio.synth.bank.patch.MultiPatch
});
alphaTab.audio.synth.bank.patch.PatchInterval = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["patch"]["PatchInterval"] = function(patch,startChannel,endChannel,startKey,endKey,startVelocity,endVelocity) {
	this.Patch = null;
	this.StartChannel = 0;
	this.StartKey = 0;
	this.StartVelocity = 0;
	this.EndChannel = 0;
	this.EndKey = 0;
	this.EndVelocity = 0;
	this.Patch = patch;
	this.StartChannel = startChannel;
	this.EndChannel = endChannel;
	this.StartKey = startKey;
	this.EndKey = endKey;
	this.StartVelocity = startVelocity;
	this.EndVelocity = endVelocity;
};
alphaTab.audio.synth.bank.patch.PatchInterval.__name__ = ["alphaTab","audio","synth","bank","patch","PatchInterval"];
alphaTab.audio.synth.bank.patch.PatchInterval.prototype = {
	CheckAllIntervals: function(channel,key,velocity) {
		if(channel >= this.StartChannel && channel <= this.EndChannel && (key >= this.StartKey && key <= this.EndKey)) {
			if(velocity >= this.StartVelocity) {
				return velocity <= this.EndVelocity;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,CheckChannelAndKey: function(channel,key) {
		if(channel >= this.StartChannel && channel <= this.EndChannel) {
			if(key >= this.StartKey) {
				return key <= this.EndKey;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,CheckKeyAndVelocity: function(key,velocity) {
		if(key >= this.StartKey && key <= this.EndKey) {
			if(velocity >= this.StartVelocity) {
				return velocity <= this.EndVelocity;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,CheckKey: function(key) {
		if(key >= this.StartKey) {
			return key <= this.EndKey;
		} else {
			return false;
		}
	}
	,__class__: alphaTab.audio.synth.bank.patch.PatchInterval
};
alphaTab.audio.synth.bank.patch.Sf2Patch = $hx_exports["alphaTab"]["audio"]["synth"]["bank"]["patch"]["Sf2Patch"] = function(name) {
	alphaTab.audio.synth.bank.patch.Patch.call(this,name);
	this.iniFilterFc = 0;
	this.filterQ = 0.0;
	this.initialAttn = 0.0;
	this.keyOverride = 0;
	this.velOverride = 0;
	this.keynumToModEnvHold = 0;
	this.keynumToModEnvDecay = 0;
	this.keynumToVolEnvHold = 0;
	this.keynumToVolEnvDecay = 0;
	this.pan = null;
	this.modLfoToPitch = 0;
	this.vibLfoToPitch = 0;
	this.modEnvToPitch = 0;
	this.modLfoToFilterFc = 0;
	this.modEnvToFilterFc = 0;
	this.modLfoToVolume = 0.0;
	this.gen = null;
	this.mod_env = null;
	this.vel_env = null;
	this.mod_lfo = null;
	this.vib_lfo = null;
	this.fltr = null;
};
alphaTab.audio.synth.bank.patch.Sf2Patch.__name__ = ["alphaTab","audio","synth","bank","patch","Sf2Patch"];
alphaTab.audio.synth.bank.patch.Sf2Patch.CalculateModulator = function(s,t,d,p,value,min,max) {
	var output = 0;
	var i;
	value = value - min;
	max = max - min;
	if(d == 1) {
		value = max - value;
	}
	switch(s) {
	case 0:
		var this1 = value / max | 0;
		output = this1;
		break;
	case 1:
		i = 127 - value;
		output = -0.208333333333333343 * (Math.log(i * i / js.Boot.__cast(max * max , Float)) / Math.log(10));
		break;
	case 2:
		i = value;
		output = 1 + 0.208333333333333343 * (Math.log(i * i / js.Boot.__cast(max * max , Float)) / Math.log(10));
		break;
	case 3:
		if(value <= (max / 2 | 0)) {
			output = 0;
		} else {
			output = 1;
		}
		break;
	default:
	}
	if(p == 1) {
		output = output * 2 - 1;
	}
	if(t == 2) {
		output = Math.abs(output);
	}
	return output;
};
alphaTab.audio.synth.bank.patch.Sf2Patch.__super__ = alphaTab.audio.synth.bank.patch.Patch;
alphaTab.audio.synth.bank.patch.Sf2Patch.prototype = $extend(alphaTab.audio.synth.bank.patch.Patch.prototype,{
	Start: function(voiceparams) {
		var note = this.keyOverride > -1 ? this.keyOverride : voiceparams.Note;
		var vel = this.velOverride > -1 ? this.velOverride : voiceparams.Velocity;
		voiceparams.GeneratorParams[0].QuickSetup(this.gen);
		voiceparams.Envelopes[0].QuickSetupSf2(voiceparams.SynthParams.Synth.SampleRate,note,this.keynumToModEnvHold,this.keynumToModEnvDecay,false,this.mod_env);
		voiceparams.Envelopes[1].QuickSetupSf2(voiceparams.SynthParams.Synth.SampleRate,note,this.keynumToVolEnvHold,this.keynumToVolEnvDecay,true,this.vel_env);
		voiceparams.Filters[0].Disable();
		voiceparams.Lfos[0].QuickSetup(voiceparams.SynthParams.Synth.SampleRate,this.mod_lfo);
		voiceparams.Lfos[1].QuickSetup(voiceparams.SynthParams.Synth.SampleRate,this.vib_lfo);
		voiceparams.PitchOffset = (note - this.gen.RootKey) * this.gen.KeyTrack + this.gen.Tune;
		voiceparams.PitchOffset = voiceparams.PitchOffset + (100.0 * (voiceparams.SynthParams.MasterCoarseTune + (voiceparams.SynthParams.MasterFineTune.get_Combined() - 8192.0) / 8192.0) | 0);
		voiceparams.VolOffset = this.initialAttn;
		var this1 = 96.0;
		voiceparams.VolOffset = voiceparams.VolOffset - this1 * js.Boot.__cast(alphaTab.audio.synth.bank.patch.Sf2Patch.CalculateModulator(1,0,1,0,voiceparams.Velocity,0,127) , Float);
		var this2 = 96.0;
		voiceparams.VolOffset = voiceparams.VolOffset - this2 * js.Boot.__cast(alphaTab.audio.synth.bank.patch.Sf2Patch.CalculateModulator(1,0,1,0,voiceparams.SynthParams.Volume.get_Coarse(),0,127) , Float);
		if(voiceparams.GeneratorParams[0].CurrentState != 3) {
			return voiceparams.Envelopes[1].CurrentStage != 6;
		} else {
			return false;
		}
	}
	,Stop: function(voiceparams) {
		this.gen.Release(voiceparams.GeneratorParams[0]);
		if(this.gen.LoopMode != 1) {
			voiceparams.Envelopes[0].Release(1e-38);
			voiceparams.Envelopes[1].ReleaseSf2VolumeEnvelope();
		}
	}
	,Process: function(voiceparams,startIndex,endIndex,isMuted) {
		var basePitchFrequency = alphaTab.audio.synth.util.SynthHelper.CentsToPitch(voiceparams.SynthParams.CurrentPitch) * this.gen.Frequency;
		var pitchWithBend = basePitchFrequency * alphaTab.audio.synth.util.SynthHelper.CentsToPitch(voiceparams.PitchOffset);
		var basePitch = pitchWithBend / voiceparams.SynthParams.Synth.SampleRate;
		var baseVolume = isMuted ? 0 : voiceparams.SynthParams.Synth.MasterVolume * voiceparams.SynthParams.CurrentVolume * 0.35 * voiceparams.SynthParams.MixVolume;
		var x = startIndex;
		while(x < endIndex) {
			voiceparams.Envelopes[0].Increment(64);
			voiceparams.Envelopes[1].Increment(64);
			voiceparams.Lfos[0].Increment(64);
			voiceparams.Lfos[1].Increment(64);
			this.gen.GetValues(voiceparams.GeneratorParams[0],voiceparams.BlockBuffer,basePitch * alphaTab.audio.synth.util.SynthHelper.CentsToPitch(system.Convert.ToInt32_Single(voiceparams.Envelopes[0].Value * this.modEnvToPitch + voiceparams.Lfos[0].Value * this.modLfoToPitch + voiceparams.Lfos[1].Value * this.vibLfoToPitch)));
			if(voiceparams.Filters[0].get_Enabled()) {
				var centsFc = voiceparams.PData[0].getInt32(0,true) + voiceparams.Lfos[0].Value * this.modLfoToFilterFc + voiceparams.Envelopes[0].Value * this.modEnvToFilterFc;
				if(centsFc > 13500) {
					centsFc = 13500;
				}
				voiceparams.Filters[0].set_CutOff(alphaTab.audio.synth.util.SynthHelper.KeyToFrequency(centsFc / 100.0,69));
				if(voiceparams.Filters[0].CoeffNeedsUpdating) {
					voiceparams.Filters[0].ApplyFilterInterp(voiceparams.BlockBuffer,voiceparams.SynthParams.Synth.SampleRate);
				} else {
					voiceparams.Filters[0].ApplyFilter_SampleArray(voiceparams.BlockBuffer);
				}
			}
			var this1 = voiceparams.VolOffset + voiceparams.Envelopes[1].Value + voiceparams.Lfos[0].Value * this.modLfoToVolume;
			var volume = js.Boot.__cast(alphaTab.audio.synth.util.SynthHelper.DBtoLinear(this1) , Float) * baseVolume;
			if(2 == 2) {
				voiceparams.MixMonoToStereoInterp(x,volume * this.pan.Left * voiceparams.SynthParams.CurrentPan.Left,volume * this.pan.Right * voiceparams.SynthParams.CurrentPan.Right);
			} else {
				voiceparams.MixMonoToMonoInterp(x,volume);
			}
			if(voiceparams.Envelopes[1].CurrentStage > 2 && volume <= 1e-5 || voiceparams.GeneratorParams[0].CurrentState == 3) {
				voiceparams.State = 0;
				return;
			}
			x = x + 64 * 2;
		}
	}
	,Load: function(region,assets) {
		this.ExclusiveGroup = region.Generators[57];
		this.ExclusiveGroupTarget = this.ExclusiveGroup;
		this.iniFilterFc = region.Generators[8];
		this.filterQ = alphaTab.audio.synth.util.SynthHelper.DBtoLinear(region.Generators[9] / 10.0);
		var this1 = 10;
		this.initialAttn = -region.Generators[48] / this1;
		this.keyOverride = region.Generators[46];
		this.velOverride = region.Generators[47];
		this.keynumToModEnvHold = region.Generators[31];
		this.keynumToModEnvDecay = region.Generators[32];
		this.keynumToVolEnvHold = region.Generators[39];
		this.keynumToVolEnvDecay = region.Generators[40];
		this.pan = new alphaTab.audio.synth.bank.components.PanComponent();
		var this2 = 500;
		this.pan.SetValue(region.Generators[17] / this2,0);
		this.modLfoToPitch = region.Generators[5];
		this.vibLfoToPitch = region.Generators[6];
		this.modEnvToPitch = region.Generators[7];
		this.modLfoToFilterFc = region.Generators[10];
		this.modEnvToFilterFc = region.Generators[11];
		var this3 = 10;
		this.modLfoToVolume = region.Generators[13] / this3;
		this.LoadGen(region,assets);
		this.LoadEnvelopes(region);
		this.LoadLfos(region);
		this.LoadFilter(region);
	}
	,LoadGen: function(region,assets) {
		var this1 = region.Generators[53];
		var sda = assets.SampleAssets[this1];
		this.gen = new alphaTab.audio.synth.bank.components.generators.SampleGenerator();
		var this2 = sda.End + region.Generators[1] + 32768 * region.Generators[12];
		this.gen.EndPhase = this2;
		var this3 = sda.SampleRate;
		this.gen.Frequency = this3;
		this.gen.KeyTrack = region.Generators[56];
		var this4 = sda.LoopEnd + region.Generators[3] + 32768 * region.Generators[50];
		this.gen.LoopEndPhase = this4;
		var _g = region.Generators[54] & 3;
		switch(_g) {
		case 1:
			this.gen.LoopMode = 2;
			break;
		case 0:case 2:
			this.gen.LoopMode = 0;
			break;
		case 3:
			this.gen.LoopMode = 3;
			break;
		default:
		}
		var this5 = sda.LoopStart + region.Generators[2] + 32768 * region.Generators[45];
		this.gen.LoopStartPhase = this5;
		this.gen.Offset = 0;
		this.gen.Period = 1.0;
		if(region.Generators[58] > -1) {
			this.gen.RootKey = region.Generators[58];
		} else {
			this.gen.RootKey = sda.RootKey;
		}
		var this6 = sda.Start + region.Generators[0] + 32768 * region.Generators[4];
		this.gen.StartPhase = this6;
		var this7 = region.Generators[52];
		var tmp = system.Convert.ToInt16(sda.Tune + this7 + 100 * region.Generators[51]);
		this.gen.Tune = tmp;
		this.gen.VelocityTrack = 0;
		(js.Boot.__cast(this.gen , alphaTab.audio.synth.bank.components.generators.SampleGenerator)).Samples = sda.SampleData;
	}
	,LoadEnvelopes: function(region) {
		this.mod_env = new alphaTab.audio.synth.bank.descriptors.EnvelopeDescriptor();
		this.mod_env.AttackTime = js.Boot.__cast(Math.pow(2,region.Generators[26] / 1200.0) , Float);
		this.mod_env.AttackGraph = 3;
		this.mod_env.DecayTime = js.Boot.__cast(Math.pow(2,region.Generators[28] / 1200.0) , Float);
		this.mod_env.DelayTime = js.Boot.__cast(Math.pow(2,region.Generators[25] / 1200.0) , Float);
		this.mod_env.HoldTime = js.Boot.__cast(Math.pow(2,region.Generators[27] / 1200.0) , Float);
		this.mod_env.PeakLevel = 1;
		this.mod_env.ReleaseTime = js.Boot.__cast(Math.pow(2,region.Generators[30] / 1200.0) , Float);
		this.mod_env.StartLevel = 0;
		var this1 = 1;
		var tmp = alphaTab.audio.synth.util.SynthHelper.ClampS(region.Generators[29],0 | 0,1000 | 0);
		var this2 = 1000;
		this.mod_env.SustainLevel = this1 - tmp / this2;
		var this3 = 0.001;
		if(this.mod_env.AttackTime < this3) {
			this.mod_env.AttackTime = 0.001;
		} else {
			var this4 = 100;
			if(this.mod_env.AttackTime > this4) {
				this.mod_env.AttackTime = 100;
			}
		}
		var this5 = 0.001;
		if(this.mod_env.DecayTime < this5) {
			this.mod_env.DecayTime = 0;
		} else {
			var this6 = 100;
			if(this.mod_env.DecayTime > this6) {
				this.mod_env.DecayTime = 100;
			}
		}
		var this7 = 0.001;
		if(this.mod_env.DelayTime < this7) {
			this.mod_env.DelayTime = 0;
		} else {
			var this8 = 20;
			if(this.mod_env.DelayTime > this8) {
				this.mod_env.DelayTime = 20;
			}
		}
		var this9 = 0.001;
		if(this.mod_env.HoldTime < this9) {
			this.mod_env.HoldTime = 0;
		} else {
			var this10 = 20;
			if(this.mod_env.HoldTime > this10) {
				this.mod_env.HoldTime = 20;
			}
		}
		var this11 = 0.001;
		if(this.mod_env.ReleaseTime < this11) {
			this.mod_env.ReleaseTime = 0.001;
		} else {
			var this12 = 100;
			if(this.mod_env.ReleaseTime > this12) {
				this.mod_env.ReleaseTime = 100;
			}
		}
		this.vel_env = new alphaTab.audio.synth.bank.descriptors.EnvelopeDescriptor();
		this.vel_env.AttackTime = js.Boot.__cast(Math.pow(2,region.Generators[34] / 1200.0) , Float);
		this.vel_env.AttackGraph = 3;
		this.vel_env.DecayTime = js.Boot.__cast(Math.pow(2,region.Generators[36] / 1200.0) , Float);
		this.vel_env.DelayTime = js.Boot.__cast(Math.pow(2,region.Generators[33] / 1200.0) , Float);
		this.vel_env.HoldTime = js.Boot.__cast(Math.pow(2,region.Generators[35] / 1200.0) , Float);
		this.vel_env.PeakLevel = 0;
		this.vel_env.ReleaseTime = js.Boot.__cast(Math.pow(2,region.Generators[38] / 1200.0) , Float);
		this.vel_env.StartLevel = -100;
		var this13 = alphaTab.audio.synth.util.SynthHelper.ClampS(region.Generators[37],0 | 0,1000 | 0) / -10 | 0;
		this.vel_env.SustainLevel = this13;
		var this14 = 0.001;
		if(this.vel_env.AttackTime < this14) {
			this.vel_env.AttackTime = 0.001;
		} else {
			var this15 = 100;
			if(this.vel_env.AttackTime > this15) {
				this.vel_env.AttackTime = 100;
			}
		}
		var this16 = 0.001;
		if(this.vel_env.DecayTime < this16) {
			this.vel_env.DecayTime = 0;
		} else {
			var this17 = 100;
			if(this.vel_env.DecayTime > this17) {
				this.vel_env.DecayTime = 100;
			}
		}
		var this18 = 0.001;
		if(this.vel_env.DelayTime < this18) {
			this.vel_env.DelayTime = 0;
		} else {
			var this19 = 20;
			if(this.vel_env.DelayTime > this19) {
				this.vel_env.DelayTime = 20;
			}
		}
		var this20 = 0.001;
		if(this.vel_env.HoldTime < this20) {
			this.vel_env.HoldTime = 0;
		} else {
			var this21 = 20;
			if(this.vel_env.HoldTime > this21) {
				this.vel_env.HoldTime = 20;
			}
		}
		var this22 = 0.001;
		if(this.vel_env.ReleaseTime < this22) {
			this.vel_env.ReleaseTime = 0.001;
		} else {
			var this23 = 100;
			if(this.vel_env.ReleaseTime > this23) {
				this.vel_env.ReleaseTime = 100;
			}
		}
	}
	,LoadLfos: function(region) {
		this.mod_lfo = new alphaTab.audio.synth.bank.descriptors.LfoDescriptor();
		this.mod_lfo.DelayTime = js.Boot.__cast(Math.pow(2,region.Generators[21] / 1200.0) , Float);
		this.mod_lfo.Frequency = js.Boot.__cast(Math.pow(2,region.Generators[22] / 1200.0) * 8.176 , Float);
		this.mod_lfo.Generator = alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSine;
		this.vib_lfo = new alphaTab.audio.synth.bank.descriptors.LfoDescriptor();
		this.vib_lfo.DelayTime = js.Boot.__cast(Math.pow(2,region.Generators[23] / 1200.0) , Float);
		this.vib_lfo.Frequency = js.Boot.__cast(Math.pow(2,region.Generators[24] / 1200.0) * 8.176 , Float);
		this.vib_lfo.Generator = alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSine;
	}
	,LoadFilter: function(region) {
		this.fltr = new alphaTab.audio.synth.bank.descriptors.FilterDescriptor();
		this.fltr.FilterMethod = 1;
		this.fltr.CutOff = js.Boot.__cast(alphaTab.audio.synth.util.SynthHelper.KeyToFrequency(region.Generators[8] / 100.0,69) , Float);
		this.fltr.Resonance = js.Boot.__cast(alphaTab.audio.synth.util.SynthHelper.DBtoLinear(region.Generators[9] / 10.0) , Float);
	}
	,__class__: alphaTab.audio.synth.bank.patch.Sf2Patch
});
alphaTab.audio.synth.ds.CircularSampleBuffer = $hx_exports["alphaTab"]["audio"]["synth"]["ds"]["CircularSampleBuffer"] = function(size) {
	this._buffer = null;
	this._writePosition = 0;
	this._readPosition = 0;
	this._sampleCount = 0;
	var this1 = new Float32Array(size);
	this._buffer = this1;
	this._writePosition = 0;
	this._readPosition = 0;
	this._sampleCount = 0;
};
alphaTab.audio.synth.ds.CircularSampleBuffer.__name__ = ["alphaTab","audio","synth","ds","CircularSampleBuffer"];
alphaTab.audio.synth.ds.CircularSampleBuffer.prototype = {
	get_Count: function() {
		return this._sampleCount;
	}
	,Clear: function() {
		this._readPosition = 0;
		this._writePosition = 0;
		this._sampleCount = 0;
		var this1 = new Float32Array(this._buffer.length);
		this._buffer = this1;
	}
	,Write: function(data,offset,count) {
		var samplesWritten = 0;
		if(count > this._buffer.length - this._sampleCount) {
			count = this._buffer.length - this._sampleCount;
		}
		var writeToEnd = Math.min(this._buffer.length - this._writePosition,count);
		var destPos = this._writePosition;
		alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(this._buffer).set(alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(data).subarray(offset,offset + writeToEnd),destPos);
		this._writePosition = this._writePosition + writeToEnd;
		this._writePosition = this._writePosition % this._buffer.length;
		samplesWritten = samplesWritten + writeToEnd;
		if(samplesWritten < count) {
			var srcPos = offset + samplesWritten;
			var destPos1 = this._writePosition;
			alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(this._buffer).set(alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(data).subarray(srcPos,srcPos + (count - samplesWritten)),destPos1);
			this._writePosition = this._writePosition + (count - samplesWritten);
			samplesWritten = count;
		}
		this._sampleCount = this._sampleCount + samplesWritten;
		return samplesWritten;
	}
	,Read: function(data,offset,count) {
		if(count > this._sampleCount) {
			count = this._sampleCount;
		}
		var samplesRead = 0;
		var readToEnd = Math.min(this._buffer.length - this._readPosition,count);
		var src = this._buffer;
		var srcPos = this._readPosition;
		alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(data).set(alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(src).subarray(srcPos,srcPos + readToEnd),offset);
		samplesRead = samplesRead + readToEnd;
		this._readPosition = this._readPosition + readToEnd;
		this._readPosition = this._readPosition % this._buffer.length;
		if(samplesRead < count) {
			var src1 = this._buffer;
			var srcPos1 = this._readPosition;
			alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(data).set(alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(src1).subarray(srcPos1,srcPos1 + (count - samplesRead)),offset + samplesRead);
			this._readPosition = this._readPosition + (count - samplesRead);
			samplesRead = count;
		}
		this._sampleCount = this._sampleCount - samplesRead;
		return samplesRead;
	}
	,__class__: alphaTab.audio.synth.ds.CircularSampleBuffer
};
alphaTab.audio.synth.ds.LinkedListNode = $hx_exports["alphaTab"]["audio"]["synth"]["ds"]["LinkedListNode"] = function() {
};
alphaTab.audio.synth.ds.LinkedListNode.__name__ = ["alphaTab","audio","synth","ds","LinkedListNode"];
alphaTab.audio.synth.ds.LinkedListNode.prototype = {
	get_Next: function() {
		if(this._next == null || this._list.First == this._next) {
			return null;
		} else {
			return this._next;
		}
	}
	,get_Prev: function() {
		if(this._prev == null || this == this._list.First) {
			return null;
		} else {
			return this._prev;
		}
	}
	,Invalidate: function() {
		this._list = null;
		this._next = null;
		this._prev = null;
	}
	,__class__: alphaTab.audio.synth.ds.LinkedListNode
};
alphaTab.audio.synth.ds._SampleArray = {};
alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["ds"]["_SampleArray"]["SampleArray_Impl_"] = {};
alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.__name__ = ["alphaTab","audio","synth","ds","_SampleArray","SampleArray_Impl_"];
alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_._new = function(length) {
	var this1 = new Float32Array(length);
	return this1;
};
alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array = function(this1) {
	return this1;
};
alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.get_Item = function(this1,index) {
	return this1[index];
};
alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.set_Item = function(this1,index,value) {
	this1[index] = value;
	return this1[index];
};
alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.get_Length = function(this1) {
	return this1.length;
};
alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.Clear = function(this1) {
	this1 = new Float32Array(this1.length);
};
alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.Blit = function(src,srcPos,dest,destPos,len) {
	alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(dest).set(alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(src).subarray(srcPos,srcPos + len),destPos);
};
alphaTab.audio.synth.midi = {};
alphaTab.audio.synth.midi.MidiFile = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["MidiFile"] = function() {
	this.Division = 0;
	this.TrackFormat = 0;
	this.TimingStandard = 0;
	this.Events = null;
	this.Division = 960;
	this.TrackFormat = 0;
	this.TimingStandard = 0;
	var this1 = [];
	this.Events = this1;
};
alphaTab.audio.synth.midi.MidiFile.__name__ = ["alphaTab","audio","synth","midi","MidiFile"];
alphaTab.audio.synth.midi.MidiFile.prototype = {
	AddEvent: function(e) {
		if(this.Events.length == 0) {
			this.Events.push(e);
		} else {
			var insertPos = this.Events.length;
			while(insertPos > 0) {
				var prevItem = this.Events[insertPos - 1];
				if(prevItem.Tick > e.Tick) {
					--insertPos;
				} else {
					break;
				}
			}
			this.Events.splice(insertPos,0,e);
		}
	}
	,__class__: alphaTab.audio.synth.midi.MidiFile
};
alphaTab.audio.synth.midi.MidiHelper = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["MidiHelper"] = function() { };
alphaTab.audio.synth.midi.MidiHelper.__name__ = ["alphaTab","audio","synth","midi","MidiHelper"];
alphaTab.audio.synth.midi._MidiTimeFormat = {};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["_MidiTimeFormat"]["MidiTimeFormat_Impl_"] = {};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.__name__ = ["alphaTab","audio","synth","midi","_MidiTimeFormat","MidiTimeFormat_Impl_"];
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "TicksPerBeat";
	case 1:
		return "FramesPerSecond";
	}
	return "";
};
alphaTab.audio.synth.midi._MidiTrackFormat = {};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["_MidiTrackFormat"]["MidiTrackFormat_Impl_"] = {};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.__name__ = ["alphaTab","audio","synth","midi","_MidiTrackFormat","MidiTrackFormat_Impl_"];
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "SingleTrack";
	case 1:
		return "MultiTrack";
	case 2:
		return "MultiSong";
	}
	return "";
};
alphaTab.audio.synth.midi.event = {};
alphaTab.audio.synth.midi.event._ControllerTypeEnum = {};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_ControllerTypeEnum"]["ControllerTypeEnum_Impl_"] = {};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.__name__ = ["alphaTab","audio","synth","midi","event","_ControllerTypeEnum","ControllerTypeEnum_Impl_"];
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "BankSelectCoarse";
	case 1:
		return "ModulationCoarse";
	case 2:
		return "BreathControllerCoarse";
	case 4:
		return "FootControllerCoarse";
	case 5:
		return "PortamentoTimeCoarse";
	case 6:
		return "DataEntryCoarse";
	case 7:
		return "VolumeCoarse";
	case 8:
		return "BalanceCoarse";
	case 10:
		return "PanCoarse";
	case 11:
		return "ExpressionControllerCoarse";
	case 12:
		return "EffectControl1Coarse";
	case 13:
		return "EffectControl2Coarse";
	case 16:
		return "GeneralPurposeSlider1";
	case 17:
		return "GeneralPurposeSlider2";
	case 18:
		return "GeneralPurposeSlider3";
	case 19:
		return "GeneralPurposeSlider4";
	case 32:
		return "BankSelectFine";
	case 33:
		return "ModulationFine";
	case 34:
		return "BreathControllerFine";
	case 36:
		return "FootControllerFine";
	case 37:
		return "PortamentoTimeFine";
	case 38:
		return "DataEntryFine";
	case 39:
		return "VolumeFine";
	case 40:
		return "BalanceFine";
	case 42:
		return "PanFine";
	case 43:
		return "ExpressionControllerFine";
	case 44:
		return "EffectControl1Fine";
	case 45:
		return "EffectControl2Fine";
	case 64:
		return "HoldPedal";
	case 65:
		return "Portamento";
	case 66:
		return "SostenutoPedal";
	case 67:
		return "SoftPedal";
	case 68:
		return "LegatoPedal";
	case 69:
		return "Hold2Pedal";
	case 70:
		return "SoundVariation";
	case 71:
		return "SoundTimbre";
	case 72:
		return "SoundReleaseTime";
	case 73:
		return "SoundAttackTime";
	case 74:
		return "SoundBrightness";
	case 75:
		return "SoundControl6";
	case 76:
		return "SoundControl7";
	case 77:
		return "SoundControl8";
	case 78:
		return "SoundControl9";
	case 79:
		return "SoundControl10";
	case 80:
		return "GeneralPurposeButton1";
	case 81:
		return "GeneralPurposeButton2";
	case 82:
		return "GeneralPurposeButton3";
	case 83:
		return "GeneralPurposeButton4";
	case 91:
		return "EffectsLevel";
	case 92:
		return "TremuloLevel";
	case 93:
		return "ChorusLevel";
	case 94:
		return "CelesteLevel";
	case 95:
		return "PhaseLevel";
	case 96:
		return "DataButtonIncrement";
	case 97:
		return "DataButtonDecrement";
	case 98:
		return "NonRegisteredParameterFine";
	case 99:
		return "NonRegisteredParameterCourse";
	case 100:
		return "RegisteredParameterFine";
	case 101:
		return "RegisteredParameterCourse";
	case 120:
		return "AllSoundOff";
	case 121:
		return "ResetControllers";
	case 122:
		return "LocalKeyboard";
	case 123:
		return "AllNotesOff";
	case 124:
		return "OmniModeOff";
	case 125:
		return "OmniModeOn";
	case 126:
		return "MonoMode";
	case 127:
		return "PolyMode";
	}
	return "";
};
alphaTab.audio.synth.midi.event.MidiEvent = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["MidiEvent"] = function(tick,status,data1,data2) {
	this.Message = 0;
	this.Tick = 0;
	this.Tick = tick;
	this.Message = status | data1 << 8 | data2 << 16;
};
alphaTab.audio.synth.midi.event.MidiEvent.__name__ = ["alphaTab","audio","synth","midi","event","MidiEvent"];
alphaTab.audio.synth.midi.event.MidiEvent.prototype = {
	get_Channel: function() {
		return this.Message & 15;
	}
	,get_Command: function() {
		return js.Boot.__cast(this.Message & 240 , Int);
	}
	,get_Data1: function() {
		return (this.Message & 65280) >> 8;
	}
	,set_Data1: function(value) {
		this.Message = this.Message & -65281;
		this.Message = this.Message | value << 8;
		return this.get_Data1();
	}
	,get_Data2: function() {
		return (this.Message & 16711680) >> 16;
	}
	,set_Data2: function(value) {
		this.Message = this.Message & -16711681;
		this.Message = this.Message | value << 16;
		return this.get_Data2();
	}
	,__class__: alphaTab.audio.synth.midi.event.MidiEvent
};
alphaTab.audio.synth.midi.event.MetaEvent = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["MetaEvent"] = function(delta,status,data1,data2) {
	alphaTab.audio.synth.midi.event.MidiEvent.call(this,delta,status,data1,data2);
};
alphaTab.audio.synth.midi.event.MetaEvent.__name__ = ["alphaTab","audio","synth","midi","event","MetaEvent"];
alphaTab.audio.synth.midi.event.MetaEvent.__super__ = alphaTab.audio.synth.midi.event.MidiEvent;
alphaTab.audio.synth.midi.event.MetaEvent.prototype = $extend(alphaTab.audio.synth.midi.event.MidiEvent.prototype,{
	get_Channel: function() {
		return -1;
	}
	,get_Command: function() {
		return js.Boot.__cast(this.Message & 255 , Int);
	}
	,get_MetaStatus: function() {
		return this.get_Data1();
	}
	,__class__: alphaTab.audio.synth.midi.event.MetaEvent
});
alphaTab.audio.synth.midi.event.MetaDataEvent = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["MetaDataEvent"] = function(delta,status,metaId,data) {
	alphaTab.audio.synth.midi.event.MetaEvent.call(this,delta,status,metaId,0);
	this.Data = null;
	this.Data = data;
};
alphaTab.audio.synth.midi.event.MetaDataEvent.__name__ = ["alphaTab","audio","synth","midi","event","MetaDataEvent"];
alphaTab.audio.synth.midi.event.MetaDataEvent.__super__ = alphaTab.audio.synth.midi.event.MetaEvent;
alphaTab.audio.synth.midi.event.MetaDataEvent.prototype = $extend(alphaTab.audio.synth.midi.event.MetaEvent.prototype,{
	__class__: alphaTab.audio.synth.midi.event.MetaDataEvent
});
alphaTab.audio.synth.midi.event._MetaEventTypeEnum = {};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_MetaEventTypeEnum"]["MetaEventTypeEnum_Impl_"] = {};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.__name__ = ["alphaTab","audio","synth","midi","event","_MetaEventTypeEnum","MetaEventTypeEnum_Impl_"];
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "SequenceNumber";
	case 1:
		return "TextEvent";
	case 2:
		return "CopyrightNotice";
	case 3:
		return "SequenceOrTrackName";
	case 4:
		return "InstrumentName";
	case 5:
		return "LyricText";
	case 6:
		return "MarkerText";
	case 7:
		return "CuePoint";
	case 8:
		return "PatchName";
	case 9:
		return "PortName";
	case 32:
		return "MidiChannel";
	case 33:
		return "MidiPort";
	case 47:
		return "EndOfTrack";
	case 81:
		return "Tempo";
	case 84:
		return "SmpteOffset";
	case 88:
		return "TimeSignature";
	case 89:
		return "KeySignature";
	case 127:
		return "SequencerSpecific";
	}
	return "";
};
alphaTab.audio.synth.midi.event.MetaNumberEvent = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["MetaNumberEvent"] = function(delta,status,metaId,number) {
	alphaTab.audio.synth.midi.event.MetaEvent.call(this,delta,status,metaId,0);
	this.Value = 0;
	this.Value = number;
};
alphaTab.audio.synth.midi.event.MetaNumberEvent.__name__ = ["alphaTab","audio","synth","midi","event","MetaNumberEvent"];
alphaTab.audio.synth.midi.event.MetaNumberEvent.__super__ = alphaTab.audio.synth.midi.event.MetaEvent;
alphaTab.audio.synth.midi.event.MetaNumberEvent.prototype = $extend(alphaTab.audio.synth.midi.event.MetaEvent.prototype,{
	__class__: alphaTab.audio.synth.midi.event.MetaNumberEvent
});
alphaTab.audio.synth.midi.event.MetaTextEvent = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["MetaTextEvent"] = function(delta,status,metaId,text) {
	alphaTab.audio.synth.midi.event.MetaEvent.call(this,delta,status,metaId,0);
	this.Text = null;
	this.Text = text;
};
alphaTab.audio.synth.midi.event.MetaTextEvent.__name__ = ["alphaTab","audio","synth","midi","event","MetaTextEvent"];
alphaTab.audio.synth.midi.event.MetaTextEvent.__super__ = alphaTab.audio.synth.midi.event.MetaEvent;
alphaTab.audio.synth.midi.event.MetaTextEvent.prototype = $extend(alphaTab.audio.synth.midi.event.MetaEvent.prototype,{
	__class__: alphaTab.audio.synth.midi.event.MetaTextEvent
});
alphaTab.audio.synth.midi.event._MidiEventTypeEnum = {};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_MidiEventTypeEnum"]["MidiEventTypeEnum_Impl_"] = {};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.__name__ = ["alphaTab","audio","synth","midi","event","_MidiEventTypeEnum","MidiEventTypeEnum_Impl_"];
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 128:
		return "NoteOff";
	case 144:
		return "NoteOn";
	case 160:
		return "NoteAftertouch";
	case 176:
		return "Controller";
	case 192:
		return "ProgramChange";
	case 208:
		return "ChannelAftertouch";
	case 224:
		return "PitchBend";
	case 255:
		return "Meta";
	}
	return "";
};
alphaTab.audio.synth.midi.event.SystemCommonEvent = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["SystemCommonEvent"] = function(delta,status,data1,data2) {
	alphaTab.audio.synth.midi.event.MidiEvent.call(this,delta,status,data1,data2);
};
alphaTab.audio.synth.midi.event.SystemCommonEvent.__name__ = ["alphaTab","audio","synth","midi","event","SystemCommonEvent"];
alphaTab.audio.synth.midi.event.SystemCommonEvent.__super__ = alphaTab.audio.synth.midi.event.MidiEvent;
alphaTab.audio.synth.midi.event.SystemCommonEvent.prototype = $extend(alphaTab.audio.synth.midi.event.MidiEvent.prototype,{
	get_Channel: function() {
		return -1;
	}
	,get_Command: function() {
		return js.Boot.__cast(this.Message & 255 , Int);
	}
	,__class__: alphaTab.audio.synth.midi.event.SystemCommonEvent
});
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum = {};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["_SystemCommonTypeEnum"]["SystemCommonTypeEnum_Impl_"] = {};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.__name__ = ["alphaTab","audio","synth","midi","event","_SystemCommonTypeEnum","SystemCommonTypeEnum_Impl_"];
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 240:
		return "SystemExclusive";
	case 241:
		return "MtcQuarterFrame";
	case 242:
		return "SongPosition";
	case 243:
		return "SongSelect";
	case 246:
		return "TuneRequest";
	case 247:
		return "SystemExclusive2";
	}
	return "";
};
alphaTab.audio.synth.midi.event.SystemExclusiveEvent = $hx_exports["alphaTab"]["audio"]["synth"]["midi"]["event"]["SystemExclusiveEvent"] = function(delta,status,id,data) {
	alphaTab.audio.synth.midi.event.SystemCommonEvent.call(this,delta,status,system.Convert.ToUInt8(id & 255),system.Convert.ToUInt8(id >> 8));
	this.Data = null;
	this.Data = data;
};
alphaTab.audio.synth.midi.event.SystemExclusiveEvent.__name__ = ["alphaTab","audio","synth","midi","event","SystemExclusiveEvent"];
alphaTab.audio.synth.midi.event.SystemExclusiveEvent.__super__ = alphaTab.audio.synth.midi.event.SystemCommonEvent;
alphaTab.audio.synth.midi.event.SystemExclusiveEvent.prototype = $extend(alphaTab.audio.synth.midi.event.SystemCommonEvent.prototype,{
	get_ManufacturerId: function() {
		return this.Message >> 8;
	}
	,__class__: alphaTab.audio.synth.midi.event.SystemExclusiveEvent
});
alphaTab.audio.synth.sf2 = {};
alphaTab.audio.synth.sf2._DirectionEnum = {};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_DirectionEnum"]["DirectionEnum_Impl_"] = {};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.__name__ = ["alphaTab","audio","synth","sf2","_DirectionEnum","DirectionEnum_Impl_"];
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "MinToMax";
	case 1:
		return "MaxToMin";
	}
	return "";
};
alphaTab.audio.synth.sf2.Generator = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["Generator"] = function(input) {
	this._rawAmount = 0;
	this.GeneratorType = 0;
	this.GeneratorType = js.Boot.__cast(alphaTab.io.IOHelper.ReadUInt16LE(input) , Int);
	this._rawAmount = alphaTab.io.IOHelper.ReadUInt16LE(input);
};
alphaTab.audio.synth.sf2.Generator.__name__ = ["alphaTab","audio","synth","sf2","Generator"];
alphaTab.audio.synth.sf2.Generator.prototype = {
	get_AmountInt16: function() {
		return alphaTab.platform.Platform.ToInt16(this._rawAmount);
	}
	,set_AmountInt16: function(value) {
		this._rawAmount = alphaTab.platform.Platform.ToUInt16(value);
		return this.get_AmountInt16();
	}
	,get_LowByteAmount: function() {
		return alphaTab.platform.Platform.ToUInt8(this._rawAmount & 255);
	}
	,set_LowByteAmount: function(value) {
		this._rawAmount = alphaTab.platform.Platform.ToUInt16((this._rawAmount & 65280) + alphaTab.platform.Platform.ToUInt8(value));
		return this.get_LowByteAmount();
	}
	,get_HighByteAmount: function() {
		return alphaTab.platform.Platform.ToUInt8((this._rawAmount & 65280) >> 8);
	}
	,set_HighByteAmount: function(value) {
		this._rawAmount = alphaTab.platform.Platform.ToUInt16((this._rawAmount & 255) + (alphaTab.platform.Platform.ToUInt8(value) << 8));
		return this.get_HighByteAmount();
	}
	,__class__: alphaTab.audio.synth.sf2.Generator
};
alphaTab.audio.synth.sf2._GeneratorEnum = {};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_GeneratorEnum"]["GeneratorEnum_Impl_"] = {};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.__name__ = ["alphaTab","audio","synth","sf2","_GeneratorEnum","GeneratorEnum_Impl_"];
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "StartAddressOffset";
	case 1:
		return "EndAddressOffset";
	case 2:
		return "StartLoopAddressOffset";
	case 3:
		return "EndLoopAddressOffset";
	case 4:
		return "StartAddressCoarseOffset";
	case 5:
		return "ModulationLFOToPitch";
	case 6:
		return "VibratoLFOToPitch";
	case 7:
		return "ModulationEnvelopeToPitch";
	case 8:
		return "InitialFilterCutoffFrequency";
	case 9:
		return "InitialFilterQ";
	case 10:
		return "ModulationLFOToFilterCutoffFrequency";
	case 11:
		return "ModulationEnvelopeToFilterCutoffFrequency";
	case 12:
		return "EndAddressCoarseOffset";
	case 13:
		return "ModulationLFOToVolume";
	case 14:
		return "Unused1";
	case 15:
		return "ChorusEffectsSend";
	case 16:
		return "ReverbEffectsSend";
	case 17:
		return "Pan";
	case 18:
		return "Unused2";
	case 19:
		return "Unused3";
	case 20:
		return "Unused4";
	case 21:
		return "DelayModulationLFO";
	case 22:
		return "FrequencyModulationLFO";
	case 23:
		return "DelayVibratoLFO";
	case 24:
		return "FrequencyVibratoLFO";
	case 25:
		return "DelayModulationEnvelope";
	case 26:
		return "AttackModulationEnvelope";
	case 27:
		return "HoldModulationEnvelope";
	case 28:
		return "DecayModulationEnvelope";
	case 29:
		return "SustainModulationEnvelope";
	case 30:
		return "ReleaseModulationEnvelope";
	case 31:
		return "KeyNumberToModulationEnvelopeHold";
	case 32:
		return "KeyNumberToModulationEnvelopeDecay";
	case 33:
		return "DelayVolumeEnvelope";
	case 34:
		return "AttackVolumeEnvelope";
	case 35:
		return "HoldVolumeEnvelope";
	case 36:
		return "DecayVolumeEnvelope";
	case 37:
		return "SustainVolumeEnvelope";
	case 38:
		return "ReleaseVolumeEnvelope";
	case 39:
		return "KeyNumberToVolumeEnvelopeHold";
	case 40:
		return "KeyNumberToVolumeEnvelopeDecay";
	case 41:
		return "Instrument";
	case 42:
		return "Reserved1";
	case 43:
		return "KeyRange";
	case 44:
		return "VelocityRange";
	case 45:
		return "StartLoopAddressCoarseOffset";
	case 46:
		return "KeyNumber";
	case 47:
		return "Velocity";
	case 48:
		return "InitialAttenuation";
	case 49:
		return "Reserved2";
	case 50:
		return "EndLoopAddressCoarseOffset";
	case 51:
		return "CoarseTune";
	case 52:
		return "FineTune";
	case 53:
		return "SampleID";
	case 54:
		return "SampleModes";
	case 55:
		return "Reserved3";
	case 56:
		return "ScaleTuning";
	case 57:
		return "ExclusiveClass";
	case 58:
		return "OverridingRootKey";
	case 59:
		return "Unused5";
	case 60:
		return "UnusedEnd";
	}
	return "";
};
alphaTab.audio.synth.sf2.Instrument = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["Instrument"] = function() {
};
alphaTab.audio.synth.sf2.Instrument.__name__ = ["alphaTab","audio","synth","sf2","Instrument"];
alphaTab.audio.synth.sf2.Instrument.prototype = {
	__class__: alphaTab.audio.synth.sf2.Instrument
};
alphaTab.audio.synth.sf2.Modulator = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["Modulator"] = function(input) {
	this._sourceModulationData = null;
	this._destinationGenerator = 0;
	this._amount = 0;
	this._sourceModulationAmount = null;
	this._sourceTransform = 0;
	this._sourceModulationData = new alphaTab.audio.synth.sf2.ModulatorType(input);
	this._destinationGenerator = alphaTab.io.IOHelper.ReadUInt16LE(input);
	this._amount = alphaTab.io.IOHelper.ReadInt16LE(input);
	this._sourceModulationAmount = new alphaTab.audio.synth.sf2.ModulatorType(input);
	this._sourceTransform = alphaTab.io.IOHelper.ReadUInt16LE(input);
};
alphaTab.audio.synth.sf2.Modulator.__name__ = ["alphaTab","audio","synth","sf2","Modulator"];
alphaTab.audio.synth.sf2.Modulator.prototype = {
	__class__: alphaTab.audio.synth.sf2.Modulator
};
alphaTab.audio.synth.sf2.ModulatorType = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["ModulatorType"] = function(input) {
	this._controllerSource = 0;
	this.Polarity = 0;
	this.Direction = 0;
	this.SourceType = 0;
	this.IsMidiContinuousController = false;
	var raw = alphaTab.io.IOHelper.ReadUInt16LE(input);
	this.Polarity = (raw & 512) == 512 ? 1 : 0;
	this.Direction = (raw & 256) == 256 ? 1 : 0;
	this.IsMidiContinuousController = (raw & 128) == 128;
	this.SourceType = (raw & 64512) >> 10;
	this._controllerSource = alphaTab.platform.Platform.ToUInt16(raw & 127);
};
alphaTab.audio.synth.sf2.ModulatorType.__name__ = ["alphaTab","audio","synth","sf2","ModulatorType"];
alphaTab.audio.synth.sf2.ModulatorType.prototype = {
	__class__: alphaTab.audio.synth.sf2.ModulatorType
};
alphaTab.audio.synth.sf2._PolarityEnum = {};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_PolarityEnum"]["PolarityEnum_Impl_"] = {};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.__name__ = ["alphaTab","audio","synth","sf2","_PolarityEnum","PolarityEnum_Impl_"];
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Unipolar";
	case 1:
		return "Bipolar";
	}
	return "";
};
alphaTab.audio.synth.sf2.PresetHeader = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["PresetHeader"] = function() {
};
alphaTab.audio.synth.sf2.PresetHeader.__name__ = ["alphaTab","audio","synth","sf2","PresetHeader"];
alphaTab.audio.synth.sf2.PresetHeader.prototype = {
	__class__: alphaTab.audio.synth.sf2.PresetHeader
};
alphaTab.audio.synth.sf2._SFSampleLink = {};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_SFSampleLink"]["SFSampleLink_Impl_"] = {};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.__name__ = ["alphaTab","audio","synth","sf2","_SFSampleLink","SFSampleLink_Impl_"];
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.toString = function(this1) {
	switch(this1) {
	case 1:
		return "MonoSample";
	case 2:
		return "RightSample";
	case 4:
		return "LeftSample";
	case 8:
		return "LinkedSample";
	case 16:
		return "OggVobis";
	case 32769:
		return "RomMonoSample";
	case 32770:
		return "RomRightSample";
	case 32772:
		return "RomLeftSample";
	case 32776:
		return "RomLinkedSample";
	}
	return "";
};
alphaTab.audio.synth.sf2.SampleHeader = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["SampleHeader"] = function(input) {
	this.Name = null;
	this.Start = 0;
	this.End = 0;
	this.StartLoop = 0;
	this.EndLoop = 0;
	this.SampleRate = 0;
	this.RootKey = 0;
	this.Tune = 0;
	this.SampleLink = 0;
	this.SoundFontSampleLink = 1;
	this.Name = alphaTab.io.IOHelper.Read8BitStringLength(input,20);
	this.Start = alphaTab.io.IOHelper.ReadInt32LE(input);
	this.End = alphaTab.io.IOHelper.ReadInt32LE(input);
	this.StartLoop = alphaTab.io.IOHelper.ReadInt32LE(input);
	this.EndLoop = alphaTab.io.IOHelper.ReadInt32LE(input);
	this.SampleRate = alphaTab.io.IOHelper.ReadInt32LE(input);
	this.RootKey = system.Convert.ToUInt8(input.ReadByte());
	this.Tune = alphaTab.platform.Platform.ToInt16(input.ReadByte());
	this.SampleLink = alphaTab.io.IOHelper.ReadUInt16LE(input);
	this.SoundFontSampleLink = js.Boot.__cast(alphaTab.io.IOHelper.ReadUInt16LE(input) , Int);
};
alphaTab.audio.synth.sf2.SampleHeader.__name__ = ["alphaTab","audio","synth","sf2","SampleHeader"];
alphaTab.audio.synth.sf2.SampleHeader.prototype = {
	__class__: alphaTab.audio.synth.sf2.SampleHeader
};
alphaTab.audio.synth.sf2.Sf2Region = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["Sf2Region"] = function() {
	this.Generators = null;
	var this1 = new Int16Array(61);
	this.Generators = this1;
};
alphaTab.audio.synth.sf2.Sf2Region.__name__ = ["alphaTab","audio","synth","sf2","Sf2Region"];
alphaTab.audio.synth.sf2.Sf2Region.prototype = {
	ApplyDefaultValues: function() {
		this.Generators[0] = 0;
		this.Generators[1] = 0;
		this.Generators[2] = 0;
		this.Generators[3] = 0;
		this.Generators[4] = 0;
		this.Generators[5] = 0;
		this.Generators[6] = 0;
		this.Generators[7] = 0;
		this.Generators[8] = 13500;
		this.Generators[9] = 0;
		this.Generators[10] = 0;
		this.Generators[11] = 0;
		this.Generators[12] = 0;
		this.Generators[13] = 0;
		this.Generators[15] = 0;
		this.Generators[16] = 0;
		this.Generators[17] = 0;
		this.Generators[21] = -12000 | 0;
		this.Generators[22] = 0;
		this.Generators[23] = -12000 | 0;
		this.Generators[24] = 0;
		this.Generators[25] = -12000 | 0;
		this.Generators[26] = -12000 | 0;
		this.Generators[27] = -12000 | 0;
		this.Generators[28] = -12000 | 0;
		this.Generators[29] = 0;
		this.Generators[30] = -12000 | 0;
		this.Generators[31] = 0;
		this.Generators[32] = 0;
		this.Generators[33] = -12000 | 0;
		this.Generators[34] = -12000 | 0;
		this.Generators[35] = -12000 | 0;
		this.Generators[36] = -12000 | 0;
		this.Generators[37] = 0;
		this.Generators[38] = -12000 | 0;
		this.Generators[39] = 0;
		this.Generators[40] = 0;
		this.Generators[43] = 32512;
		this.Generators[44] = 32512;
		this.Generators[45] = 0;
		this.Generators[46] = -1 | 0;
		this.Generators[47] = -1 | 0;
		this.Generators[48] = 0;
		this.Generators[50] = 0;
		this.Generators[51] = 0;
		this.Generators[52] = 0;
		this.Generators[54] = 0;
		this.Generators[56] = 100;
		this.Generators[57] = 0;
		this.Generators[58] = -1 | 0;
	}
	,__class__: alphaTab.audio.synth.sf2.Sf2Region
};
alphaTab.audio.synth.sf2.SoundFont = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["SoundFont"] = function() {
};
alphaTab.audio.synth.sf2.SoundFont.__name__ = ["alphaTab","audio","synth","sf2","SoundFont"];
alphaTab.audio.synth.sf2.SoundFont.prototype = {
	Load: function(input) {
		var id = alphaTab.io.IOHelper.Read8BitChars(input,4);
		var size = alphaTab.io.IOHelper.ReadInt32LE(input);
		if(id.toLowerCase() != "riff") {
			throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid soundfont. Could not find RIFF header."));
		}
		id = alphaTab.io.IOHelper.Read8BitChars(input,4);
		if(id.toLowerCase() != "sfbk") {
			throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid soundfont. Riff type is invalid."));
		}
		alphaTab.util.Logger.Debug("SF2","Reading info chunk",null);
		this.Info = new alphaTab.audio.synth.sf2.SoundFontInfo(input);
		alphaTab.util.Logger.Debug("SF2","Reading sampledata chunk",null);
		this.SampleData = new alphaTab.audio.synth.sf2.SoundFontSampleData(input);
		alphaTab.util.Logger.Debug("SF2","Reading preset chunk",null);
		this.Presets = new alphaTab.audio.synth.sf2.SoundFontPresets(input);
	}
	,__class__: alphaTab.audio.synth.sf2.SoundFont
};
alphaTab.audio.synth.sf2.SoundFontInfo = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["SoundFontInfo"] = function(input) {
	this.RomVersionMajor = 0;
	this.RomVersionMinor = 0;
	this.SfVersionMajor = 0;
	this.SfVersionMinor = 0;
	this.SoundEngine = null;
	this.BankName = null;
	this.DataRom = null;
	this.CreationDate = null;
	this.Author = null;
	this.TargetProduct = null;
	this.Copyright = null;
	this.Comments = null;
	this.Tools = null;
	this.Tools = "";
	this.Comments = "";
	this.Copyright = "";
	this.TargetProduct = "";
	this.Author = "";
	this.DataRom = "";
	this.CreationDate = "";
	this.BankName = "";
	this.SoundEngine = "";
	var id = alphaTab.io.IOHelper.Read8BitChars(input,4);
	var size = alphaTab.io.IOHelper.ReadInt32LE(input);
	if(id.toLowerCase() != "list") {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid soundfont. Could not find INFO LIST chunk."));
	}
	var readTo = input.get_Position() + size;
	id = alphaTab.io.IOHelper.Read8BitChars(input,4);
	if(id.toLowerCase() != "info") {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid soundfont. The LIST chunk is not of type INFO."));
	}
	while(input.get_Position() < readTo) {
		id = alphaTab.io.IOHelper.Read8BitChars(input,4);
		size = alphaTab.io.IOHelper.ReadInt32LE(input);
		var _g = id.toLowerCase();
		switch(_g) {
		case "icmt":
			this.Comments = alphaTab.io.IOHelper.Read8BitStringLength(input,size);
			break;
		case "icop":
			this.Copyright = alphaTab.io.IOHelper.Read8BitStringLength(input,size);
			break;
		case "icrd":
			this.CreationDate = alphaTab.io.IOHelper.Read8BitStringLength(input,size);
			break;
		case "ieng":
			this.Author = alphaTab.io.IOHelper.Read8BitStringLength(input,size);
			break;
		case "ifil":
			this.SfVersionMajor = alphaTab.io.IOHelper.ReadInt16LE(input);
			this.SfVersionMinor = alphaTab.io.IOHelper.ReadInt16LE(input);
			break;
		case "inam":
			this.BankName = alphaTab.io.IOHelper.Read8BitStringLength(input,size);
			break;
		case "iprd":
			this.TargetProduct = alphaTab.io.IOHelper.Read8BitStringLength(input,size);
			break;
		case "irom":
			this.DataRom = alphaTab.io.IOHelper.Read8BitStringLength(input,size);
			break;
		case "isft":
			this.Tools = alphaTab.io.IOHelper.Read8BitStringLength(input,size);
			break;
		case "isng":
			this.SoundEngine = alphaTab.io.IOHelper.Read8BitStringLength(input,size);
			break;
		case "iver":
			this.RomVersionMajor = alphaTab.io.IOHelper.ReadInt16LE(input);
			this.RomVersionMinor = alphaTab.io.IOHelper.ReadInt16LE(input);
			break;
		default:
			throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid soundfont. The Chunk: " + id + " was not expected."));
		}
	}
};
alphaTab.audio.synth.sf2.SoundFontInfo.__name__ = ["alphaTab","audio","synth","sf2","SoundFontInfo"];
alphaTab.audio.synth.sf2.SoundFontInfo.prototype = {
	__class__: alphaTab.audio.synth.sf2.SoundFontInfo
};
alphaTab.audio.synth.sf2.SoundFontPresets = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["SoundFontPresets"] = function(input) {
	this.SampleHeaders = null;
	this.PresetHeaders = null;
	this.Instruments = null;
	var id = alphaTab.io.IOHelper.Read8BitChars(input,4);
	var size = alphaTab.io.IOHelper.ReadInt32LE(input);
	if(id.toLowerCase() != "list") {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid soundfont. Could not find pdta LIST chunk."));
	}
	var readTo = input.get_Position() + size;
	id = alphaTab.io.IOHelper.Read8BitChars(input,4);
	if(id.toLowerCase() != "pdta") {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid soundfont. The LIST chunk is not of type pdta."));
	}
	var presetModulators = null;
	var presetGenerators = null;
	var instrumentModulators = null;
	var instrumentGenerators = null;
	var pbag = null;
	var ibag = null;
	var phdr = null;
	var inst = null;
	while(input.get_Position() < readTo) {
		id = alphaTab.io.IOHelper.Read8BitChars(input,4);
		size = alphaTab.io.IOHelper.ReadInt32LE(input);
		var _g = id.toLowerCase();
		switch(_g) {
		case "ibag":
			ibag = new alphaTab.audio.synth.sf2.chunks.ZoneChunk(id,size,input);
			break;
		case "igen":
			instrumentGenerators = new alphaTab.audio.synth.sf2.chunks.GeneratorChunk(id,size,input).Generators;
			break;
		case "imod":
			instrumentModulators = new alphaTab.audio.synth.sf2.chunks.ModulatorChunk(id,size,input).Modulators;
			break;
		case "inst":
			inst = new alphaTab.audio.synth.sf2.chunks.InstrumentChunk(id,size,input);
			break;
		case "pbag":
			pbag = new alphaTab.audio.synth.sf2.chunks.ZoneChunk(id,size,input);
			break;
		case "pgen":
			presetGenerators = new alphaTab.audio.synth.sf2.chunks.GeneratorChunk(id,size,input).Generators;
			break;
		case "phdr":
			phdr = new alphaTab.audio.synth.sf2.chunks.PresetHeaderChunk(id,size,input);
			break;
		case "pmod":
			presetModulators = new alphaTab.audio.synth.sf2.chunks.ModulatorChunk(id,size,input).Modulators;
			break;
		case "shdr":
			this.SampleHeaders = new alphaTab.audio.synth.sf2.chunks.SampleHeaderChunk(id,size,input).SampleHeaders;
			break;
		default:
			throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid soundfont. Unrecognized sub chunk: " + id));
		}
	}
	var pZones = pbag.ToZones(presetModulators,presetGenerators);
	this.PresetHeaders = phdr.ToPresets(pZones);
	var iZones = ibag.ToZones(instrumentModulators,instrumentGenerators);
	this.Instruments = inst.ToInstruments(iZones);
};
alphaTab.audio.synth.sf2.SoundFontPresets.__name__ = ["alphaTab","audio","synth","sf2","SoundFontPresets"];
alphaTab.audio.synth.sf2.SoundFontPresets.prototype = {
	__class__: alphaTab.audio.synth.sf2.SoundFontPresets
};
alphaTab.audio.synth.sf2.SoundFontSampleData = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["SoundFontSampleData"] = function(input) {
	this.BitsPerSample = 0;
	this.SampleData = null;
	var id = alphaTab.io.IOHelper.Read8BitChars(input,4);
	var size = alphaTab.io.IOHelper.ReadInt32LE(input);
	if(id.toLowerCase() != "list") {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid soundfont. Could not find sdta LIST chunk."));
	}
	var readTo = input.get_Position() + size;
	id = alphaTab.io.IOHelper.Read8BitChars(input,4);
	if(id.toLowerCase() != "sdta") {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid soundfont. The LIST chunk is not of type sdta."));
	}
	this.BitsPerSample = 0;
	var rawSampleData = null;
	while(input.get_Position() < readTo) {
		var subID = alphaTab.io.IOHelper.Read8BitChars(input,4);
		size = alphaTab.io.IOHelper.ReadInt32LE(input);
		var _g = subID.toLowerCase();
		switch(_g) {
		case "sm24":
			if(rawSampleData == null || size != Math.ceil(this.SampleData.length / 2.0)) {
				input.Skip(size);
			} else {
				this.BitsPerSample = 24;
				var x = 0;
				while(x < this.SampleData.length) {
					var this1 = new Uint8Array(3);
					var b = this1;
					b[0] = system.Convert.ToUInt8(input.ReadByte());
					b[1] = rawSampleData[2 * x];
					b[2] = rawSampleData[2 * x + 1];
					++x;
				}
			}
			if(size % 2 == 1) {
				if(input.ReadByte() != 0) {
					var _g1 = input;
					var _g11 = _g1.get_Position();
					_g1.set_Position(_g11 - 1);
				}
			}
			break;
		case "smpl":
			this.BitsPerSample = 16;
			rawSampleData = alphaTab.io.IOHelper.ReadByteArray(input,size);
			break;
		default:
			throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid soundfont. Unknown chunk id: " + subID + "."));
		}
	}
	if(this.BitsPerSample == 16) {
		this.SampleData = rawSampleData;
	} else if(this.BitsPerSample != 24) {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Only 16 and 24 bit samples are supported."));
	}
};
alphaTab.audio.synth.sf2.SoundFontSampleData.__name__ = ["alphaTab","audio","synth","sf2","SoundFontSampleData"];
alphaTab.audio.synth.sf2.SoundFontSampleData.prototype = {
	__class__: alphaTab.audio.synth.sf2.SoundFontSampleData
};
alphaTab.audio.synth.sf2._SourceTypeEnum = {};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_SourceTypeEnum"]["SourceTypeEnum_Impl_"] = {};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.__name__ = ["alphaTab","audio","synth","sf2","_SourceTypeEnum","SourceTypeEnum_Impl_"];
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Linear";
	case 1:
		return "Concave";
	case 2:
		return "Convex";
	case 3:
		return "Switch";
	}
	return "";
};
alphaTab.audio.synth.sf2._TransformEnum = {};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["_TransformEnum"]["TransformEnum_Impl_"] = {};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.__name__ = ["alphaTab","audio","synth","sf2","_TransformEnum","TransformEnum_Impl_"];
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Linear";
	case 2:
		return "AbsoluteValue";
	}
	return "";
};
alphaTab.audio.synth.sf2.Zone = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["Zone"] = function() {
};
alphaTab.audio.synth.sf2.Zone.__name__ = ["alphaTab","audio","synth","sf2","Zone"];
alphaTab.audio.synth.sf2.Zone.prototype = {
	__class__: alphaTab.audio.synth.sf2.Zone
};
alphaTab.audio.synth.sf2.chunks = {};
alphaTab.audio.synth.sf2.chunks.Chunk = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["chunks"]["Chunk"] = function(id,size) {
	this.Id = null;
	this.Size = 0;
	this.Id = id;
	this.Size = size;
};
alphaTab.audio.synth.sf2.chunks.Chunk.__name__ = ["alphaTab","audio","synth","sf2","chunks","Chunk"];
alphaTab.audio.synth.sf2.chunks.Chunk.prototype = {
	__class__: alphaTab.audio.synth.sf2.chunks.Chunk
};
alphaTab.audio.synth.sf2.chunks.GeneratorChunk = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["chunks"]["GeneratorChunk"] = function(id,size,input) {
	alphaTab.audio.synth.sf2.chunks.Chunk.call(this,id,size);
	this.Generators = null;
	if(size % 4 != 0) {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid SoundFont. The presetzone chunk was invalid"));
	}
	var size1 = system.Convert.ToInt32_Double(size / 4.0 - 1);
	var this1 = new Array(size1);
	this.Generators = this1;
	var x = 0;
	while(x < this.Generators.length) {
		this.Generators[x] = new alphaTab.audio.synth.sf2.Generator(input);
		++x;
	}
	new alphaTab.audio.synth.sf2.Generator(input);
};
alphaTab.audio.synth.sf2.chunks.GeneratorChunk.__name__ = ["alphaTab","audio","synth","sf2","chunks","GeneratorChunk"];
alphaTab.audio.synth.sf2.chunks.GeneratorChunk.__super__ = alphaTab.audio.synth.sf2.chunks.Chunk;
alphaTab.audio.synth.sf2.chunks.GeneratorChunk.prototype = $extend(alphaTab.audio.synth.sf2.chunks.Chunk.prototype,{
	__class__: alphaTab.audio.synth.sf2.chunks.GeneratorChunk
});
alphaTab.audio.synth.sf2.chunks.InstrumentChunk = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["chunks"]["InstrumentChunk"] = function(id,size,input) {
	alphaTab.audio.synth.sf2.chunks.Chunk.call(this,id,size);
	this._rawInstruments = null;
	if(size % 22 != 0) {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid SoundFont. The preset chunk was invalid."));
	}
	var size1 = system.Convert.ToInt32_Double(size / 22.0);
	var this1 = new Array(size1);
	this._rawInstruments = this1;
	var lastInstrument = null;
	var x = 0;
	while(x < this._rawInstruments.length) {
		var i = new alphaTab.audio.synth.sf2.chunks.RawInstrument();
		i.Name = alphaTab.io.IOHelper.Read8BitStringLength(input,20);
		i.StartInstrumentZoneIndex = alphaTab.io.IOHelper.ReadUInt16LE(input);
		if(lastInstrument != null) {
			lastInstrument.EndInstrumentZoneIndex = alphaTab.platform.Platform.ToUInt16(i.StartInstrumentZoneIndex - 1);
		}
		this._rawInstruments[x] = i;
		lastInstrument = i;
		++x;
	}
};
alphaTab.audio.synth.sf2.chunks.InstrumentChunk.__name__ = ["alphaTab","audio","synth","sf2","chunks","InstrumentChunk"];
alphaTab.audio.synth.sf2.chunks.InstrumentChunk.__super__ = alphaTab.audio.synth.sf2.chunks.Chunk;
alphaTab.audio.synth.sf2.chunks.InstrumentChunk.prototype = $extend(alphaTab.audio.synth.sf2.chunks.Chunk.prototype,{
	ToInstruments: function(zones) {
		var size = this._rawInstruments.length - 1;
		var this1 = new Array(size);
		var inst = this1;
		var x = 0;
		while(x < inst.length) {
			var rawInst = this._rawInstruments[x];
			var i = new alphaTab.audio.synth.sf2.Instrument();
			i.Name = rawInst.Name;
			var size1 = rawInst.EndInstrumentZoneIndex - rawInst.StartInstrumentZoneIndex + 1;
			var this2 = new Array(size1);
			i.Zones = this2;
			alphaTab.platform.Platform.ArrayCopy_TArray_Int32_TArray_Int32_Int321(zones,rawInst.StartInstrumentZoneIndex,i.Zones,0,i.Zones.length);
			inst[x] = i;
			++x;
		}
		return inst;
	}
	,__class__: alphaTab.audio.synth.sf2.chunks.InstrumentChunk
});
alphaTab.audio.synth.sf2.chunks.ModulatorChunk = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["chunks"]["ModulatorChunk"] = function(id,size,input) {
	alphaTab.audio.synth.sf2.chunks.Chunk.call(this,id,size);
	this.Modulators = null;
	if(size % 10 != 0) {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid SoundFont. The presetzone chunk was invalid."));
	}
	var this1 = new Array((size / 10 | 0) - 1);
	this.Modulators = this1;
	var x = 0;
	while(x < this.Modulators.length) {
		this.Modulators[x] = new alphaTab.audio.synth.sf2.Modulator(input);
		++x;
	}
	new alphaTab.audio.synth.sf2.Modulator(input);
};
alphaTab.audio.synth.sf2.chunks.ModulatorChunk.__name__ = ["alphaTab","audio","synth","sf2","chunks","ModulatorChunk"];
alphaTab.audio.synth.sf2.chunks.ModulatorChunk.__super__ = alphaTab.audio.synth.sf2.chunks.Chunk;
alphaTab.audio.synth.sf2.chunks.ModulatorChunk.prototype = $extend(alphaTab.audio.synth.sf2.chunks.Chunk.prototype,{
	__class__: alphaTab.audio.synth.sf2.chunks.ModulatorChunk
});
alphaTab.audio.synth.sf2.chunks.PresetHeaderChunk = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["chunks"]["PresetHeaderChunk"] = function(id,size,input) {
	alphaTab.audio.synth.sf2.chunks.Chunk.call(this,id,size);
	this._rawPresets = null;
	if(size % 38 != 0) {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid SoundFont. The preset chunk was invalid."));
	}
	var size1 = system.Convert.ToInt32_Double(size / 38.0);
	var this1 = new Array(size1);
	this._rawPresets = this1;
	var lastPreset = null;
	var x = 0;
	while(x < this._rawPresets.length) {
		var p = new alphaTab.audio.synth.sf2.chunks.RawPreset();
		p.Name = alphaTab.io.IOHelper.Read8BitStringLength(input,20);
		p.PatchNumber = alphaTab.io.IOHelper.ReadUInt16LE(input);
		p.BankNumber = alphaTab.io.IOHelper.ReadUInt16LE(input);
		p.StartPresetZoneIndex = alphaTab.io.IOHelper.ReadUInt16LE(input);
		p.Library = alphaTab.io.IOHelper.ReadInt32LE(input);
		p.Genre = alphaTab.io.IOHelper.ReadInt32LE(input);
		p.Morphology = alphaTab.io.IOHelper.ReadInt32LE(input);
		if(lastPreset != null) {
			lastPreset.EndPresetZoneIndex = alphaTab.platform.Platform.ToUInt16(p.StartPresetZoneIndex - 1);
		}
		this._rawPresets[x] = p;
		lastPreset = p;
		++x;
	}
};
alphaTab.audio.synth.sf2.chunks.PresetHeaderChunk.__name__ = ["alphaTab","audio","synth","sf2","chunks","PresetHeaderChunk"];
alphaTab.audio.synth.sf2.chunks.PresetHeaderChunk.__super__ = alphaTab.audio.synth.sf2.chunks.Chunk;
alphaTab.audio.synth.sf2.chunks.PresetHeaderChunk.prototype = $extend(alphaTab.audio.synth.sf2.chunks.Chunk.prototype,{
	ToPresets: function(presetZones) {
		var size = this._rawPresets.length - 1;
		var this1 = new Array(size);
		var presets = this1;
		var x = 0;
		while(x < presets.length) {
			var rawPreset = this._rawPresets[x];
			var p = new alphaTab.audio.synth.sf2.PresetHeader();
			p.BankNumber = rawPreset.BankNumber;
			p.Genre = rawPreset.Genre;
			p.Library = rawPreset.Library;
			p.Morphology = rawPreset.Morphology;
			p.Name = rawPreset.Name;
			p.PatchNumber = rawPreset.PatchNumber;
			var size1 = rawPreset.EndPresetZoneIndex - rawPreset.StartPresetZoneIndex + 1;
			var this2 = new Array(size1);
			p.Zones = this2;
			alphaTab.platform.Platform.ArrayCopy_TArray_Int32_TArray_Int32_Int321(presetZones,rawPreset.StartPresetZoneIndex,p.Zones,0,p.Zones.length);
			presets[x] = p;
			++x;
		}
		return presets;
	}
	,__class__: alphaTab.audio.synth.sf2.chunks.PresetHeaderChunk
});
alphaTab.audio.synth.sf2.chunks.RawInstrument = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["chunks"]["RawInstrument"] = function() {
};
alphaTab.audio.synth.sf2.chunks.RawInstrument.__name__ = ["alphaTab","audio","synth","sf2","chunks","RawInstrument"];
alphaTab.audio.synth.sf2.chunks.RawInstrument.prototype = {
	__class__: alphaTab.audio.synth.sf2.chunks.RawInstrument
};
alphaTab.audio.synth.sf2.chunks.RawPreset = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["chunks"]["RawPreset"] = function() {
};
alphaTab.audio.synth.sf2.chunks.RawPreset.__name__ = ["alphaTab","audio","synth","sf2","chunks","RawPreset"];
alphaTab.audio.synth.sf2.chunks.RawPreset.prototype = {
	__class__: alphaTab.audio.synth.sf2.chunks.RawPreset
};
alphaTab.audio.synth.sf2.chunks.RawZoneData = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["chunks"]["RawZoneData"] = function() {
};
alphaTab.audio.synth.sf2.chunks.RawZoneData.__name__ = ["alphaTab","audio","synth","sf2","chunks","RawZoneData"];
alphaTab.audio.synth.sf2.chunks.RawZoneData.prototype = {
	__class__: alphaTab.audio.synth.sf2.chunks.RawZoneData
};
alphaTab.audio.synth.sf2.chunks.SampleHeaderChunk = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["chunks"]["SampleHeaderChunk"] = function(id,size,input) {
	alphaTab.audio.synth.sf2.chunks.Chunk.call(this,id,size);
	this.SampleHeaders = null;
	if(size % 46 != 0) {
		throw new js._Boot.HaxeError(new system.Exception().Exception_CsString("Invalid SoundFont. The sample header chunk was invalid."));
	}
	var size1 = system.Convert.ToInt32_Double(size / 46.0 - 1);
	var this1 = new Array(size1);
	this.SampleHeaders = this1;
	var x = 0;
	while(x < this.SampleHeaders.length) {
		this.SampleHeaders[x] = new alphaTab.audio.synth.sf2.SampleHeader(input);
		++x;
	}
	new alphaTab.audio.synth.sf2.SampleHeader(input);
};
alphaTab.audio.synth.sf2.chunks.SampleHeaderChunk.__name__ = ["alphaTab","audio","synth","sf2","chunks","SampleHeaderChunk"];
alphaTab.audio.synth.sf2.chunks.SampleHeaderChunk.__super__ = alphaTab.audio.synth.sf2.chunks.Chunk;
alphaTab.audio.synth.sf2.chunks.SampleHeaderChunk.prototype = $extend(alphaTab.audio.synth.sf2.chunks.Chunk.prototype,{
	__class__: alphaTab.audio.synth.sf2.chunks.SampleHeaderChunk
});
alphaTab.audio.synth.sf2.chunks.ZoneChunk = $hx_exports["alphaTab"]["audio"]["synth"]["sf2"]["chunks"]["ZoneChunk"] = function(id,size,input) {
	alphaTab.audio.synth.sf2.chunks.Chunk.call(this,id,size);
	this._zoneData = null;
	var size1 = system.Convert.ToInt32_Double(size / 4.0);
	var this1 = new Array(size1);
	this._zoneData = this1;
	var lastZone = null;
	var x = 0;
	while(x < this._zoneData.length) {
		var z = new alphaTab.audio.synth.sf2.chunks.RawZoneData();
		z.GeneratorIndex = alphaTab.io.IOHelper.ReadUInt16LE(input);
		z.ModulatorIndex = alphaTab.io.IOHelper.ReadUInt16LE(input);
		if(lastZone != null) {
			lastZone.GeneratorCount = alphaTab.platform.Platform.ToUInt16(z.GeneratorIndex - lastZone.GeneratorIndex);
			lastZone.ModulatorCount = alphaTab.platform.Platform.ToUInt16(z.ModulatorIndex - lastZone.ModulatorIndex);
		}
		this._zoneData[x] = z;
		lastZone = z;
		++x;
	}
};
alphaTab.audio.synth.sf2.chunks.ZoneChunk.__name__ = ["alphaTab","audio","synth","sf2","chunks","ZoneChunk"];
alphaTab.audio.synth.sf2.chunks.ZoneChunk.__super__ = alphaTab.audio.synth.sf2.chunks.Chunk;
alphaTab.audio.synth.sf2.chunks.ZoneChunk.prototype = $extend(alphaTab.audio.synth.sf2.chunks.Chunk.prototype,{
	ToZones: function(modulators,generators) {
		var size = this._zoneData.length - 1;
		var this1 = new Array(size);
		var zones = this1;
		var x = 0;
		while(x < zones.length) {
			var rawZone = this._zoneData[x];
			var zone = new alphaTab.audio.synth.sf2.Zone();
			var size1 = rawZone.GeneratorCount;
			var this2 = new Array(size1);
			zone.Generators = this2;
			alphaTab.platform.Platform.ArrayCopy_TArray_Int32_TArray_Int32_Int321(generators,rawZone.GeneratorIndex,zone.Generators,0,rawZone.GeneratorCount);
			var size2 = rawZone.ModulatorCount;
			var this3 = new Array(size2);
			zone.Modulators = this3;
			alphaTab.platform.Platform.ArrayCopy_TArray_Int32_TArray_Int32_Int321(modulators,rawZone.ModulatorIndex,zone.Modulators,0,rawZone.ModulatorCount);
			zones[x] = zone;
			++x;
		}
		return zones;
	}
	,__class__: alphaTab.audio.synth.sf2.chunks.ZoneChunk
});
alphaTab.audio.synth.synthesis.PlaybackRange = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["PlaybackRange"] = function() {
};
alphaTab.audio.synth.synthesis.PlaybackRange.__name__ = ["alphaTab","audio","synth","synthesis","PlaybackRange"];
alphaTab.audio.synth.synthesis.PlaybackRange.prototype = {
	__class__: alphaTab.audio.synth.synthesis.PlaybackRange
};
alphaTab.audio.synth.synthesis.SynthEvent = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["SynthEvent"] = function(eventIndex,e) {
	this.EventIndex = 0;
	this.Event = null;
	this.IsMetronome = false;
	this.Time = 0.0;
	this.EventIndex = eventIndex;
	this.Event = e;
};
alphaTab.audio.synth.synthesis.SynthEvent.__name__ = ["alphaTab","audio","synth","synthesis","SynthEvent"];
alphaTab.audio.synth.synthesis.SynthEvent.NewMetronomeEvent = function(eventIndex,metronomeLength) {
	var x = new alphaTab.audio.synth.synthesis.SynthEvent(eventIndex,null);
	x.IsMetronome = true;
	return x;
};
alphaTab.audio.synth.synthesis.SynthEvent.prototype = {
	__class__: alphaTab.audio.synth.synthesis.SynthEvent
};
alphaTab.audio.synth.synthesis._VoiceStateEnum = {};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_ = $hx_exports["alphaTab"]["audio"]["synth"]["synthesis"]["_VoiceStateEnum"]["VoiceStateEnum_Impl_"] = {};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.__name__ = ["alphaTab","audio","synth","synthesis","_VoiceStateEnum","VoiceStateEnum_Impl_"];
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Stopped";
	case 1:
		return "Stopping";
	case 2:
		return "Playing";
	}
	return "";
};
alphaTab.audio.synth.util.SynthConstants = $hx_exports["alphaTab"]["audio"]["synth"]["util"]["SynthConstants"] = function() { };
alphaTab.audio.synth.util.SynthConstants.__name__ = ["alphaTab","audio","synth","util","SynthConstants"];
alphaTab.collections = {};
alphaTab.collections._FastDictionary = {};
alphaTab.collections._FastDictionary.FastDictionary_Impl_ = $hx_exports["alphaTab"]["collections"]["_FastDictionary"]["FastDictionary_Impl_"] = {};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.__name__ = ["alphaTab","collections","_FastDictionary","FastDictionary_Impl_"];
alphaTab.collections._FastDictionary.FastDictionary_Impl_._new = function() {
	var this1 = {}
	return this1;
};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.get_Item = function(this1,index) {
	return this1[index];
};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.set_Item = function(this1,index,value) {
	return this1[index] = value;
};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.get_Count = function(this1) {
	return Object.keys(this1).length;
};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.GetEnumerator = function(this1) {
	return Object.keys(this1);
};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.Remove = function(this1,key) {
	delete this1[key];
};
alphaTab.collections._FastDictionary.FastDictionary_Impl_.ContainsKey = function(this1,key) {
	return this1.hasOwnProperty(key);
};
alphaTab.collections._FastList = {};
alphaTab.collections._FastList.FastList_Impl_ = $hx_exports["alphaTab"]["collections"]["_FastList"]["FastList_Impl_"] = {};
alphaTab.collections._FastList.FastList_Impl_.__name__ = ["alphaTab","collections","_FastList","FastList_Impl_"];
alphaTab.collections._FastList.FastList_Impl_._new = function() {
	var this1 = [];
	return this1;
};
alphaTab.collections._FastList.FastList_Impl_.get_Count = function(this1) {
	return this1.length;
};
alphaTab.collections._FastList.FastList_Impl_.get_Item = function(this1,index) {
	return this1[index];
};
alphaTab.collections._FastList.FastList_Impl_.set_Item = function(this1,index,value) {
	return this1[index] = value;
};
alphaTab.collections._FastList.FastList_Impl_.Add = function(this1,item) {
	this1.push(item);
};
alphaTab.collections._FastList.FastList_Impl_.Sort = function(this1,comparison) {
	this1.sort(function(a,b) {
		return comparison(a,b);
	});
};
alphaTab.collections._FastList.FastList_Impl_.Clone = function(this1) {
	return this1.slice(0);
};
alphaTab.collections._FastList.FastList_Impl_.RemoveAt = function(this1,index) {
	if(index != -1) {
		this1.splice(index,1);
	}
};
alphaTab.collections._FastList.FastList_Impl_.ToArray = function(this1) {
	return this1;
};
alphaTab.collections._FastList.FastList_Impl_.GetEnumerator = function(this1) {
	return this1;
};
alphaTab.collections._FastList.FastList_Impl_.IndexOf = function(this1,item) {
	return this1.indexOf(item);
};
alphaTab.collections._FastList.FastList_Impl_.Reverse = function(this1) {
	this1.reverse();
};
alphaTab.collections._FastList.FastList_Impl_.ToEnumerable = function(this1) {
	return new system.collections.generic.IterableEnumerable(this1);
};
alphaTab.collections._FastList.FastList_Impl_.InsertAt = function(this1,insertPos,item) {
	this1.splice(insertPos,0,item);
};
alphaTab.collections._StringBuilder = {};
alphaTab.collections._StringBuilder.StringBuilder_Impl_ = $hx_exports["alphaTab"]["collections"]["_StringBuilder"]["StringBuilder_Impl_"] = {};
alphaTab.collections._StringBuilder.StringBuilder_Impl_.__name__ = ["alphaTab","collections","_StringBuilder","StringBuilder_Impl_"];
alphaTab.collections._StringBuilder.StringBuilder_Impl_._new = function() {
	var this1 = "";
	return this1;
};
alphaTab.collections._StringBuilder.StringBuilder_Impl_.Append = function(this1,s) {
	this1 += Std.string(s);
};
alphaTab.collections._StringBuilder.StringBuilder_Impl_.AppendChar = function(this1,i) {
	this1 += String.fromCharCode(i);
};
alphaTab.collections._StringBuilder.StringBuilder_Impl_.AppendLine = function(this1,s) {
	if(s == null) {
		s = "";
	}
	this1 = this1 + (s + "\r\n");
};
alphaTab.collections._StringBuilder.StringBuilder_Impl_.ToString = function(this1) {
	return this1;
};
alphaTab.collections._StringBuilder.StringBuilder_Impl_.EndsWith = function(this1,s) {
	return StringTools.endsWith(this1,s);
};
alphaTab.exporter = {};
alphaTab.exporter.AlphaTexExporter = $hx_exports["alphaTab"]["exporter"]["AlphaTexExporter"] = function() {
	this._builder = null;
	var this1 = "";
	this._builder = this1;
};
alphaTab.exporter.AlphaTexExporter.__name__ = ["alphaTab","exporter","AlphaTexExporter"];
alphaTab.exporter.AlphaTexExporter.prototype = {
	Export: function(track) {
		this.Score(track);
	}
	,Score: function(track) {
		this.MetaData(track);
		this.Bars(track);
	}
	,ToTex: function() {
		return this._builder;
	}
	,MetaData: function(track) {
		var score = track.Score;
		this.StringMetaData("title",score.Title);
		this.StringMetaData("subtitle",score.SubTitle);
		this.StringMetaData("artist",score.Artist);
		this.StringMetaData("album",score.Album);
		this.StringMetaData("words",score.Words);
		this.StringMetaData("music",score.Music);
		this.StringMetaData("copyright",score.Copyright);
		this._builder += Std.string("\\tempo ");
		this._builder += Std.string(score.Tempo);
		this._builder = this._builder + ("" + "\r\n");
		var staff = track.Staves[0];
		if(staff.Capo > 0) {
			this._builder += Std.string("\\capo ");
			this._builder += Std.string(staff.Capo);
			this._builder = this._builder + ("" + "\r\n");
		}
		this._builder += Std.string("\\tuning");
		var i = 0;
		while(i < staff.Tuning.length) {
			this._builder += Std.string(" ");
			var s = alphaTab.model.Tuning.GetTextForTuning(staff.Tuning[i],true);
			this._builder += Std.string(s);
			++i;
		}
		this._builder += Std.string("\\instrument ");
		this._builder += Std.string(track.PlaybackInfo.Program);
		this._builder = this._builder + ("" + "\r\n");
		this._builder += Std.string(".");
		this._builder = this._builder + ("" + "\r\n");
	}
	,StringMetaData: function(key,value) {
		if(!(value == null || StringTools.trim(value).length == 0)) {
			this._builder += Std.string("\\");
			this._builder += Std.string(key);
			this._builder += Std.string(" \"");
			var s = StringTools.replace(value,"\"","\\\"");
			this._builder += Std.string(s);
			this._builder += Std.string("\"");
			this._builder = this._builder + ("" + "\r\n");
		}
	}
	,Bars: function(track) {
		var i = 0;
		while(i < 1) {
			var j = 0;
			while(j < track.Staves[i].Bars.length) {
				if(i > 0) {
					this._builder += Std.string(" |");
					this._builder = this._builder + ("" + "\r\n");
				}
				this.Bar(track.Staves[i].Bars[j]);
				++j;
			}
			++i;
		}
	}
	,Bar: function(bar) {
		this.BarMeta(bar);
		this.Voice(bar.Voices[0]);
	}
	,Voice: function(voice) {
		var i = 0;
		while(i < voice.Beats.length) {
			this.Beat(voice.Beats[i]);
			++i;
		}
	}
	,Beat: function(beat) {
		if(beat.get_IsRest()) {
			this._builder += Std.string("r");
		} else {
			if(beat.Notes.length > 1) {
				this._builder += Std.string("(");
			}
			var i = 0;
			while(i < beat.Notes.length) {
				this.Note(beat.Notes[i]);
				++i;
			}
			if(beat.Notes.length > 1) {
				this._builder += Std.string(")");
			}
		}
		this._builder += Std.string(".");
		this._builder += Std.string(beat.Duration);
		this._builder += Std.string(" ");
		this.BeatEffects(beat);
	}
	,Note: function(note) {
		if(note.IsDead) {
			this._builder += Std.string("x");
		} else if(note.IsTieDestination) {
			this._builder += Std.string("-");
		} else {
			this._builder += Std.string(note.Fret);
		}
		this._builder += Std.string(".");
		this._builder += Std.string(note.Beat.Voice.Bar.Staff.Tuning.length - note.String + 1);
		this._builder += Std.string(" ");
		this.NoteEffects(note);
	}
	,NoteEffects: function(note) {
		var hasEffectOpen = false;
		if(note.get_HasBend()) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("be (");
			var i = 0;
			while(i < note.BendPoints.length) {
				this._builder += Std.string(note.BendPoints[i].Offset);
				this._builder += Std.string(" ");
				this._builder += Std.string(note.BendPoints[i].Value);
				this._builder += Std.string(" ");
				++i;
			}
			this._builder += Std.string(")");
		}
		var _g = note.HarmonicType;
		switch(_g) {
		case 1:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("nh ");
			break;
		case 2:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("ah ");
			break;
		case 3:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("ph ");
			break;
		case 4:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("th ");
			break;
		case 5:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("sh ");
			break;
		default:
		}
		if(note.get_IsTrill()) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("tr ");
			var s = note.get_TrillFret();
			this._builder += Std.string(s);
			this._builder += Std.string(" ");
			var _g1 = note.TrillSpeed;
			switch(_g1) {
			case 16:
				this._builder += Std.string("16 ");
				break;
			case 32:
				this._builder += Std.string("32 ");
				break;
			case 64:
				this._builder += Std.string("64 ");
				break;
			default:
			}
		}
		if(note.Vibrato != 0) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("v ");
		}
		if(note.SlideType == 2) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("sl ");
		}
		if(note.SlideType == 1) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("ss ");
		}
		if(note.IsHammerPullOrigin) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("h ");
		}
		if(note.IsGhost) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("g ");
		}
		if(note.Accentuated == 1) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("ac ");
		} else if(note.Accentuated == 2) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("hac ");
		}
		if(note.IsPalmMute) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("pm ");
		}
		if(note.IsStaccato) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("st ");
		}
		if(note.IsLetRing) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("lr ");
		}
		var _g11 = note.LeftHandFinger;
		switch(_g11) {
		case 0:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("1 ");
			break;
		case 1:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("2 ");
			break;
		case 2:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("3 ");
			break;
		case 3:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("4 ");
			break;
		case 4:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("5 ");
			break;
		default:
		}
		var _g2 = note.RightHandFinger;
		switch(_g2) {
		case 0:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("1 ");
			break;
		case 1:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("2 ");
			break;
		case 2:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("3 ");
			break;
		case 3:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("4 ");
			break;
		case 4:
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("5 ");
			break;
		default:
		}
		this.EffectClose(hasEffectOpen);
	}
	,EffectOpen: function(hasBeatEffectOpen) {
		if(!hasBeatEffectOpen) {
			this._builder += Std.string("{");
		}
		return true;
	}
	,EffectClose: function(hasBeatEffectOpen) {
		if(hasBeatEffectOpen) {
			this._builder += Std.string("}");
		}
	}
	,BeatEffects: function(beat) {
		var hasEffectOpen = false;
		if(beat.FadeIn) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("f ");
		}
		var _g = beat.GraceType;
		switch(_g) {
		case 1:
			this._builder += Std.string("gr ob ");
			break;
		case 2:
			this._builder += Std.string("gr ");
			break;
		default:
		}
		if(beat.Vibrato != 0) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("v ");
		}
		if(beat.Slap) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("s ");
		}
		if(beat.Pop) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("p ");
		}
		if(beat.Dots == 2) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("dd ");
		} else if(beat.Dots == 1) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("d ");
		}
		if(beat.PickStroke == 1) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("su ");
		} else if(beat.PickStroke == 2) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("sd ");
		}
		if(beat.get_HasTuplet()) {
			var tupletValue = 0;
			if(beat.TupletDenominator == 3 && beat.TupletNumerator == 2) {
				tupletValue = 3;
			} else if(beat.TupletDenominator == 5 && beat.TupletNumerator == 4) {
				tupletValue = 5;
			} else if(beat.TupletDenominator == 6 && beat.TupletNumerator == 4) {
				tupletValue = 6;
			} else if(beat.TupletDenominator == 7 && beat.TupletNumerator == 4) {
				tupletValue = 7;
			} else if(beat.TupletDenominator == 9 && beat.TupletNumerator == 8) {
				tupletValue = 9;
			} else if(beat.TupletDenominator == 10 && beat.TupletNumerator == 8) {
				tupletValue = 10;
			} else if(beat.TupletDenominator == 11 && beat.TupletNumerator == 8) {
				tupletValue = 11;
			} else if(beat.TupletDenominator == 12 && beat.TupletNumerator == 8) {
				tupletValue = 12;
			}
			if(tupletValue != 0) {
				hasEffectOpen = this.EffectOpen(hasEffectOpen);
				this._builder += Std.string("tu ");
				this._builder += Std.string(tupletValue);
				this._builder += Std.string(" ");
			}
		}
		if(beat.get_HasWhammyBar()) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("tbe (");
			var i = 0;
			while(i < beat.WhammyBarPoints.length) {
				this._builder += Std.string(beat.WhammyBarPoints[i].Offset);
				this._builder += Std.string(" ");
				this._builder += Std.string(beat.WhammyBarPoints[i].Value);
				this._builder += Std.string(" ");
				++i;
			}
			this._builder += Std.string(")");
		}
		if(beat.get_IsTremolo()) {
			hasEffectOpen = this.EffectOpen(hasEffectOpen);
			this._builder += Std.string("tp ");
			if(beat.TremoloSpeed == 8) {
				this._builder += Std.string("8 ");
			} else if(beat.TremoloSpeed == 16) {
				this._builder += Std.string("16 ");
			} else if(beat.TremoloSpeed == 32) {
				this._builder += Std.string("32 ");
			} else {
				this._builder += Std.string("8 ");
			}
		}
		this.EffectClose(hasEffectOpen);
	}
	,BarMeta: function(bar) {
		var masterBar = bar.get_MasterBar();
		if(masterBar.Index > 0) {
			var previousMasterBar = masterBar.PreviousMasterBar;
			var previousBar = bar.PreviousBar;
			if(previousMasterBar.TimeSignatureDenominator != masterBar.TimeSignatureDenominator || previousMasterBar.TimeSignatureNumerator != masterBar.TimeSignatureNumerator) {
				this._builder += Std.string("\\ts ");
				this._builder += Std.string(masterBar.TimeSignatureNumerator);
				this._builder += Std.string(" ");
				this._builder += Std.string(masterBar.TimeSignatureDenominator);
				this._builder = this._builder + ("" + "\r\n");
			}
			if(previousMasterBar.KeySignature != masterBar.KeySignature) {
				this._builder += Std.string("\\ks ");
				var _g = masterBar.KeySignature;
				switch(_g) {
				case -7:
					this._builder += Std.string("cb");
					break;
				case -6:
					this._builder += Std.string("gb");
					break;
				case -5:
					this._builder += Std.string("db");
					break;
				case -4:
					this._builder += Std.string("ab");
					break;
				case -3:
					this._builder += Std.string("eb");
					break;
				case -2:
					this._builder += Std.string("bb");
					break;
				case -1:
					this._builder += Std.string("f");
					break;
				case 0:
					this._builder += Std.string("c");
					break;
				case 1:
					this._builder += Std.string("g");
					break;
				case 2:
					this._builder += Std.string("d");
					break;
				case 3:
					this._builder += Std.string("a");
					break;
				case 4:
					this._builder += Std.string("e");
					break;
				case 5:
					this._builder += Std.string("b");
					break;
				case 6:
					this._builder += Std.string("f#");
					break;
				case 7:
					this._builder += Std.string("c#");
					break;
				default:
				}
				this._builder = this._builder + ("" + "\r\n");
			}
			if(bar.Clef != previousBar.Clef) {
				this._builder += Std.string("\\clef ");
				var _g1 = bar.Clef;
				switch(_g1) {
				case 0:
					this._builder += Std.string("n");
					break;
				case 1:
					this._builder += Std.string("c3");
					break;
				case 2:
					this._builder += Std.string("c4");
					break;
				case 3:
					this._builder += Std.string("f4");
					break;
				case 4:
					this._builder += Std.string("g2");
					break;
				default:
				}
				this._builder = this._builder + ("" + "\r\n");
			}
			if(masterBar.TempoAutomation != null) {
				this._builder += Std.string("\\tempo ");
				this._builder += Std.string(masterBar.TempoAutomation.Value);
				this._builder = this._builder + ("" + "\r\n");
			}
		}
		if(masterBar.IsRepeatStart) {
			this._builder += Std.string("\\ro ");
			this._builder = this._builder + ("" + "\r\n");
		}
		if(masterBar.get_IsRepeatEnd()) {
			this._builder += Std.string("\\rc ");
			this._builder += Std.string(masterBar.RepeatCount + 1);
			this._builder = this._builder + ("" + "\r\n");
		}
	}
	,__class__: alphaTab.exporter.AlphaTexExporter
};
alphaTab.importer = {};
alphaTab.importer.AlphaTexException = $hx_exports["alphaTab"]["importer"]["AlphaTexException"] = function() {
	alphaTab.AlphaTabException.call(this);
};
alphaTab.importer.AlphaTexException.__name__ = ["alphaTab","importer","AlphaTexException"];
alphaTab.importer.AlphaTexException.__super__ = alphaTab.AlphaTabException;
alphaTab.importer.AlphaTexException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	AlphaTexException: function(position,nonTerm,expected,symbol,symbolData) {
		this.AlphaTabException("");
		this.Position = 0;
		this.NonTerm = null;
		this.Expected = 0;
		this.Symbol = 0;
		this.SymbolData = null;
		this.Position = position;
		this.NonTerm = nonTerm;
		this.Expected = expected;
		this.Symbol = symbol;
		this.SymbolData = symbolData;
		if(this.SymbolData == null) {
			this.Description = "MalFormed AlphaTex: @" + this.Position + ": Error on block " + this.NonTerm + ", expected a " + alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toString(this.Expected) + " found a " + alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toString(this.Symbol);
		} else {
			this.Description = "MalFormed AlphaTex: @" + this.Position + ": Error on block " + this.NonTerm + ", invalid value: " + this.SymbolData;
		}
		return this;
	}
	,__class__: alphaTab.importer.AlphaTexException
});
alphaTab.importer.ScoreImporter = $hx_exports["alphaTab"]["importer"]["ScoreImporter"] = function() {
};
alphaTab.importer.ScoreImporter.__name__ = ["alphaTab","importer","ScoreImporter"];
alphaTab.importer.ScoreImporter.BuildImporters = function() {
	return [new alphaTab.importer.Gp3To5Importer(),new alphaTab.importer.GpxImporter(),new alphaTab.importer.Gp7Importer(),new alphaTab.importer.AlphaTexImporter(),new alphaTab.importer.MusicXmlImporter()];
};
alphaTab.importer.ScoreImporter.prototype = {
	Init: function(data,importSettings) {
		this.Data = data;
		this.ImportSettings = importSettings;
	}
	,GetSetting: function(key,defaultValue) {
		key = key.toLowerCase();
		if(this.ImportSettings == null || !this.ImportSettings.hasOwnProperty(key)) {
			return defaultValue;
		}
		return this.ImportSettings[key];
	}
	,get_Name: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,ReadScore: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,__class__: alphaTab.importer.ScoreImporter
};
alphaTab.importer.AlphaTexImporter = $hx_exports["alphaTab"]["importer"]["AlphaTexImporter"] = function() {
	alphaTab.importer.ScoreImporter.call(this);
};
alphaTab.importer.AlphaTexImporter.__name__ = ["alphaTab","importer","AlphaTexImporter"];
alphaTab.importer.AlphaTexImporter.IsLetter = function(code) {
	if(!alphaTab.importer.AlphaTexImporter.IsTerminal(code)) {
		if(!(code >= 33 && code <= 47 || code >= 58 && code <= 126)) {
			return code > 128;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
alphaTab.importer.AlphaTexImporter.IsTerminal = function(ch) {
	if(!(ch == 46 || ch == 123 || ch == 125 || ch == 91 || ch == 93 || ch == 40 || ch == 41 || ch == 124 || ch == 39 || ch == 34)) {
		return ch == 92;
	} else {
		return true;
	}
};
alphaTab.importer.AlphaTexImporter.__super__ = alphaTab.importer.ScoreImporter;
alphaTab.importer.AlphaTexImporter.prototype = $extend(alphaTab.importer.ScoreImporter.prototype,{
	get_Name: function() {
		return "AlphaTex";
	}
	,ReadScore: function() {
		try {
			this.CreateDefaultScore();
			this._curChPos = 0;
			this._currentDuration = 4;
			var this1 = [];
			this._lyrics = this1;
			this.NextChar();
			this.NewSy();
			if(this._sy == 14) {
				throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException("Unknown start sign <"));
			}
			this.Score();
			this._score.Finish();
			this._track.ApplyLyrics(this._lyrics);
			return this._score;
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,alphaTab.importer.AlphaTexException) ) {
				throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(e.Description));
			} else throw(e);
		}
	}
	,Error: function(nonterm,expected,symbolError) {
		if(symbolError == null) {
			symbolError = true;
		}
		var e;
		if(symbolError) {
			e = new alphaTab.importer.AlphaTexException().AlphaTexException(this._curChPos,nonterm,expected,this._sy,null);
		} else {
			e = new alphaTab.importer.AlphaTexException().AlphaTexException(this._curChPos,nonterm,expected,expected,this._syData);
		}
		alphaTab.util.Logger.Error(this.get_Name(),e.Description,null);
		throw new js._Boot.HaxeError(e);
	}
	,CreateDefaultScore: function() {
		this._score = new alphaTab.model.Score();
		this._score.Tempo = 120;
		this._score.TempoLabel = "";
		this._track = new alphaTab.model.Track(1);
		this._track.PlaybackInfo.Program = 25;
		this._track.PlaybackInfo.PrimaryChannel = alphaTab.importer.AlphaTexImporter.TrackChannels[0];
		this._track.PlaybackInfo.SecondaryChannel = alphaTab.importer.AlphaTexImporter.TrackChannels[1];
		this._staff = this._track.Staves[0];
		this._staff.Tuning = alphaTab.model.Tuning.GetDefaultTuningFor(6).Tunings;
		this._score.AddTrack(this._track);
	}
	,ParseClefFromString: function(str) {
		var _g = str.toLowerCase();
		switch(_g) {
		case "c3":case "tenor":
			return 1;
		case "alto":case "c4":
			return 2;
		case "bass":case "f4":
			return 3;
		case "n":case "neutral":
			return 0;
		case "g2":case "treble":
			return 4;
		default:
			return 4;
		}
	}
	,ParseClefFromInt: function(i) {
		switch(i) {
		case 43:
			return 4;
		case 48:
			return 1;
		case 60:
			return 2;
		case 65:
			return 3;
		default:
			return 4;
		}
	}
	,ParseKeySignature: function(str) {
		var _g = str.toLowerCase();
		switch(_g) {
		case "a":
			return 3;
		case "ab":
			return -4;
		case "b":
			return 5;
		case "bb":
			return -2;
		case "c":
			return 0;
		case "c#":
			return 7;
		case "cb":
			return -7;
		case "d":
			return 2;
		case "db":
			return -5;
		case "e":
			return 4;
		case "eb":
			return -3;
		case "f":
			return -1;
		case "f#":
			return 6;
		case "g":
			return 1;
		case "gb":
			return -6;
		default:
			return 0;
		}
	}
	,NextChar: function() {
		var b = this.Data.ReadByte();
		if(b == -1) {
			this._ch = 0;
		} else {
			this._ch = b;
			this._curChPos++;
		}
	}
	,NewSy: function() {
		this._sy = 0;
		while(true) {
			if(this._ch == 0) {
				this._sy = 1;
			} else if(alphaTab.platform.Platform.IsWhiteSpace(this._ch)) {
				this.NextChar();
			} else if(this._ch == 47) {
				this.NextChar();
				if(this._ch == 47) {
					while(this._ch != 13 && this._ch != 10 && this._ch != 0) this.NextChar();
				} else if(this._ch == 42) {
					while(this._ch != 0) if(this._ch == 42) {
						this.NextChar();
						if(this._ch == 47) {
							this.NextChar();
							break;
						}
					} else {
						this.NextChar();
					}
				} else {
					this.Error("symbol",5,false);
				}
			} else if(this._ch == 34 || this._ch == 39) {
				var startChar = this._ch;
				this.NextChar();
				var this1 = "";
				var s = this1;
				this._sy = 5;
				while(this._ch != startChar && this._ch != 0) {
					s += String.fromCharCode(this._ch);
					this.NextChar();
				}
				this._syData = s;
				this.NextChar();
			} else if(this._ch == 45) {
				if(this._allowNegatives && this.IsDigit(this._ch)) {
					var number = this.ReadNumber();
					this._sy = 2;
					this._syData = number;
				} else {
					this._sy = 5;
					this._syData = this.ReadName();
				}
			} else if(this._ch == 46) {
				this._sy = 4;
				this.NextChar();
			} else if(this._ch == 58) {
				this._sy = 3;
				this.NextChar();
			} else if(this._ch == 40) {
				this._sy = 7;
				this.NextChar();
			} else if(this._ch == 92) {
				this.NextChar();
				var name = this.ReadName();
				this._sy = 12;
				this._syData = name;
			} else if(this._ch == 41) {
				this._sy = 8;
				this.NextChar();
			} else if(this._ch == 123) {
				this._sy = 9;
				this.NextChar();
			} else if(this._ch == 125) {
				this._sy = 10;
				this.NextChar();
			} else if(this._ch == 124) {
				this._sy = 11;
				this.NextChar();
			} else if(this._ch == 42) {
				this._sy = 13;
				this.NextChar();
			} else if(this._ch == 60) {
				this._sy = 14;
				this.NextChar();
			} else if(this.IsDigit(this._ch)) {
				var number1 = this.ReadNumber();
				this._sy = 2;
				this._syData = number1;
			} else if(alphaTab.importer.AlphaTexImporter.IsLetter(this._ch)) {
				var name1 = this.ReadName();
				var tuning = alphaTab.model.TuningParser.Parse(name1);
				if(tuning != null) {
					this._sy = 6;
					this._syData = tuning;
				} else {
					this._sy = 5;
					this._syData = name1;
				}
			} else {
				this.Error("symbol",5,false);
			}
			if(!(this._sy == 0)) {
				break;
			}
		}
	}
	,IsDigit: function(code) {
		if(!(code >= 48 && code <= 57)) {
			if(code == 45) {
				return this._allowNegatives;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,ReadName: function() {
		var this1 = "";
		var str = this1;
		while(true) {
			str += String.fromCharCode(this._ch);
			this.NextChar();
			if(!(alphaTab.importer.AlphaTexImporter.IsLetter(this._ch) || this.IsDigit(this._ch) || this._ch == 35)) {
				break;
			}
		}
		return str;
	}
	,ReadNumber: function() {
		var this1 = "";
		var str = this1;
		while(true) {
			str += String.fromCharCode(this._ch);
			this.NextChar();
			if(!this.IsDigit(this._ch)) {
				break;
			}
		}
		return alphaTab.platform.Platform.ParseInt(str);
	}
	,Score: function() {
		this.MetaData();
		this.Bars();
	}
	,MetaData: function() {
		var anyMeta = false;
		while(this._sy == 12) {
			var syData = Std.string(this._syData).toLowerCase();
			if(syData == "title") {
				this.NewSy();
				if(this._sy == 5) {
					this._score.Title = Std.string(this._syData);
				} else {
					this.Error("title",5,true);
				}
				this.NewSy();
				anyMeta = true;
				this._anyDataLoaded = anyMeta;
			} else if(syData == "subtitle") {
				this.NewSy();
				if(this._sy == 5) {
					this._score.SubTitle = Std.string(this._syData);
				} else {
					this.Error("subtitle",5,true);
				}
				this.NewSy();
				anyMeta = true;
				this._anyDataLoaded = anyMeta;
			} else if(syData == "artist") {
				this.NewSy();
				if(this._sy == 5) {
					this._score.Artist = Std.string(this._syData);
				} else {
					this.Error("artist",5,true);
				}
				this.NewSy();
				anyMeta = true;
				this._anyDataLoaded = anyMeta;
			} else if(syData == "album") {
				this.NewSy();
				if(this._sy == 5) {
					this._score.Album = Std.string(this._syData);
				} else {
					this.Error("album",5,true);
				}
				this.NewSy();
				anyMeta = true;
				this._anyDataLoaded = anyMeta;
			} else if(syData == "words") {
				this.NewSy();
				if(this._sy == 5) {
					this._score.Words = Std.string(this._syData);
				} else {
					this.Error("words",5,true);
				}
				this.NewSy();
				anyMeta = true;
				this._anyDataLoaded = anyMeta;
			} else if(syData == "music") {
				this.NewSy();
				if(this._sy == 5) {
					this._score.Music = Std.string(this._syData);
				} else {
					this.Error("music",5,true);
				}
				this.NewSy();
				anyMeta = true;
				this._anyDataLoaded = anyMeta;
			} else if(syData == "copyright") {
				this.NewSy();
				if(this._sy == 5) {
					this._score.Copyright = Std.string(this._syData);
				} else {
					this.Error("copyright",5,true);
				}
				this.NewSy();
				anyMeta = true;
				this._anyDataLoaded = anyMeta;
			} else if(syData == "tempo") {
				this.NewSy();
				if(this._sy == 2) {
					this._score.Tempo = this._syData;
				} else {
					this.Error("tempo",2,true);
				}
				this.NewSy();
				anyMeta = true;
				this._anyDataLoaded = anyMeta;
			} else if(syData == "capo") {
				this.NewSy();
				if(this._sy == 2) {
					this._staff.Capo = this._syData;
				} else {
					this.Error("capo",2,true);
				}
				this.NewSy();
				anyMeta = true;
				this._anyDataLoaded = anyMeta;
			} else if(syData == "tuning") {
				this.NewSy();
				var _g = this._sy;
				switch(_g) {
				case 5:
					var text = Std.string(this._syData).toLowerCase();
					if(text == "piano" || text == "none" || text == "voice") {
						var this1 = new Int32Array(0);
						this._staff.Tuning = this1;
					} else {
						this.Error("tuning",6,true);
					}
					this.NewSy();
					break;
				case 6:
					var this2 = [];
					var tuning = this2;
					while(true) {
						var t = this._syData;
						tuning.push(t.get_RealValue());
						this.NewSy();
						if(!(this._sy == 6)) {
							break;
						}
					}
					this._staff.Tuning = new Int32Array(tuning);
					break;
				default:
					this.Error("tuning",6,true);
				}
				anyMeta = true;
				this._anyDataLoaded = anyMeta;
			} else if(syData == "instrument") {
				this.NewSy();
				if(this._sy == 2) {
					var instrument = this._syData;
					if(instrument >= 0 && instrument <= 128) {
						this._track.PlaybackInfo.Program = this._syData;
					} else {
						this.Error("instrument",2,false);
					}
				} else if(this._sy == 5) {
					var instrumentName = Std.string(this._syData).toLowerCase();
					this._track.PlaybackInfo.Program = alphaTab.audio.GeneralMidi.GetValue(instrumentName);
				} else {
					this.Error("instrument",2,true);
				}
				this.NewSy();
				anyMeta = true;
				this._anyDataLoaded = anyMeta;
			} else if(syData == "lyrics") {
				this.NewSy();
				var lyrics = new alphaTab.model.Lyrics();
				lyrics.StartBar = 0;
				lyrics.Text = "";
				if(this._sy == 2) {
					lyrics.StartBar = this._syData;
					this.NewSy();
				}
				if(this._sy == 5) {
					lyrics.Text = this._syData;
					this.NewSy();
				} else {
					this.Error("lyrics",5,true);
				}
				this._lyrics.push(lyrics);
				anyMeta = true;
				this._anyDataLoaded = anyMeta;
			} else if(anyMeta) {
				this.Error("metaDataTags",5,false);
			} else {
				break;
			}
		}
		if(anyMeta) {
			if(this._sy != 4) {
				this.Error("song",4,true);
			}
			this.NewSy();
		} else if(this._sy == 4) {
			this.NewSy();
		}
	}
	,Bars: function() {
		this.Bar();
		while(this._sy != 1) {
			if(this._sy != 11) {
				this.Error("bar",11,true);
			}
			this.NewSy();
			this.Bar();
		}
	}
	,Bar: function() {
		var master = new alphaTab.model.MasterBar();
		this._score.AddMasterBar(master);
		var bar = new alphaTab.model.Bar();
		this._staff.AddBar(bar);
		if(master.Index > 0) {
			master.KeySignature = master.PreviousMasterBar.KeySignature;
			master.TimeSignatureDenominator = master.PreviousMasterBar.TimeSignatureDenominator;
			master.TimeSignatureNumerator = master.PreviousMasterBar.TimeSignatureNumerator;
			bar.Clef = bar.PreviousBar.Clef;
		}
		this.BarMeta(bar);
		var voice = new alphaTab.model.Voice();
		bar.AddVoice(voice);
		while(this._sy != 11 && this._sy != 1) this.Beat(voice);
		if(voice.Beats.length == 0) {
			var emptyBeat = new alphaTab.model.Beat();
			emptyBeat.IsEmpty = true;
			voice.AddBeat(emptyBeat);
		}
	}
	,Beat: function(voice) {
		if(this._sy == 3) {
			this._allowNegatives = true;
			this.NewSy();
			this._allowNegatives = false;
			if(this._sy != 2) {
				this.Error("duration",2,true);
			}
			this._currentDuration = this.ParseDuration(this._syData);
			this.NewSy();
			return;
		}
		var beat = new alphaTab.model.Beat();
		voice.AddBeat(beat);
		if(voice.Bar.get_MasterBar().TempoAutomation != null && voice.Beats.length == 1) {
			beat.Automations.push(voice.Bar.get_MasterBar().TempoAutomation);
		}
		if(this._sy == 7) {
			this.NewSy();
			this.Note(beat);
			while(this._sy != 8 && this._sy != 1) this.Note(beat);
			if(this._sy != 8) {
				this.Error("note-list",8,true);
			}
			this.NewSy();
		} else if(this._sy == 5 && Std.string(this._syData).toLowerCase() == "r") {
			this.NewSy();
		} else {
			this.Note(beat);
		}
		if(this._sy == 4) {
			this._allowNegatives = true;
			this.NewSy();
			this._allowNegatives = false;
			if(this._sy != 2) {
				this.Error("duration",2,true);
			}
			this._currentDuration = this.ParseDuration(this._syData);
			this.NewSy();
		}
		beat.Duration = this._currentDuration;
		var beatRepeat = 1;
		if(this._sy == 13) {
			this.NewSy();
			if(this._sy != 2) {
				this.Error("multiplier",2,true);
			} else {
				beatRepeat = this._syData;
			}
			this.NewSy();
		}
		this.BeatEffects(beat);
		var i = 0;
		while(i < beatRepeat - 1) {
			voice.AddBeat(beat.Clone());
			++i;
		}
	}
	,BeatEffects: function(beat) {
		if(this._sy != 9) {
			return;
		}
		this.NewSy();
		while(this._sy == 5) {
			this._syData = Std.string(this._syData).toLowerCase();
			if(!this.ApplyBeatEffect(beat)) {
				this.Error("beat-effects",5,false);
			}
		}
		if(this._sy != 10) {
			this.Error("beat-effects",10,true);
		}
		this.NewSy();
	}
	,ApplyBeatEffect: function(beat) {
		var syData = Std.string(this._syData).toLowerCase();
		if(syData == "f") {
			beat.FadeIn = true;
			this.NewSy();
			return true;
		}
		if(syData == "v") {
			beat.Vibrato = 1;
			this.NewSy();
			return true;
		}
		if(syData == "s") {
			beat.Slap = true;
			this.NewSy();
			return true;
		}
		if(syData == "p") {
			beat.Pop = true;
			this.NewSy();
			return true;
		}
		if(syData == "dd") {
			beat.Dots = 2;
			this.NewSy();
			return true;
		}
		if(syData == "d") {
			beat.Dots = 1;
			this.NewSy();
			return true;
		}
		if(syData == "su") {
			beat.PickStroke = 1;
			this.NewSy();
			return true;
		}
		if(syData == "sd") {
			beat.PickStroke = 2;
			this.NewSy();
			return true;
		}
		if(syData == "tu") {
			this.NewSy();
			if(this._sy != 2) {
				this.Error("tuplet",2,true);
				return false;
			}
			var tuplet = this._syData;
			switch(tuplet) {
			case 3:
				beat.TupletNumerator = 3;
				beat.TupletDenominator = 2;
				break;
			case 5:
				beat.TupletNumerator = 5;
				beat.TupletDenominator = 4;
				break;
			case 6:
				beat.TupletNumerator = 6;
				beat.TupletDenominator = 4;
				break;
			case 7:
				beat.TupletNumerator = 7;
				beat.TupletDenominator = 4;
				break;
			case 9:
				beat.TupletNumerator = 9;
				beat.TupletDenominator = 8;
				break;
			case 10:
				beat.TupletNumerator = 10;
				beat.TupletDenominator = 8;
				break;
			case 11:
				beat.TupletNumerator = 11;
				beat.TupletDenominator = 8;
				break;
			case 12:
				beat.TupletNumerator = 12;
				beat.TupletNumerator = 8;
				beat.TupletDenominator = 8;
				break;
			default:
			}
			this.NewSy();
			return true;
		}
		if(syData == "tb" || syData == "tbe") {
			var exact = syData == "tbe";
			this.NewSy();
			if(this._sy != 7) {
				this.Error("tremolobar-effect",7,true);
				return false;
			}
			this._allowNegatives = true;
			this.NewSy();
			while(this._sy != 8 && this._sy != 1) {
				var offset;
				var value;
				if(exact) {
					if(this._sy != 2) {
						this.Error("tremolobar-effect",2,true);
						return false;
					}
					offset = this._syData;
					this.NewSy();
					if(this._sy != 2) {
						this.Error("tremolobar-effect",2,true);
						return false;
					}
					value = this._syData;
				} else {
					if(this._sy != 2) {
						this.Error("tremolobar-effect",2,true);
						return false;
					}
					offset = 0;
					value = this._syData;
				}
				beat.AddWhammyBarPoint(new alphaTab.model.BendPoint(offset,value));
				this.NewSy();
			}
			while(beat.WhammyBarPoints.length > 60) beat.RemoveWhammyBarPoint(beat.WhammyBarPoints.length - 1);
			if(!exact) {
				var count = beat.WhammyBarPoints.length;
				var step = 60 / count | 0;
				var i = 0;
				while(i < count) {
					beat.WhammyBarPoints[i].Offset = Math.min(60,i * step);
					++i;
				}
			} else {
				var comparison = function(a,b) {
					return a.Offset - b.Offset;
				};
				beat.WhammyBarPoints.sort(function(a1,b1) {
					return comparison(a1,b1);
				});
			}
			this._allowNegatives = false;
			if(this._sy != 8) {
				this.Error("tremolobar-effect",8,true);
				return false;
			}
			this.NewSy();
			return true;
		}
		if(syData == "gr") {
			this.NewSy();
			if(Std.string(this._syData).toLowerCase() == "ob") {
				beat.GraceType = 1;
				this.NewSy();
			} else {
				beat.GraceType = 2;
			}
			return true;
		}
		if(syData == "tp") {
			this.NewSy();
			var duration = 8;
			if(this._sy == 2) {
				var _g = this._syData;
				switch(_g) {
				case 8:
					duration = 8;
					break;
				case 16:
					duration = 16;
					break;
				case 32:
					duration = 32;
					break;
				default:
					duration = 8;
				}
				this.NewSy();
			}
			beat.TremoloSpeed = duration;
			return true;
		}
		return false;
	}
	,Note: function(beat) {
		var isDead = Std.string(this._syData) == "x";
		var isTie = Std.string(this._syData) == "-";
		var fret = -1;
		var octave = -1;
		var tone = -1;
		var _g = this._sy;
		switch(_g) {
		case 2:
			fret = this._syData;
			break;
		case 5:
			if(isTie || isDead) {
				fret = 0;
			} else {
				this.Error("note-fret",2,true);
			}
			break;
		case 6:
			var tuning = this._syData;
			octave = tuning.Octave;
			tone = tuning.NoteValue;
			break;
		default:
			this.Error("note-fret",2,true);
		}
		this.NewSy();
		var isFretted = octave == -1 && this._staff.Tuning.length > 0;
		var string = -1;
		if(isFretted) {
			if(this._sy != 4) {
				this.Error("note",4,true);
			}
			this.NewSy();
			if(this._sy != 2) {
				this.Error("note-string",2,true);
			}
			string = this._syData;
			if(string < 1 || string > this._staff.Tuning.length) {
				this.Error("note-string",2,false);
			}
			this.NewSy();
		}
		var note = new alphaTab.model.Note();
		beat.AddNote(note);
		if(isFretted) {
			note.String = this._staff.Tuning.length - (string - 1);
			note.IsDead = isDead;
			note.IsTieDestination = isTie;
			if(!isTie) {
				note.Fret = fret;
			}
		} else {
			note.Octave = octave;
			note.Tone = tone;
			note.IsTieDestination = isTie;
		}
		this.NoteEffects(note);
	}
	,NoteEffects: function(note) {
		if(this._sy != 9) {
			return;
		}
		this.NewSy();
		while(this._sy == 5) {
			var syData = Std.string(this._syData).toLowerCase();
			this._syData = syData;
			if(syData == "b" || syData == "be") {
				var exact = this._syData == "be";
				this.NewSy();
				if(this._sy != 7) {
					this.Error("bend-effect",7,true);
				}
				this.NewSy();
				while(this._sy != 8 && this._sy != 1) {
					var offset = 0;
					var value = 0;
					if(exact) {
						if(this._sy != 2) {
							this.Error("bend-effect-value",2,true);
						}
						offset = this._syData;
						this.NewSy();
						if(this._sy != 2) {
							this.Error("bend-effect-value",2,true);
						}
						value = this._syData;
					} else {
						if(this._sy != 2) {
							this.Error("bend-effect-value",2,true);
						}
						value = this._syData;
					}
					note.AddBendPoint(new alphaTab.model.BendPoint(offset,value));
					this.NewSy();
				}
				while(note.BendPoints.length > 60) {
					var index = note.BendPoints.length - 1;
					if(index != -1) {
						note.BendPoints.splice(index,1);
					}
				}
				if(exact) {
					note.BendPoints.sort((function(comparison) {
						return function(a,b) {
							return comparison[0](a,b);
						};
					})([(function() {
						return function(a1,b1) {
							return a1.Offset - b1.Offset;
						};
					})()]));
				} else {
					var count = note.BendPoints.length;
					var step = 60 / (count - 1) | 0;
					var i = 0;
					while(i < count) {
						note.BendPoints[i].Offset = Math.min(60,i * step);
						++i;
					}
				}
				if(this._sy != 8) {
					this.Error("bend-effect",8,true);
				}
				this.NewSy();
			} else if(syData == "nh") {
				note.HarmonicType = 1;
				this.NewSy();
			} else if(syData == "ah") {
				note.HarmonicType = 2;
				this.NewSy();
			} else if(syData == "th") {
				note.HarmonicType = 4;
				this.NewSy();
			} else if(syData == "ph") {
				note.HarmonicType = 3;
				this.NewSy();
			} else if(syData == "sh") {
				note.HarmonicType = 5;
				this.NewSy();
			} else if(syData == "tr") {
				this.NewSy();
				if(this._sy != 2) {
					this.Error("trill-effect",2,true);
				}
				var fret = this._syData;
				this.NewSy();
				var duration = 16;
				if(this._sy == 2) {
					var _g = this._syData;
					switch(_g) {
					case 16:
						duration = 16;
						break;
					case 32:
						duration = 32;
						break;
					case 64:
						duration = 64;
						break;
					default:
						duration = 16;
					}
					this.NewSy();
				}
				note.TrillValue = fret + note.get_StringTuning();
				note.TrillSpeed = duration;
			} else if(syData == "v") {
				this.NewSy();
				note.Vibrato = 1;
			} else if(syData == "sl") {
				this.NewSy();
				note.SlideType = 2;
			} else if(syData == "ss") {
				this.NewSy();
				note.SlideType = 1;
			} else if(syData == "h") {
				this.NewSy();
				note.IsHammerPullOrigin = true;
			} else if(syData == "g") {
				this.NewSy();
				note.IsGhost = true;
			} else if(syData == "ac") {
				this.NewSy();
				note.Accentuated = 1;
			} else if(syData == "hac") {
				this.NewSy();
				note.Accentuated = 2;
			} else if(syData == "pm") {
				this.NewSy();
				note.IsPalmMute = true;
			} else if(syData == "st") {
				this.NewSy();
				note.IsStaccato = true;
			} else if(syData == "lr") {
				this.NewSy();
				note.IsLetRing = true;
			} else if(syData == "x") {
				this.NewSy();
				note.Fret = 0;
				note.IsDead = true;
			} else if(syData == "lf") {
				this.NewSy();
				var finger = 0;
				if(this._sy == 2) {
					finger = this.ToFinger(this._syData);
					this.NewSy();
				}
				note.LeftHandFinger = finger;
			} else if(syData == "rf") {
				this.NewSy();
				var finger1 = 0;
				if(this._sy == 2) {
					finger1 = this.ToFinger(this._syData);
					this.NewSy();
				}
				note.RightHandFinger = finger1;
			} else if(!this.ApplyBeatEffect(note.Beat)) {
				this.Error(syData,5,false);
			}
		}
		if(this._sy != 10) {
			this.Error("note-effect",10,false);
		}
		this.NewSy();
	}
	,ToFinger: function(syData) {
		switch(syData) {
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			return 2;
		case 4:
			return 3;
		case 5:
			return 4;
		default:
		}
		return 0;
	}
	,ParseDuration: function(duration) {
		switch(duration) {
		case -4:
			return -4;
		case -2:
			return -2;
		case 1:
			return 1;
		case 2:
			return 2;
		case 4:
			return 4;
		case 8:
			return 8;
		case 16:
			return 16;
		case 32:
			return 32;
		case 64:
			return 64;
		case 128:
			return 128;
		default:
			return 4;
		}
	}
	,BarMeta: function(bar) {
		var master = bar.get_MasterBar();
		while(this._sy == 12) {
			var syData = Std.string(this._syData).toLowerCase();
			if(syData == "ts") {
				this.NewSy();
				if(this._sy != 2) {
					this.Error("timesignature-numerator",2,true);
				}
				master.TimeSignatureNumerator = this._syData;
				this.NewSy();
				if(this._sy != 2) {
					this.Error("timesignature-denominator",2,true);
				}
				master.TimeSignatureDenominator = this._syData;
			} else if(syData == "ro") {
				master.IsRepeatStart = true;
			} else if(syData == "rc") {
				this.NewSy();
				if(this._sy != 2) {
					this.Error("repeatclose",2,true);
				}
				master.RepeatCount = this._syData - 1;
			} else if(syData == "ks") {
				this.NewSy();
				if(this._sy != 5) {
					this.Error("keysignature",5,true);
				}
				master.KeySignature = this.ParseKeySignature(Std.string(this._syData).toLowerCase());
			} else if(syData == "clef") {
				this.NewSy();
				var _g = this._sy;
				switch(_g) {
				case 2:
					bar.Clef = this.ParseClefFromInt(this._syData);
					break;
				case 5:
					bar.Clef = this.ParseClefFromString(Std.string(this._syData).toLowerCase());
					break;
				case 6:
					var parseResult = this._syData;
					bar.Clef = this.ParseClefFromInt(parseResult.get_RealValue());
					break;
				default:
					this.Error("clef",5,true);
				}
			} else if(syData == "tempo") {
				this.NewSy();
				if(this._sy != 2) {
					this.Error("tempo",2,true);
				}
				var tempoAutomation = new alphaTab.model.Automation();
				tempoAutomation.IsLinear = true;
				tempoAutomation.Type = 0;
				tempoAutomation.Value = this._syData;
				master.TempoAutomation = tempoAutomation;
			} else {
				this.Error("measure-effects",5,false);
			}
			this.NewSy();
		}
	}
	,__class__: alphaTab.importer.AlphaTexImporter
});
alphaTab.importer._AlphaTexSymbols = {};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_ = $hx_exports["alphaTab"]["importer"]["_AlphaTexSymbols"]["AlphaTexSymbols_Impl_"] = {};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.__name__ = ["alphaTab","importer","_AlphaTexSymbols","AlphaTexSymbols_Impl_"];
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "No";
	case 1:
		return "Eof";
	case 2:
		return "Number";
	case 3:
		return "DoubleDot";
	case 4:
		return "Dot";
	case 5:
		return "String";
	case 6:
		return "Tuning";
	case 7:
		return "LParensis";
	case 8:
		return "RParensis";
	case 9:
		return "LBrace";
	case 10:
		return "RBrace";
	case 11:
		return "Pipe";
	case 12:
		return "MetaCommand";
	case 13:
		return "Multiply";
	case 14:
		return "LowerThan";
	}
	return "";
};
alphaTab.importer.FileLoadException = $hx_exports["alphaTab"]["importer"]["FileLoadException"] = function() {
	alphaTab.AlphaTabException.call(this);
};
alphaTab.importer.FileLoadException.__name__ = ["alphaTab","importer","FileLoadException"];
alphaTab.importer.FileLoadException.__super__ = alphaTab.AlphaTabException;
alphaTab.importer.FileLoadException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	FileLoadException: function(message,xhr) {
		this.AlphaTabException(message);
		this.Xhr = null;
		this.Xhr = xhr;
		return this;
	}
	,__class__: alphaTab.importer.FileLoadException
});
alphaTab.importer.Gp3To5Importer = $hx_exports["alphaTab"]["importer"]["Gp3To5Importer"] = function() {
	alphaTab.importer.ScoreImporter.call(this);
};
alphaTab.importer.Gp3To5Importer.__name__ = ["alphaTab","importer","Gp3To5Importer"];
alphaTab.importer.Gp3To5Importer.ToStrokeValue = function(value) {
	switch(value) {
	case 1:
		return 30;
	case 2:
		return 30;
	case 3:
		return 60;
	case 4:
		return 120;
	case 5:
		return 240;
	case 6:
		return 480;
	default:
		return 0;
	}
};
alphaTab.importer.Gp3To5Importer.__super__ = alphaTab.importer.ScoreImporter;
alphaTab.importer.Gp3To5Importer.prototype = $extend(alphaTab.importer.ScoreImporter.prototype,{
	get_Name: function() {
		return "Guitar Pro 3-5";
	}
	,ReadScore: function() {
		this.ReadVersion();
		this._score = new alphaTab.model.Score();
		this.ReadScoreInformation();
		if(this._versionNumber < 500) {
			this._globalTripletFeel = this.ReadBool() ? 2 : 0;
		}
		if(this._versionNumber >= 400) {
			this.ReadLyrics();
		}
		if(this._versionNumber >= 510) {
			this.Data.Skip(19);
		}
		if(this._versionNumber >= 500) {
			this.ReadPageSetup();
			this._score.TempoLabel = this.ReadStringIntByte();
		}
		this._score.Tempo = this.ReadInt32();
		if(this._versionNumber >= 510) {
			this.ReadBool();
		}
		this.ReadInt32();
		if(this._versionNumber >= 400) {
			this.Data.ReadByte();
		}
		this.ReadPlaybackInfos();
		if(this._versionNumber >= 500) {
			this.Data.Skip(38);
			this.Data.Skip(4);
		}
		this._barCount = this.ReadInt32();
		this._trackCount = this.ReadInt32();
		this.ReadMasterBars();
		this.ReadTracks();
		this.ReadBars();
		this._score.Finish();
		if(this._lyrics != null && this._lyricsTrack >= 0) {
			this._score.Tracks[this._lyricsTrack].ApplyLyrics(this._lyrics);
		}
		return this._score;
	}
	,ReadVersion: function() {
		var version = this.ReadStringByteLength(30);
		if(!StringTools.startsWith(version,"FICHIER GUITAR PRO ")) {
			throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(""));
		}
		version = HxOverrides.substr(version,"FICHIER GUITAR PRO ".length + 1,null);
		var this1 = system.Convert.ToUInt16(46);
		var dot = version.indexOf(String.fromCharCode(this1));
		this._versionNumber = 100 * alphaTab.platform.Platform.ParseInt(HxOverrides.substr(version,0,dot)) + alphaTab.platform.Platform.ParseInt(HxOverrides.substr(version,dot + 1,null));
		alphaTab.util.Logger.Info(this.get_Name(),"Guitar Pro version " + version + " detected",null);
	}
	,ReadScoreInformation: function() {
		this._score.Title = this.ReadStringIntUnused();
		this._score.SubTitle = this.ReadStringIntUnused();
		this._score.Artist = this.ReadStringIntUnused();
		this._score.Album = this.ReadStringIntUnused();
		this._score.Words = this.ReadStringIntUnused();
		var tmp = this._versionNumber >= 500 ? this.ReadStringIntUnused() : this._score.Words;
		this._score.Music = tmp;
		this._score.Copyright = this.ReadStringIntUnused();
		this._score.Tab = this.ReadStringIntUnused();
		this._score.Instructions = this.ReadStringIntUnused();
		var noticeLines = this.ReadInt32();
		var this1 = "";
		var notice = this1;
		var i = 0;
		while(i < noticeLines) {
			if(i > 0) {
				notice = notice + ("" + "\r\n");
			}
			notice += Std.string(this.ReadStringIntUnused());
			++i;
		}
		this._score.Notices = notice;
	}
	,ReadLyrics: function() {
		var this1 = [];
		this._lyrics = this1;
		this._lyricsTrack = this.ReadInt32() - 1;
		var i = 0;
		while(i < 5) {
			var lyrics = new alphaTab.model.Lyrics();
			lyrics.StartBar = this.ReadInt32() - 1;
			lyrics.Text = this.ReadStringInt();
			this._lyrics.push(lyrics);
			++i;
		}
	}
	,ReadPageSetup: function() {
		this.Data.Skip(30);
		var i = 0;
		while(i < 10) {
			this.ReadStringIntByte();
			++i;
		}
	}
	,ReadPlaybackInfos: function() {
		var this1 = [];
		this._playbackInfos = this1;
		var i = 0;
		while(i < 64) {
			var info = new alphaTab.model.PlaybackInformation();
			info.PrimaryChannel = i;
			info.SecondaryChannel = i;
			info.Program = this.ReadInt32();
			info.Volume = this.Data.ReadByte();
			info.Balance = this.Data.ReadByte();
			this.Data.Skip(6);
			this._playbackInfos.push(info);
			++i;
		}
	}
	,ReadMasterBars: function() {
		var i = 0;
		while(i < this._barCount) {
			this.ReadMasterBar();
			++i;
		}
	}
	,ReadMasterBar: function() {
		var previousMasterBar = null;
		if(this._score.MasterBars.length > 0) {
			previousMasterBar = this._score.MasterBars[this._score.MasterBars.length - 1];
		}
		var newMasterBar = new alphaTab.model.MasterBar();
		var flags = this.Data.ReadByte();
		if((flags & 1) != 0) {
			newMasterBar.TimeSignatureNumerator = this.Data.ReadByte();
		} else if(previousMasterBar != null) {
			newMasterBar.TimeSignatureNumerator = previousMasterBar.TimeSignatureNumerator;
		}
		if((flags & 2) != 0) {
			newMasterBar.TimeSignatureDenominator = this.Data.ReadByte();
		} else if(previousMasterBar != null) {
			newMasterBar.TimeSignatureDenominator = previousMasterBar.TimeSignatureDenominator;
		}
		newMasterBar.IsRepeatStart = (flags & 4) != 0;
		if((flags & 8) != 0) {
			newMasterBar.RepeatCount = this.Data.ReadByte() + (this._versionNumber >= 500 ? 0 : 1);
		}
		if((flags & 16) != 0) {
			if(this._versionNumber < 500) {
				var currentMasterBar = previousMasterBar;
				var existentAlternatives = 0;
				while(currentMasterBar != null) {
					if(currentMasterBar.get_IsRepeatEnd() && currentMasterBar != previousMasterBar) {
						break;
					}
					if(currentMasterBar.IsRepeatStart) {
						break;
					}
					existentAlternatives = existentAlternatives | currentMasterBar.AlternateEndings;
					currentMasterBar = currentMasterBar.PreviousMasterBar;
				}
				var repeatAlternative = 0;
				var repeatMask = this.Data.ReadByte();
				var i = 0;
				while(i < 8) {
					var repeating = 1 << i;
					if(repeatMask > i && (existentAlternatives & repeating) == 0) {
						repeatAlternative = repeatAlternative | repeating;
					}
					++i;
				}
				newMasterBar.AlternateEndings = system.Convert.ToUInt8(repeatAlternative);
			} else {
				newMasterBar.AlternateEndings = system.Convert.ToUInt8(this.Data.ReadByte());
			}
		}
		if((flags & 32) != 0) {
			var section = new alphaTab.model.Section();
			section.Text = this.ReadStringIntByte();
			section.Marker = "";
			this.ReadColor();
			newMasterBar.Section = section;
		}
		if((flags & 64) != 0) {
			newMasterBar.KeySignature = alphaTab.platform.Platform.ReadSignedByte(this.Data);
			newMasterBar.KeySignatureType = js.Boot.__cast(this.Data.ReadByte() , Int);
		} else if(previousMasterBar != null) {
			newMasterBar.KeySignature = previousMasterBar.KeySignature;
			newMasterBar.KeySignatureType = previousMasterBar.KeySignatureType;
		}
		if(this._versionNumber >= 500 && (flags & 3) != 0) {
			this.Data.Skip(4);
		}
		if(this._versionNumber >= 500 && (flags & 16) == 0) {
			newMasterBar.AlternateEndings = system.Convert.ToUInt8(this.Data.ReadByte());
		}
		if(this._versionNumber >= 500) {
			var tripletFeel = this.Data.ReadByte();
			switch(tripletFeel) {
			case 1:
				newMasterBar.TripletFeel = 2;
				break;
			case 2:
				newMasterBar.TripletFeel = 1;
				break;
			default:
			}
			this.Data.ReadByte();
		} else {
			newMasterBar.TripletFeel = this._globalTripletFeel;
		}
		newMasterBar.IsDoubleBar = (flags & 128) != 0;
		this._score.AddMasterBar(newMasterBar);
	}
	,ReadTracks: function() {
		var i = 0;
		while(i < this._trackCount) {
			this.ReadTrack();
			++i;
		}
	}
	,ReadTrack: function() {
		var newTrack = new alphaTab.model.Track(1);
		this._score.AddTrack(newTrack);
		var mainStaff = newTrack.Staves[0];
		var flags = this.Data.ReadByte();
		newTrack.Name = this.ReadStringByteLength(40);
		if((flags & 1) != 0) {
			mainStaff.StaffKind = 2;
		}
		var stringCount = this.ReadInt32();
		var this1 = [];
		var tuning = this1;
		var i = 0;
		while(i < 7) {
			var stringTuning = this.ReadInt32();
			if(stringCount > i) {
				tuning.push(stringTuning);
			}
			++i;
		}
		mainStaff.Tuning = new Int32Array(tuning);
		var port = this.ReadInt32();
		var index = this.ReadInt32() - 1;
		var effectChannel = this.ReadInt32() - 1;
		this.Data.Skip(4);
		if(index >= 0 && index < this._playbackInfos.length) {
			var info = this._playbackInfos[index];
			info.Port = port;
			info.IsSolo = (flags & 16) != 0;
			info.IsMute = (flags & 32) != 0;
			info.SecondaryChannel = effectChannel;
			if(alphaTab.audio.GeneralMidi.IsGuitar(info.Program)) {
				mainStaff.DisplayTranspositionPitch = -12;
			}
			newTrack.PlaybackInfo = info;
		}
		mainStaff.Capo = this.ReadInt32();
		newTrack.Color = this.ReadColor();
		if(this._versionNumber >= 500) {
			this.Data.ReadByte();
			this.Data.ReadByte();
			this.Data.Skip(43);
		}
		if(this._versionNumber >= 510) {
			this.Data.Skip(4);
			this.ReadStringIntByte();
			this.ReadStringIntByte();
		}
	}
	,ReadBars: function() {
		var i = 0;
		while(i < this._barCount) {
			var t = 0;
			while(t < this._trackCount) {
				this.ReadBar(this._score.Tracks[t]);
				++t;
			}
			++i;
		}
	}
	,ReadBar: function(track) {
		var newBar = new alphaTab.model.Bar();
		var mainStaff = track.Staves[0];
		if(mainStaff.StaffKind == 2) {
			newBar.Clef = 0;
		}
		mainStaff.AddBar(newBar);
		var voiceCount = 1;
		if(this._versionNumber >= 500) {
			this.Data.ReadByte();
			voiceCount = 2;
		}
		var v = 0;
		while(v < voiceCount) {
			this.ReadVoice(track,newBar);
			++v;
		}
	}
	,ReadVoice: function(track,bar) {
		var beatCount = this.ReadInt32();
		if(beatCount == 0) {
			return;
		}
		var newVoice = new alphaTab.model.Voice();
		bar.AddVoice(newVoice);
		var i = 0;
		while(i < beatCount) {
			this.ReadBeat(track,bar,newVoice);
			++i;
		}
	}
	,ReadBeat: function(track,bar,voice) {
		var newBeat = new alphaTab.model.Beat();
		var flags = this.Data.ReadByte();
		if((flags & 1) != 0) {
			newBeat.Dots = 1;
		}
		if((flags & 64) != 0) {
			var type = this.Data.ReadByte();
			newBeat.IsEmpty = (type & 2) == 0;
		}
		voice.AddBeat(newBeat);
		var duration = alphaTab.platform.Platform.ReadSignedByte(this.Data);
		switch(duration) {
		case -2:
			newBeat.Duration = 1;
			break;
		case -1:
			newBeat.Duration = 2;
			break;
		case 0:
			newBeat.Duration = 4;
			break;
		case 1:
			newBeat.Duration = 8;
			break;
		case 2:
			newBeat.Duration = 16;
			break;
		case 3:
			newBeat.Duration = 32;
			break;
		case 4:
			newBeat.Duration = 64;
			break;
		default:
			newBeat.Duration = 4;
		}
		if((flags & 32) != 0) {
			newBeat.TupletNumerator = this.ReadInt32();
			var _g = newBeat.TupletNumerator;
			switch(_g) {
			case 1:
				newBeat.TupletDenominator = 1;
				break;
			case 3:
				newBeat.TupletDenominator = 2;
				break;
			case 5:case 6:case 7:
				newBeat.TupletDenominator = 4;
				break;
			case 2:case 4:case 8:
				break;
			case 9:case 10:case 11:case 12:case 13:
				newBeat.TupletDenominator = 8;
				break;
			default:
				newBeat.TupletNumerator = 1;
				newBeat.TupletDenominator = 1;
			}
		}
		if((flags & 2) != 0) {
			this.ReadChord(newBeat);
		}
		if((flags & 4) != 0) {
			newBeat.Text = this.ReadStringIntUnused();
		}
		if((flags & 8) != 0) {
			this.ReadBeatEffects(newBeat);
		}
		if((flags & 16) != 0) {
			this.ReadMixTableChange(newBeat);
		}
		var stringFlags = this.Data.ReadByte();
		var i = 6;
		while(i >= 0) {
			if((stringFlags & 1 << i) != 0 && 6 - i < bar.Staff.Tuning.length) {
				this.ReadNote(track,bar,voice,newBeat,6 - i);
			}
			--i;
		}
		if(this._versionNumber >= 500) {
			this.Data.ReadByte();
			var flag = this.Data.ReadByte();
			if((flag & 8) != 0) {
				this.Data.ReadByte();
			}
		}
	}
	,ReadChord: function(beat) {
		var chord = new alphaTab.model.Chord();
		var chordId = alphaTab.platform.Platform.NewGuid();
		if(this._versionNumber >= 500) {
			this.Data.Skip(17);
			chord.Name = this.ReadStringByteLength(21);
			this.Data.Skip(4);
			chord.FirstFret = this.ReadInt32();
			var i = 0;
			while(i < 7) {
				var fret = this.ReadInt32();
				if(i < beat.Voice.Bar.Staff.Tuning.length) {
					chord.Strings.push(fret);
				}
				++i;
			}
			var numberOfBarres = this.Data.ReadByte();
			var this1 = new Uint8Array(5);
			var barreFrets = this1;
			this.Data.Read(barreFrets,0,barreFrets.length);
			var i1 = 0;
			while(i1 < numberOfBarres) {
				var this2 = barreFrets[i1];
				chord.BarreFrets.push(this2);
				++i1;
			}
			this.Data.Skip(26);
		} else if(this.Data.ReadByte() != 0) {
			if(this._versionNumber >= 400) {
				this.Data.Skip(16);
				chord.Name = this.ReadStringByteLength(21);
				this.Data.Skip(4);
				chord.FirstFret = this.ReadInt32();
				var i2 = 0;
				while(i2 < 7) {
					var fret1 = this.ReadInt32();
					if(i2 < beat.Voice.Bar.Staff.Tuning.length) {
						chord.Strings.push(fret1);
					}
					++i2;
				}
				var numberOfBarres1 = this.Data.ReadByte();
				var this3 = new Uint8Array(5);
				var barreFrets1 = this3;
				this.Data.Read(barreFrets1,0,barreFrets1.length);
				var i3 = 0;
				while(i3 < numberOfBarres1) {
					var this4 = barreFrets1[i3];
					chord.BarreFrets.push(this4);
					++i3;
				}
				this.Data.Skip(26);
			} else {
				this.Data.Skip(25);
				chord.Name = this.ReadStringByteLength(34);
				chord.FirstFret = this.ReadInt32();
				var i4 = 0;
				while(i4 < 6) {
					var fret2 = this.ReadInt32();
					if(i4 < beat.Voice.Bar.Staff.Tuning.length) {
						chord.Strings.push(fret2);
					}
					++i4;
				}
				this.Data.Skip(36);
			}
		} else {
			var strings = this._versionNumber >= 406 ? 7 : 6;
			chord.Name = this.ReadStringIntByte();
			chord.FirstFret = this.ReadInt32();
			if(chord.FirstFret > 0) {
				var i5 = 0;
				while(i5 < strings) {
					var fret3 = this.ReadInt32();
					if(i5 < beat.Voice.Bar.Staff.Tuning.length) {
						chord.Strings.push(fret3);
					}
					++i5;
				}
			}
		}
		var s = chord.Name;
		if(!(s == null || s.length == 0)) {
			beat.ChordId = chordId;
			beat.Voice.Bar.Staff.Chords[beat.ChordId] = chord;
		}
	}
	,ReadBeatEffects: function(beat) {
		var flags = this.Data.ReadByte();
		var flags2 = 0;
		if(this._versionNumber >= 400) {
			flags2 = this.Data.ReadByte();
		}
		beat.FadeIn = (flags & 16) != 0;
		if(this._versionNumber < 400 && (flags & 1) != 0 || (flags & 2) != 0) {
			beat.Vibrato = 1;
		}
		beat.HasRasgueado = (flags2 & 1) != 0;
		if((flags & 32) != 0 && this._versionNumber >= 400) {
			var slapPop = alphaTab.platform.Platform.ReadSignedByte(this.Data);
			switch(slapPop) {
			case 1:
				beat.Tap = true;
				break;
			case 2:
				beat.Slap = true;
				break;
			case 3:
				beat.Pop = true;
				break;
			default:
			}
		} else if((flags & 32) != 0) {
			var slapPop1 = alphaTab.platform.Platform.ReadSignedByte(this.Data);
			switch(slapPop1) {
			case 1:
				beat.Tap = true;
				break;
			case 2:
				beat.Slap = true;
				break;
			case 3:
				beat.Pop = true;
				break;
			default:
			}
			this.Data.Skip(4);
		}
		if((flags2 & 4) != 0) {
			this.ReadTremoloBarEffect(beat);
		}
		if((flags & 64) != 0) {
			var strokeUp;
			var strokeDown;
			if(this._versionNumber < 500) {
				strokeDown = this.Data.ReadByte();
				strokeUp = this.Data.ReadByte();
			} else {
				strokeUp = this.Data.ReadByte();
				strokeDown = this.Data.ReadByte();
			}
			if(strokeUp > 0) {
				beat.BrushType = 1;
				beat.BrushDuration = alphaTab.importer.Gp3To5Importer.ToStrokeValue(strokeUp);
			} else if(strokeDown > 0) {
				beat.BrushType = 2;
				beat.BrushDuration = alphaTab.importer.Gp3To5Importer.ToStrokeValue(strokeDown);
			}
		}
		if((flags2 & 2) != 0) {
			var _g = alphaTab.platform.Platform.ReadSignedByte(this.Data);
			switch(_g) {
			case 0:
				beat.PickStroke = 0;
				break;
			case 1:
				beat.PickStroke = 1;
				break;
			case 2:
				beat.PickStroke = 2;
				break;
			default:
			}
		}
	}
	,ReadTremoloBarEffect: function(beat) {
		this.Data.ReadByte();
		this.ReadInt32();
		var pointCount = this.ReadInt32();
		if(pointCount > 0) {
			var i = 0;
			while(i < pointCount) {
				var point = new alphaTab.model.BendPoint(0,0);
				point.Offset = this.ReadInt32();
				point.Value = this.ReadInt32() / 25 | 0;
				this.ReadBool();
				beat.AddWhammyBarPoint(point);
				++i;
			}
		}
	}
	,ReadMixTableChange: function(beat) {
		var tableChange = new alphaTab.importer.MixTableChange();
		tableChange.Instrument = alphaTab.platform.Platform.ReadSignedByte(this.Data);
		if(this._versionNumber >= 500) {
			this.Data.Skip(16);
		}
		tableChange.Volume = alphaTab.platform.Platform.ReadSignedByte(this.Data);
		tableChange.Balance = alphaTab.platform.Platform.ReadSignedByte(this.Data);
		var chorus = alphaTab.platform.Platform.ReadSignedByte(this.Data);
		var reverb = alphaTab.platform.Platform.ReadSignedByte(this.Data);
		var phaser = alphaTab.platform.Platform.ReadSignedByte(this.Data);
		var tremolo = alphaTab.platform.Platform.ReadSignedByte(this.Data);
		if(this._versionNumber >= 500) {
			tableChange.TempoName = this.ReadStringIntByte();
		}
		tableChange.Tempo = this.ReadInt32();
		if(tableChange.Volume >= 0) {
			this.Data.ReadByte();
		}
		if(tableChange.Balance >= 0) {
			this.Data.ReadByte();
		}
		if(chorus >= 0) {
			this.Data.ReadByte();
		}
		if(reverb >= 0) {
			this.Data.ReadByte();
		}
		if(phaser >= 0) {
			this.Data.ReadByte();
		}
		if(tremolo >= 0) {
			this.Data.ReadByte();
		}
		if(tableChange.Tempo >= 0) {
			tableChange.Duration = alphaTab.platform.Platform.ReadSignedByte(this.Data);
			if(this._versionNumber >= 510) {
				this.Data.ReadByte();
			}
		}
		if(this._versionNumber >= 400) {
			this.Data.ReadByte();
		}
		if(this._versionNumber >= 500) {
			this.Data.ReadByte();
		}
		if(this._versionNumber >= 510) {
			this.ReadStringIntByte();
			this.ReadStringIntByte();
		}
		if(tableChange.Volume >= 0) {
			var volumeAutomation = new alphaTab.model.Automation();
			volumeAutomation.IsLinear = true;
			volumeAutomation.Type = 1;
			var this1 = tableChange.Volume;
			volumeAutomation.Value = this1;
			beat.Automations.push(volumeAutomation);
		}
		if(tableChange.Balance >= 0) {
			var balanceAutomation = new alphaTab.model.Automation();
			balanceAutomation.IsLinear = true;
			balanceAutomation.Type = 3;
			var this2 = tableChange.Balance;
			balanceAutomation.Value = this2;
			beat.Automations.push(balanceAutomation);
		}
		if(tableChange.Instrument >= 0) {
			var instrumentAutomation = new alphaTab.model.Automation();
			instrumentAutomation.IsLinear = true;
			instrumentAutomation.Type = 2;
			var this3 = tableChange.Instrument;
			instrumentAutomation.Value = this3;
			beat.Automations.push(instrumentAutomation);
		}
		if(tableChange.Tempo >= 0) {
			var tempoAutomation = new alphaTab.model.Automation();
			tempoAutomation.IsLinear = true;
			tempoAutomation.Type = 0;
			var this4 = tableChange.Tempo;
			tempoAutomation.Value = this4;
			beat.Automations.push(tempoAutomation);
			beat.Voice.Bar.get_MasterBar().TempoAutomation = tempoAutomation;
		}
	}
	,ReadNote: function(track,bar,voice,beat,stringIndex) {
		var newNote = new alphaTab.model.Note();
		newNote.String = bar.Staff.Tuning.length - stringIndex;
		var flags = this.Data.ReadByte();
		if((flags & 2) != 0) {
			newNote.Accentuated = 2;
		} else if((flags & 64) != 0) {
			newNote.Accentuated = 1;
		}
		newNote.IsGhost = (flags & 4) != 0;
		if((flags & 32) != 0) {
			var noteType = this.Data.ReadByte();
			if(noteType == 3) {
				newNote.IsDead = true;
			} else if(noteType == 2) {
				newNote.IsTieDestination = true;
			}
		}
		if((flags & 1) != 0 && this._versionNumber < 500) {
			this.Data.ReadByte();
			this.Data.ReadByte();
		}
		if((flags & 16) != 0) {
			var dynamicNumber = alphaTab.platform.Platform.ReadSignedByte(this.Data);
			newNote.Dynamic = this.ToDynamicValue(dynamicNumber);
			beat.Dynamic = newNote.Dynamic;
		}
		if((flags & 32) != 0) {
			newNote.Fret = alphaTab.platform.Platform.ReadSignedByte(this.Data);
		}
		if((flags & 128) != 0) {
			newNote.LeftHandFinger = js.Boot.__cast(alphaTab.platform.Platform.ReadSignedByte(this.Data) , Int);
			newNote.RightHandFinger = js.Boot.__cast(alphaTab.platform.Platform.ReadSignedByte(this.Data) , Int);
			newNote.IsFingering = true;
		}
		if(this._versionNumber >= 500) {
			if((flags & 1) != 0) {
				newNote.DurationPercent = this.ReadDouble();
			}
			var flags2 = this.Data.ReadByte();
			newNote.AccidentalMode = (flags2 & 2) != 0 ? 1 : 0;
		}
		beat.AddNote(newNote);
		if((flags & 8) != 0) {
			this.ReadNoteEffects(track,voice,beat,newNote);
		}
	}
	,ToDynamicValue: function(value) {
		switch(value) {
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			return 2;
		case 4:
			return 3;
		case 5:
			return 4;
		case 6:
			return 5;
		case 7:
			return 6;
		case 8:
			return 7;
		default:
			return 5;
		}
	}
	,ReadNoteEffects: function(track,voice,beat,note) {
		var flags = this.Data.ReadByte();
		var flags2 = 0;
		if(this._versionNumber >= 400) {
			flags2 = this.Data.ReadByte();
		}
		if((flags & 1) != 0) {
			this.ReadBend(note);
		}
		if((flags & 16) != 0) {
			this.ReadGrace(voice,note);
		}
		if((flags2 & 4) != 0) {
			this.ReadTremoloPicking(beat);
		}
		if((flags2 & 8) != 0) {
			this.ReadSlide(note);
		} else if(this._versionNumber < 400) {
			if((flags & 4) != 0) {
				note.SlideType = 1;
			}
		}
		if((flags2 & 16) != 0) {
			this.ReadArtificialHarmonic(note);
		} else if(this._versionNumber < 400) {
			if((flags & 4) != 0) {
				note.HarmonicType = 1;
				note.HarmonicValue = this.DeltaFretToHarmonicValue(note.Fret);
			}
			if((flags & 8) != 0) {
				note.HarmonicType = 2;
			}
		}
		if((flags2 & 32) != 0) {
			this.ReadTrill(note);
		}
		note.IsLetRing = (flags & 8) != 0;
		note.IsHammerPullOrigin = (flags & 2) != 0;
		if((flags2 & 64) != 0) {
			note.Vibrato = 1;
		}
		note.IsPalmMute = (flags2 & 2) != 0;
		note.IsStaccato = (flags2 & 1) != 0;
	}
	,ReadBend: function(note) {
		this.Data.ReadByte();
		this.ReadInt32();
		var pointCount = this.ReadInt32();
		if(pointCount > 0) {
			var i = 0;
			while(i < pointCount) {
				var point = new alphaTab.model.BendPoint(0,0);
				point.Offset = this.ReadInt32();
				point.Value = this.ReadInt32() / 25 | 0;
				this.ReadBool();
				note.AddBendPoint(point);
				++i;
			}
		}
	}
	,ReadGrace: function(voice,note) {
		var graceBeat = new alphaTab.model.Beat();
		var graceNote = new alphaTab.model.Note();
		graceNote.String = note.String;
		graceNote.Fret = alphaTab.platform.Platform.ReadSignedByte(this.Data);
		graceBeat.Duration = 32;
		graceBeat.Dynamic = this.ToDynamicValue(alphaTab.platform.Platform.ReadSignedByte(this.Data));
		var transition = alphaTab.platform.Platform.ReadSignedByte(this.Data);
		switch(transition) {
		case 0:
			break;
		case 1:
			graceNote.SlideType = 2;
			graceNote.SlideTarget = note;
			break;
		case 2:
			break;
		case 3:
			graceNote.IsHammerPullOrigin = true;
			break;
		default:
		}
		graceNote.Dynamic = graceBeat.Dynamic;
		this.Data.Skip(1);
		if(this._versionNumber < 500) {
			graceBeat.GraceType = 2;
		} else {
			var flags = this.Data.ReadByte();
			graceNote.IsDead = (flags & 1) != 0;
			graceBeat.GraceType = (flags & 2) != 0 ? 1 : 2;
		}
		graceBeat.AddNote(graceNote);
		voice.AddGraceBeat(graceBeat);
	}
	,ReadTremoloPicking: function(beat) {
		var speed = this.Data.ReadByte();
		switch(speed) {
		case 1:
			beat.TremoloSpeed = 8;
			break;
		case 2:
			beat.TremoloSpeed = 16;
			break;
		case 3:
			beat.TremoloSpeed = 32;
			break;
		default:
		}
	}
	,ReadSlide: function(note) {
		if(this._versionNumber >= 500) {
			var type = alphaTab.platform.Platform.ReadSignedByte(this.Data);
			switch(type) {
			case 1:
				note.SlideType = 1;
				break;
			case 2:
				note.SlideType = 2;
				break;
			case 4:
				note.SlideType = 6;
				break;
			case 8:
				note.SlideType = 5;
				break;
			case 16:
				note.SlideType = 3;
				break;
			case 32:
				note.SlideType = 4;
				break;
			default:
				note.SlideType = 0;
			}
		} else {
			var type1 = alphaTab.platform.Platform.ReadSignedByte(this.Data);
			switch(type1) {
			case -2:
				note.SlideType = 4;
				break;
			case -1:
				note.SlideType = 3;
				break;
			case 1:
				note.SlideType = 1;
				break;
			case 2:
				note.SlideType = 2;
				break;
			case 3:
				note.SlideType = 6;
				break;
			case 4:
				note.SlideType = 5;
				break;
			default:
				note.SlideType = 0;
			}
		}
	}
	,ReadArtificialHarmonic: function(note) {
		var type = this.Data.ReadByte();
		if(this._versionNumber >= 500) {
			switch(type) {
			case 1:
				note.HarmonicType = 1;
				note.HarmonicValue = this.DeltaFretToHarmonicValue(note.Fret);
				break;
			case 2:
				var harmonicTone = this.Data.ReadByte();
				var harmonicKey = this.Data.ReadByte();
				var harmonicOctaveOffset = this.Data.ReadByte();
				note.HarmonicType = 2;
				break;
			case 3:
				note.HarmonicType = 4;
				note.HarmonicValue = this.DeltaFretToHarmonicValue(this.Data.ReadByte());
				break;
			case 4:
				note.HarmonicType = 3;
				note.HarmonicValue = 12;
				break;
			case 5:
				note.HarmonicType = 5;
				note.HarmonicValue = 12;
				break;
			default:
			}
		} else if(this._versionNumber >= 400) {
			switch(type) {
			case 1:
				note.HarmonicType = 1;
				break;
			case 3:
				note.HarmonicType = 4;
				break;
			case 4:
				note.HarmonicType = 3;
				break;
			case 5:
				note.HarmonicType = 5;
				break;
			case 15:
				note.HarmonicType = 2;
				break;
			case 17:
				note.HarmonicType = 2;
				break;
			case 22:
				note.HarmonicType = 2;
				break;
			default:
			}
		}
	}
	,DeltaFretToHarmonicValue: function(deltaFret) {
		switch(deltaFret) {
		case 2:
			return 2.4;
		case 3:
			return 3.2;
		case 8:
			return 8.2;
		case 10:
			return 9.6;
		case 14:case 15:
			return 14.7;
		case 21:case 22:
			return 21.7;
		case 4:case 5:case 7:case 9:case 12:case 16:case 17:case 19:case 24:
			var this1 = deltaFret;
			return this1;
		default:
			return 12;
		}
	}
	,ReadTrill: function(note) {
		note.TrillValue = this.Data.ReadByte() + note.get_StringTuning();
		var _g = this.Data.ReadByte();
		switch(_g) {
		case 1:
			note.TrillSpeed = 16;
			break;
		case 2:
			note.TrillSpeed = 32;
			break;
		case 3:
			note.TrillSpeed = 64;
			break;
		default:
		}
	}
	,ReadDouble: function() {
		var this1 = new Uint8Array(8);
		var bytes = this1;
		this.Data.Read(bytes,0,bytes.length);
		return alphaTab.platform.Platform.ToDouble(bytes);
	}
	,GetDoubleSig: function(bytes) {
		var this1 = bytes[3];
		var this2 = bytes[7];
		return system.Convert.ToInt32_Double(((bytes[1] & 15) << 16 | bytes[2] << 8 | this1) * 4294967296.0 + (bytes[4] >> 7) * 2147483648 + ((bytes[4] & 127) << 24 | bytes[5] << 16 | bytes[6] << 8 | this2));
	}
	,ReadColor: function() {
		var r = system.Convert.ToUInt8(this.Data.ReadByte());
		var g = system.Convert.ToUInt8(this.Data.ReadByte());
		var b = system.Convert.ToUInt8(this.Data.ReadByte());
		this.Data.Skip(1);
		return new alphaTab.platform.model.Color(r,g,b,255);
	}
	,ReadBool: function() {
		return this.Data.ReadByte() != 0;
	}
	,ReadInt32: function() {
		var this1 = new Uint8Array(4);
		var bytes = this1;
		this.Data.Read(bytes,0,4);
		return bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24;
	}
	,ReadStringIntUnused: function() {
		this.Data.Skip(4);
		return this.ReadString(this.Data.ReadByte());
	}
	,ReadStringInt: function() {
		return this.ReadString(this.ReadInt32());
	}
	,ReadStringIntByte: function() {
		var length = this.ReadInt32() - 1;
		this.Data.ReadByte();
		return this.ReadString(length);
	}
	,ReadString: function(length) {
		var this1 = new Uint8Array(length);
		var b = this1;
		this.Data.Read(b,0,b.length);
		return alphaTab.platform.Platform.ToString(b);
	}
	,ReadStringByteLength: function(length) {
		var stringLength = this.Data.ReadByte();
		var s = this.ReadString(stringLength);
		if(stringLength < length) {
			this.Data.Skip(length - stringLength);
		}
		return s;
	}
	,__class__: alphaTab.importer.Gp3To5Importer
});
alphaTab.importer.Gp7Importer = $hx_exports["alphaTab"]["importer"]["Gp7Importer"] = function() {
	alphaTab.importer.ScoreImporter.call(this);
};
alphaTab.importer.Gp7Importer.__name__ = ["alphaTab","importer","Gp7Importer"];
alphaTab.importer.Gp7Importer.__super__ = alphaTab.importer.ScoreImporter;
alphaTab.importer.Gp7Importer.prototype = $extend(alphaTab.importer.ScoreImporter.prototype,{
	get_Name: function() {
		return "Guitar Pro 7";
	}
	,ReadScore: function() {
		alphaTab.util.Logger.Info(this.get_Name(),"Loading ZIP entries",null);
		var fileSystem = new alphaTab.io.ZipFile();
		fileSystem.FileFilter = function(s) {
			return StringTools.endsWith(s,"score.gpif");
		};
		try {
			fileSystem.Load(this.Data);
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(e.Message));
			} else throw(e);
		}
		alphaTab.util.Logger.Info(this.get_Name(),"Zip entries loaded",null);
		var data = fileSystem.Entries[0].Data;
		var xml = alphaTab.platform.Platform.ToString(data);
		fileSystem.Entries = null;
		fileSystem = null;
		alphaTab.util.Logger.Info(this.get_Name(),"Start Parsing score.gpif",null);
		var parser = new alphaTab.importer.GpifParser();
		parser.ParseXml(xml);
		alphaTab.util.Logger.Info(this.get_Name(),"score.gpif parsed",null);
		return parser.Score;
	}
	,__class__: alphaTab.importer.Gp7Importer
});
alphaTab.importer.GpifParser = $hx_exports["alphaTab"]["importer"]["GpifParser"] = function() {
};
alphaTab.importer.GpifParser.__name__ = ["alphaTab","importer","GpifParser"];
alphaTab.importer.GpifParser.prototype = {
	ParseXml: function(xml) {
		var this1 = {}
		this._masterTrackAutomations = this1;
		var this2 = new Array(0);
		this._tracksMapping = this2;
		var this3 = {}
		this._tracksById = this3;
		var this4 = [];
		this._masterBars = this4;
		var this5 = [];
		this._barsOfMasterBar = this5;
		var this6 = {}
		this._voicesOfBar = this6;
		var this7 = {}
		this._barsById = this7;
		var this8 = {}
		this._voiceById = this8;
		var this9 = {}
		this._beatsOfVoice = this9;
		var this10 = {}
		this._beatById = this10;
		var this11 = {}
		this._rhythmOfBeat = this11;
		var this12 = {}
		this._rhythmById = this12;
		var this13 = {}
		this._notesOfBeat = this13;
		var this14 = {}
		this._noteById = this14;
		var this15 = {}
		this._tappedNotes = this15;
		var this16 = {}
		this._lyricsByTrack = this16;
		var dom;
		try {
			dom = new alphaTab.xml.XmlDocument(xml);
		} catch( __e ) {
			if (__e instanceof js._Boot.HaxeError) __e = __e.val;
			if( js.Boot.__instanceof(__e,system.Exception) ) {
				throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(""));
			} else throw(__e);
		}
		this.ParseDom(dom);
		this.BuildModel();
		this.Score.Finish();
		var this17 = this._lyricsByTrack;
		if(Object.keys(this17).length > 0) {
			var this18 = this._lyricsByTrack;
			var trackId = $iterator(Object.keys(this18))();
			while(trackId.hasNext()) {
				var trackId1 = trackId.next();
				var track = this._tracksById[trackId1];
				track.ApplyLyrics(this._lyricsByTrack[trackId1]);
			}
		}
	}
	,ParseDom: function(dom) {
		var root = dom.DocumentElement;
		if(root == null) {
			return;
		}
		if(root.LocalName == "GPIF") {
			this.Score = new alphaTab.model.Score();
			var n = $iterator(root.ChildNodes)();
			while(n.hasNext()) {
				var n1 = n.next();
				if(n1.NodeType == 1) {
					var _g = n1.LocalName;
					switch(_g) {
					case "Bars":
						this.ParseBars(n1);
						break;
					case "Beats":
						this.ParseBeats(n1);
						break;
					case "MasterBars":
						this.ParseMasterBarsNode(n1);
						break;
					case "MasterTrack":
						this.ParseMasterTrackNode(n1);
						break;
					case "Notes":
						this.ParseNotes(n1);
						break;
					case "Rhythms":
						this.ParseRhythms(n1);
						break;
					case "Score":
						this.ParseScoreNode(n1);
						break;
					case "Tracks":
						this.ParseTracksNode(n1);
						break;
					case "Voices":
						this.ParseVoices(n1);
						break;
					default:
					}
				}
			}
		} else {
			throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(""));
		}
	}
	,ParseScoreNode: function(element) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "Album":
					this.Score.Album = c1.FirstChild.get_InnerText();
					break;
				case "Artist":
					this.Score.Artist = c1.FirstChild.get_InnerText();
					break;
				case "Copyright":
					this.Score.Copyright = c1.FirstChild.get_InnerText();
					break;
				case "Instructions":
					this.Score.Instructions = c1.FirstChild.get_InnerText();
					break;
				case "Music":
					this.Score.Music = c1.FirstChild.get_InnerText();
					break;
				case "Notices":
					this.Score.Notices = c1.FirstChild.get_InnerText();
					break;
				case "SubTitle":
					this.Score.SubTitle = c1.FirstChild.get_InnerText();
					break;
				case "Tabber":
					this.Score.Tab = c1.FirstChild.get_InnerText();
					break;
				case "Title":
					this.Score.Title = c1.FirstChild.get_InnerText();
					break;
				case "Words":
					this.Score.Words = c1.FirstChild.get_InnerText();
					break;
				case "WordsAndMusic":
					if(c1.FirstChild != null && c1.FirstChild.get_InnerText() != "") {
						var wordsAndMusic = c1.FirstChild.get_InnerText();
						var tmp;
						if(!(wordsAndMusic == null || wordsAndMusic.length == 0)) {
							var s = this.Score.Words;
							if(s != null) {
								tmp = s.length == 0;
							} else {
								tmp = true;
							}
						} else {
							tmp = false;
						}
						if(tmp) {
							this.Score.Words = wordsAndMusic;
						}
						var tmp1;
						if(!(wordsAndMusic == null || wordsAndMusic.length == 0)) {
							var s1 = this.Score.Music;
							if(s1 != null) {
								tmp1 = s1.length == 0;
							} else {
								tmp1 = true;
							}
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							this.Score.Music = wordsAndMusic;
						}
					}
					break;
				default:
				}
			}
		}
	}
	,ParseMasterTrackNode: function(node) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "Automations":
					this.ParseAutomations(c1,this._masterTrackAutomations);
					break;
				case "Tracks":
					var a = c1.get_InnerText();
					var this1 = system.Convert.ToUInt16(32);
					var this2 = this1;
					this._tracksMapping = system._CsString.CsString_Impl_.Split_CharArray(a,[this2]);
					break;
				default:
				}
			}
		}
	}
	,ParseAutomations: function(node,automations) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Automation") {
					this.ParseAutomation(c1,automations);
				}
			}
		}
	}
	,ParseAutomation: function(node,automations) {
		var type = null;
		var isLinear = false;
		var barId = null;
		var ratioPosition = 0;
		var value = 0;
		var reference = 0;
		var text = null;
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "Bar":
					barId = c1.get_InnerText();
					break;
				case "Linear":
					isLinear = c1.get_InnerText().toLowerCase() == "true";
					break;
				case "Position":
					var s = c1.get_InnerText();
					ratioPosition = parseFloat(s);
					break;
				case "Text":
					text = c1.get_InnerText();
					break;
				case "Type":
					type = c1.get_InnerText();
					break;
				case "Value":
					var a = c1.get_InnerText();
					var this1 = system.Convert.ToUInt16(32);
					var this2 = this1;
					var parts = system._CsString.CsString_Impl_.Split_CharArray(a,[this2]);
					value = parseFloat(parts[0]);
					reference = alphaTab.platform.Platform.ParseInt(parts[1]);
					break;
				default:
				}
			}
		}
		if(type == null) {
			return;
		}
		var automation = null;
		if(type == "Tempo") {
			automation = alphaTab.model.Automation.BuildTempoAutomation(isLinear,ratioPosition,value,reference);
		}
		if(automation != null) {
			automation.Text = text;
		}
		if(barId != null) {
			if(!automations.hasOwnProperty(barId)) {
				var this3 = [];
				automations[barId] = this3;
			}
			automations[barId].push(automation);
		}
	}
	,ParseTracksNode: function(node) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Track") {
					this.ParseTrack(c1);
				}
			}
		}
	}
	,ParseTrack: function(node) {
		var track = new alphaTab.model.Track(1);
		var staff = track.Staves[0];
		staff.StaffKind = 1;
		var trackId = node.GetAttribute("id");
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "Color":
					var a = c1.get_InnerText();
					var this1 = system.Convert.ToUInt16(32);
					var this2 = this1;
					var parts = system._CsString.CsString_Impl_.Split_CharArray(a,[this2]);
					if(parts.length >= 3) {
						var r = alphaTab.platform.Platform.ParseInt(parts[0]);
						var g = alphaTab.platform.Platform.ParseInt(parts[1]);
						var b = alphaTab.platform.Platform.ParseInt(parts[2]);
						track.Color = new alphaTab.platform.model.Color(system.Convert.ToUInt8(r),system.Convert.ToUInt8(g),system.Convert.ToUInt8(b),255);
					}
					break;
				case "GeneralMidi":
					this.ParseGeneralMidi(track,c1);
					break;
				case "Instrument":
					var instrumentName = c1.GetAttribute("ref");
					if(StringTools.endsWith(instrumentName,"-gs") || StringTools.endsWith(instrumentName,"GrandStaff")) {
						track.EnsureStaveCount(2);
						track.Staves[1].StaffKind = 1;
					}
					break;
				case "Lyrics":
					this.ParseLyrics(trackId,c1);
					break;
				case "Name":
					track.Name = c1.get_InnerText();
					break;
				case "PartSounding":
					this.ParsePartSounding(track,c1);
					break;
				case "PlaybackState":
					var state = c1.get_InnerText();
					track.PlaybackInfo.IsSolo = state == "Solo";
					track.PlaybackInfo.IsMute = state == "Mute";
					break;
				case "Properties":
					this.ParseTrackProperties(track,c1);
					break;
				case "ShortName":
					track.ShortName = c1.get_InnerText();
					break;
				case "Staves":
					this.ParseStaves(track,c1);
					break;
				case "Transpose":
					this.ParseTranspose(track,c1);
					break;
				default:
				}
			}
		}
		this._tracksById[trackId] = track;
	}
	,ParseStaves: function(track,node) {
		var staffIndex = 0;
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Staff") {
					track.EnsureStaveCount(staffIndex + 1);
					var staff = track.Staves[staffIndex];
					this.ParseStaff(staff,c1);
					++staffIndex;
				}
			}
		}
	}
	,ParseStaff: function(staff,node) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Properties") {
					this.ParseStaffProperties(staff,c1);
				}
			}
		}
	}
	,ParseStaffProperties: function(staff,node) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Property") {
					this.ParseStaffProperty(staff,c1);
				}
			}
		}
	}
	,ParseStaffProperty: function(staff,node) {
		var propertyName = node.GetAttribute("name");
		switch(propertyName) {
		case "CapoFret":
			var capo = alphaTab.platform.Platform.ParseInt(node.FindChildElement("Fret").get_InnerText());
			staff.Capo = capo;
			break;
		case "ChordCollection":case "DiagramCollection":
			this.ParseDiagramCollection_Staff_XmlNode(staff,node);
			break;
		case "Tuning":
			var a = node.FindChildElement("Pitches").get_InnerText();
			var this1 = system.Convert.ToUInt16(32);
			var this2 = this1;
			var tuningParts = system._CsString.CsString_Impl_.Split_CharArray(a,[this2]);
			var this3 = new Int32Array(tuningParts.length);
			var tuning = this3;
			var i = 0;
			while(i < tuning.length) {
				tuning[tuning.length - 1 - i] = alphaTab.platform.Platform.ParseInt(tuningParts[i]);
				++i;
			}
			staff.Tuning = tuning;
			staff.StaffKind = 3;
			break;
		default:
		}
	}
	,ParseLyrics: function(trackId,node) {
		var this1 = [];
		var tracks = this1;
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Line") {
					tracks.push(this.ParseLyricsLine(c1));
				}
			}
		}
		this._lyricsByTrack[trackId] = tracks;
	}
	,ParseLyricsLine: function(node) {
		var lyrics = new alphaTab.model.Lyrics();
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "Offset":
					lyrics.StartBar = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "Text":
					lyrics.Text = c1.get_InnerText();
					break;
				default:
				}
			}
		}
		return lyrics;
	}
	,ParseDiagramCollection_Track_XmlNode: function(track,node) {
		var items = node.FindChildElement("Items");
		var c = $iterator(items.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Item") {
					this.ParseDiagramItem_Track_XmlNode(track,c1);
				}
			}
		}
	}
	,ParseDiagramCollection_Staff_XmlNode: function(staff,node) {
		var items = node.FindChildElement("Items");
		var c = $iterator(items.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Item") {
					this.ParseDiagramItem_Staff_XmlNode(staff,c1);
				}
			}
		}
	}
	,ParseDiagramItem_Track_XmlNode: function(track,node) {
		var chord = new alphaTab.model.Chord();
		var chordId = node.GetAttribute("id");
		var staff = $iterator(track.Staves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			staff1.Chords[chordId] = chord;
		}
		this.ParseDiagramItem_Chord_XmlNode(chord,node);
	}
	,ParseDiagramItem_Staff_XmlNode: function(staff,node) {
		var chord = new alphaTab.model.Chord();
		var chordId = node.GetAttribute("id");
		staff.Chords[chordId] = chord;
		this.ParseDiagramItem_Chord_XmlNode(chord,node);
	}
	,ParseDiagramItem_Chord_XmlNode: function(chord,node) {
		chord.Name = node.GetAttribute("name");
		var diagram = node.FindChildElement("Diagram");
		var stringCount = alphaTab.platform.Platform.ParseInt(diagram.GetAttribute("stringCount"));
		var baseFret = alphaTab.platform.Platform.ParseInt(diagram.GetAttribute("baseFret"));
		chord.FirstFret = baseFret + 1;
		var i = 0;
		while(i < stringCount) {
			chord.Strings.push(-1);
			++i;
		}
		var c = $iterator(diagram.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "Fingering":
					var this1 = {}
					var existingFingers = this1;
					var p = $iterator(c1.ChildNodes)();
					while(p.hasNext()) {
						var p1 = p.next();
						if(p1.NodeType == 1) {
							var _g1 = p1.LocalName;
							if(_g1 == "Position") {
								var finger = -2;
								var fret = baseFret + alphaTab.platform.Platform.ParseInt(p1.GetAttribute("fret"));
								var _g2 = p1.GetAttribute("finger");
								switch(_g2) {
								case "Index":
									finger = 1;
									break;
								case "Middle":
									finger = 2;
									break;
								case "None":
									break;
								case "Pinky":
									finger = 4;
									break;
								case "Rank":
									finger = 3;
									break;
								case "Thumb":
									finger = 0;
									break;
								default:
								}
								if(finger != -2) {
									if(existingFingers.hasOwnProperty(finger)) {
										chord.BarreFrets.push(fret);
									} else {
										existingFingers[finger] = true;
									}
								}
							}
						}
					}
					break;
				case "Fret":
					var guitarString = alphaTab.platform.Platform.ParseInt(c1.GetAttribute("string"));
					chord.Strings[stringCount - guitarString - 1] = baseFret + alphaTab.platform.Platform.ParseInt(c1.GetAttribute("fret"));
					break;
				default:
				}
			}
		}
	}
	,ParseTrackProperties: function(track,node) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Property") {
					this.ParseTrackProperty(track,c1);
				}
			}
		}
	}
	,ParseTrackProperty: function(track,node) {
		var propertyName = node.GetAttribute("name");
		switch(propertyName) {
		case "CapoFret":
			var capo = alphaTab.platform.Platform.ParseInt(node.FindChildElement("Fret").get_InnerText());
			var staff = $iterator(track.Staves)();
			while(staff.hasNext()) {
				var staff1 = staff.next();
				staff1.Capo = capo;
			}
			break;
		case "ChordCollection":case "DiagramCollection":
			this.ParseDiagramCollection_Track_XmlNode(track,node);
			break;
		case "Tuning":
			var a = node.FindChildElement("Pitches").get_InnerText();
			var this1 = system.Convert.ToUInt16(32);
			var this2 = this1;
			var tuningParts = system._CsString.CsString_Impl_.Split_CharArray(a,[this2]);
			var this3 = new Int32Array(tuningParts.length);
			var tuning = this3;
			var i = 0;
			while(i < tuning.length) {
				tuning[tuning.length - 1 - i] = alphaTab.platform.Platform.ParseInt(tuningParts[i]);
				++i;
			}
			var staff2 = $iterator(track.Staves)();
			while(staff2.hasNext()) {
				var staff3 = staff2.next();
				staff3.Tuning = tuning;
				staff3.StaffKind = 3;
			}
			break;
		default:
		}
	}
	,ParseGeneralMidi: function(track,node) {
		var port = alphaTab.platform.Platform.ParseInt(node.FindChildElement("Port").get_InnerText());
		var program = alphaTab.platform.Platform.ParseInt(node.FindChildElement("Program").get_InnerText());
		var primaryChannel = alphaTab.platform.Platform.ParseInt(node.FindChildElement("PrimaryChannel").get_InnerText());
		var pecondaryChannel = alphaTab.platform.Platform.ParseInt(node.FindChildElement("SecondaryChannel").get_InnerText());
		var isPercussion = node.GetAttribute("table") == "Percussion";
		track.PlaybackInfo.Port = port;
		track.PlaybackInfo.Program = program;
		track.PlaybackInfo.PrimaryChannel = primaryChannel;
		track.PlaybackInfo.SecondaryChannel = pecondaryChannel;
		if(isPercussion) {
			var staff = $iterator(track.Staves)();
			while(staff.hasNext()) {
				var staff1 = staff.next();
				staff1.StaffKind = 2;
			}
		}
	}
	,ParsePartSounding: function(track,node) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "TranspositionPitch") {
					var staff = $iterator(track.Staves)();
					while(staff.hasNext()) {
						var staff1 = staff.next();
						staff1.DisplayTranspositionPitch = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					}
				}
			}
		}
	}
	,ParseTranspose: function(track,node) {
		var octave = 0;
		var chromatic = 0;
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "Chromatic":
					chromatic = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "Octave":
					octave = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				default:
				}
			}
		}
		var staff = $iterator(track.Staves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			staff1.DisplayTranspositionPitch = octave * 12 + chromatic;
		}
	}
	,ParseMasterBarsNode: function(node) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "MasterBar") {
					this.ParseMasterBar(c1);
				}
			}
		}
	}
	,ParseMasterBar: function(node) {
		var masterBar = new alphaTab.model.MasterBar();
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "AlternateEndings":
					var a = c1.get_InnerText();
					var this1 = system.Convert.ToUInt16(32);
					var this2 = this1;
					var alternateEndings = system._CsString.CsString_Impl_.Split_CharArray(a,[this2]);
					var i = 0;
					var k = 0;
					while(k < alternateEndings.length) {
						i = i | 1 << -1 + alphaTab.platform.Platform.ParseInt(alternateEndings[k]);
						++k;
					}
					masterBar.AlternateEndings = system.Convert.ToUInt8(i);
					break;
				case "Bars":
					var this3 = this._barsOfMasterBar;
					var a1 = c1.get_InnerText();
					var this4 = system.Convert.ToUInt16(32);
					var this5 = this4;
					this3.push(system._CsString.CsString_Impl_.Split_CharArray(a1,[this5]));
					break;
				case "DoubleBar":
					masterBar.IsDoubleBar = true;
					break;
				case "Key":
					masterBar.KeySignature = alphaTab.platform.Platform.ParseInt(c1.FindChildElement("AccidentalCount").get_InnerText());
					var mode = c1.FindChildElement("Mode");
					if(mode != null) {
						var _g1 = mode.get_InnerText().toLowerCase();
						switch(_g1) {
						case "major":
							masterBar.KeySignatureType = 0;
							break;
						case "minor":
							masterBar.KeySignatureType = 1;
							break;
						default:
						}
					}
					break;
				case "Repeat":
					if(c1.GetAttribute("start").toLowerCase() == "true") {
						masterBar.IsRepeatStart = true;
					}
					if(c1.GetAttribute("end").toLowerCase() == "true" && c1.GetAttribute("count") != null) {
						masterBar.RepeatCount = alphaTab.platform.Platform.ParseInt(c1.GetAttribute("count"));
					}
					break;
				case "Section":
					masterBar.Section = new alphaTab.model.Section();
					masterBar.Section.Marker = c1.FindChildElement("Letter").get_InnerText();
					masterBar.Section.Text = c1.FindChildElement("Text").get_InnerText();
					break;
				case "Time":
					var a2 = c1.get_InnerText();
					var this6 = system.Convert.ToUInt16(47);
					var this7 = this6;
					var timeParts = system._CsString.CsString_Impl_.Split_CharArray(a2,[this7]);
					masterBar.TimeSignatureNumerator = alphaTab.platform.Platform.ParseInt(timeParts[0]);
					masterBar.TimeSignatureDenominator = alphaTab.platform.Platform.ParseInt(timeParts[1]);
					break;
				case "TripletFeel":
					var _g2 = c1.get_InnerText();
					switch(_g2) {
					case "Dotted16th":
						masterBar.TripletFeel = 3;
						break;
					case "Dotted8th":
						masterBar.TripletFeel = 4;
						break;
					case "NoTripletFeel":
						masterBar.TripletFeel = 0;
						break;
					case "Scottish16th":
						masterBar.TripletFeel = 5;
						break;
					case "Scottish8th":
						masterBar.TripletFeel = 6;
						break;
					case "Triplet16th":
						masterBar.TripletFeel = 1;
						break;
					case "Triplet8th":
						masterBar.TripletFeel = 2;
						break;
					default:
					}
					break;
				default:
				}
			}
		}
		this._masterBars.push(masterBar);
	}
	,ParseBars: function(node) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Bar") {
					this.ParseBar(c1);
				}
			}
		}
	}
	,ParseBar: function(node) {
		var bar = new alphaTab.model.Bar();
		var barId = node.GetAttribute("id");
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "Clef":
					var _g1 = c1.get_InnerText();
					switch(_g1) {
					case "C3":
						bar.Clef = 1;
						break;
					case "C4":
						bar.Clef = 2;
						break;
					case "F4":
						bar.Clef = 3;
						break;
					case "G2":
						bar.Clef = 4;
						break;
					case "Neutral":
						bar.Clef = 0;
						break;
					default:
					}
					break;
				case "Ottavia":
					var _g2 = c1.get_InnerText();
					switch(_g2) {
					case "15ma":
						bar.ClefOttavia = 0;
						break;
					case "15mb":
						bar.ClefOttavia = 4;
						break;
					case "8va":
						bar.ClefOttavia = 1;
						break;
					case "8vb":
						bar.ClefOttavia = 3;
						break;
					default:
					}
					break;
				case "Voices":
					var this1 = this._voicesOfBar;
					var a = c1.get_InnerText();
					var this2 = system.Convert.ToUInt16(32);
					var this3 = this2;
					this1[barId] = system._CsString.CsString_Impl_.Split_CharArray(a,[this3]);
					break;
				default:
				}
			}
		}
		this._barsById[barId] = bar;
	}
	,ParseVoices: function(node) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Voice") {
					this.ParseVoice(c1);
				}
			}
		}
	}
	,ParseVoice: function(node) {
		var voice = new alphaTab.model.Voice();
		var voiceId = node.GetAttribute("id");
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Beats") {
					var this1 = this._beatsOfVoice;
					var a = c1.get_InnerText();
					var this2 = system.Convert.ToUInt16(32);
					var this3 = this2;
					this1[voiceId] = system._CsString.CsString_Impl_.Split_CharArray(a,[this3]);
				}
			}
		}
		this._voiceById[voiceId] = voice;
	}
	,ParseBeats: function(node) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Beat") {
					this.ParseBeat(c1);
				}
			}
		}
	}
	,ParseBeat: function(node) {
		var beat = new alphaTab.model.Beat();
		var beatId = node.GetAttribute("id");
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "Arpeggio":
					if(c1.get_InnerText() == "Up") {
						beat.BrushType = 3;
					} else {
						beat.BrushType = 4;
					}
					break;
				case "Chord":
					beat.ChordId = c1.get_InnerText();
					break;
				case "Dynamic":
					var _g1 = c1.get_InnerText();
					switch(_g1) {
					case "F":
						beat.Dynamic = 5;
						break;
					case "FF":
						beat.Dynamic = 6;
						break;
					case "FFF":
						beat.Dynamic = 7;
						break;
					case "MF":
						beat.Dynamic = 4;
						break;
					case "MP":
						beat.Dynamic = 3;
						break;
					case "P":
						beat.Dynamic = 2;
						break;
					case "PP":
						beat.Dynamic = 1;
						break;
					case "PPP":
						beat.Dynamic = 0;
						break;
					default:
					}
					break;
				case "Fadding":
					if(c1.get_InnerText() == "FadeIn") {
						beat.FadeIn = true;
					}
					break;
				case "FreeText":
					beat.Text = c1.get_InnerText();
					break;
				case "GraceNotes":
					var _g2 = c1.get_InnerText();
					switch(_g2) {
					case "BeforeBeat":
						beat.GraceType = 2;
						break;
					case "OnBeat":
						beat.GraceType = 1;
						break;
					default:
					}
					break;
				case "Hairpin":
					var _g3 = c1.get_InnerText();
					switch(_g3) {
					case "Crescendo":
						beat.Crescendo = 1;
						break;
					case "Decrescendo":
						beat.Crescendo = 2;
						break;
					default:
					}
					break;
				case "Legato":
					if(c1.GetAttribute("origin") == "true") {
						beat.IsLegatoOrigin = true;
					}
					break;
				case "Notes":
					var this1 = this._notesOfBeat;
					var a = c1.get_InnerText();
					var this2 = system.Convert.ToUInt16(32);
					var this3 = this2;
					this1[beatId] = system._CsString.CsString_Impl_.Split_CharArray(a,[this3]);
					break;
				case "Properties":
					this.ParseBeatProperties(c1,beat);
					break;
				case "Rhythm":
					this._rhythmOfBeat[beatId] = c1.GetAttribute("ref");
					break;
				case "Tremolo":
					var _g4 = c1.get_InnerText();
					switch(_g4) {
					case "1/2":
						beat.TremoloSpeed = 8;
						break;
					case "1/4":
						beat.TremoloSpeed = 16;
						break;
					case "1/8":
						beat.TremoloSpeed = 32;
						break;
					default:
					}
					break;
				case "Whammy":
					var this4 = [];
					var whammy = this4;
					var whammyOrigin = new alphaTab.model.BendPoint(0,0);
					var s = c1.GetAttribute("originValue");
					whammyOrigin.Value = this.ToBendValue(parseFloat(s));
					var s1 = c1.GetAttribute("originOffset");
					whammyOrigin.Offset = this.ToBendOffset(parseFloat(s1));
					whammy.push(whammyOrigin);
					var whammyMiddle1 = new alphaTab.model.BendPoint(0,0);
					var s2 = c1.GetAttribute("middleValue");
					whammyMiddle1.Value = this.ToBendValue(parseFloat(s2));
					var s3 = c1.GetAttribute("middleOffset1");
					whammyMiddle1.Offset = this.ToBendOffset(parseFloat(s3));
					whammy.push(whammyMiddle1);
					var whammyMiddle2 = new alphaTab.model.BendPoint(0,0);
					var s4 = c1.GetAttribute("middleValue");
					whammyMiddle2.Value = this.ToBendValue(parseFloat(s4));
					var s5 = c1.GetAttribute("middleOffset2");
					whammyMiddle2.Offset = this.ToBendOffset(parseFloat(s5));
					if(whammyMiddle2.Offset != whammyMiddle1.Offset) {
						whammy.push(whammyMiddle2);
					}
					var whammyDestination = new alphaTab.model.BendPoint(0,0);
					var s6 = c1.GetAttribute("destinationValue");
					whammyDestination.Value = this.ToBendValue(parseFloat(s6));
					var s7 = c1.GetAttribute("destinationOffset");
					whammyDestination.Offset = this.ToBendOffset(parseFloat(s7));
					whammy.push(whammyDestination);
					beat.WhammyBarPoints = whammy;
					break;
				case "XProperties":
					this.ParseBeatXProperties(c1,beat);
					break;
				default:
				}
			}
		}
		this._beatById[beatId] = beat;
	}
	,ParseBeatXProperties: function(node,beat) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "XProperty") {
					var id = c1.GetAttribute("id");
					if(id == "1124204545") {
						var val = alphaTab.platform.Platform.ParseInt(c1.FindChildElement("Int").get_InnerText());
						beat.InvertBeamDirection = val == 1;
					}
				}
			}
		}
	}
	,ParseBeatProperties: function(node,beat) {
		var isWhammy = false;
		var whammyOrigin = null;
		var whammyMiddleValue = null;
		var whammyMiddleOffset1 = null;
		var whammyMiddleOffset2 = null;
		var whammyDestination = null;
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Property") {
					var name = c1.GetAttribute("name");
					switch(name) {
					case "Brush":
						if(c1.FindChildElement("Direction").get_InnerText() == "Up") {
							beat.BrushType = 1;
						} else {
							beat.BrushType = 2;
						}
						break;
					case "PickStroke":
						if(c1.FindChildElement("Direction").get_InnerText() == "Up") {
							beat.PickStroke = 1;
						} else {
							beat.PickStroke = 2;
						}
						break;
					case "Popped":
						if(c1.FindChildElement("Enable") != null) {
							beat.Pop = true;
						}
						break;
					case "Slapped":
						if(c1.FindChildElement("Enable") != null) {
							beat.Slap = true;
						}
						break;
					case "VibratoWTremBar":
						var _g1 = c1.FindChildElement("Strength").get_InnerText();
						switch(_g1) {
						case "Slight":
							beat.Vibrato = 1;
							break;
						case "Wide":
							beat.Vibrato = 2;
							break;
						default:
						}
						break;
					case "WhammyBar":
						isWhammy = true;
						break;
					case "WhammyBarDestinationOffset":
						if(whammyDestination == null) {
							whammyDestination = new alphaTab.model.BendPoint(0,0);
						}
						var s = c1.FindChildElement("Float").get_InnerText();
						whammyDestination.Offset = this.ToBendOffset(parseFloat(s));
						break;
					case "WhammyBarDestinationValue":
						if(whammyDestination == null) {
							whammyDestination = new alphaTab.model.BendPoint(60,0);
						}
						var s1 = c1.FindChildElement("Float").get_InnerText();
						whammyDestination.Value = this.ToBendValue(parseFloat(s1));
						break;
					case "WhammyBarExtend":
						break;
					case "WhammyBarMiddleOffset1":
						var s2 = c1.FindChildElement("Float").get_InnerText();
						whammyMiddleOffset1 = this.ToBendOffset(parseFloat(s2));
						break;
					case "WhammyBarMiddleOffset2":
						var s3 = c1.FindChildElement("Float").get_InnerText();
						whammyMiddleOffset2 = this.ToBendOffset(parseFloat(s3));
						break;
					case "WhammyBarMiddleValue":
						var s4 = c1.FindChildElement("Float").get_InnerText();
						whammyMiddleValue = this.ToBendValue(parseFloat(s4));
						break;
					case "WhammyBarOriginOffset":
						if(whammyOrigin == null) {
							whammyOrigin = new alphaTab.model.BendPoint(0,0);
						}
						var s5 = c1.FindChildElement("Float").get_InnerText();
						whammyOrigin.Offset = this.ToBendOffset(parseFloat(s5));
						break;
					case "WhammyBarOriginValue":
						if(whammyOrigin == null) {
							whammyOrigin = new alphaTab.model.BendPoint(0,0);
						}
						var s6 = c1.FindChildElement("Float").get_InnerText();
						whammyOrigin.Value = this.ToBendValue(parseFloat(s6));
						break;
					default:
					}
				}
			}
		}
		if(isWhammy) {
			if(whammyOrigin == null) {
				whammyOrigin = new alphaTab.model.BendPoint(0,0);
			}
			if(whammyDestination == null) {
				whammyDestination = new alphaTab.model.BendPoint(60,0);
			}
			var this1 = [];
			var whammy = this1;
			whammy.push(whammyOrigin);
			if(whammyMiddleOffset1 != null && whammyMiddleValue != null) {
				whammy.push(new alphaTab.model.BendPoint(whammyMiddleOffset1,whammyMiddleValue));
			}
			if(whammyMiddleOffset2 != null && whammyMiddleValue != null) {
				whammy.push(new alphaTab.model.BendPoint(whammyMiddleOffset2,whammyMiddleValue));
			}
			if(whammyMiddleOffset1 == null && whammyMiddleOffset2 == null && whammyMiddleValue != null) {
				whammy.push(new alphaTab.model.BendPoint(60 / 2 | 0,whammyMiddleValue));
			}
			whammy.push(whammyDestination);
			beat.WhammyBarPoints = whammy;
		}
	}
	,ParseNotes: function(node) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Note") {
					this.ParseNote(c1);
				}
			}
		}
	}
	,ParseNote: function(node) {
		var note = new alphaTab.model.Note();
		var noteId = node.GetAttribute("id");
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "Accent":
					var accentFlags = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					if((accentFlags & 1) != 0) {
						note.IsStaccato = true;
					}
					if((accentFlags & 4) != 0) {
						note.Accentuated = 2;
					}
					if((accentFlags & 8) != 0) {
						note.Accentuated = 1;
					}
					break;
				case "AntiAccent":
					if(c1.get_InnerText().toLowerCase() == "normal") {
						note.IsGhost = true;
					}
					break;
				case "LeftFingering":
					note.IsFingering = true;
					var _g1 = c1.get_InnerText();
					switch(_g1) {
					case "A":
						note.LeftHandFinger = 3;
						break;
					case "C":
						note.LeftHandFinger = 4;
						break;
					case "I":
						note.LeftHandFinger = 1;
						break;
					case "M":
						note.LeftHandFinger = 2;
						break;
					case "P":
						note.LeftHandFinger = 0;
						break;
					default:
					}
					break;
				case "LetRing":
					note.IsLetRing = true;
					break;
				case "Properties":
					this.ParseNoteProperties(c1,note,noteId);
					break;
				case "RightFingering":
					note.IsFingering = true;
					var _g2 = c1.get_InnerText();
					switch(_g2) {
					case "A":
						note.RightHandFinger = 3;
						break;
					case "C":
						note.RightHandFinger = 4;
						break;
					case "I":
						note.RightHandFinger = 1;
						break;
					case "M":
						note.RightHandFinger = 2;
						break;
					case "P":
						note.RightHandFinger = 0;
						break;
					default:
					}
					break;
				case "Tie":
					if(c1.GetAttribute("origin").toLowerCase() == "true") {
						note.IsTieOrigin = true;
					}
					if(c1.GetAttribute("destination").toLowerCase() == "true") {
						note.IsTieDestination = true;
					}
					break;
				case "Trill":
					note.TrillValue = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					note.TrillSpeed = 16;
					break;
				case "Vibrato":
					var _g3 = c1.get_InnerText();
					switch(_g3) {
					case "Slight":
						note.Vibrato = 1;
						break;
					case "Wide":
						note.Vibrato = 2;
						break;
					default:
					}
					break;
				default:
				}
			}
		}
		this._noteById[noteId] = note;
	}
	,ParseNoteProperties: function(node,note,noteId) {
		var isBended = false;
		var bendOrigin = null;
		var bendMiddleValue = null;
		var bendMiddleOffset1 = null;
		var bendMiddleOffset2 = null;
		var bendDestination = null;
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Property") {
					var name = c1.GetAttribute("name");
					switch(name) {
					case "BendDestinationOffset":
						if(bendDestination == null) {
							bendDestination = new alphaTab.model.BendPoint(0,0);
						}
						var s = c1.FindChildElement("Float").get_InnerText();
						bendDestination.Offset = this.ToBendOffset(parseFloat(s));
						break;
					case "BendDestinationValue":
						if(bendDestination == null) {
							bendDestination = new alphaTab.model.BendPoint(60,0);
						}
						var s1 = c1.FindChildElement("Float").get_InnerText();
						bendDestination.Value = this.ToBendValue(parseFloat(s1));
						break;
					case "BendMiddleOffset1":
						var s2 = c1.FindChildElement("Float").get_InnerText();
						bendMiddleOffset1 = this.ToBendOffset(parseFloat(s2));
						break;
					case "BendMiddleOffset2":
						var s3 = c1.FindChildElement("Float").get_InnerText();
						bendMiddleOffset2 = this.ToBendOffset(parseFloat(s3));
						break;
					case "BendMiddleValue":
						var s4 = c1.FindChildElement("Float").get_InnerText();
						bendMiddleValue = this.ToBendValue(parseFloat(s4));
						break;
					case "BendOriginOffset":
						if(bendOrigin == null) {
							bendOrigin = new alphaTab.model.BendPoint(0,0);
						}
						var s5 = c1.FindChildElement("Float").get_InnerText();
						bendOrigin.Offset = this.ToBendOffset(parseFloat(s5));
						break;
					case "BendOriginValue":
						if(bendOrigin == null) {
							bendOrigin = new alphaTab.model.BendPoint(0,0);
						}
						var s6 = c1.FindChildElement("Float").get_InnerText();
						bendOrigin.Value = this.ToBendValue(parseFloat(s6));
						break;
					case "Bended":
						isBended = true;
						break;
					case "Element":
						note.Element = alphaTab.platform.Platform.ParseInt(c1.FindChildElement("Element").get_InnerText());
						break;
					case "Fret":
						note.Fret = alphaTab.platform.Platform.ParseInt(c1.FindChildElement("Fret").get_InnerText());
						break;
					case "HarmonicFret":
						var hfret = c1.FindChildElement("HFret");
						if(hfret != null) {
							var s7 = hfret.get_InnerText();
							note.HarmonicValue = parseFloat(s7);
						}
						break;
					case "HarmonicType":
						var htype = c1.FindChildElement("HType");
						if(htype != null) {
							var _g1 = htype.get_InnerText();
							switch(_g1) {
							case "Artificial":
								note.HarmonicType = 2;
								break;
							case "Feedback":
								note.HarmonicType = 6;
								break;
							case "Natural":
								note.HarmonicType = 1;
								break;
							case "NoHarmonic":
								note.HarmonicType = 0;
								break;
							case "Pinch":
								note.HarmonicType = 3;
								break;
							case "Semi":
								note.HarmonicType = 5;
								break;
							case "Tap":
								note.HarmonicType = 4;
								break;
							default:
							}
						}
						break;
					case "HopoDestination":
						break;
					case "HopoOrigin":
						if(c1.FindChildElement("Enable") != null) {
							note.IsHammerPullOrigin = true;
						}
						break;
					case "Muted":
						if(c1.FindChildElement("Enable") != null) {
							note.IsDead = true;
						}
						break;
					case "Octave":
						note.Octave = alphaTab.platform.Platform.ParseInt(c1.FindChildElement("Number").get_InnerText());
						break;
					case "PalmMuted":
						if(c1.FindChildElement("Enable") != null) {
							note.IsPalmMute = true;
						}
						break;
					case "Slide":
						var slideFlags = alphaTab.platform.Platform.ParseInt(c1.FindChildElement("Flags").get_InnerText());
						if((slideFlags & 1) != 0) {
							note.SlideType = 1;
						}
						if((slideFlags & 2) != 0) {
							note.SlideType = 2;
						}
						if((slideFlags & 4) != 0) {
							note.SlideType = 6;
						}
						if((slideFlags & 8) != 0) {
							note.SlideType = 5;
						}
						if((slideFlags & 16) != 0) {
							note.SlideType = 3;
						}
						if((slideFlags & 32) != 0) {
							note.SlideType = 4;
						}
						break;
					case "String":
						note.String = alphaTab.platform.Platform.ParseInt(c1.FindChildElement("String").get_InnerText()) + 1;
						break;
					case "Tapped":
						this._tappedNotes[noteId] = true;
						break;
					case "Tone":
						note.Tone = alphaTab.platform.Platform.ParseInt(c1.FindChildElement("Step").get_InnerText());
						break;
					case "Variation":
						note.Variation = alphaTab.platform.Platform.ParseInt(c1.FindChildElement("Variation").get_InnerText());
						break;
					default:
					}
				}
			}
		}
		if(isBended) {
			if(bendOrigin == null) {
				bendOrigin = new alphaTab.model.BendPoint(0,0);
			}
			if(bendDestination == null) {
				bendDestination = new alphaTab.model.BendPoint(60,0);
			}
			note.AddBendPoint(bendOrigin);
			if(bendMiddleOffset1 != null && bendMiddleValue != null) {
				note.AddBendPoint(new alphaTab.model.BendPoint(bendMiddleOffset1,bendMiddleValue));
			}
			if(bendMiddleOffset2 != null && bendMiddleValue != null) {
				note.AddBendPoint(new alphaTab.model.BendPoint(bendMiddleOffset2,bendMiddleValue));
			}
			if(bendMiddleOffset1 == null && bendMiddleOffset2 == null && bendMiddleValue != null) {
				note.AddBendPoint(new alphaTab.model.BendPoint(60 / 2 | 0,bendMiddleValue));
			}
			note.AddBendPoint(bendDestination);
		}
	}
	,ToBendValue: function(gpxValue) {
		var converted = gpxValue * 0.04;
		return system.Convert.ToInt32_Single(converted);
	}
	,ToBendOffset: function(gpxOffset) {
		var converted = gpxOffset * 0.6;
		return system.Convert.ToInt32_Single(converted);
	}
	,ParseRhythms: function(node) {
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "Rhythm") {
					this.ParseRhythm(c1);
				}
			}
		}
	}
	,ParseRhythm: function(node) {
		var rhythm = new alphaTab.importer.GpifRhythm();
		var rhythmId = node.GetAttribute("id");
		var c = $iterator(node.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "AugmentationDot":
					rhythm.Dots = alphaTab.platform.Platform.ParseInt(c1.GetAttribute("count"));
					break;
				case "NoteValue":
					var _g1 = c1.get_InnerText();
					switch(_g1) {
					case "128th":
						rhythm.Value = 128;
						break;
					case "16th":
						rhythm.Value = 16;
						break;
					case "256th":
						rhythm.Value = 256;
						break;
					case "32nd":
						rhythm.Value = 32;
						break;
					case "64th":
						rhythm.Value = 64;
						break;
					case "DoubleWhole":
						rhythm.Value = -2;
						break;
					case "Eighth":
						rhythm.Value = 8;
						break;
					case "Half":
						rhythm.Value = 2;
						break;
					case "Long":
						rhythm.Value = -4;
						break;
					case "Quarter":
						rhythm.Value = 4;
						break;
					case "Whole":
						rhythm.Value = 1;
						break;
					default:
					}
					break;
				case "PrimaryTuplet":
					rhythm.TupletNumerator = alphaTab.platform.Platform.ParseInt(c1.GetAttribute("num"));
					rhythm.TupletDenominator = alphaTab.platform.Platform.ParseInt(c1.GetAttribute("den"));
					break;
				default:
				}
			}
		}
		this._rhythmById[rhythmId] = rhythm;
	}
	,BuildModel: function() {
		var i = 0;
		var j = this._masterBars.length;
		while(i < j) {
			var masterBar = this._masterBars[i];
			this.Score.AddMasterBar(masterBar);
			++i;
		}
		var trackId = HxOverrides.iter(this._tracksMapping);
		while(trackId.hasNext()) {
			var trackId1 = trackId.next();
			if(trackId1 == null || trackId1.length == 0) {
				continue;
			}
			var track = this._tracksById[trackId1];
			this.Score.AddTrack(track);
		}
		var masterBarIndex = 0;
		while(masterBarIndex < this._barsOfMasterBar.length) {
			var barIds = this._barsOfMasterBar[masterBarIndex];
			var staffIndex = 0;
			var barIndex = 0;
			var trackIndex = 0;
			while(barIndex < barIds.length && trackIndex < this.Score.Tracks.length) {
				var barId = barIds[barIndex];
				if(barId != "-1") {
					var bar = this._barsById[barId];
					var track1 = this.Score.Tracks[trackIndex];
					var staff = track1.Staves[staffIndex];
					staff.AddBar(bar);
					if(staffIndex == track1.Staves.length - 1) {
						++trackIndex;
						staffIndex = 0;
					} else {
						++staffIndex;
					}
				} else {
					++trackIndex;
				}
				++barIndex;
			}
			++masterBarIndex;
		}
		var this1 = this._barsById;
		var barId1 = $iterator(Object.keys(this1))();
		while(barId1.hasNext()) {
			var barId2 = barId1.next();
			var bar1 = this._barsById[barId2];
			if(this._voicesOfBar.hasOwnProperty(barId2)) {
				var voiceId = HxOverrides.iter(this._voicesOfBar[barId2]);
				while(voiceId.hasNext()) {
					var voiceId1 = voiceId.next();
					if(voiceId1 != "-1") {
						bar1.AddVoice(this._voiceById[voiceId1]);
					} else {
						var voice = new alphaTab.model.Voice();
						bar1.AddVoice(voice);
						var beat = new alphaTab.model.Beat();
						beat.IsEmpty = true;
						beat.Duration = 4;
						voice.AddBeat(beat);
					}
				}
			}
		}
		var this2 = this._beatById;
		var beatId = $iterator(Object.keys(this2))();
		while(beatId.hasNext()) {
			var beatId1 = beatId.next();
			var beat1 = this._beatById[beatId1];
			var rhythmId = this._rhythmOfBeat[beatId1];
			var rhythm = this._rhythmById[rhythmId];
			beat1.Duration = rhythm.Value;
			beat1.Dots = rhythm.Dots;
			beat1.TupletNumerator = rhythm.TupletNumerator;
			beat1.TupletDenominator = rhythm.TupletDenominator;
			if(this._notesOfBeat.hasOwnProperty(beatId1)) {
				var noteId = HxOverrides.iter(this._notesOfBeat[beatId1]);
				while(noteId.hasNext()) {
					var noteId1 = noteId.next();
					if(noteId1 != "-1") {
						beat1.AddNote(this._noteById[noteId1]);
						if(this._tappedNotes.hasOwnProperty(noteId1)) {
							beat1.Tap = true;
						}
					}
				}
			}
		}
		var this3 = this._voiceById;
		var voiceId2 = $iterator(Object.keys(this3))();
		while(voiceId2.hasNext()) {
			var voiceId3 = voiceId2.next();
			var voice1 = this._voiceById[voiceId3];
			if(this._beatsOfVoice.hasOwnProperty(voiceId3)) {
				var beatId2 = HxOverrides.iter(this._beatsOfVoice[voiceId3]);
				while(beatId2.hasNext()) {
					var beatId3 = beatId2.next();
					if(beatId3 != "-1") {
						voice1.AddBeat(this._beatById[beatId3].Clone());
					}
				}
			}
		}
		var this4 = this._masterTrackAutomations;
		var barIndex1 = $iterator(Object.keys(this4))();
		while(barIndex1.hasNext()) {
			var barIndex2 = barIndex1.next();
			var automations = this._masterTrackAutomations[barIndex2];
			var masterBar1 = this.Score.MasterBars[alphaTab.platform.Platform.ParseInt(barIndex2)];
			var i1 = 0;
			var j1 = automations.length;
			while(i1 < j1) {
				var automation = automations[i1];
				if(automation.Type == 0) {
					if(barIndex2 == "0") {
						var tmp = system.Convert.ToInt32_Single(automation.Value);
						this.Score.Tempo = tmp;
						if(automation.Text != null) {
							this.Score.TempoLabel = automation.Text;
						}
					}
					masterBar1.TempoAutomation = automation;
				}
				++i1;
			}
		}
	}
	,__class__: alphaTab.importer.GpifParser
};
alphaTab.importer.GpifRhythm = $hx_exports["alphaTab"]["importer"]["GpifRhythm"] = function() {
	this.Dots = 0;
	this.TupletDenominator = 0;
	this.TupletNumerator = 0;
	this.Value = -4;
	this.TupletDenominator = -1;
	this.TupletNumerator = -1;
	this.Value = 4;
};
alphaTab.importer.GpifRhythm.__name__ = ["alphaTab","importer","GpifRhythm"];
alphaTab.importer.GpifRhythm.prototype = {
	__class__: alphaTab.importer.GpifRhythm
};
alphaTab.importer.GpxFile = $hx_exports["alphaTab"]["importer"]["GpxFile"] = function() {
};
alphaTab.importer.GpxFile.__name__ = ["alphaTab","importer","GpxFile"];
alphaTab.importer.GpxFile.prototype = {
	__class__: alphaTab.importer.GpxFile
};
alphaTab.importer.GpxFileSystem = $hx_exports["alphaTab"]["importer"]["GpxFileSystem"] = function() {
	this.FileFilter = null;
	this.Files = null;
	var this1 = [];
	this.Files = this1;
	this.FileFilter = function(s) {
		return true;
	};
};
alphaTab.importer.GpxFileSystem.__name__ = ["alphaTab","importer","GpxFileSystem"];
alphaTab.importer.GpxFileSystem.prototype = {
	Load: function(s) {
		var src = new alphaTab.io.BitReader(s);
		this.ReadBlock(src);
	}
	,ReadHeader: function(src) {
		return this.GetString(src.ReadBytes(4),0,4);
	}
	,Decompress: function(src,skipHeader) {
		if(skipHeader == null) {
			skipHeader = false;
		}
		var uncompressed = alphaTab.io.ByteBuffer.Empty();
		var buffer;
		var expectedLength = this.GetInteger(src.ReadBytes(4),0);
		try {
			while(uncompressed.get_Length() < expectedLength) {
				var flag = src.ReadBits(1);
				if(flag == 1) {
					var wordSize = src.ReadBits(4);
					var offset = src.ReadBitsReversed(wordSize);
					var size = src.ReadBitsReversed(wordSize);
					var sourcePosition = uncompressed.get_Length() - offset;
					var toRead = Math.min(offset,size);
					buffer = uncompressed.GetBuffer();
					uncompressed.Write(buffer,sourcePosition,toRead);
				} else {
					var size1 = src.ReadBitsReversed(2);
					var i = 0;
					while(i < size1) {
						uncompressed.WriteByte(system.Convert.ToUInt8(src.ReadByte()));
						++i;
					}
				}
			}
		} catch( __e ) {
			if (__e instanceof js._Boot.HaxeError) __e = __e.val;
			if( js.Boot.__instanceof(__e,alphaTab.io.EndOfReaderException) ) {
			} else throw(__e);
		}
		buffer = uncompressed.GetBuffer();
		var resultOffset = skipHeader ? 4 : 0;
		var resultSize = uncompressed.get_Length() - resultOffset;
		var this1 = new Uint8Array(resultSize);
		var result = this1;
		result.set(buffer.subarray(resultOffset,resultOffset+resultSize), 0);
		return result;
	}
	,ReadBlock: function(data) {
		var header = this.ReadHeader(data);
		if(header == "BCFZ") {
			this.ReadUncompressedBlock(this.Decompress(data,true));
		} else if(header == "BCFS") {
			this.ReadUncompressedBlock(data.ReadAll());
		} else {
			throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(""));
		}
	}
	,ReadUncompressedBlock: function(data) {
		var sectorSize = 4096;
		var offset = sectorSize;
		while(offset + 3 < data.length) {
			var entryType = this.GetInteger(data,offset);
			if(entryType == 2) {
				var file = new alphaTab.importer.GpxFile();
				file.FileName = this.GetString(data,offset + 4,127);
				file.FileSize = this.GetInteger(data,offset + 140);
				var storeFile = this.FileFilter == null || this.FileFilter(file.FileName);
				if(storeFile) {
					this.Files.push(file);
				}
				var dataPointerOffset = offset + 148;
				var sector = 0;
				var sectorCount = 0;
				var fileData = storeFile ? alphaTab.io.ByteBuffer.WithCapactiy(file.FileSize) : null;
				while(true) {
					sector = this.GetInteger(data,dataPointerOffset + 4 * sectorCount++);
					if(!(sector != 0)) {
						break;
					}
					offset = sector * sectorSize;
					if(storeFile) {
						fileData.Write(data,offset,sectorSize);
					}
				}
				if(storeFile) {
					var this1 = new Uint8Array(Math.min(file.FileSize,fileData.get_Length()));
					file.Data = this1;
					var raw = fileData.ToArray();
					var dst = file.Data;
					var count = file.Data.length;
					dst.set(raw.subarray(0,0+count), 0);
				}
			}
			offset = offset + sectorSize;
		}
	}
	,GetString: function(data,offset,length) {
		var this1 = "";
		var buf = this1;
		var i = 0;
		while(i < length) {
			var code = data[offset + i] & 255;
			if(code == 0) {
				break;
			}
			buf += String.fromCharCode(code);
			++i;
		}
		return buf;
	}
	,GetInteger: function(data,offset) {
		var this1 = data[offset];
		return data[offset + 3] << 24 | data[offset + 2] << 16 | data[offset + 1] << 8 | this1;
	}
	,__class__: alphaTab.importer.GpxFileSystem
};
alphaTab.importer.GpxImporter = $hx_exports["alphaTab"]["importer"]["GpxImporter"] = function() {
	alphaTab.importer.ScoreImporter.call(this);
};
alphaTab.importer.GpxImporter.__name__ = ["alphaTab","importer","GpxImporter"];
alphaTab.importer.GpxImporter.__super__ = alphaTab.importer.ScoreImporter;
alphaTab.importer.GpxImporter.prototype = $extend(alphaTab.importer.ScoreImporter.prototype,{
	get_Name: function() {
		return "Guitar Pro 6";
	}
	,ReadScore: function() {
		alphaTab.util.Logger.Info(this.get_Name(),"Loading GPX filesystem",null);
		var fileSystem = new alphaTab.importer.GpxFileSystem();
		fileSystem.FileFilter = function(s) {
			return s == "score.gpif";
		};
		fileSystem.Load(this.Data);
		alphaTab.util.Logger.Info(this.get_Name(),"GPX filesystem loaded",null);
		var data = fileSystem.Files[0].Data;
		var xml = alphaTab.platform.Platform.ToString(data);
		fileSystem.Files = null;
		fileSystem = null;
		alphaTab.util.Logger.Info(this.get_Name(),"Start Parsing score.gpif",null);
		var parser = new alphaTab.importer.GpifParser();
		parser.ParseXml(xml);
		alphaTab.util.Logger.Info(this.get_Name(),"score.gpif parsed",null);
		return parser.Score;
	}
	,__class__: alphaTab.importer.GpxImporter
});
alphaTab.importer.MixTableChange = $hx_exports["alphaTab"]["importer"]["MixTableChange"] = function() {
	this.Volume = 0;
	this.Balance = 0;
	this.Instrument = 0;
	this.TempoName = null;
	this.Tempo = 0;
	this.Duration = 0;
	this.Volume = -1;
	this.Balance = -1;
	this.Instrument = -1;
	this.TempoName = null;
	this.Tempo = -1;
	this.Duration = 0;
};
alphaTab.importer.MixTableChange.__name__ = ["alphaTab","importer","MixTableChange"];
alphaTab.importer.MixTableChange.prototype = {
	__class__: alphaTab.importer.MixTableChange
};
alphaTab.importer.MusicXmlImporter = $hx_exports["alphaTab"]["importer"]["MusicXmlImporter"] = function() {
	var this1 = {}
	this._voiceOfStaff = this1;
	alphaTab.importer.ScoreImporter.call(this);
};
alphaTab.importer.MusicXmlImporter.__name__ = ["alphaTab","importer","MusicXmlImporter"];
alphaTab.importer.MusicXmlImporter.__super__ = alphaTab.importer.ScoreImporter;
alphaTab.importer.MusicXmlImporter.prototype = $extend(alphaTab.importer.ScoreImporter.prototype,{
	get_Name: function() {
		return "MusicXML";
	}
	,ReadScore: function() {
		var this1 = {}
		this._trackById = this1;
		var this2 = {}
		this._partGroups = this2;
		var this3 = [];
		this._tieStarts = this3;
		var xml = alphaTab.platform.Platform.ToString(this.Data.ReadAll());
		var dom;
		try {
			dom = new alphaTab.xml.XmlDocument(xml);
		} catch( __e ) {
			if (__e instanceof js._Boot.HaxeError) __e = __e.val;
			if( js.Boot.__instanceof(__e,system.Exception) ) {
				throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(""));
			} else throw(__e);
		}
		this._score = new alphaTab.model.Score();
		this._score.Tempo = 120;
		this.ParseDom(dom);
		if(this.GetSetting("musicXMLMergePartGroups",false)) {
			this.MergePartGroups();
		}
		this._score.Finish();
		this._score.RebuildRepeatGroups();
		return this._score;
	}
	,MergePartGroups: function() {
		var anyMerged = false;
		var this1 = this._partGroups;
		var groupId = $iterator(Object.keys(this1))();
		while(groupId.hasNext()) {
			var groupId1 = groupId.next();
			var tracks = this._partGroups[groupId1];
			if(tracks.length > 1) {
				this.MergeGroup(tracks);
				anyMerged = true;
			}
		}
		if(anyMerged) {
			var i = 0;
			while(i < this._score.Tracks.length) {
				this._score.Tracks[i].Index = i;
				++i;
			}
		}
	}
	,MergeGroup: function(partGroup) {
		var primaryTrack = partGroup[0];
		var i = 1;
		while(i < partGroup.length) {
			var secondaryTrack = partGroup[i];
			var staff = $iterator(secondaryTrack.Staves)();
			while(staff.hasNext()) {
				var staff1 = staff.next();
				primaryTrack.AddStaff(staff1);
			}
			var trackIndex = this._score.Tracks.indexOf(secondaryTrack);
			if(trackIndex != -1) {
				this._score.Tracks.splice(trackIndex,1);
			}
			++i;
		}
	}
	,ParseDom: function(dom) {
		var root = dom.DocumentElement;
		if(root == null) {
			throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(""));
		}
		var _g = root.LocalName;
		switch(_g) {
		case "score-partwise":
			this.ParsePartwise(root);
			break;
		case "score-timewise":
			break;
		default:
			throw new js._Boot.HaxeError(new alphaTab.importer.UnsupportedFormatException().UnsupportedFormatException(""));
		}
	}
	,ParsePartwise: function(element) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "identification":
					this.ParseIdentification(c1);
					break;
				case "movement-title":
					this._score.Title = c1.get_InnerText();
					break;
				case "part":
					this.ParsePart(c1);
					break;
				case "part-list":
					this.ParsePartList(c1);
					break;
				case "work":
					this.ParseWork(c1);
					break;
				default:
				}
			}
		}
	}
	,ParseWork: function(element) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "work-title") {
					this._score.Title = c1.get_InnerText();
				}
			}
		}
	}
	,ParsePart: function(element) {
		var id = element.GetAttribute("id");
		if(!this._trackById.hasOwnProperty(id)) {
			return;
		}
		this._firstVoice = -1;
		var track = this._trackById[id];
		var isFirstMeasure = true;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "measure") {
					if(this.ParseMeasure(c1,track,isFirstMeasure)) {
						isFirstMeasure = false;
					}
				}
			}
		}
	}
	,ParseMeasure: function(element,track,isFirstMeasure) {
		if(element.GetAttribute("implicit") == "yes" && element.GetElementsByTagName("note",false).length == 0) {
			return false;
		}
		var barIndex = 0;
		var barWidth = alphaTab.platform.Platform.ParseInt(element.GetAttribute("width"));
		if(barWidth == -2147483648) {
			barWidth = 0;
		}
		if(isFirstMeasure) {
			this._divisionsPerQuarterNote = 0;
			this._trackFirstMeasureNumber = alphaTab.platform.Platform.ParseInt(element.GetAttribute("number"));
			if(this._trackFirstMeasureNumber == -2147483648) {
				this._trackFirstMeasureNumber = 0;
			}
			barIndex = 0;
		} else {
			barIndex = alphaTab.platform.Platform.ParseInt(element.GetAttribute("number"));
			if(barIndex == -2147483648) {
				return false;
			}
			barIndex = barIndex - this._trackFirstMeasureNumber;
		}
		if(isFirstMeasure) {
			var attributes = element.GetElementsByTagName("attributes",false);
			if(attributes.length > 0) {
				var stavesElements = attributes[0].GetElementsByTagName("staves",false);
				if(stavesElements.length > 0) {
					var staves = alphaTab.platform.Platform.ParseInt(stavesElements[0].get_InnerText());
					track.EnsureStaveCount(staves);
				}
			}
		}
		var size = track.Staves.length;
		var this1 = new Array(size);
		var bars = this1;
		var masterBar = null;
		var b = track.Staves[0].Bars.length;
		while(b <= barIndex) {
			var s = 0;
			while(s < track.Staves.length) {
				var bar = bars[s] = new alphaTab.model.Bar();
				if(track.Staves[s].Bars.length > 0) {
					var previousBar = track.Staves[s].Bars[track.Staves[s].Bars.length - 1];
					bar.Clef = previousBar.Clef;
				}
				masterBar = this.GetOrCreateMasterBar(barIndex);
				track.Staves[s].AddBar(bar);
				var v = 0;
				while(v < this._maxVoices) {
					var emptyVoice = new alphaTab.model.Voice();
					bar.AddVoice(emptyVoice);
					var _tmp = new alphaTab.model.Beat();
					_tmp.IsEmpty = true;
					var emptyBeat = _tmp;
					emptyBeat.ChordId = this._currentChord;
					emptyVoice.AddBeat(emptyBeat);
					++v;
				}
				++s;
			}
			++b;
		}
		var attributesParsed = false;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "attributes":
					if(!attributesParsed) {
						this.ParseAttributes(c1,bars,masterBar,track);
						attributesParsed = true;
					}
					break;
				case "barline":
					this.ParseBarline(c1,masterBar);
					break;
				case "direction":
					this.ParseDirection(c1,masterBar);
					break;
				case "forward":
					this.ParseForward(c1,bars);
					break;
				case "harmony":
					this.ParseHarmony(c1,track);
					break;
				case "note":
					this.ParseNoteBeat(c1,bars);
					break;
				case "sound":
					break;
				default:
				}
			}
		}
		return true;
	}
	,GetOrCreateBeat: function(element,bars,chord) {
		var voiceIndex = 0;
		var voiceNodes = element.GetElementsByTagName("voice",false);
		if(voiceNodes.length > 0) {
			voiceIndex = alphaTab.platform.Platform.ParseInt(voiceNodes[0].get_InnerText()) - 1;
			if(this._firstVoice == -1) {
				this._firstVoice = voiceIndex;
				voiceIndex = 0;
			}
		}
		var previousBeatWasPulled = this._previousBeatWasPulled;
		this._previousBeatWasPulled = false;
		var staffElement = element.GetElementsByTagName("staff",false);
		var staff = 1;
		if(staffElement.length > 0) {
			staff = alphaTab.platform.Platform.ParseInt(staffElement[0].get_InnerText());
			if((this._isBeamContinue || previousBeatWasPulled) && this._previousBeat.Voice.Bar.Staff.Index != staff - 1) {
				staff = this._previousBeat.Voice.Bar.Staff.Index + 1;
				this._previousBeatWasPulled = true;
			}
			var staffId = Std.string(bars[0].Staff.Track.Index) + "-" + Std.string(staff);
			if(!this._voiceOfStaff.hasOwnProperty(staffId)) {
				this._voiceOfStaff[staffId] = voiceIndex;
			}
			voiceIndex = voiceIndex - this._voiceOfStaff[staffId];
		}
		var bar = bars[staff - 1];
		var beat;
		var voice = this.GetOrCreateVoice(bar,voiceIndex);
		if(chord || voice.Beats.length == 1 && voice.IsEmpty) {
			beat = voice.Beats[voice.Beats.length - 1];
		} else {
			beat = new alphaTab.model.Beat();
			beat.IsEmpty = false;
			voice.AddBeat(beat);
		}
		this._isBeamContinue = false;
		this._previousBeat = beat;
		return beat;
	}
	,ParseForward: function(element,bars) {
		var beat = this.GetOrCreateBeat(element,bars,false);
		var durationInDivisions = alphaTab.platform.Platform.ParseInt(element.FindChildElement("duration").get_InnerText());
		var duration = durationInDivisions * 4 / js.Boot.__cast(this._divisionsPerQuarterNote , Float);
		var durations = new Int32Array([64,32,16,8,4,2,1]);
		var d = new system.Int32ArrayIterator(durations);
		while(d.hasNext()) {
			var d1 = d.next();
			if(duration >= d1) {
				beat.Duration = js.Boot.__cast(d1 , Int);
				duration = duration - d1;
				break;
			}
		}
		var tmp = duration > 0;
		beat.IsEmpty = false;
	}
	,ParseStaffDetails: function(element,track) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "staff-lines":
					var staff = $iterator(track.Staves)();
					while(staff.hasNext()) {
						var staff1 = staff.next();
						var this1 = new Int32Array(alphaTab.platform.Platform.ParseInt(c1.get_InnerText()));
						staff1.Tuning = this1;
					}
					break;
				case "staff-tuning":
					this.ParseStaffTuning(c1,track);
					break;
				default:
				}
			}
		}
		var staff2 = $iterator(track.Staves)();
		while(staff2.hasNext()) {
			var staff3 = staff2.next();
			if(this.IsEmptyTuning(staff3.Tuning)) {
				var this2 = new Int32Array(0);
				staff3.Tuning = this2;
			}
		}
	}
	,ParseStaffTuning: function(element,track) {
		var line = alphaTab.platform.Platform.ParseInt(element.GetAttribute("line"));
		var tuningStep = "C";
		var tuningOctave = "";
		var tuningAlter = 0;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "tuning-alter":
					tuningAlter = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "tuning-octave":
					tuningOctave = c1.get_InnerText();
					break;
				case "tuning-step":
					tuningStep = c1.get_InnerText();
					break;
				default:
				}
			}
		}
		var tuning = alphaTab.model.TuningParser.GetTuningForText(tuningStep + tuningOctave) + tuningAlter;
		var staff = $iterator(track.Staves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			staff1.Tuning[staff1.Tuning.length - line] = tuning;
		}
	}
	,ParseHarmony: function(element,track) {
		var rootStep = null;
		var rootAlter = "";
		var kind = null;
		var kindText = null;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "kind":
					kindText = c1.GetAttribute("text");
					kind = c1.get_InnerText();
					break;
				case "root":
					var rootChild = $iterator(c1.ChildNodes)();
					while(rootChild.hasNext()) {
						var rootChild1 = rootChild.next();
						if(rootChild1.NodeType == 1) {
							var _g1 = rootChild1.LocalName;
							switch(_g1) {
							case "root-alter":
								var _g2 = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
								switch(_g2) {
								case -2:
									rootAlter = " bb";
									break;
								case -1:
									rootAlter = " b";
									break;
								case 0:
									rootAlter = "";
									break;
								case 1:
									rootAlter = " #";
									break;
								case 2:
									rootAlter = " ##";
									break;
								default:
								}
								break;
							case "root-step":
								rootStep = rootChild1.get_InnerText();
								break;
							default:
							}
						}
					}
					break;
				default:
				}
			}
		}
		var chord = new alphaTab.model.Chord();
		chord.Name = rootStep + rootAlter;
		this._currentChord = alphaTab.platform.Platform.NewGuid();
		var staff = $iterator(track.Staves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			staff1.Chords[this._currentChord] = chord;
		}
	}
	,ParseBarline: function(element,masterBar) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "ending":
					this.ParseEnding(c1,masterBar);
					break;
				case "repeat":
					this.ParseRepeat(c1,masterBar);
					break;
				default:
				}
			}
		}
	}
	,ParseEnding: function(element,masterBar) {
		var number = alphaTab.platform.Platform.ParseInt(element.GetAttribute("number"));
		if(number > 0) {
			--number;
			masterBar.AlternateEndings = system.Convert.ToUInt8(masterBar.AlternateEndings | system.Convert.ToUInt8(1 << number));
		}
	}
	,ParseRepeat: function(element,masterBar) {
		var direction = element.GetAttribute("direction");
		var times = alphaTab.platform.Platform.ParseInt(element.GetAttribute("times"));
		if(times < 0) {
			times = 2;
		}
		if(direction == "backward") {
			masterBar.RepeatCount = times;
		} else if(direction == "forward") {
			masterBar.IsRepeatStart = true;
		}
	}
	,ParseNoteBeat: function(element,bars) {
		var chord = element.GetElementsByTagName("chord",false).length > 0;
		var beat = this.GetOrCreateBeat(element,bars,chord);
		if(beat.ChordId == null && this._currentChord != null) {
			beat.ChordId = this._currentChord;
			this._currentChord = null;
		}
		if(this._currentDirection != null) {
			beat.Text = this._currentDirection;
			this._currentDirection = null;
		}
		var note = new alphaTab.model.Note();
		beat.Voice.IsEmpty = false;
		beat.IsEmpty = false;
		beat.AddNote(note);
		beat.Dots = 0;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "accidental":
					this.ParseAccidental(c1,note);
					break;
				case "beam":
					var beamMode = c1.get_InnerText();
					if(beamMode == "continue") {
						this._isBeamContinue = true;
					}
					break;
				case "cue":
					break;
				case "dot":
					beat.Dots++;
					break;
				case "duration":
					if(beat.get_IsRest()) {
						var duration = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
						switch(duration) {
						case 1:
							beat.Duration = 1;
							break;
						case 2:
							beat.Duration = 2;
							break;
						case 4:
							beat.Duration = 4;
							break;
						case 8:
							beat.Duration = 8;
							break;
						case 16:
							beat.Duration = 16;
							break;
						case 32:
							beat.Duration = 32;
							break;
						case 64:
							beat.Duration = 64;
							break;
						default:
							beat.Duration = 4;
						}
					}
					break;
				case "grace":
					beat.GraceType = 2;
					beat.Duration = 32;
					break;
				case "instrument":
					break;
				case "lyric":
					this.ParseLyric(c1,beat);
					break;
				case "notations":
					this.ParseNotations(c1,beat,note);
					break;
				case "notehead":
					if(c1.GetAttribute("parentheses") == "yes") {
						note.IsGhost = true;
					}
					break;
				case "pitch":
					this.ParsePitch(c1,note);
					break;
				case "rest":
					beat.IsEmpty = false;
					var this1 = [];
					beat.Notes = this1;
					break;
				case "stem":
					break;
				case "tie":
					this.ParseTied(c1,note);
					break;
				case "time-modification":
					this.ParseTimeModification(c1,beat);
					break;
				case "type":
					beat.Duration = this.GetDuration(c1.get_InnerText());
					if(beat.GraceType != 0 && beat.Duration < 16) {
						beat.Duration = 8;
					}
					break;
				case "unpitched":
					this.ParseUnpitched(c1,note);
					break;
				default:
				}
			}
		}
		if(note.get_IsStringed()) {
			var i = 0;
			while(i < beat.Notes.length) {
				if(beat.Notes[i].String == note.String && beat.Notes[i] != note) {
					beat.RemoveNote(note);
					break;
				}
				++i;
			}
		}
	}
	,GetDuration: function(text) {
		switch(text) {
		case "128th":case "256th":case "64th":
			return 64;
		case "16th":
			return 16;
		case "32nd":
			return 32;
		case "breve":case "long":case "whole":
			return 1;
		case "eighth":
			return 8;
		case "half":
			return 2;
		case "quarter":
			return 4;
		default:
		}
		return 4;
	}
	,ParseLyric: function(element,beat) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "text") {
					var s = beat.Text;
					if(!(s == null || s.length == 0)) {
						beat.Text = beat.Text + (" " + c1.get_InnerText());
					} else {
						beat.Text = c1.get_InnerText();
					}
				}
			}
		}
	}
	,ParseAccidental: function(element,note) {
		var _g = element.get_InnerText();
		switch(_g) {
		case "double-sharp":
			break;
		case "flat":
			note.AccidentalMode = 4;
			break;
		case "flat-flat":
			break;
		case "natural":
			note.AccidentalMode = 2;
			break;
		case "natural-flat":
			break;
		case "natural-sharp":
			break;
		case "quarter-flat":
			break;
		case "quarter-sharp":
			break;
		case "sharp":
			note.AccidentalMode = 3;
			break;
		case "sharp-sharp":
			break;
		case "three-quarters-flat":
			break;
		case "three-quarters-sharp":
			break;
		default:
		}
	}
	,ParseTied: function(element,note) {
		if(note.Beat.GraceType != 0) {
			return;
		}
		if(element.GetAttribute("type") == "start") {
			note.IsTieOrigin = true;
			this._tieStarts.push(note);
		} else if(element.GetAttribute("type") == "stop" && this._tieStarts.length > 0) {
			note.TieDestination = this._tieStarts[0];
			note.IsTieDestination = true;
			if(true) {
				this._tieStarts.splice(0,1);
			}
		}
	}
	,ParseNotations: function(element,beat,note) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "articulations":
					this.ParseArticulations(c1,note);
					break;
				case "dynamics":
					this.ParseDynamics(c1,beat);
					break;
				case "glissando":case "slide":
					if(c1.GetAttribute("type") == "start") {
						note.SlideType = 1;
					}
					break;
				case "ornaments":
					this.ParseOrnaments(c1,note);
					break;
				case "slur":
					if(c1.GetAttribute("type") == "start") {
						beat.IsLegatoOrigin = true;
					}
					break;
				case "technical":
					this.ParseTechnical(c1,note);
					break;
				case "tied":
					this.ParseTied(c1,note);
					break;
				default:
				}
			}
		}
	}
	,ParseOrnaments: function(element,note) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				if(_g == "tremolo") {
					var tremoloSpeed = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					switch(tremoloSpeed) {
					case 1:
						note.Beat.TremoloSpeed = 8;
						break;
					case 2:
						note.Beat.TremoloSpeed = 16;
						break;
					case 3:
						note.Beat.TremoloSpeed = 32;
						break;
					default:
					}
				}
			}
		}
	}
	,ParseTechnical: function(element,note) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "down-bow":
					note.Beat.PickStroke = 2;
					break;
				case "fret":
					note.Fret = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "string":
					note.String = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					if(note.String != -2147483648) {
						note.String = note.Beat.Voice.Bar.Staff.Tuning.length - note.String + 1;
					}
					break;
				case "up-bow":
					note.Beat.PickStroke = 1;
					break;
				default:
				}
			}
		}
		if(note.String == -2147483648 || note.Fret == -2147483648) {
			note.String = -1;
			note.Fret = -1;
		}
	}
	,ParseArticulations: function(element,note) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			var _g = c1.LocalName;
			switch(_g) {
			case "accent":
				note.Accentuated = 1;
				break;
			case "detached-legato":case "staccato":
				note.IsStaccato = true;
				break;
			case "strong-accent":
				note.Accentuated = 2;
				break;
			default:
			}
		}
	}
	,ParseDynamics: function(element,beat) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "f":
					beat.Dynamic = 5;
					break;
				case "ff":
					beat.Dynamic = 6;
					break;
				case "fff":
					beat.Dynamic = 7;
					break;
				case "mf":
					beat.Dynamic = 4;
					break;
				case "mp":
					beat.Dynamic = 3;
					break;
				case "p":
					beat.Dynamic = 2;
					break;
				case "pp":
					beat.Dynamic = 1;
					break;
				case "ppp":
					beat.Dynamic = 0;
					break;
				default:
				}
			}
		}
	}
	,ParseTimeModification: function(element,beat) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "actual-notes":
					beat.TupletNumerator = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "normal-notes":
					beat.TupletDenominator = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				default:
				}
			}
		}
	}
	,ParseUnpitched: function(element,note) {
		var step = null;
		var semitones = 0;
		var octave = 0;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "display-alter":
					semitones = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "display-octave":
					octave = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "display-step":
					step = c1.get_InnerText();
					break;
				default:
				}
			}
		}
		var value = octave * 12 + alphaTab.model.TuningParser.GetToneForText(step) + semitones;
		note.Octave = value / 12 | 0;
		note.Tone = value - note.Octave * 12;
	}
	,ParsePitch: function(element,note) {
		var step = null;
		var semitones = 0;
		var octave = 0;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "alter":
					var s = c1.get_InnerText();
					semitones = parseFloat(s);
					var this1 = semitones;
					if(isNaN(this1)) {
						semitones = 0;
					}
					break;
				case "octave":
					octave = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "step":
					step = c1.get_InnerText();
					break;
				default:
				}
			}
		}
		var value = octave * 12 + alphaTab.model.TuningParser.GetToneForText(step) + system.Convert.ToInt32_Single(semitones);
		note.Octave = value / 12 | 0;
		note.Tone = value - note.Octave * 12;
	}
	,GetOrCreateVoice: function(bar,index) {
		if(index < bar.Voices.length) {
			return bar.Voices[index];
		}
		var i = bar.Voices.length;
		while(i <= index) {
			bar.AddVoice(new alphaTab.model.Voice());
			++i;
		}
		this._maxVoices = Math.max(this._maxVoices,bar.Voices.length);
		return bar.Voices[index];
	}
	,ParseDirection: function(element,masterBar) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "direction-type":
					var directionType = c1.FirstElement;
					var _g1 = directionType.LocalName;
					switch(_g1) {
					case "metronome":
						this.ParseMetronome(c1.FirstElement,masterBar);
						break;
					case "words":
						this._currentDirection = directionType.get_InnerText();
						break;
					default:
					}
					break;
				case "sound":
					var tempo = c1.GetAttribute("tempo");
					if(!(tempo == null || tempo.length == 0)) {
						var tempoAutomation = new alphaTab.model.Automation();
						tempoAutomation.IsLinear = true;
						tempoAutomation.Type = 0;
						var this1 = alphaTab.platform.Platform.ParseInt(tempo);
						tempoAutomation.Value = this1;
						masterBar.TempoAutomation = tempoAutomation;
					}
					break;
				default:
				}
			}
		}
	}
	,ParseMetronome: function(element,masterBar) {
		var unit = 4;
		var perMinute = 120;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "beat-unit":
					unit = this.GetDuration(c1.get_InnerText());
					break;
				case "per-minute":
					perMinute = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				default:
				}
			}
		}
		var tempoAutomation = masterBar.TempoAutomation = new alphaTab.model.Automation();
		tempoAutomation.Type = 0;
		var this1 = perMinute * (unit / 4 | 0);
		tempoAutomation.Value = this1;
	}
	,ParseAttributes: function(element,bars,masterBar,track) {
		var number;
		var hasTime = false;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "clef":
					number = alphaTab.platform.Platform.ParseInt(c1.GetAttribute("number"));
					if(number == -2147483648) {
						number = 1;
					}
					this.ParseClef(c1,bars[number - 1]);
					break;
				case "divisions":
					this._divisionsPerQuarterNote = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "key":
					this.ParseKey(c1,masterBar);
					break;
				case "staff-details":
					this.ParseStaffDetails(c1,track);
					break;
				case "time":
					this.ParseTime(c1,masterBar);
					hasTime = true;
					break;
				case "transpose":
					this.ParseTranspose(c1,track);
					break;
				default:
				}
			}
		}
		if(!hasTime) {
			masterBar.TimeSignatureCommon = true;
		}
	}
	,ParseTranspose: function(element,track) {
		var semitones = 0;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "chromatic":
					semitones = semitones + alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "octave-change":
					semitones = semitones + alphaTab.platform.Platform.ParseInt(c1.get_InnerText()) * 12;
					break;
				default:
				}
			}
		}
		var staff = $iterator(track.Staves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			staff1.TranspositionPitch = semitones;
		}
	}
	,ParseClef: function(element,bar) {
		var sign = null;
		var line = 0;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "clef-octave-change":
					var _g1 = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					switch(_g1) {
					case -2:
						bar.ClefOttavia = 4;
						break;
					case -1:
						bar.ClefOttavia = 3;
						break;
					case 1:
						bar.ClefOttavia = 1;
						break;
					case 2:
						bar.ClefOttavia = 4;
						break;
					default:
					}
					break;
				case "line":
					line = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "sign":
					sign = c1.get_InnerText().toLowerCase();
					break;
				default:
				}
			}
		}
		switch(sign) {
		case "C":
			if(line == 3) {
				bar.Clef = 1;
			} else {
				bar.Clef = 2;
			}
			break;
		case "F":
			bar.Clef = 3;
			break;
		case "G":
			bar.Clef = 4;
			break;
		case "percussion":
			bar.Clef = 0;
			bar.Staff.StaffKind = 2;
			break;
		case "tab":
			bar.Clef = 4;
			bar.Staff.StaffKind = 0;
			break;
		default:
			bar.Clef = 4;
		}
	}
	,ParseTime: function(element,masterBar) {
		if(element.GetAttribute("symbol") == "common") {
			masterBar.TimeSignatureCommon = true;
		}
		var beatsParsed = false;
		var beatTypeParsed = false;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var v = c1.get_InnerText();
				var _g = c1.LocalName;
				switch(_g) {
				case "beat-type":
					if(!beatTypeParsed) {
						if(!(v.indexOf("+") != -1)) {
							masterBar.TimeSignatureDenominator = alphaTab.platform.Platform.ParseInt(v);
						} else {
							masterBar.TimeSignatureDenominator = 4;
						}
						beatTypeParsed = true;
					}
					break;
				case "beats":
					if(!beatsParsed) {
						if(!(v.indexOf("+") != -1)) {
							masterBar.TimeSignatureNumerator = alphaTab.platform.Platform.ParseInt(v);
						} else {
							masterBar.TimeSignatureNumerator = 4;
						}
						beatsParsed = true;
					}
					break;
				default:
				}
			}
		}
	}
	,ParseKey: function(element,masterBar) {
		var fifths = -2147483648;
		var keyStep = -2147483648;
		var keyAlter = -2147483648;
		var mode = null;
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "fifths":
					fifths = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "key-alter":
					keyAlter = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "key-step":
					keyStep = alphaTab.platform.Platform.ParseInt(c1.get_InnerText());
					break;
				case "mode":
					mode = c1.get_InnerText();
					break;
				default:
				}
			}
		}
		if(-7 <= fifths && fifths <= 7) {
			masterBar.KeySignature = fifths;
		} else {
			masterBar.KeySignature = 0;
		}
		if(mode == "minor") {
			masterBar.KeySignatureType = 1;
		} else {
			masterBar.KeySignatureType = 0;
		}
	}
	,GetOrCreateMasterBar: function(index) {
		if(index < this._score.MasterBars.length) {
			return this._score.MasterBars[index];
		}
		var i = this._score.MasterBars.length;
		while(i <= index) {
			var mb = new alphaTab.model.MasterBar();
			if(this._score.MasterBars.length > 0) {
				var prev = this._score.MasterBars[this._score.MasterBars.length - 1];
				mb.TimeSignatureDenominator = prev.TimeSignatureDenominator;
				mb.TimeSignatureNumerator = prev.TimeSignatureNumerator;
				mb.KeySignature = prev.KeySignature;
				mb.KeySignatureType = prev.KeySignatureType;
			}
			this._score.AddMasterBar(mb);
			++i;
		}
		return this._score.MasterBars[index];
	}
	,ParseIdentification: function(element) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "creator":
					if(c1.GetAttribute("type") == "composer") {
						this._score.Music = c1.get_InnerText();
					}
					break;
				case "rights":
					var s = this._score.Copyright;
					if(!(s == null || s.length == 0)) {
						this._score.Copyright = this._score.Copyright + "\n";
					}
					var tmp = this._score.Copyright + c1.get_InnerText();
					this._score.Copyright = tmp;
					break;
				default:
				}
			}
		}
	}
	,ParsePartList: function(element) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "part-group":
					this.ParsePartGroup(c1);
					break;
				case "score-part":
					this.ParseScorePart(c1);
					break;
				default:
				}
			}
		}
	}
	,ParsePartGroup: function(element) {
		var type = element.GetAttribute("type");
		switch(type) {
		case "start":
			this._currentPartGroup = element.GetAttribute("number");
			var this1 = this._partGroups;
			var index = this._currentPartGroup;
			var this2 = [];
			this1[index] = this2;
			break;
		case "stop":
			this._currentPartGroup = null;
			break;
		default:
		}
	}
	,ParseScorePart: function(element) {
		var id = element.GetAttribute("id");
		var track = new alphaTab.model.Track(1);
		var staff = track.Staves[0];
		staff.StaffKind = 1;
		this._trackById[id] = track;
		this._score.AddTrack(track);
		if(this._currentPartGroup != null) {
			this._partGroups[this._currentPartGroup].push(track);
		}
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "midi-instrument":
					this.ParseMidiInstrument(c1,track);
					break;
				case "part-abbreviation":
					track.ShortName = c1.get_InnerText();
					break;
				case "part-name":
					track.Name = c1.get_InnerText();
					break;
				default:
				}
			}
		}
		if(this.IsEmptyTuning(track.Staves[0].Tuning)) {
			var tmp = track.Staves[0];
			var this1 = new Int32Array(0);
			tmp.Tuning = this1;
		}
	}
	,IsEmptyTuning: function(tuning) {
		if(tuning == null) {
			return true;
		}
		var i = 0;
		while(i < tuning.length) {
			if(tuning[i] != 0) {
				return false;
			}
			++i;
		}
		return true;
	}
	,ParseMidiInstrument: function(element,track) {
		var c = $iterator(element.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1.NodeType == 1) {
				var _g = c1.LocalName;
				switch(_g) {
				case "midi-channel":
					var tmp = c1.get_InnerText();
					track.PlaybackInfo.PrimaryChannel = alphaTab.platform.Platform.ParseInt(tmp);
					break;
				case "midi-program":
					var tmp1 = c1.get_InnerText();
					track.PlaybackInfo.Program = alphaTab.platform.Platform.ParseInt(tmp1);
					break;
				case "midi-volume":
					var tmp2 = c1.get_InnerText();
					track.PlaybackInfo.Volume = alphaTab.platform.Platform.ParseInt(tmp2);
					break;
				default:
				}
			}
		}
	}
	,__class__: alphaTab.importer.MusicXmlImporter
});
alphaTab.importer.NoCompatibleReaderFoundException = $hx_exports["alphaTab"]["importer"]["NoCompatibleReaderFoundException"] = function() {
	alphaTab.AlphaTabException.call(this);
};
alphaTab.importer.NoCompatibleReaderFoundException.__name__ = ["alphaTab","importer","NoCompatibleReaderFoundException"];
alphaTab.importer.NoCompatibleReaderFoundException.__super__ = alphaTab.AlphaTabException;
alphaTab.importer.NoCompatibleReaderFoundException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	NoCompatibleReaderFoundException: function() {
		this.AlphaTabException("");
		return this;
	}
	,__class__: alphaTab.importer.NoCompatibleReaderFoundException
});
alphaTab.importer.ScoreLoader = $hx_exports["alphaTab"]["importer"]["ScoreLoader"] = function() {
};
alphaTab.importer.ScoreLoader.__name__ = ["alphaTab","importer","ScoreLoader"];
alphaTab.importer.ScoreLoader.LoadScoreAsync = function(path,success,error,importSettings) {
	var xhr = new XMLHttpRequest();
	xhr.open("GET",path,true,null,null);
	xhr.responseType = "arraybuffer";
	xhr.onreadystatechange = function() {
		if(xhr.readyState == 4) {
			if(xhr.status == 200 || xhr.status == 0 && xhr.response) {
				try {
					var buffer = xhr.response;
					var reader = new Uint8Array(buffer);
					var score = alphaTab.importer.ScoreLoader.LoadScoreFromBytes(reader,importSettings);
					success(score);
				} catch( exception ) {
					if (exception instanceof js._Boot.HaxeError) exception = exception.val;
					if( js.Boot.__instanceof(exception,system.Exception) ) {
						error(exception);
					} else throw(exception);
				}
			} else if(xhr.status == 0) {
				var tmp = new alphaTab.importer.FileLoadException().FileLoadException("You are offline!!\n Please Check Your Network.",xhr);
				error(tmp);
			} else if(xhr.status == 404) {
				var tmp1 = new alphaTab.importer.FileLoadException().FileLoadException("Requested URL not found.",xhr);
				error(tmp1);
			} else if(xhr.status == 500) {
				var tmp2 = new alphaTab.importer.FileLoadException().FileLoadException("Internel Server Error.",xhr);
				error(tmp2);
			} else if(xhr.statusText == "parsererror") {
				var tmp3 = new alphaTab.importer.FileLoadException().FileLoadException("Error.\nParsing JSON Request failed.",xhr);
				error(tmp3);
			} else if(xhr.statusText == "timeout") {
				var tmp4 = new alphaTab.importer.FileLoadException().FileLoadException("Request Time out.",xhr);
				error(tmp4);
			} else {
				var tmp5 = new alphaTab.importer.FileLoadException().FileLoadException("Unknow Error: " + xhr.responseText,xhr);
				error(tmp5);
			}
		}
	};
	if(xhr.responseType != "arraybuffer") {
		var vbArr = VbAjaxLoader("GET",path);
		var fileContents = vbArr.toArray();
		var this1 = "";
		var data = this1;
		var i = 0;
		while(i < fileContents.length - 1) {
			data += Std.string(fileContents[i]);
			++i;
		}
		var reader1 = alphaTab.importer.ScoreLoader.GetBytesFromString(data);
		var score1 = alphaTab.importer.ScoreLoader.LoadScoreFromBytes(reader1,importSettings);
		success(score1);
	}
	xhr.send();
};
alphaTab.importer.ScoreLoader.GetBytesFromString = function(s) {
	var this1 = new Uint8Array(s.length);
	var b = this1;
	var i = 0;
	while(i < s.length) {
		var this2 = system.Convert.ToUInt16(HxOverrides.cca(s,i));
		b[i] = system.Convert.ToUInt8(this2);
		++i;
	}
	return b;
};
alphaTab.importer.ScoreLoader.LoadScoreFromBytes = function(data,importSettings) {
	var importers = alphaTab.importer.ScoreImporter.BuildImporters();
	alphaTab.util.Logger.Info("ScoreLoader","Loading score from " + data.length + " bytes using " + importers.length + " importers",null);
	var score = null;
	var bb = alphaTab.io.ByteBuffer.FromBuffer(data);
	var importer = HxOverrides.iter(importers);
	while(importer.hasNext()) {
		var importer1 = importer.next();
		bb.Reset();
		try {
			alphaTab.util.Logger.Info("ScoreLoader","Importing using importer " + importer1.get_Name(),null);
			importer1.Init(bb,importSettings);
			score = importer1.ReadScore();
			alphaTab.util.Logger.Info("ScoreLoader","Score imported using " + importer1.get_Name(),null);
			break;
		} catch( $e0 ) {
			if ($e0 instanceof js._Boot.HaxeError) $e0 = $e0.val;
			if( js.Boot.__instanceof($e0,alphaTab.importer.UnsupportedFormatException) ) {
				var __e = $e0;
				alphaTab.util.Logger.Info("ScoreLoader",importer1.get_Name() + " does not support the file",null);
			} else if( js.Boot.__instanceof($e0,system.Exception) ) {
				var e = $e0;
				alphaTab.util.Logger.Info("ScoreLoader","Score import failed due to unexpected error: " + Std.string(e),null);
				throw new js._Boot.HaxeError(e);
			} else throw($e0);
		}
	}
	if(score != null) {
		return score;
	}
	alphaTab.util.Logger.Error("ScoreLoader","No compatible importer found for file",null);
	throw new js._Boot.HaxeError(new alphaTab.importer.NoCompatibleReaderFoundException().NoCompatibleReaderFoundException());
};
alphaTab.importer.ScoreLoader.prototype = {
	__class__: alphaTab.importer.ScoreLoader
};
alphaTab.importer.UnsupportedFormatException = $hx_exports["alphaTab"]["importer"]["UnsupportedFormatException"] = function() {
	alphaTab.AlphaTabException.call(this);
};
alphaTab.importer.UnsupportedFormatException.__name__ = ["alphaTab","importer","UnsupportedFormatException"];
alphaTab.importer.UnsupportedFormatException.__super__ = alphaTab.AlphaTabException;
alphaTab.importer.UnsupportedFormatException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	UnsupportedFormatException: function(message) {
		if(message == null) {
			message = "";
		}
		this.AlphaTabException(message);
		return this;
	}
	,__class__: alphaTab.importer.UnsupportedFormatException
});
alphaTab.io = {};
alphaTab.io.BitReader = $hx_exports["alphaTab"]["io"]["BitReader"] = function(source) {
	this._currentByte = 0;
	this._position = 0;
	this._source = null;
	this._source = source;
	this._position = 8;
};
alphaTab.io.BitReader.__name__ = ["alphaTab","io","BitReader"];
alphaTab.io.BitReader.prototype = {
	ReadByte: function() {
		return this.ReadBits(8);
	}
	,ReadBytes: function(count) {
		var this1 = new Uint8Array(count);
		var bytes = this1;
		var i = 0;
		while(i < count) {
			bytes[i] = system.Convert.ToUInt8(this.ReadByte());
			++i;
		}
		return bytes;
	}
	,ReadBits: function(count) {
		var bits = 0;
		var i = count - 1;
		while(i >= 0) {
			bits = bits | this.ReadBit() << i;
			--i;
		}
		return bits;
	}
	,ReadBitsReversed: function(count) {
		var bits = 0;
		var i = 0;
		while(i < count) {
			bits = bits | this.ReadBit() << i;
			++i;
		}
		return bits;
	}
	,ReadBit: function() {
		if(this._position >= 8) {
			this._currentByte = this._source.ReadByte();
			if(this._currentByte == -1) {
				throw new js._Boot.HaxeError(new alphaTab.io.EndOfReaderException().EndOfReaderException());
			}
			this._position = 0;
		}
		var value = this._currentByte >> 8 - this._position - 1 & 1;
		this._position++;
		return value;
	}
	,ReadAll: function() {
		var all = alphaTab.io.ByteBuffer.Empty();
		try {
			while(true) all.WriteByte(system.Convert.ToUInt8(this.ReadByte()));
		} catch( __e ) {
			if (__e instanceof js._Boot.HaxeError) __e = __e.val;
			if( js.Boot.__instanceof(__e,alphaTab.io.EndOfReaderException) ) {
			} else throw(__e);
		}
		return all.ToArray();
	}
	,__class__: alphaTab.io.BitReader
};
alphaTab.io.IReadable = $hx_exports["alphaTab"]["io"]["IReadable"] = function() { };
alphaTab.io.IReadable.__name__ = ["alphaTab","io","IReadable"];
alphaTab.io.IReadable.prototype = {
	__class__: alphaTab.io.IReadable
};
alphaTab.io.IWriteable = $hx_exports["alphaTab"]["io"]["IWriteable"] = function() { };
alphaTab.io.IWriteable.__name__ = ["alphaTab","io","IWriteable"];
alphaTab.io.IWriteable.prototype = {
	__class__: alphaTab.io.IWriteable
};
alphaTab.io.ByteBuffer = $hx_exports["alphaTab"]["io"]["ByteBuffer"] = function() {
	this._buffer = null;
	this._position = 0;
	this._length = 0;
	this._capacity = 0;
};
alphaTab.io.ByteBuffer.__name__ = ["alphaTab","io","ByteBuffer"];
alphaTab.io.ByteBuffer.__interfaces__ = [alphaTab.io.IReadable,alphaTab.io.IWriteable];
alphaTab.io.ByteBuffer.Empty = function() {
	return alphaTab.io.ByteBuffer.WithCapactiy(0);
};
alphaTab.io.ByteBuffer.WithCapactiy = function(capacity) {
	var buffer = new alphaTab.io.ByteBuffer();
	var this1 = new Uint8Array(capacity);
	buffer._buffer = this1;
	buffer._capacity = capacity;
	return buffer;
};
alphaTab.io.ByteBuffer.FromBuffer = function(data) {
	var buffer = new alphaTab.io.ByteBuffer();
	buffer._buffer = data;
	buffer._capacity = buffer._length = data.length;
	return buffer;
};
alphaTab.io.ByteBuffer.prototype = {
	get_Length: function() {
		return this._length;
	}
	,get_Position: function() {
		return this._position;
	}
	,set_Position: function(value) {
		this._position = value;
		return this.get_Position();
	}
	,GetBuffer: function() {
		return this._buffer;
	}
	,Reset: function() {
		this._position = 0;
	}
	,Skip: function(offset) {
		this._position = this._position + offset;
	}
	,SetCapacity: function(value) {
		if(value != this._capacity) {
			if(value > 0) {
				var this1 = new Uint8Array(value);
				var newBuffer = this1;
				if(this._length > 0) {
					var src = this._buffer;
					var count = this._length;
					newBuffer.set(src.subarray(0,0+count), 0);
				}
				this._buffer = newBuffer;
			} else {
				this._buffer = null;
			}
			this._capacity = value;
		}
	}
	,ReadByte: function() {
		var n = this._length - this._position;
		if(n <= 0) {
			return -1;
		}
		var this1 = this._buffer[this._position++];
		return this1;
	}
	,Read: function(buffer,offset,count) {
		var n = this._length - this._position;
		if(n > count) {
			n = count;
		}
		if(n <= 0) {
			return 0;
		}
		if(n <= 8) {
			var byteCount = n;
			while(true) {
				--byteCount;
				if(!(byteCount >= 0)) {
					break;
				}
				buffer[offset + byteCount] = this._buffer[this._position + byteCount];
			}
		} else {
			var src = this._buffer;
			var srcOffset = this._position;
			buffer.set(src.subarray(srcOffset,srcOffset+n), offset);
		}
		this._position = this._position + n;
		return n;
	}
	,WriteByte: function(value) {
		var this1 = new Uint8Array(1);
		var buffer = this1;
		buffer[0] = value;
		this.Write(buffer,0,1);
	}
	,Write: function(buffer,offset,count) {
		var i = this._position + count;
		if(i > this._length) {
			if(i > this._capacity) {
				this.EnsureCapacity(i);
			}
			this._length = i;
		}
		if(count <= 8 && buffer != this._buffer) {
			var byteCount = count;
			while(true) {
				--byteCount;
				if(!(byteCount >= 0)) {
					break;
				}
				this._buffer[this._position + byteCount] = buffer[offset + byteCount];
			}
		} else {
			var dst = this._buffer;
			var dstOffset = this._position;
			var count1 = Math.min(count,buffer.length - offset);
			dst.set(buffer.subarray(offset,offset+count1), dstOffset);
		}
		this._position = i;
	}
	,EnsureCapacity: function(value) {
		if(value > this._capacity) {
			var newCapacity = value;
			if(newCapacity < 256) {
				newCapacity = 256;
			}
			if(newCapacity < this._capacity * 2) {
				newCapacity = this._capacity * 2;
			}
			this.SetCapacity(newCapacity);
		}
	}
	,ReadAll: function() {
		return this.ToArray();
	}
	,ToArray: function() {
		var this1 = new Uint8Array(this._length);
		var copy = this1;
		var src = this._buffer;
		var count = this._length;
		copy.set(src.subarray(0,0+count), 0);
		return copy;
	}
	,__class__: alphaTab.io.ByteBuffer
};
alphaTab.io.EndOfReaderException = $hx_exports["alphaTab"]["io"]["EndOfReaderException"] = function() {
	alphaTab.AlphaTabException.call(this);
};
alphaTab.io.EndOfReaderException.__name__ = ["alphaTab","io","EndOfReaderException"];
alphaTab.io.EndOfReaderException.__super__ = alphaTab.AlphaTabException;
alphaTab.io.EndOfReaderException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	EndOfReaderException: function() {
		this.AlphaTabException("");
		return this;
	}
	,__class__: alphaTab.io.EndOfReaderException
});
alphaTab.io.IOHelper = $hx_exports["alphaTab"]["io"]["IOHelper"] = function() { };
alphaTab.io.IOHelper.__name__ = ["alphaTab","io","IOHelper"];
alphaTab.io.IOHelper.ReadInt32LE = function(input) {
	var ch1 = input.ReadByte();
	var ch2 = input.ReadByte();
	var ch3 = input.ReadByte();
	var ch4 = input.ReadByte();
	return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
};
alphaTab.io.IOHelper.ReadUInt16LE = function(input) {
	var ch1 = input.ReadByte();
	var ch2 = input.ReadByte();
	return alphaTab.platform.Platform.ToUInt16(ch2 << 8 | ch1);
};
alphaTab.io.IOHelper.ReadInt16LE = function(input) {
	var ch1 = input.ReadByte();
	var ch2 = input.ReadByte();
	return alphaTab.platform.Platform.ToInt16(ch2 << 8 | ch1);
};
alphaTab.io.IOHelper.ReadInt32BE = function(input) {
	var ch1 = input.ReadByte();
	var ch2 = input.ReadByte();
	var ch3 = input.ReadByte();
	var ch4 = input.ReadByte();
	return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
};
alphaTab.io.IOHelper.ReadUInt16BE = function(input) {
	var ch1 = input.ReadByte();
	var ch2 = input.ReadByte();
	return alphaTab.platform.Platform.ToUInt16(ch1 << 8 | ch2);
};
alphaTab.io.IOHelper.ReadInt16BE = function(input) {
	var ch1 = input.ReadByte();
	var ch2 = input.ReadByte();
	return alphaTab.platform.Platform.ToInt16(ch1 << 8 | ch2);
};
alphaTab.io.IOHelper.ReadByteArray = function(input,length) {
	var this1 = new Uint8Array(length);
	var v = this1;
	input.Read(v,0,length);
	return v;
};
alphaTab.io.IOHelper.Read8BitChars = function(input,length) {
	var this1 = new Uint8Array(length);
	var b = this1;
	input.Read(b,0,b.length);
	return alphaTab.platform.Platform.ToString(b);
};
alphaTab.io.IOHelper.Read8BitString = function(input) {
	var this1 = "";
	var s = this1;
	var c = input.ReadByte();
	while(c != 0) {
		s += String.fromCharCode(c);
		c = input.ReadByte();
	}
	return s;
};
alphaTab.io.IOHelper.Read8BitStringLength = function(input,length) {
	var this1 = "";
	var s = this1;
	var z = -1;
	var i = 0;
	while(i < length) {
		var c = input.ReadByte();
		if(c == 0 && z == -1) {
			z = i;
		}
		s += String.fromCharCode(c);
		++i;
	}
	var t = s;
	if(z >= 0) {
		return HxOverrides.substr(t,0,z);
	}
	return t;
};
alphaTab.io.IOHelper.ReadSInt8 = function(input) {
	var v = input.ReadByte();
	return ((v & 255) >> 7) * -256 + (v & 255);
};
alphaTab.io.IOHelper.ReadUInt32 = function(input) {
	var ch1 = input.ReadByte();
	var ch2 = input.ReadByte();
	var ch3 = input.ReadByte();
	var ch4 = input.ReadByte();
	return alphaTab.platform.Platform.ToUInt32(ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4);
};
alphaTab.io.IOHelper.ReadInt24 = function(input,index) {
	var i = input[index] | input[index + 1] << 8 | input[index + 2] << 16;
	if((i & 8388608) == 8388608) {
		i = i | -16777216;
	}
	return i;
};
alphaTab.io.IOHelper.ReadInt16 = function(input,index) {
	return alphaTab.platform.Platform.ToInt16(input[index] | input[index + 1] << 8);
};
haxe.io = {};
haxe.io.Input = function() { };
haxe.io.Input.__name__ = ["haxe","io","Input"];
haxe.io.Input.prototype = {
	readByte: function() {
		throw new js._Boot.HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js._Boot.HaxeError) eof = eof.val;
			if( js.Boot.__instanceof(eof,haxe.io.Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js._Boot.HaxeError(haxe.io.Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe.io.Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js._Boot.HaxeError(haxe.io.Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len) {
		var b = new haxe.io.Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe.io.Input
};
alphaTab.io.ReadableInput = $hx_exports["alphaTab"]["io"]["ReadableInput"] = function(readable) {
	this._readable = null;
	this._readable = readable;
};
alphaTab.io.ReadableInput.__name__ = ["alphaTab","io","ReadableInput"];
alphaTab.io.ReadableInput.__super__ = haxe.io.Input;
alphaTab.io.ReadableInput.prototype = $extend(haxe.io.Input.prototype,{
	readByte: function() {
		return this._readable.ReadByte();
	}
	,readBytes: function(s,pos,len) {
		var data = new Uint8Array(s.b.bufferValue);
		return this._readable.Read(data,pos,len);
	}
	,__class__: alphaTab.io.ReadableInput
});
alphaTab.io.ZipEntry = $hx_exports["alphaTab"]["io"]["ZipEntry"] = function() {
};
alphaTab.io.ZipEntry.__name__ = ["alphaTab","io","ZipEntry"];
alphaTab.io.ZipEntry.prototype = {
	__class__: alphaTab.io.ZipEntry
};
alphaTab.io.ZipFile = $hx_exports["alphaTab"]["io"]["ZipFile"] = function() {
	this.FileFilter = null;
	this.Entries = null;
	var this1 = [];
	this.Entries = this1;
	this.FileFilter = function(s) {
		return true;
	};
};
alphaTab.io.ZipFile.__name__ = ["alphaTab","io","ZipFile"];
alphaTab.io.ZipFile.prototype = {
	Load: function(s) {
		var haxeInput = new alphaTab.io.ReadableInput(s);
		var reader = new haxe.zip.Reader(haxeInput);
		var entries = reader.read();
		var _g_head = entries.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var entry = val;
			var fullName = entry.fileName;
			if(this.FileFilter == null || this.FileFilter(fullName)) {
				var i = fullName.lastIndexOf("/");
				var name = i >= 0 ? HxOverrides.substr(fullName,i + 1,null) : fullName;
				var data = entry.data.b.bufferValue;
				var this1 = this.Entries;
				var _tmp = new alphaTab.io.ZipEntry();
				_tmp.FullName = fullName;
				_tmp.FileName = name;
				_tmp.Data = new Uint8Array(data);
				this1.push(_tmp);
			}
		}
	}
	,__class__: alphaTab.io.ZipFile
};
alphaTab.model = {};
alphaTab.model._AccentuationType = {};
alphaTab.model._AccentuationType.AccentuationType_Impl_ = $hx_exports["alphaTab"]["model"]["_AccentuationType"]["AccentuationType_Impl_"] = {};
alphaTab.model._AccentuationType.AccentuationType_Impl_.__name__ = ["alphaTab","model","_AccentuationType","AccentuationType_Impl_"];
alphaTab.model._AccentuationType.AccentuationType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccentuationType.AccentuationType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Normal";
	case 2:
		return "Heavy";
	}
	return "";
};
alphaTab.model._AccidentalType = {};
alphaTab.model._AccidentalType.AccidentalType_Impl_ = $hx_exports["alphaTab"]["model"]["_AccidentalType"]["AccidentalType_Impl_"] = {};
alphaTab.model._AccidentalType.AccidentalType_Impl_.__name__ = ["alphaTab","model","_AccidentalType","AccidentalType_Impl_"];
alphaTab.model._AccidentalType.AccidentalType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AccidentalType.AccidentalType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Natural";
	case 2:
		return "Sharp";
	case 3:
		return "Flat";
	}
	return "";
};
alphaTab.model.Automation = $hx_exports["alphaTab"]["model"]["Automation"] = function() {
};
alphaTab.model.Automation.__name__ = ["alphaTab","model","Automation"];
alphaTab.model.Automation.BuildTempoAutomation = function(isLinear,ratioPosition,value,reference) {
	if(reference < 1 || reference > 5) {
		reference = 2;
	}
	var references = new Float32Array([1,0.5,1.0,1.5,2.0,3.0]);
	var automation = new alphaTab.model.Automation();
	automation.Type = 0;
	automation.IsLinear = isLinear;
	automation.RatioPosition = ratioPosition;
	automation.Value = value * references[reference];
	return automation;
};
alphaTab.model.Automation.CopyTo = function(src,dst) {
	dst.IsLinear = src.IsLinear;
	dst.RatioPosition = src.RatioPosition;
	dst.Text = src.Text;
	dst.Type = src.Type;
	dst.Value = src.Value;
};
alphaTab.model.Automation.prototype = {
	Clone: function() {
		var a = new alphaTab.model.Automation();
		alphaTab.model.Automation.CopyTo(this,a);
		return a;
	}
	,__class__: alphaTab.model.Automation
};
alphaTab.model._AutomationType = {};
alphaTab.model._AutomationType.AutomationType_Impl_ = $hx_exports["alphaTab"]["model"]["_AutomationType"]["AutomationType_Impl_"] = {};
alphaTab.model._AutomationType.AutomationType_Impl_.__name__ = ["alphaTab","model","_AutomationType","AutomationType_Impl_"];
alphaTab.model._AutomationType.AutomationType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._AutomationType.AutomationType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AutomationType.AutomationType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AutomationType.AutomationType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._AutomationType.AutomationType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AutomationType.AutomationType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._AutomationType.AutomationType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Tempo";
	case 1:
		return "Volume";
	case 2:
		return "Instrument";
	case 3:
		return "Balance";
	}
	return "";
};
alphaTab.model.Bar = $hx_exports["alphaTab"]["model"]["Bar"] = function() {
	this.Id = 0;
	this.Index = 0;
	this.NextBar = null;
	this.PreviousBar = null;
	this.Clef = 0;
	this.ClefOttavia = 0;
	this.Staff = null;
	this.Voices = null;
	this.Id = alphaTab.model.Bar.GlobalBarId++;
	var this1 = [];
	this.Voices = this1;
	this.Clef = 4;
	this.ClefOttavia = 2;
};
alphaTab.model.Bar.__name__ = ["alphaTab","model","Bar"];
alphaTab.model.Bar.CopyTo = function(src,dst) {
	dst.Id = src.Id;
	dst.Index = src.Index;
	dst.Clef = src.Clef;
	dst.ClefOttavia = src.ClefOttavia;
};
alphaTab.model.Bar.prototype = {
	AddVoice: function(voice) {
		voice.Bar = this;
		voice.Index = this.Voices.length;
		this.Voices.push(voice);
	}
	,get_MasterBar: function() {
		return this.Staff.Track.Score.MasterBars[this.Index];
	}
	,get_IsEmpty: function() {
		var i = 0;
		var j = this.Voices.length;
		while(i < j) {
			if(!this.Voices[i].IsEmpty) {
				return false;
			}
			++i;
		}
		return true;
	}
	,Finish: function() {
		var i = 0;
		var j = this.Voices.length;
		while(i < j) {
			var voice = this.Voices[i];
			voice.Finish();
			++i;
		}
	}
	,__class__: alphaTab.model.Bar
};
alphaTab.model.Beat = $hx_exports["alphaTab"]["model"]["Beat"] = function() {
	this.PreviousBeat = null;
	this.NextBeat = null;
	this.Id = 0;
	this.Index = 0;
	this.Voice = null;
	this.Notes = null;
	this.IsEmpty = false;
	this.IsLegatoOrigin = false;
	this._minNote = null;
	this._maxNote = null;
	this._maxStringNote = null;
	this._minStringNote = null;
	this.Duration = -4;
	this.Automations = null;
	this.Dots = 0;
	this.FadeIn = false;
	this.Lyrics = null;
	this.Pop = false;
	this.HasRasgueado = false;
	this.Slap = false;
	this.Tap = false;
	this.Text = null;
	this.BrushType = 0;
	this.BrushDuration = 0;
	this.TupletDenominator = 0;
	this.TupletNumerator = 0;
	this.WhammyBarPoints = null;
	this.MaxWhammyPoint = null;
	this.Vibrato = 0;
	this.ChordId = null;
	this.GraceType = 0;
	this.PickStroke = 0;
	this.TremoloSpeed = null;
	this.Crescendo = 0;
	this.Start = 0;
	this.Dynamic = 0;
	this.InvertBeamDirection = false;
	this.Id = alphaTab.model.Beat.GlobalBeatId++;
	var this1 = [];
	this.WhammyBarPoints = this1;
	var this2 = [];
	this.Notes = this2;
	this.BrushType = 0;
	this.Vibrato = 0;
	this.GraceType = 0;
	this.PickStroke = 0;
	this.Duration = 4;
	this.TremoloSpeed = null;
	var this3 = [];
	this.Automations = this3;
	this.Dots = 0;
	this.Start = 0;
	this.TupletDenominator = -1;
	this.TupletNumerator = -1;
	this.Dynamic = 5;
	this.Crescendo = 0;
	this.InvertBeamDirection = false;
};
alphaTab.model.Beat.__name__ = ["alphaTab","model","Beat"];
alphaTab.model.Beat.CopyTo = function(src,dst) {
	dst.Id = src.Id;
	dst.Index = src.Index;
	dst.IsEmpty = src.IsEmpty;
	dst.Duration = src.Duration;
	dst.Dots = src.Dots;
	dst.FadeIn = src.FadeIn;
	if(src.Lyrics != null) {
		var size = src.Lyrics.length;
		var this1 = new Array(size);
		dst.Lyrics = this1;
		var i = 0;
		while(i < src.Lyrics.length) {
			dst.Lyrics[i] = src.Lyrics[i];
			++i;
		}
	}
	dst.Pop = src.Pop;
	dst.HasRasgueado = src.HasRasgueado;
	dst.Slap = src.Slap;
	dst.Tap = src.Tap;
	dst.Text = src.Text;
	dst.BrushType = src.BrushType;
	dst.BrushDuration = src.BrushDuration;
	dst.TupletDenominator = src.TupletDenominator;
	dst.TupletNumerator = src.TupletNumerator;
	dst.Vibrato = src.Vibrato;
	dst.ChordId = src.ChordId;
	dst.GraceType = src.GraceType;
	dst.PickStroke = src.PickStroke;
	dst.TremoloSpeed = src.TremoloSpeed;
	dst.Crescendo = src.Crescendo;
	dst.Start = src.Start;
	dst.Dynamic = src.Dynamic;
	dst.IsLegatoOrigin = src.IsLegatoOrigin;
	dst.InvertBeamDirection = src.InvertBeamDirection;
};
alphaTab.model.Beat.prototype = {
	get_IsLegatoDestination: function() {
		if(this.PreviousBeat != null) {
			return this.PreviousBeat.IsLegatoOrigin;
		} else {
			return false;
		}
	}
	,get_MinNote: function() {
		if(this._minNote == null) {
			this.RefreshNotes();
		}
		return this._minNote;
	}
	,get_MaxNote: function() {
		if(this._maxNote == null) {
			this.RefreshNotes();
		}
		return this._maxNote;
	}
	,get_MaxStringNote: function() {
		if(this._maxStringNote == null) {
			this.RefreshNotes();
		}
		return this._maxStringNote;
	}
	,get_MinStringNote: function() {
		if(this._minStringNote == null) {
			this.RefreshNotes();
		}
		return this._minStringNote;
	}
	,get_IsRest: function() {
		return this.Notes.length == 0;
	}
	,get_HasTuplet: function() {
		if(!(this.TupletDenominator == -1 && this.TupletNumerator == -1)) {
			return !(this.TupletDenominator == 1 && this.TupletNumerator == 1);
		} else {
			return false;
		}
	}
	,get_HasWhammyBar: function() {
		return this.WhammyBarPoints.length > 0;
	}
	,get_HasChord: function() {
		return this.ChordId != null;
	}
	,get_Chord: function() {
		return this.Voice.Bar.Staff.Chords[this.ChordId];
	}
	,get_IsTremolo: function() {
		return this.TremoloSpeed != null;
	}
	,get_AbsoluteStart: function() {
		return this.Voice.Bar.get_MasterBar().Start + this.Start;
	}
	,Clone: function() {
		var beat = new alphaTab.model.Beat();
		var id = beat.Id;
		var i = 0;
		var j = this.WhammyBarPoints.length;
		while(i < j) {
			beat.AddWhammyBarPoint(this.WhammyBarPoints[i].Clone());
			++i;
		}
		var i1 = 0;
		var j1 = this.Notes.length;
		while(i1 < j1) {
			beat.AddNote(this.Notes[i1].Clone());
			++i1;
		}
		alphaTab.model.Beat.CopyTo(this,beat);
		var i2 = 0;
		var j2 = this.Automations.length;
		while(i2 < j2) {
			beat.Automations.push(this.Automations[i2].Clone());
			++i2;
		}
		beat.Id = id;
		return beat;
	}
	,AddWhammyBarPoint: function(point) {
		this.WhammyBarPoints.push(point);
		if(this.MaxWhammyPoint == null || point.Value > this.MaxWhammyPoint.Value) {
			this.MaxWhammyPoint = point;
		}
	}
	,RemoveWhammyBarPoint: function(index) {
		if(index < 0 || index >= this.WhammyBarPoints.length) {
			return;
		}
		if(index != -1) {
			this.WhammyBarPoints.splice(index,1);
		}
		var point = this.WhammyBarPoints[index];
		if(point != this.MaxWhammyPoint) {
			return;
		}
		this.MaxWhammyPoint = null;
		var currentPoint = $iterator(this.WhammyBarPoints)();
		while(currentPoint.hasNext()) {
			var currentPoint1 = currentPoint.next();
			if(this.MaxWhammyPoint == null || currentPoint1.Value > this.MaxWhammyPoint.Value) {
				this.MaxWhammyPoint = currentPoint1;
			}
		}
	}
	,CalculateDuration: function() {
		var ticks = alphaTab.audio.MidiUtils.ToTicks(this.Duration);
		if(this.Dots == 2) {
			ticks = alphaTab.audio.MidiUtils.ApplyDot(ticks,true);
		} else if(this.Dots == 1) {
			ticks = alphaTab.audio.MidiUtils.ApplyDot(ticks,false);
		}
		if(this.TupletDenominator > 0 && this.TupletNumerator >= 0) {
			ticks = alphaTab.audio.MidiUtils.ApplyTuplet(ticks,this.TupletNumerator,this.TupletDenominator);
		}
		return ticks;
	}
	,AddNote: function(note) {
		note.Beat = this;
		note.Index = this.Notes.length;
		this.Notes.push(note);
	}
	,RemoveNote: function(note) {
		var index = this.Notes.indexOf(note);
		if(index >= 0) {
			if(index != -1) {
				this.Notes.splice(index,1);
			}
		}
		if(note == this._minNote || note == this._maxNote || note == this._minStringNote || note == this._maxStringNote) {
			this.RefreshNotes();
		}
	}
	,RefreshNotes: function() {
		var i = 0;
		var j = this.Notes.length;
		while(i < j) {
			var note = this.Notes[i];
			if(this._minNote == null || note.get_RealValue() < this._minNote.get_RealValue()) {
				this._minNote = note;
			}
			if(this._maxNote == null || note.get_RealValue() > this._maxNote.get_RealValue()) {
				this._maxNote = note;
			}
			if(this._minStringNote == null || note.String < this._minStringNote.String) {
				this._minStringNote = note;
			}
			if(this._maxStringNote == null || note.String > this._maxStringNote.String) {
				this._maxStringNote = note;
			}
			++i;
		}
	}
	,GetAutomation: function(type) {
		var i = 0;
		var j = this.Automations.length;
		while(i < j) {
			var automation = this.Automations[i];
			if(automation.Type == type) {
				return automation;
			}
			++i;
		}
		return null;
	}
	,GetNoteOnString: function(string) {
		var i = 0;
		var j = this.Notes.length;
		while(i < j) {
			var note = this.Notes[i];
			if(note.String == string) {
				return note;
			}
			++i;
		}
		return null;
	}
	,Finish: function() {
		if(this.Index == 0) {
			this.Start = 0;
		} else {
			this.Start = this.PreviousBeat.Start + this.PreviousBeat.CalculateDuration();
		}
		var i = 0;
		var j = this.Notes.length;
		while(i < j) {
			this.Notes[i].Finish();
			++i;
		}
	}
	,__class__: alphaTab.model.Beat
};
alphaTab.model.BendPoint = $hx_exports["alphaTab"]["model"]["BendPoint"] = function(offset,value) {
	if(value == null) {
		value = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.Offset = 0;
	this.Value = 0;
	this.Offset = offset;
	this.Value = value;
};
alphaTab.model.BendPoint.__name__ = ["alphaTab","model","BendPoint"];
alphaTab.model.BendPoint.CopyTo = function(src,dst) {
	dst.Offset = src.Offset;
	dst.Value = src.Value;
};
alphaTab.model.BendPoint.prototype = {
	Clone: function() {
		var point = new alphaTab.model.BendPoint(0,0);
		alphaTab.model.BendPoint.CopyTo(this,point);
		return point;
	}
	,__class__: alphaTab.model.BendPoint
};
alphaTab.model._BendType = {};
alphaTab.model._BendType.BendType_Impl_ = $hx_exports["alphaTab"]["model"]["_BendType"]["BendType_Impl_"] = {};
alphaTab.model._BendType.BendType_Impl_.__name__ = ["alphaTab","model","_BendType","BendType_Impl_"];
alphaTab.model._BendType.BendType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._BendType.BendType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._BendType.BendType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._BendType.BendType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._BendType.BendType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._BendType.BendType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._BendType.BendType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BendType.BendType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._BendType.BendType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BendType.BendType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._BendType.BendType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BendType.BendType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BendType.BendType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Custom";
	case 2:
		return "Bend";
	case 3:
		return "Release";
	case 4:
		return "BendRelease";
	case 5:
		return "Hold";
	case 6:
		return "Prebend";
	case 7:
		return "PrebendBend";
	case 8:
		return "PrebendRelease";
	}
	return "";
};
alphaTab.model._BrushType = {};
alphaTab.model._BrushType.BrushType_Impl_ = $hx_exports["alphaTab"]["model"]["_BrushType"]["BrushType_Impl_"] = {};
alphaTab.model._BrushType.BrushType_Impl_.__name__ = ["alphaTab","model","_BrushType","BrushType_Impl_"];
alphaTab.model._BrushType.BrushType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._BrushType.BrushType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BrushType.BrushType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BrushType.BrushType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._BrushType.BrushType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BrushType.BrushType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._BrushType.BrushType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "BrushUp";
	case 2:
		return "BrushDown";
	case 3:
		return "ArpeggioUp";
	case 4:
		return "ArpeggioDown";
	}
	return "";
};
alphaTab.model.Chord = $hx_exports["alphaTab"]["model"]["Chord"] = function() {
	this.Name = null;
	this.FirstFret = 0;
	this.Strings = null;
	this.BarreFrets = null;
	var this1 = [];
	this.Strings = this1;
	var this2 = [];
	this.BarreFrets = this2;
};
alphaTab.model.Chord.__name__ = ["alphaTab","model","Chord"];
alphaTab.model.Chord.CopyTo = function(src,dst) {
	dst.FirstFret = src.FirstFret;
	dst.Name = src.Name;
	dst.Strings = src.Strings.slice(0);
};
alphaTab.model.Chord.prototype = {
	__class__: alphaTab.model.Chord
};
alphaTab.model._Clef = {};
alphaTab.model._Clef.Clef_Impl_ = $hx_exports["alphaTab"]["model"]["_Clef"]["Clef_Impl_"] = {};
alphaTab.model._Clef.Clef_Impl_.__name__ = ["alphaTab","model","_Clef","Clef_Impl_"];
alphaTab.model._Clef.Clef_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._Clef.Clef_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._Clef.Clef_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._Clef.Clef_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._Clef.Clef_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._Clef.Clef_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._Clef.Clef_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Clef.Clef_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._Clef.Clef_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Clef.Clef_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._Clef.Clef_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Clef.Clef_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Clef.Clef_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Neutral";
	case 1:
		return "C3";
	case 2:
		return "C4";
	case 3:
		return "F4";
	case 4:
		return "G2";
	}
	return "";
};
alphaTab.model._ClefOttavia = {};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_ = $hx_exports["alphaTab"]["model"]["_ClefOttavia"]["ClefOttavia_Impl_"] = {};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.__name__ = ["alphaTab","model","_ClefOttavia","ClefOttavia_Impl_"];
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "_15ma";
	case 1:
		return "_8va";
	case 2:
		return "Regular";
	case 3:
		return "_8vb";
	case 4:
		return "_15mb";
	}
	return "";
};
alphaTab.model._CrescendoType = {};
alphaTab.model._CrescendoType.CrescendoType_Impl_ = $hx_exports["alphaTab"]["model"]["_CrescendoType"]["CrescendoType_Impl_"] = {};
alphaTab.model._CrescendoType.CrescendoType_Impl_.__name__ = ["alphaTab","model","_CrescendoType","CrescendoType_Impl_"];
alphaTab.model._CrescendoType.CrescendoType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._CrescendoType.CrescendoType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Crescendo";
	case 2:
		return "Decrescendo";
	}
	return "";
};
alphaTab.model._Duration = {};
alphaTab.model._Duration.Duration_Impl_ = $hx_exports["alphaTab"]["model"]["_Duration"]["Duration_Impl_"] = {};
alphaTab.model._Duration.Duration_Impl_.__name__ = ["alphaTab","model","_Duration","Duration_Impl_"];
alphaTab.model._Duration.Duration_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._Duration.Duration_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._Duration.Duration_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._Duration.Duration_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._Duration.Duration_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._Duration.Duration_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._Duration.Duration_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Duration.Duration_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._Duration.Duration_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Duration.Duration_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._Duration.Duration_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Duration.Duration_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Duration.Duration_Impl_.toString = function(this1) {
	switch(this1) {
	case -4:
		return "QuadrupleWhole";
	case -2:
		return "DoubleWhole";
	case 1:
		return "Whole";
	case 2:
		return "Half";
	case 4:
		return "Quarter";
	case 8:
		return "Eighth";
	case 16:
		return "Sixteenth";
	case 32:
		return "ThirtySecond";
	case 64:
		return "SixtyFourth";
	case 128:
		return "OneHundredTwentyEighth";
	case 256:
		return "TwoHundredFiftySixth";
	}
	return "";
};
alphaTab.model._DynamicValue = {};
alphaTab.model._DynamicValue.DynamicValue_Impl_ = $hx_exports["alphaTab"]["model"]["_DynamicValue"]["DynamicValue_Impl_"] = {};
alphaTab.model._DynamicValue.DynamicValue_Impl_.__name__ = ["alphaTab","model","_DynamicValue","DynamicValue_Impl_"];
alphaTab.model._DynamicValue.DynamicValue_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._DynamicValue.DynamicValue_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "PPP";
	case 1:
		return "PP";
	case 2:
		return "P";
	case 3:
		return "MP";
	case 4:
		return "MF";
	case 5:
		return "F";
	case 6:
		return "FF";
	case 7:
		return "FFF";
	}
	return "";
};
alphaTab.model._Fingers = {};
alphaTab.model._Fingers.Fingers_Impl_ = $hx_exports["alphaTab"]["model"]["_Fingers"]["Fingers_Impl_"] = {};
alphaTab.model._Fingers.Fingers_Impl_.__name__ = ["alphaTab","model","_Fingers","Fingers_Impl_"];
alphaTab.model._Fingers.Fingers_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._Fingers.Fingers_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Fingers.Fingers_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Fingers.Fingers_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._Fingers.Fingers_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Fingers.Fingers_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._Fingers.Fingers_Impl_.toString = function(this1) {
	switch(this1) {
	case -2:
		return "Unknown";
	case -1:
		return "NoOrDead";
	case 0:
		return "Thumb";
	case 1:
		return "IndexFinger";
	case 2:
		return "MiddleFinger";
	case 3:
		return "AnnularFinger";
	case 4:
		return "LittleFinger";
	}
	return "";
};
alphaTab.model._GraceType = {};
alphaTab.model._GraceType.GraceType_Impl_ = $hx_exports["alphaTab"]["model"]["_GraceType"]["GraceType_Impl_"] = {};
alphaTab.model._GraceType.GraceType_Impl_.__name__ = ["alphaTab","model","_GraceType","GraceType_Impl_"];
alphaTab.model._GraceType.GraceType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._GraceType.GraceType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._GraceType.GraceType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._GraceType.GraceType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._GraceType.GraceType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._GraceType.GraceType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._GraceType.GraceType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "OnBeat";
	case 2:
		return "BeforeBeat";
	}
	return "";
};
alphaTab.model._HarmonicType = {};
alphaTab.model._HarmonicType.HarmonicType_Impl_ = $hx_exports["alphaTab"]["model"]["_HarmonicType"]["HarmonicType_Impl_"] = {};
alphaTab.model._HarmonicType.HarmonicType_Impl_.__name__ = ["alphaTab","model","_HarmonicType","HarmonicType_Impl_"];
alphaTab.model._HarmonicType.HarmonicType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._HarmonicType.HarmonicType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Natural";
	case 2:
		return "Artificial";
	case 3:
		return "Pinch";
	case 4:
		return "Tap";
	case 5:
		return "Semi";
	case 6:
		return "Feedback";
	}
	return "";
};
alphaTab.model.JsonConverter = $hx_exports["alphaTab"]["model"]["JsonConverter"] = function() {
};
alphaTab.model.JsonConverter.__name__ = ["alphaTab","model","JsonConverter"];
alphaTab.model.JsonConverter.ScoreToJsObject = function(score) {
	var score2 = {}
	alphaTab.model.Score.CopyTo(score,score2);
	var this1 = [];
	score2.MasterBars = this1;
	var this2 = [];
	score2.Tracks = this2;
	var i = 0;
	while(i < score.MasterBars.length) {
		var masterBar = score.MasterBars[i];
		var masterBar2 = {}
		alphaTab.model.MasterBar.CopyTo(masterBar,masterBar2);
		if(masterBar.TempoAutomation != null) {
			masterBar2.TempoAutomation = {}
			alphaTab.model.Automation.CopyTo(masterBar.TempoAutomation,masterBar2.TempoAutomation);
		}
		if(masterBar.VolumeAutomation != null) {
			masterBar2.VolumeAutomation = {}
			alphaTab.model.Automation.CopyTo(masterBar.VolumeAutomation,masterBar2.VolumeAutomation);
		}
		if(masterBar.Section != null) {
			masterBar2.Section = {}
			alphaTab.model.Section.CopyTo(masterBar.Section,masterBar2.Section);
		}
		score2.MasterBars.push(masterBar2);
		++i;
	}
	var t = 0;
	while(t < score.Tracks.length) {
		var track = score.Tracks[t];
		var track2 = {}
		track2.Color = {}
		alphaTab.model.Track.CopyTo(track,track2);
		track2.PlaybackInfo = {}
		alphaTab.model.PlaybackInformation.CopyTo(track.PlaybackInfo,track2.PlaybackInfo);
		var this3 = [];
		track2.Staves = this3;
		var s = 0;
		while(s < track.Staves.length) {
			var staff = track.Staves[s];
			var staff2 = {}
			alphaTab.model.Staff.CopyTo(staff,staff2);
			var this4 = {}
			staff2.Chords = this4;
			var this5 = staff.Chords;
			var key = $iterator(Object.keys(this5))();
			while(key.hasNext()) {
				var key1 = key.next();
				var chord = staff.Chords[key1];
				var chord2 = {}
				alphaTab.model.Chord.CopyTo(chord,chord2);
				staff2.Chords[key1] = chord;
			}
			var this6 = [];
			staff2.Bars = this6;
			var b = 0;
			while(b < staff.Bars.length) {
				var bar = staff.Bars[b];
				var bar2 = {}
				alphaTab.model.Bar.CopyTo(bar,bar2);
				var this7 = [];
				bar2.Voices = this7;
				var v = 0;
				while(v < bar.Voices.length) {
					var voice = bar.Voices[v];
					var voice2 = {}
					alphaTab.model.Voice.CopyTo(voice,voice2);
					var this8 = [];
					voice2.Beats = this8;
					var bb = 0;
					while(bb < voice.Beats.length) {
						var beat = voice.Beats[bb];
						var beat2 = {}
						alphaTab.model.Beat.CopyTo(beat,beat2);
						var this9 = [];
						beat2.Automations = this9;
						var a = 0;
						while(a < beat.Automations.length) {
							var automation = {}
							alphaTab.model.Automation.CopyTo(beat.Automations[a],automation);
							beat2.Automations.push(automation);
							++a;
						}
						var this10 = [];
						beat2.WhammyBarPoints = this10;
						var i1 = 0;
						while(i1 < beat.WhammyBarPoints.length) {
							var point = {}
							alphaTab.model.BendPoint.CopyTo(beat.WhammyBarPoints[i1],point);
							beat2.WhammyBarPoints.push(point);
							++i1;
						}
						var this11 = [];
						beat2.Notes = this11;
						var n = 0;
						while(n < beat.Notes.length) {
							var note = beat.Notes[n];
							var note2 = {}
							alphaTab.model.Note.CopyTo(note,note2);
							var this12 = [];
							note2.BendPoints = this12;
							var i2 = 0;
							while(i2 < note.BendPoints.length) {
								var point1 = {}
								alphaTab.model.BendPoint.CopyTo(note.BendPoints[i2],point1);
								note2.BendPoints.push(point1);
								++i2;
							}
							beat2.Notes.push(note2);
							++n;
						}
						voice2.Beats.push(beat2);
						++bb;
					}
					bar2.Voices.push(voice2);
					++v;
				}
				staff2.Bars.push(bar2);
				++b;
			}
			track2.Staves.push(staff2);
			++s;
		}
		score2.Tracks.push(track2);
		++t;
	}
	return score2;
};
alphaTab.model.JsonConverter.JsObjectToScore = function(score) {
	var score2 = new alphaTab.model.Score();
	alphaTab.model.Score.CopyTo(score,score2);
	var i = 0;
	while(i < score.MasterBars.length) {
		var masterBar = score.MasterBars[i];
		var masterBar2 = new alphaTab.model.MasterBar();
		alphaTab.model.MasterBar.CopyTo(masterBar,masterBar2);
		if(masterBar.TempoAutomation != null) {
			masterBar2.TempoAutomation = new alphaTab.model.Automation();
			alphaTab.model.Automation.CopyTo(masterBar.TempoAutomation,masterBar2.TempoAutomation);
		}
		if(masterBar.VolumeAutomation != null) {
			masterBar2.VolumeAutomation = new alphaTab.model.Automation();
			alphaTab.model.Automation.CopyTo(masterBar.VolumeAutomation,masterBar2.VolumeAutomation);
		}
		if(masterBar.Section != null) {
			masterBar2.Section = new alphaTab.model.Section();
			alphaTab.model.Section.CopyTo(masterBar.Section,masterBar2.Section);
		}
		score2.AddMasterBar(masterBar2);
		++i;
	}
	var t = 0;
	while(t < score.Tracks.length) {
		var track = score.Tracks[t];
		var track2 = new alphaTab.model.Track(track.Staves.length);
		alphaTab.model.Track.CopyTo(track,track2);
		score2.AddTrack(track2);
		alphaTab.model.PlaybackInformation.CopyTo(track.PlaybackInfo,track2.PlaybackInfo);
		var s = 0;
		while(s < track.Staves.length) {
			var staff = track.Staves[s];
			var staff2 = track2.Staves[s];
			alphaTab.model.Staff.CopyTo(staff,staff2);
			var this1 = staff.Chords;
			var key = $iterator(Object.keys(this1))();
			while(key.hasNext()) {
				var key1 = key.next();
				var chord = staff.Chords[key1];
				var chord2 = new alphaTab.model.Chord();
				alphaTab.model.Chord.CopyTo(chord,chord2);
				staff2.Chords[key1] = chord2;
			}
			var b = 0;
			while(b < staff.Bars.length) {
				var bar = staff.Bars[b];
				var bar2 = new alphaTab.model.Bar();
				alphaTab.model.Bar.CopyTo(bar,bar2);
				staff2.AddBar(bar2);
				var v = 0;
				while(v < bar.Voices.length) {
					var voice = bar.Voices[v];
					var voice2 = new alphaTab.model.Voice();
					alphaTab.model.Voice.CopyTo(voice,voice2);
					bar2.AddVoice(voice2);
					var bb = 0;
					while(bb < voice.Beats.length) {
						var beat = voice.Beats[bb];
						var beat2 = new alphaTab.model.Beat();
						alphaTab.model.Beat.CopyTo(beat,beat2);
						voice2.AddBeat(beat2);
						var a = 0;
						while(a < beat.Automations.length) {
							var automation = new alphaTab.model.Automation();
							alphaTab.model.Automation.CopyTo(beat.Automations[a],automation);
							beat2.Automations.push(automation);
							++a;
						}
						var i1 = 0;
						while(i1 < beat.WhammyBarPoints.length) {
							var point = new alphaTab.model.BendPoint(0,0);
							alphaTab.model.BendPoint.CopyTo(beat.WhammyBarPoints[i1],point);
							beat2.AddWhammyBarPoint(point);
							++i1;
						}
						var n = 0;
						while(n < beat.Notes.length) {
							var note = beat.Notes[n];
							var note2 = new alphaTab.model.Note();
							alphaTab.model.Note.CopyTo(note,note2);
							beat2.AddNote(note2);
							var i2 = 0;
							while(i2 < note.BendPoints.length) {
								var point1 = new alphaTab.model.BendPoint(0,0);
								alphaTab.model.BendPoint.CopyTo(note.BendPoints[i2],point1);
								note2.AddBendPoint(point1);
								++i2;
							}
							++n;
						}
						++bb;
					}
					++v;
				}
				++b;
			}
			++s;
		}
		++t;
	}
	score2.Finish();
	return score2;
};
alphaTab.model.JsonConverter.JsObjectToMidiFile = function(midi) {
	var midi2 = new alphaTab.audio.synth.midi.MidiFile();
	midi2.Division = midi.Division;
	midi2.TimingStandard = midi.TimingStandard;
	midi2.TrackFormat = midi.TrackFormat;
	var midiEvents = midi.Events;
	var midiEvent = $iterator(midiEvents)();
	while(midiEvent.hasNext()) {
		var midiEvent1 = midiEvent.next();
		var tick = midiEvent1.Tick;
		var message = midiEvent1.Message;
		var midiEvent2;
		var _g = midiEvent1.Type;
		switch(_g) {
		case "alphaTab.audio.synth.midi.event.MetaDataEvent":
			midiEvent2 = new alphaTab.audio.synth.midi.event.MetaDataEvent(tick,0,0,midiEvent1.Data);
			midiEvent2.Message = message;
			break;
		case "alphaTab.audio.synth.midi.event.MetaEvent":
			midiEvent2 = new alphaTab.audio.synth.midi.event.MetaEvent(tick,0,0,0);
			midiEvent2.Message = message;
			break;
		case "alphaTab.audio.synth.midi.event.MetaNumberEvent":
			midiEvent2 = new alphaTab.audio.synth.midi.event.MetaNumberEvent(tick,0,0,midiEvent1.Value);
			midiEvent2.Message = message;
			break;
		case "alphaTab.audio.synth.midi.event.MetaTextEvent":
			midiEvent2 = new alphaTab.audio.synth.midi.event.MetaTextEvent(tick,0,0,midiEvent1.Text);
			midiEvent2.Message = message;
			break;
		case "alphaTab.audio.synth.midi.event.SystemCommonEvent":
			midiEvent2 = new alphaTab.audio.synth.midi.event.SystemCommonEvent(tick,0,0,0);
			midiEvent2.Message = message;
			break;
		case "alphaTab.audio.synth.midi.event.SystemExclusiveEvent":
			midiEvent2 = new alphaTab.audio.synth.midi.event.SystemExclusiveEvent(tick,0,0,midiEvent1.Data);
			midiEvent2.Message = message;
			break;
		default:
			midiEvent2 = new alphaTab.audio.synth.midi.event.MidiEvent(tick,0,0,0);
			midiEvent2.Message = message;
		}
		midi2.Events.push(midiEvent2);
	}
	return midi2;
};
alphaTab.model.JsonConverter.MidiFileToJsObject = function(midi) {
	var midi2 = {}
	midi2.Division = midi.Division;
	midi2.TimingStandard = midi.TimingStandard;
	midi2.TrackFormat = midi.TrackFormat;
	var this1 = [];
	var midiEvents = this1;
	midi2.Events = midiEvents;
	var midiEvent = $iterator(midi.Events)();
	while(midiEvent.hasNext()) {
		var midiEvent1 = midiEvent.next();
		var midiEvent2 = {}
		midiEvents.push(midiEvent2);
		midiEvent2.Type = Type.getClassName(midiEvent1 == null ? null : js.Boot.getClass(midiEvent1));
		midiEvent2.Tick = midiEvent1.Tick;
		midiEvent2.Message = midiEvent1.Message;
		var _g = midiEvent2.Type;
		switch(_g) {
		case "alphaTab.audio.synth.midi.event.MetaDataEvent":
			var metadata = js.Boot.__cast(midiEvent1 , alphaTab.audio.synth.midi.event.MetaDataEvent);
			midiEvent2.Data = metadata.Data;
			break;
		case "alphaTab.audio.synth.midi.event.MetaNumberEvent":
			var metanumber = js.Boot.__cast(midiEvent1 , alphaTab.audio.synth.midi.event.MetaNumberEvent);
			midiEvent2.Value = metanumber.Value;
			break;
		case "alphaTab.audio.synth.midi.event.MetaTextEvent":
			var metatext = js.Boot.__cast(midiEvent1 , alphaTab.audio.synth.midi.event.MetaTextEvent);
			midiEvent2.Text = metatext.Text;
			break;
		case "alphaTab.audio.synth.midi.event.MetaEvent":case "alphaTab.audio.synth.midi.event.SystemCommonEvent":
			break;
		case "alphaTab.audio.synth.midi.event.SystemExclusiveEvent":
			var sysex = js.Boot.__cast(midiEvent1 , alphaTab.audio.synth.midi.event.SystemExclusiveEvent);
			midiEvent2.Data = sysex.Data;
			break;
		default:
		}
	}
	return midi2;
};
alphaTab.model.JsonConverter.prototype = {
	__class__: alphaTab.model.JsonConverter
};
alphaTab.model._KeySignatureType = {};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_ = $hx_exports["alphaTab"]["model"]["_KeySignatureType"]["KeySignatureType_Impl_"] = {};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.__name__ = ["alphaTab","model","_KeySignatureType","KeySignatureType_Impl_"];
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Major";
	case 1:
		return "Minor";
	}
	return "";
};
alphaTab.model.Lyrics = $hx_exports["alphaTab"]["model"]["Lyrics"] = function() {
};
alphaTab.model.Lyrics.__name__ = ["alphaTab","model","Lyrics"];
alphaTab.model.Lyrics.prototype = {
	Finish: function() {
		var this1 = [];
		var chunks = this1;
		this.Parse(this.Text,0,chunks);
		this.Chunks = chunks;
	}
	,Parse: function(str,p,chunks) {
		if(str == null || str.length == 0) {
			return;
		}
		var state = 1;
		var next = 1;
		var skipSpace = false;
		var start = 0;
		while(p < str.length) {
			var this1 = system.Convert.ToUInt16(HxOverrides.cca(str,p));
			var this2 = this1;
			var c = this2;
			switch(state) {
			case 0:
				switch(c) {
				case 9:case 10:case 13:
					break;
				case 32:
					if(!skipSpace) {
						state = next;
						continue;
					}
					break;
				default:
					skipSpace = false;
					state = next;
					continue;
				}
				break;
			case 1:
				if(c == 91) {
					state = 3;
				} else {
					start = p;
					state = 2;
					continue;
				}
				break;
			case 2:
				switch(c) {
				case 10:case 13:case 32:
					var txt = HxOverrides.substr(str,start,p - start);
					chunks.push(this.PrepareChunk(txt));
					state = 0;
					next = 1;
					break;
				case 45:
					state = 4;
					break;
				default:
				}
				break;
			case 3:
				if(c == 93) {
					state = 1;
				}
				break;
			case 4:
				if(c != 45) {
					var txt1 = HxOverrides.substr(str,start,p - start);
					chunks.push(this.PrepareChunk(txt1));
					skipSpace = true;
					state = 0;
					next = 1;
					continue;
				}
				break;
			default:
			}
			++p;
		}
		if(state == 2) {
			if(p != start) {
				chunks.push(HxOverrides.substr(str,start,p - start));
			}
		}
	}
	,PrepareChunk: function(txt) {
		return StringTools.replace(txt,"+"," ");
	}
	,__class__: alphaTab.model.Lyrics
};
alphaTab.model.Lyrics_LyricsState = $hx_exports["alphaTab"]["model"]["Lyrics_LyricsState"] = function() {
};
alphaTab.model.Lyrics_LyricsState.__name__ = ["alphaTab","model","Lyrics_LyricsState"];
alphaTab.model.Lyrics_LyricsState.prototype = {
	__class__: alphaTab.model.Lyrics_LyricsState
};
alphaTab.model.MasterBar = $hx_exports["alphaTab"]["model"]["MasterBar"] = function() {
	this.AlternateEndings = 0;
	this.NextMasterBar = null;
	this.PreviousMasterBar = null;
	this.Index = 0;
	this.KeySignature = 0;
	this.KeySignatureType = 0;
	this.IsDoubleBar = false;
	this.IsRepeatStart = false;
	this.RepeatCount = 0;
	this.RepeatGroup = null;
	this.TimeSignatureNumerator = 0;
	this.TimeSignatureDenominator = 0;
	this.TimeSignatureCommon = false;
	this.TripletFeel = 0;
	this.Section = null;
	this.TempoAutomation = null;
	this.VolumeAutomation = null;
	this.Score = null;
	this.Start = 0;
	this.TimeSignatureDenominator = 4;
	this.TimeSignatureNumerator = 4;
	this.TripletFeel = 0;
	this.KeySignatureType = 0;
	this.TimeSignatureCommon = false;
};
alphaTab.model.MasterBar.__name__ = ["alphaTab","model","MasterBar"];
alphaTab.model.MasterBar.CopyTo = function(src,dst) {
	dst.AlternateEndings = src.AlternateEndings;
	dst.Index = src.Index;
	dst.KeySignature = src.KeySignature;
	dst.KeySignatureType = src.KeySignatureType;
	dst.IsDoubleBar = src.IsDoubleBar;
	dst.IsRepeatStart = src.IsRepeatStart;
	dst.RepeatCount = src.RepeatCount;
	dst.TimeSignatureNumerator = src.TimeSignatureNumerator;
	dst.TimeSignatureDenominator = src.TimeSignatureDenominator;
	dst.TimeSignatureCommon = src.TimeSignatureCommon;
	dst.TripletFeel = src.TripletFeel;
	dst.Start = src.Start;
};
alphaTab.model.MasterBar.prototype = {
	get_IsRepeatEnd: function() {
		return this.RepeatCount > 0;
	}
	,get_IsSectionStart: function() {
		return this.Section != null;
	}
	,CalculateDuration: function() {
		return this.TimeSignatureNumerator * alphaTab.audio.MidiUtils.ValueToTicks(this.TimeSignatureDenominator);
	}
	,__class__: alphaTab.model.MasterBar
};
alphaTab.model.ModelUtils = $hx_exports["alphaTab"]["model"]["ModelUtils"] = function() { };
alphaTab.model.ModelUtils.__name__ = ["alphaTab","model","ModelUtils"];
alphaTab.model.ModelUtils.GetIndex = function(duration) {
	var index = 0;
	var value = duration;
	if(value < 0) {
		return index;
	}
	var this1 = duration;
	return system.Convert.ToInt32_Single(Math.log2(this1));
};
alphaTab.model.ModelUtils.KeySignatureIsFlat = function(ks) {
	return ks < 0;
};
alphaTab.model.ModelUtils.KeySignatureIsNatural = function(ks) {
	return ks == 0;
};
alphaTab.model.ModelUtils.KeySignatureIsSharp = function(ks) {
	return ks > 0;
};
alphaTab.model.ModelUtils.ApplyPitchOffsets = function(settings,score) {
	var i = 0;
	while(i < score.Tracks.length) {
		if(i < settings.DisplayTranspositionPitches.length) {
			var staff = $iterator(score.Tracks[i].Staves)();
			while(staff.hasNext()) {
				var staff1 = staff.next();
				staff1.DisplayTranspositionPitch = -settings.DisplayTranspositionPitches[i];
			}
		}
		if(i < settings.TranspositionPitches.length) {
			var staff2 = $iterator(score.Tracks[i].Staves)();
			while(staff2.hasNext()) {
				var staff3 = staff2.next();
				staff3.TranspositionPitch = -settings.TranspositionPitches[i];
			}
		}
		++i;
	}
};
alphaTab.model.Note = $hx_exports["alphaTab"]["model"]["Note"] = function() {
	this.Id = 0;
	this.Index = 0;
	this.Accentuated = 0;
	this.BendType = 0;
	this.IsContinuedBend = false;
	this.BendPoints = null;
	this.MaxBendPoint = null;
	this.Fret = 0;
	this.String = 0;
	this.Octave = 0;
	this.Tone = 0;
	this.Element = 0;
	this.Variation = 0;
	this.IsHammerPullOrigin = false;
	this.HammerPullOrigin = null;
	this.HammerPullDestination = null;
	this.HarmonicValue = 0.0;
	this.HarmonicType = 0;
	this.IsGhost = false;
	this.IsLetRing = false;
	this.IsPalmMute = false;
	this.IsDead = false;
	this.IsStaccato = false;
	this.SlideType = 0;
	this.SlideTarget = null;
	this.Vibrato = 0;
	this.TieOrigin = null;
	this.TieDestination = null;
	this.IsTieDestination = false;
	this.IsTieOrigin = false;
	this.LeftHandFinger = 0;
	this.RightHandFinger = 0;
	this.IsFingering = false;
	this.TrillValue = 0;
	this.TrillSpeed = -4;
	this.DurationPercent = 0.0;
	this.AccidentalMode = 0;
	this.Beat = null;
	this.Dynamic = 0;
	this.Id = alphaTab.model.Note.GlobalNoteId++;
	this.BendType = 0;
	var this1 = [];
	this.BendPoints = this1;
	this.Dynamic = 5;
	this.Accentuated = 0;
	this.Fret = -2147483648;
	this.HarmonicType = 0;
	this.SlideType = 0;
	this.Vibrato = 0;
	this.LeftHandFinger = -2;
	this.RightHandFinger = -2;
	this.TrillValue = -1;
	this.TrillSpeed = 32;
	this.DurationPercent = 1;
	this.Octave = -1;
	this.Tone = -1;
	this.Fret = -1;
	this.String = -1;
	this.Element = -1;
	this.Variation = -1;
};
alphaTab.model.Note.__name__ = ["alphaTab","model","Note"];
alphaTab.model.Note.GetStringTuning = function(staff,noteString) {
	if(staff.Tuning.length > 0) {
		return staff.Tuning[staff.Tuning.length - (noteString - 1) - 1];
	}
	return 0;
};
alphaTab.model.Note.CopyTo = function(src,dst) {
	dst.Id = src.Id;
	dst.Accentuated = src.Accentuated;
	dst.Fret = src.Fret;
	dst.String = src.String;
	dst.IsHammerPullOrigin = src.IsHammerPullOrigin;
	dst.HarmonicValue = src.HarmonicValue;
	dst.HarmonicType = src.HarmonicType;
	dst.IsGhost = src.IsGhost;
	dst.IsLetRing = src.IsLetRing;
	dst.IsPalmMute = src.IsPalmMute;
	dst.IsDead = src.IsDead;
	dst.IsStaccato = src.IsStaccato;
	dst.SlideType = src.SlideType;
	dst.Vibrato = src.Vibrato;
	dst.IsTieDestination = src.IsTieDestination;
	dst.LeftHandFinger = src.LeftHandFinger;
	dst.RightHandFinger = src.RightHandFinger;
	dst.IsFingering = src.IsFingering;
	dst.TrillValue = src.TrillValue;
	dst.TrillSpeed = src.TrillSpeed;
	dst.DurationPercent = src.DurationPercent;
	dst.AccidentalMode = src.AccidentalMode;
	dst.Dynamic = src.Dynamic;
	dst.Octave = src.Octave;
	dst.Tone = src.Tone;
	dst.Element = src.Element;
	dst.Variation = src.Variation;
	dst.BendType = src.BendType;
};
alphaTab.model.Note.NextNoteOnSameLine = function(note) {
	var nextBeat = note.Beat.NextBeat;
	while(nextBeat != null && nextBeat.Voice.Bar.Index <= note.Beat.Voice.Bar.Index + 3) {
		var noteOnString = nextBeat.GetNoteOnString(note.String);
		if(noteOnString != null) {
			return noteOnString;
		} else {
			nextBeat = nextBeat.NextBeat;
		}
	}
	return null;
};
alphaTab.model.Note.PreviousNoteOnSameLine = function(note) {
	var previousBeat = note.Beat.PreviousBeat;
	while(previousBeat != null && previousBeat.Voice.Bar.Index >= note.Beat.Voice.Bar.Index - 3) {
		var noteOnString = previousBeat.GetNoteOnString(note.String);
		if(noteOnString != null) {
			return noteOnString;
		} else {
			previousBeat = previousBeat.PreviousBeat;
		}
	}
	return null;
};
alphaTab.model.Note.prototype = {
	get_HasBend: function() {
		return this.BendType != 0;
	}
	,get_IsStringed: function() {
		if(this.Fret >= 0) {
			return this.String >= 0;
		} else {
			return false;
		}
	}
	,get_IsPiano: function() {
		if(this.get_IsStringed()) {
			return false;
		}
		if(this.Octave >= 0) {
			return this.Tone >= 0;
		} else {
			return false;
		}
	}
	,get_IsPercussion: function() {
		if(this.get_IsStringed()) {
			return false;
		}
		if(this.Element >= 0) {
			return this.Variation >= 0;
		} else {
			return false;
		}
	}
	,get_IsHammerPullDestination: function() {
		return this.HammerPullOrigin != null;
	}
	,get_IsHarmonic: function() {
		return this.HarmonicType != 0;
	}
	,get_TrillFret: function() {
		return this.TrillValue - this.get_StringTuning();
	}
	,get_IsTrill: function() {
		return this.TrillValue >= 0;
	}
	,get_StringTuning: function() {
		return this.Beat.Voice.Bar.Staff.Capo + alphaTab.model.Note.GetStringTuning(this.Beat.Voice.Bar.Staff,this.String);
	}
	,get_RealValue: function() {
		if(this.get_IsPercussion()) {
			return alphaTab.rendering.utils.PercussionMapper.MidiFromElementVariation(this);
		}
		if(this.get_IsStringed()) {
			return this.Fret + this.get_StringTuning() - this.Beat.Voice.Bar.Staff.TranspositionPitch;
		}
		if(this.get_IsPiano()) {
			return this.Octave * 12 + this.Tone - this.Beat.Voice.Bar.Staff.TranspositionPitch;
		}
		return 0;
	}
	,Clone: function() {
		var n = new alphaTab.model.Note();
		alphaTab.model.Note.CopyTo(this,n);
		var i = 0;
		var j = this.BendPoints.length;
		while(i < j) {
			n.AddBendPoint(this.BendPoints[i].Clone());
			++i;
		}
		return n;
	}
	,AddBendPoint: function(point) {
		this.BendPoints.push(point);
		if(this.MaxBendPoint == null || point.Value > this.MaxBendPoint.Value) {
			this.MaxBendPoint = point;
		}
		if(this.BendType == 0) {
			this.BendType = 1;
		}
	}
	,Finish: function() {
		var _gthis = this;
		var nextNoteOnLine = new alphaTab.util.Lazy(function() {
			return alphaTab.model.Note.NextNoteOnSameLine(_gthis);
		});
		var prevNoteOnLine = new alphaTab.util.Lazy(function() {
			return alphaTab.model.Note.PreviousNoteOnSameLine(_gthis);
		});
		if(this.IsTieDestination) {
			if(prevNoteOnLine.get_Value() == null) {
				this.IsTieDestination = false;
			} else {
				this.TieOrigin = prevNoteOnLine.get_Value();
				this.TieOrigin.IsTieOrigin = true;
				this.TieOrigin.TieDestination = this;
				this.Fret = this.TieOrigin.Fret;
				this.Octave = this.TieOrigin.Octave;
				this.Tone = this.TieOrigin.Tone;
			}
		}
		if(this.IsHammerPullOrigin) {
			if(nextNoteOnLine.get_Value() == null) {
				this.IsHammerPullOrigin = false;
			} else {
				this.HammerPullDestination = nextNoteOnLine.get_Value();
				this.HammerPullDestination.HammerPullOrigin = this;
			}
		}
		if(this.SlideType != 0) {
			this.SlideTarget = nextNoteOnLine.get_Value();
		}
		if(this.BendPoints.length > 0 && this.BendType == 1) {
			var isContinuedBend = this.IsContinuedBend = this.TieOrigin != null && this.TieOrigin.get_HasBend();
			if(this.BendPoints.length == 4) {
				var origin = this.BendPoints[0];
				var middle1 = this.BendPoints[1];
				var middle2 = this.BendPoints[2];
				var destination = this.BendPoints[3];
				if(middle1.Value == middle2.Value) {
					if(destination.Value > origin.Value) {
						if(middle1.Value > destination.Value) {
							this.BendType = 4;
						} else if(!isContinuedBend && origin.Value > 0) {
							this.BendType = 7;
							if(true) {
								this.BendPoints.splice(2,1);
							}
							destination.Value = middle1.Value;
						} else {
							this.BendType = 2;
							if(true) {
								this.BendPoints.splice(2,1);
							}
							if(true) {
								this.BendPoints.splice(1,1);
							}
						}
					} else if(destination.Value < origin.Value) {
						if(isContinuedBend) {
							this.BendType = 3;
							if(true) {
								this.BendPoints.splice(2,1);
							}
							if(true) {
								this.BendPoints.splice(1,1);
							}
						} else {
							this.BendType = 8;
							if(true) {
								this.BendPoints.splice(2,1);
							}
							if(true) {
								this.BendPoints.splice(1,1);
							}
						}
					} else if(middle1.Value > origin.Value) {
						this.BendType = 4;
					} else if(origin.Value > 0 && !isContinuedBend) {
						this.BendType = 6;
						if(true) {
							this.BendPoints.splice(2,1);
						}
						if(true) {
							this.BendPoints.splice(1,1);
						}
					} else {
						this.BendType = 5;
						if(true) {
							this.BendPoints.splice(2,1);
						}
						if(true) {
							this.BendPoints.splice(1,1);
						}
					}
				} else {
					alphaTab.util.Logger.Warning("Model","Unsupported bend type detected, fallback to custom",null);
				}
			} else if(this.BendPoints.length == 2) {
				var origin1 = this.BendPoints[0];
				var destination1 = this.BendPoints[1];
				if(destination1.Value > origin1.Value) {
					if(!isContinuedBend && origin1.Value > 0) {
						this.BendType = 7;
					} else {
						this.BendType = 2;
					}
				} else if(destination1.Value < origin1.Value) {
					if(isContinuedBend) {
						this.BendType = 3;
					} else {
						this.BendType = 8;
					}
				} else {
					this.BendType = 5;
				}
			}
		} else if(this.BendPoints.length == 0) {
			this.BendType = 0;
		}
	}
	,__class__: alphaTab.model.Note
};
alphaTab.model._NoteAccidentalMode = {};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_ = $hx_exports["alphaTab"]["model"]["_NoteAccidentalMode"]["NoteAccidentalMode_Impl_"] = {};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.__name__ = ["alphaTab","model","_NoteAccidentalMode","NoteAccidentalMode_Impl_"];
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Default";
	case 1:
		return "SwapAccidentals";
	case 2:
		return "ForceNatural";
	case 3:
		return "ForceSharp";
	case 4:
		return "ForceFlat";
	}
	return "";
};
alphaTab.model._PickStrokeType = {};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_ = $hx_exports["alphaTab"]["model"]["_PickStrokeType"]["PickStrokeType_Impl_"] = {};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.__name__ = ["alphaTab","model","_PickStrokeType","PickStrokeType_Impl_"];
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Up";
	case 2:
		return "Down";
	}
	return "";
};
alphaTab.model.PlaybackInformation = $hx_exports["alphaTab"]["model"]["PlaybackInformation"] = function() {
	this.Volume = 0;
	this.Balance = 0;
	this.Port = 0;
	this.Program = 0;
	this.PrimaryChannel = 0;
	this.SecondaryChannel = 0;
	this.IsMute = false;
	this.IsSolo = false;
	this.Volume = 15;
	this.Balance = 8;
	this.Port = 1;
};
alphaTab.model.PlaybackInformation.__name__ = ["alphaTab","model","PlaybackInformation"];
alphaTab.model.PlaybackInformation.CopyTo = function(src,dst) {
	dst.Volume = src.Volume;
	dst.Balance = src.Balance;
	dst.Port = src.Port;
	dst.Program = src.Program;
	dst.PrimaryChannel = src.PrimaryChannel;
	dst.SecondaryChannel = src.SecondaryChannel;
	dst.IsMute = src.IsMute;
	dst.IsSolo = src.IsSolo;
};
alphaTab.model.PlaybackInformation.prototype = {
	__class__: alphaTab.model.PlaybackInformation
};
alphaTab.model.RepeatGroup = $hx_exports["alphaTab"]["model"]["RepeatGroup"] = function() {
	this.MasterBars = null;
	this.Openings = null;
	this.Closings = null;
	this.IsOpened = false;
	this.IsClosed = false;
	var this1 = [];
	this.MasterBars = this1;
	var this2 = [];
	this.Openings = this2;
	var this3 = [];
	this.Closings = this3;
	this.IsClosed = false;
};
alphaTab.model.RepeatGroup.__name__ = ["alphaTab","model","RepeatGroup"];
alphaTab.model.RepeatGroup.prototype = {
	AddMasterBar: function(masterBar) {
		if(this.Openings.length == 0) {
			this.Openings.push(masterBar);
		}
		this.MasterBars.push(masterBar);
		masterBar.RepeatGroup = this;
		if(masterBar.get_IsRepeatEnd()) {
			this.Closings.push(masterBar);
			this.IsClosed = true;
			if(!this.IsOpened) {
				this.MasterBars[0].IsRepeatStart = true;
				this.IsOpened = true;
			}
		} else if(this.IsClosed) {
			this.IsClosed = false;
			this.Openings.push(masterBar);
		}
	}
	,__class__: alphaTab.model.RepeatGroup
};
alphaTab.model.Score = $hx_exports["alphaTab"]["model"]["Score"] = function() {
	this._currentRepeatGroup = null;
	this.Album = null;
	this.Artist = null;
	this.Copyright = null;
	this.Instructions = null;
	this.Music = null;
	this.Notices = null;
	this.SubTitle = null;
	this.Title = null;
	this.Words = null;
	this.Tab = null;
	this.Tempo = 0;
	this.TempoLabel = null;
	this.MasterBars = null;
	this.Tracks = null;
	var this1 = [];
	this.MasterBars = this1;
	var this2 = [];
	this.Tracks = this2;
	this._currentRepeatGroup = new alphaTab.model.RepeatGroup();
	this.Album = this.Artist = this.Copyright = this.Instructions = this.Music = this.Notices = this.SubTitle = this.Title = this.Words = this.Tab = this.TempoLabel = "";
	this.Tempo = 120;
};
alphaTab.model.Score.__name__ = ["alphaTab","model","Score"];
alphaTab.model.Score.CopyTo = function(src,dst) {
	dst.Album = src.Album;
	dst.Artist = src.Artist;
	dst.Copyright = src.Copyright;
	dst.Instructions = src.Instructions;
	dst.Music = src.Music;
	dst.Notices = src.Notices;
	dst.SubTitle = src.SubTitle;
	dst.Title = src.Title;
	dst.Words = src.Words;
	dst.Tab = src.Tab;
	dst.Tempo = src.Tempo;
	dst.TempoLabel = src.TempoLabel;
};
alphaTab.model.Score.prototype = {
	RebuildRepeatGroups: function() {
		var currentGroup = new alphaTab.model.RepeatGroup();
		var bar = $iterator(this.MasterBars)();
		while(bar.hasNext()) {
			var bar1 = bar.next();
			if(bar1.IsRepeatStart || this._currentRepeatGroup.IsClosed && bar1.AlternateEndings <= 0) {
				currentGroup = new alphaTab.model.RepeatGroup();
			}
			currentGroup.AddMasterBar(bar1);
		}
	}
	,AddMasterBar: function(bar) {
		bar.Score = this;
		bar.Index = this.MasterBars.length;
		if(this.MasterBars.length != 0) {
			bar.PreviousMasterBar = this.MasterBars[this.MasterBars.length - 1];
			bar.PreviousMasterBar.NextMasterBar = bar;
			bar.Start = bar.PreviousMasterBar.Start + bar.PreviousMasterBar.CalculateDuration();
		}
		if(bar.IsRepeatStart || this._currentRepeatGroup.IsClosed && bar.AlternateEndings <= 0) {
			this._currentRepeatGroup = new alphaTab.model.RepeatGroup();
		}
		this._currentRepeatGroup.AddMasterBar(bar);
		this.MasterBars.push(bar);
	}
	,AddTrack: function(track) {
		track.Score = this;
		track.Index = this.Tracks.length;
		this.Tracks.push(track);
	}
	,Finish: function() {
		var i = 0;
		var j = this.Tracks.length;
		while(i < j) {
			this.Tracks[i].Finish();
			++i;
		}
	}
	,__class__: alphaTab.model.Score
};
alphaTab.model.Section = $hx_exports["alphaTab"]["model"]["Section"] = function() {
	this.Marker = null;
	this.Text = null;
	this.Text = this.Marker = "";
};
alphaTab.model.Section.__name__ = ["alphaTab","model","Section"];
alphaTab.model.Section.CopyTo = function(src,dst) {
	dst.Marker = src.Marker;
	dst.Text = src.Text;
};
alphaTab.model.Section.prototype = {
	__class__: alphaTab.model.Section
};
alphaTab.model._SlideType = {};
alphaTab.model._SlideType.SlideType_Impl_ = $hx_exports["alphaTab"]["model"]["_SlideType"]["SlideType_Impl_"] = {};
alphaTab.model._SlideType.SlideType_Impl_.__name__ = ["alphaTab","model","_SlideType","SlideType_Impl_"];
alphaTab.model._SlideType.SlideType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._SlideType.SlideType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._SlideType.SlideType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._SlideType.SlideType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._SlideType.SlideType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._SlideType.SlideType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._SlideType.SlideType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SlideType.SlideType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._SlideType.SlideType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SlideType.SlideType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._SlideType.SlideType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SlideType.SlideType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._SlideType.SlideType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Shift";
	case 2:
		return "Legato";
	case 3:
		return "IntoFromBelow";
	case 4:
		return "IntoFromAbove";
	case 5:
		return "OutUp";
	case 6:
		return "OutDown";
	}
	return "";
};
alphaTab.model.Staff = $hx_exports["alphaTab"]["model"]["Staff"] = function() {
	this.Bars = null;
	this.Track = null;
	this.Index = 0;
	this.Chords = null;
	this.Capo = 0;
	this.TranspositionPitch = 0;
	this.DisplayTranspositionPitch = 0;
	this.Tuning = null;
	this.TuningName = null;
	this.StaffKind = 0;
	var this1 = [];
	this.Bars = this1;
	var this2 = new Int32Array(0);
	this.Tuning = this2;
	var this3 = {}
	this.Chords = this3;
	this.StaffKind = 3;
};
alphaTab.model.Staff.__name__ = ["alphaTab","model","Staff"];
alphaTab.model.Staff.CopyTo = function(src,dst) {
	dst.Capo = src.Capo;
	dst.Index = src.Index;
	var array = src.Tuning;
	dst.Tuning = new Int32Array(array);
	dst.TranspositionPitch = src.TranspositionPitch;
	dst.DisplayTranspositionPitch = src.DisplayTranspositionPitch;
	dst.StaffKind = src.StaffKind;
};
alphaTab.model.Staff.prototype = {
	get_IsStringed: function() {
		return this.Tuning.length > 0;
	}
	,Finish: function() {
		var i = 0;
		var j = this.Bars.length;
		while(i < j) {
			this.Bars[i].Finish();
			++i;
		}
	}
	,AddBar: function(bar) {
		var bars = this.Bars;
		bar.Staff = this;
		bar.Index = bars.length;
		if(bars.length > 0) {
			bar.PreviousBar = bars[bars.length - 1];
			bar.PreviousBar.NextBar = bar;
		}
		bars.push(bar);
	}
	,__class__: alphaTab.model.Staff
};
alphaTab.model._StaffKind = {};
alphaTab.model._StaffKind.StaffKind_Impl_ = $hx_exports["alphaTab"]["model"]["_StaffKind"]["StaffKind_Impl_"] = {};
alphaTab.model._StaffKind.StaffKind_Impl_.__name__ = ["alphaTab","model","_StaffKind","StaffKind_Impl_"];
alphaTab.model._StaffKind.StaffKind_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._StaffKind.StaffKind_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._StaffKind.StaffKind_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._StaffKind.StaffKind_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._StaffKind.StaffKind_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._StaffKind.StaffKind_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._StaffKind.StaffKind_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._StaffKind.StaffKind_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._StaffKind.StaffKind_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._StaffKind.StaffKind_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._StaffKind.StaffKind_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._StaffKind.StaffKind_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._StaffKind.StaffKind_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Tablature";
	case 1:
		return "Score";
	case 2:
		return "Percussion";
	case 3:
		return "Mixed";
	}
	return "";
};
alphaTab.model.Track = $hx_exports["alphaTab"]["model"]["Track"] = function(staveCount) {
	this.Index = 0;
	this.Score = null;
	this.Staves = null;
	this.PlaybackInfo = null;
	this.Color = null;
	this.Name = null;
	this.ShortName = null;
	var this1 = [];
	this.Staves = this1;
	this.EnsureStaveCount(staveCount);
	this.PlaybackInfo = new alphaTab.model.PlaybackInformation();
	this.Name = "";
	this.ShortName = "";
	this.Color = new alphaTab.platform.model.Color(200,0,0,255);
};
alphaTab.model.Track.__name__ = ["alphaTab","model","Track"];
alphaTab.model.Track.CopyTo = function(src,dst) {
	dst.Name = src.Name;
	dst.ShortName = src.ShortName;
	dst.Index = src.Index;
	dst.Color.Raw = src.Color.Raw;
	dst.Color.RGBA = src.Color.RGBA;
};
alphaTab.model.Track.prototype = {
	EnsureStaveCount: function(staveCount) {
		while(this.Staves.length < staveCount) this.AddStaff(new alphaTab.model.Staff());
	}
	,AddStaff: function(staff) {
		staff.Index = this.Staves.length;
		staff.Track = this;
		this.Staves.push(staff);
	}
	,Finish: function() {
		var s = this.ShortName;
		if(s == null || s.length == 0) {
			this.ShortName = this.Name;
			if(this.ShortName.length > 10) {
				this.ShortName = HxOverrides.substr(this.ShortName,0,10);
			}
		}
		var i = 0;
		var j = this.Staves.length;
		while(i < j) {
			this.Staves[i].Finish();
			++i;
		}
	}
	,ApplyLyrics: function(lyrics) {
		var lyric = $iterator(lyrics)();
		while(lyric.hasNext()) {
			var lyric1 = lyric.next();
			lyric1.Finish();
		}
		var staff = this.Staves[0];
		var li = 0;
		while(li < lyrics.length) {
			var lyric2 = lyrics[li];
			if(lyric2.StartBar >= 0) {
				var beat = staff.Bars[lyric2.StartBar].Voices[0].Beats[0];
				var ci = 0;
				while(ci < lyric2.Chunks.length && beat != null) {
					while(beat != null && (beat.IsEmpty || beat.get_IsRest())) beat = beat.NextBeat;
					if(beat != null) {
						if(beat.Lyrics == null) {
							var size = lyrics.length;
							var this1 = new Array(size);
							beat.Lyrics = this1;
						}
						beat.Lyrics[li] = lyric2.Chunks[ci];
						beat = beat.NextBeat;
					}
					++ci;
				}
			}
			++li;
		}
	}
	,__class__: alphaTab.model.Track
};
alphaTab.model._TripletFeel = {};
alphaTab.model._TripletFeel.TripletFeel_Impl_ = $hx_exports["alphaTab"]["model"]["_TripletFeel"]["TripletFeel_Impl_"] = {};
alphaTab.model._TripletFeel.TripletFeel_Impl_.__name__ = ["alphaTab","model","_TripletFeel","TripletFeel_Impl_"];
alphaTab.model._TripletFeel.TripletFeel_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._TripletFeel.TripletFeel_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "NoTripletFeel";
	case 1:
		return "Triplet16th";
	case 2:
		return "Triplet8th";
	case 3:
		return "Dotted16th";
	case 4:
		return "Dotted8th";
	case 5:
		return "Scottish16th";
	case 6:
		return "Scottish8th";
	}
	return "";
};
alphaTab.model.Tuning = $hx_exports["alphaTab"]["model"]["Tuning"] = function(name,tuning,isStandard) {
	this.IsStandard = false;
	this.Name = null;
	this.Tunings = null;
	this.IsStandard = isStandard;
	this.Name = name;
	this.Tunings = tuning;
};
alphaTab.model.Tuning.__name__ = ["alphaTab","model","Tuning"];
alphaTab.model.Tuning.GetTextForTuning = function(tuning,includeOctave) {
	var octave = tuning / 12 | 0;
	var note = tuning % 12;
	var notes = ["C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B"];
	var result = notes[note];
	if(includeOctave) {
		result = result + Std.string(octave - 1);
	}
	return result;
};
alphaTab.model.Tuning.GetDefaultTuningFor = function(stringCount) {
	if(alphaTab.model.Tuning._defaultTunings.hasOwnProperty(stringCount)) {
		return alphaTab.model.Tuning._defaultTunings[stringCount];
	}
	return null;
};
alphaTab.model.Tuning.GetPresetsFor = function(stringCount) {
	switch(stringCount) {
	case 4:
		return alphaTab.model.Tuning._fourStrings;
	case 5:
		return alphaTab.model.Tuning._fiveStrings;
	case 6:
		return alphaTab.model.Tuning._sixStrings;
	case 7:
		return alphaTab.model.Tuning._sevenStrings;
	default:
	}
	var this1 = [];
	return this1;
};
alphaTab.model.Tuning.Initialize = function() {
	var this1 = [];
	alphaTab.model.Tuning._sevenStrings = this1;
	var this2 = [];
	alphaTab.model.Tuning._sixStrings = this2;
	var this3 = [];
	alphaTab.model.Tuning._fiveStrings = this3;
	var this4 = [];
	alphaTab.model.Tuning._fourStrings = this4;
	var this5 = {}
	alphaTab.model.Tuning._defaultTunings = this5;
	alphaTab.model.Tuning._defaultTunings[7] = new alphaTab.model.Tuning("Guitar 7 strings",new Int32Array([64,59,55,50,45,40,35]),true);
	alphaTab.model.Tuning._sevenStrings.push(alphaTab.model.Tuning._defaultTunings[7]);
	alphaTab.model.Tuning._defaultTunings[6] = new alphaTab.model.Tuning("Guitar Standard Tuning",new Int32Array([64,59,55,50,45,40]),true);
	alphaTab.model.Tuning._sixStrings.push(alphaTab.model.Tuning._defaultTunings[6]);
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Tune down � step",new Int32Array([63,58,54,49,44,39]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Tune down 1 step",new Int32Array([62,57,53,48,43,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Tune down 2 step",new Int32Array([60,55,51,46,41,36]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Dropped D Tuning",new Int32Array([64,59,55,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Dropped D Tuning variant",new Int32Array([64,57,55,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Double Dropped D Tuning",new Int32Array([62,59,55,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Dropped E Tuning",new Int32Array([66,61,57,52,47,40]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Dropped C Tuning",new Int32Array([62,57,53,48,43,36]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open C Tuning",new Int32Array([64,60,55,48,43,36]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Cm Tuning",new Int32Array([63,60,55,48,43,36]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open C6 Tuning",new Int32Array([64,57,55,48,43,36]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Cmaj7 Tuning",new Int32Array([64,59,55,52,43,36]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open D Tuning",new Int32Array([62,57,54,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Dm Tuning",new Int32Array([62,57,53,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open D5 Tuning",new Int32Array([62,57,50,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open D6 Tuning",new Int32Array([62,59,54,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Dsus4 Tuning",new Int32Array([62,57,55,50,45,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open E Tuning",new Int32Array([64,59,56,52,47,40]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Em Tuning",new Int32Array([64,59,55,52,47,40]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Esus11 Tuning",new Int32Array([64,59,55,52,45,40]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open F Tuning",new Int32Array([65,60,53,48,45,41]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open G Tuning",new Int32Array([62,59,55,50,43,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Gm Tuning",new Int32Array([62,58,55,50,43,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open G6 Tuning",new Int32Array([64,59,55,50,43,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Gsus4 Tuning",new Int32Array([62,60,55,50,43,38]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open A Tuning",new Int32Array([64,61,57,52,45,40]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Open Am Tuning",new Int32Array([64,60,57,52,45,40]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Guitar Nashville Tuning",new Int32Array([64,59,67,62,57,52]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Bass 6 Strings Tuning",new Int32Array([48,43,38,33,28,23]),false));
	alphaTab.model.Tuning._sixStrings.push(new alphaTab.model.Tuning("Lute or Vihuela Tuning",new Int32Array([64,59,54,50,45,40]),false));
	alphaTab.model.Tuning._defaultTunings[5] = new alphaTab.model.Tuning("Bass 5 Strings Tuning",new Int32Array([43,38,33,28,23]),true);
	alphaTab.model.Tuning._fiveStrings.push(alphaTab.model.Tuning._defaultTunings[5]);
	alphaTab.model.Tuning._fiveStrings.push(new alphaTab.model.Tuning("Banjo Dropped C Tuning",new Int32Array([62,59,55,48,67]),false));
	alphaTab.model.Tuning._fiveStrings.push(new alphaTab.model.Tuning("Banjo Open D Tuning",new Int32Array([62,57,54,50,69]),false));
	alphaTab.model.Tuning._fiveStrings.push(new alphaTab.model.Tuning("Banjo Open G Tuning",new Int32Array([62,59,55,50,67]),false));
	alphaTab.model.Tuning._fiveStrings.push(new alphaTab.model.Tuning("Banjo G Minor Tuning",new Int32Array([62,58,55,50,67]),false));
	alphaTab.model.Tuning._fiveStrings.push(new alphaTab.model.Tuning("Banjo G Modal Tuning",new Int32Array([62,57,55,50,67]),false));
	alphaTab.model.Tuning._defaultTunings[4] = new alphaTab.model.Tuning("Bass Standard Tuning",new Int32Array([43,38,33,28]),true);
	alphaTab.model.Tuning._fourStrings.push(alphaTab.model.Tuning._defaultTunings[4]);
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Bass Tune down � step",new Int32Array([42,37,32,27]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Bass Tune down 1 step",new Int32Array([41,36,31,26]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Bass Tune down 2 step",new Int32Array([39,34,29,24]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Bass Dropped D Tuning",new Int32Array([43,38,33,26]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Ukulele C Tuning",new Int32Array([45,40,36,43]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Ukulele G Tuning",new Int32Array([52,47,43,38]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Mandolin Standard Tuning",new Int32Array([64,57,50,43]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Mandolin or Violin Tuning",new Int32Array([76,69,62,55]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Viola Tuning",new Int32Array([69,62,55,48]),false));
	alphaTab.model.Tuning._fourStrings.push(new alphaTab.model.Tuning("Cello Tuning",new Int32Array([57,50,43,36]),false));
};
alphaTab.model.Tuning.FindTuning = function(strings) {
	var tunings = alphaTab.model.Tuning.GetPresetsFor(strings.length);
	var t = 0;
	var tc = tunings.length;
	while(t < tc) {
		var tuning = tunings[t];
		var equals = true;
		var i = 0;
		var j = strings.length;
		while(i < j) {
			if(strings[i] != tuning.Tunings[i]) {
				equals = false;
				break;
			}
			++i;
		}
		if(equals) {
			return tuning;
		}
		++t;
	}
	return null;
};
alphaTab.model.Tuning.prototype = {
	__class__: alphaTab.model.Tuning
};
alphaTab.model.TuningParseResult = $hx_exports["alphaTab"]["model"]["TuningParseResult"] = function() {
};
alphaTab.model.TuningParseResult.__name__ = ["alphaTab","model","TuningParseResult"];
alphaTab.model.TuningParseResult.prototype = {
	get_RealValue: function() {
		return this.Octave * 12 + this.NoteValue;
	}
	,__class__: alphaTab.model.TuningParseResult
};
alphaTab.model.TuningParser = $hx_exports["alphaTab"]["model"]["TuningParser"] = function() { };
alphaTab.model.TuningParser.__name__ = ["alphaTab","model","TuningParser"];
alphaTab.model.TuningParser.IsTuning = function(name) {
	return alphaTab.model.TuningParser.Parse(name) != null;
};
alphaTab.model.TuningParser.Parse = function(name) {
	var note = "";
	var octave = "";
	var i = 0;
	while(i < name.length) {
		var this1 = system.Convert.ToUInt16(HxOverrides.cca(name,i));
		var c = this1;
		if(alphaTab.platform.Platform.IsCharNumber(c,false)) {
			if(note == null || note.length == 0) {
				return null;
			}
			octave = octave + String.fromCharCode(c);
		} else if(c >= 65 && c <= 90 || c >= 97 && c <= 122 || c == 35) {
			note = note + String.fromCharCode(c);
		} else {
			return null;
		}
		++i;
	}
	if(octave == null || octave.length == 0 || (note == null || note.length == 0)) {
		return null;
	}
	var result = new alphaTab.model.TuningParseResult();
	result.Octave = alphaTab.platform.Platform.ParseInt(octave) + 1;
	result.Note = note.toLowerCase();
	result.NoteValue = alphaTab.model.TuningParser.GetToneForText(result.Note);
	return result;
};
alphaTab.model.TuningParser.GetTuningForText = function(str) {
	var result = alphaTab.model.TuningParser.Parse(str);
	if(result == null) {
		return -1;
	}
	return result.get_RealValue();
};
alphaTab.model.TuningParser.GetToneForText = function(note) {
	var b;
	var _g = note.toLowerCase();
	switch(_g) {
	case "a":
		b = 9;
		break;
	case "a#":case "bb":
		b = 10;
		break;
	case "ab":case "g#":
		b = 8;
		break;
	case "b":
		b = 11;
		break;
	case "c":
		b = 0;
		break;
	case "c#":case "db":
		b = 1;
		break;
	case "d":
		b = 2;
		break;
	case "e":
		b = 4;
		break;
	case "d#":case "eb":
		b = 3;
		break;
	case "f":
		b = 5;
		break;
	case "g":
		b = 7;
		break;
	case "f#":case "gb":
		b = 6;
		break;
	default:
		return 0;
	}
	return b;
};
alphaTab.model._VibratoType = {};
alphaTab.model._VibratoType.VibratoType_Impl_ = $hx_exports["alphaTab"]["model"]["_VibratoType"]["VibratoType_Impl_"] = {};
alphaTab.model._VibratoType.VibratoType_Impl_.__name__ = ["alphaTab","model","_VibratoType","VibratoType_Impl_"];
alphaTab.model._VibratoType.VibratoType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.model._VibratoType.VibratoType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._VibratoType.VibratoType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._VibratoType.VibratoType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.model._VibratoType.VibratoType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._VibratoType.VibratoType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.model._VibratoType.VibratoType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Slight";
	case 2:
		return "Wide";
	}
	return "";
};
alphaTab.model.Voice = $hx_exports["alphaTab"]["model"]["Voice"] = function() {
	this.Index = 0;
	this.Bar = null;
	this.Beats = null;
	this.IsEmpty = false;
	var this1 = [];
	this.Beats = this1;
	this.IsEmpty = true;
};
alphaTab.model.Voice.__name__ = ["alphaTab","model","Voice"];
alphaTab.model.Voice.CopyTo = function(src,dst) {
	dst.Index = src.Index;
	dst.IsEmpty = src.IsEmpty;
};
alphaTab.model.Voice.prototype = {
	AddBeat: function(beat) {
		beat.Voice = this;
		beat.Index = this.Beats.length;
		this.Beats.push(beat);
		if(!beat.IsEmpty) {
			this.IsEmpty = false;
		}
	}
	,Chain: function(beat) {
		if(this.Bar == null) {
			return;
		}
		if(beat.Index < this.Beats.length - 1) {
			beat.NextBeat = this.Beats[beat.Index + 1];
			beat.NextBeat.PreviousBeat = beat;
		} else if(beat.Index == beat.Voice.Beats.length - 1 && beat.Voice.Bar.NextBar != null) {
			var nextVoice = this.Bar.NextBar.Voices[this.Index];
			if(nextVoice.Beats.length > 0) {
				beat.NextBeat = nextVoice.Beats[0];
				beat.NextBeat.PreviousBeat = beat;
			} else {
				beat.NextBeat.PreviousBeat = beat;
			}
		}
	}
	,AddGraceBeat: function(beat) {
		if(this.Beats.length == 0) {
			this.AddBeat(beat);
			return;
		}
		var lastBeat = this.Beats[this.Beats.length - 1];
		var index = this.Beats.length - 1;
		if(index != -1) {
			this.Beats.splice(index,1);
		}
		this.AddBeat(beat);
		this.AddBeat(lastBeat);
		this.IsEmpty = false;
	}
	,Finish: function() {
		var i = 0;
		var j = this.Beats.length;
		while(i < j) {
			var beat = this.Beats[i];
			this.Chain(beat);
			++i;
		}
		var i1 = 0;
		var j1 = this.Beats.length;
		while(i1 < j1) {
			var beat1 = this.Beats[i1];
			beat1.Finish();
			++i1;
		}
	}
	,__class__: alphaTab.model.Voice
};
alphaTab.platform.javaScript.AlphaSynthFlashOutput = $hx_exports["alphaTab"]["platform"]["javaScript"]["AlphaSynthFlashOutput"] = function(alphaSynthRoot) {
	this._alphaSynthRoot = null;
	this._id = null;
	this._swfId = null;
	this._swfContainer = null;
	this._playbackSpeed = 0.0;
	this._alphaSynthRoot = alphaSynthRoot;
	var lastSlash = this._alphaSynthRoot.lastIndexOf("/");
	if(lastSlash != -1) {
		this._alphaSynthRoot = HxOverrides.substr(this._alphaSynthRoot,0,lastSlash + 1);
	}
};
alphaTab.platform.javaScript.AlphaSynthFlashOutput.__name__ = ["alphaTab","platform","javaScript","AlphaSynthFlashOutput"];
alphaTab.platform.javaScript.AlphaSynthFlashOutput.__interfaces__ = [alphaTab.audio.synth.ISynthOutput];
alphaTab.platform.javaScript.AlphaSynthFlashOutput.OnReady = function(id) {
	if(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup.hasOwnProperty(id)) {
		system._EventAction.EventAction_Impl_.Invoke(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].Ready);
	}
};
alphaTab.platform.javaScript.AlphaSynthFlashOutput.OnSampleRequest = function(id) {
	if(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup.hasOwnProperty(id)) {
		system._EventAction.EventAction_Impl_.Invoke(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].SampleRequest);
	}
};
alphaTab.platform.javaScript.AlphaSynthFlashOutput.OnFinished = function(id) {
	if(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup.hasOwnProperty(id) && alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].Finished != null) {
		system._EventAction.EventAction_Impl_.Invoke(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].Finished);
	}
};
alphaTab.platform.javaScript.AlphaSynthFlashOutput.OnSamplesPlayed = function(id,samples) {
	if(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup.hasOwnProperty(id)) {
		system._EventAction1.EventAction1_Impl_.Invoke(alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[id].SamplesPlayed,samples);
	}
};
alphaTab.platform.javaScript.AlphaSynthFlashOutput.prototype = {
	get_SampleRate: function() {
		return 44100;
	}
	,Open: function() {
		this._playbackSpeed = 1;
		this._id = "alphaSynthFlashPlayer" + Std.string(alphaTab.platform.javaScript.AlphaSynthFlashOutput.NextId);
		this._swfId = this._id + "swf";
		alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup[this._id] = this;
		alphaTab.platform.javaScript.AlphaSynthFlashOutput.NextId++;
		var document = window.document;
		this._swfContainer = document.createElement("div");
		this._swfContainer.className = "alphaSynthFlashPlayer";
		this._swfContainer.setAttribute("id",this._id);
		document.body.appendChild(this._swfContainer);
		var swf = $global.swfobject;
		var embedSwf = swf.embedSWF;
		embedSwf(this._alphaSynthRoot + "AlphaSynth.FlashOutput.swf",this._id,"1px","1px","9.0.0",null,{ id : this._id, sampleRate : 44100},{ allowScriptAccess : "always"},{ id : this._swfId});
	}
	,get_FlashOutput: function() {
		var element = this._swfId;
		var element1 = window.document.getElementById(element);
		return element1;
	}
	,Play: function() {
		var element = this._swfId;
		var element1 = window.document.getElementById(element);
		element1.AlphaSynthPlay();
	}
	,Pause: function() {
		var element = this._swfId;
		var element1 = window.document.getElementById(element);
		element1.AlphaSynthPause();
	}
	,SequencerFinished: function() {
		var element = this._swfId;
		var element1 = window.document.getElementById(element);
		element1.AlphaSynthSequencerFinished();
	}
	,AddSamples: function(samples) {
		var uint8 = new Uint8Array(alphaTab.audio.synth.ds._SampleArray.SampleArray_Impl_.ToFloat32Array(samples).buffer);
		var b64 = window.btoa(String.fromCharCode.apply(null, uint8));
		var element = this._swfId;
		var element1 = window.document.getElementById(element);
		element1.AlphaSynthAddSamples(b64);
	}
	,ResetSamples: function() {
		var element = this._swfId;
		var element1 = window.document.getElementById(element);
		element1.AlphaSynthResetSamples();
	}
	,add_Ready: function(value) {
		return this.Ready = system._EventAction.EventAction_Impl_.add(this.Ready,value);
	}
	,remove_Ready: function(value) {
		return this.Ready = system._EventAction.EventAction_Impl_.sub(this.Ready,value);
	}
	,add_SampleRequest: function(value) {
		return this.SampleRequest = system._EventAction.EventAction_Impl_.add(this.SampleRequest,value);
	}
	,remove_SampleRequest: function(value) {
		return this.SampleRequest = system._EventAction.EventAction_Impl_.sub(this.SampleRequest,value);
	}
	,add_Finished: function(value) {
		return this.Finished = system._EventAction.EventAction_Impl_.add(this.Finished,value);
	}
	,remove_Finished: function(value) {
		return this.Finished = system._EventAction.EventAction_Impl_.sub(this.Finished,value);
	}
	,add_SamplesPlayed: function(value) {
		return this.SamplesPlayed = system._EventAction1.EventAction1_Impl_.add(this.SamplesPlayed,value);
	}
	,remove_SamplesPlayed: function(value) {
		return this.SamplesPlayed = system._EventAction1.EventAction1_Impl_.sub(this.SamplesPlayed,value);
	}
	,__class__: alphaTab.platform.javaScript.AlphaSynthFlashOutput
};
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput = $hx_exports["alphaTab"]["platform"]["javaScript"]["AlphaSynthWebAudioOutput"] = function() {
};
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.__name__ = ["alphaTab","platform","javaScript","AlphaSynthWebAudioOutput"];
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.__interfaces__ = [alphaTab.audio.synth.ISynthOutput];
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.prototype = {
	get_SampleRate: function() {
		return this._context.sampleRate;
	}
	,Open: function() {
		this._finished = false;
		this._circularBuffer = new alphaTab.audio.synth.ds.CircularSampleBuffer(4096 * 10);
		this._context = new AudioContext();
		var ctx = this._context;
		if(ctx.state == "suspended") {
			var resume = null;
			resume = function(e) {
				ctx.resume();
				window.setTimeout(function() {
					if(ctx.state == "running") {
						window.document.body.removeEventListener("touchend",resume,false);
					}
				},0);
			};
			window.document.body.addEventListener("touchend",resume,false);
		}
		this._buffer = this._context.createBuffer(2,4096,this._context.sampleRate);
		this._audioNode = this._context.createScriptProcessor(4096,0,2);
		this._audioNode.onaudioprocess = $bind(this,this.GenerateSound);
		system._EventAction.EventAction_Impl_.Invoke(this.Ready);
	}
	,Play: function() {
		this.RequestBuffers();
		this._finished = false;
		this._source = this._context.createBufferSource();
		this._source.buffer = this._buffer;
		this._source.loop = true;
		this._source.connect(this._audioNode,0,0);
		this._source.start(0);
		this._audioNode.connect(this._context.destination,0,0);
	}
	,Pause: function() {
		if(this._source != null) {
			this._source.stop(0);
			this._source.disconnect(0);
		}
		this._source = null;
		this._audioNode.disconnect(0);
	}
	,SequencerFinished: function() {
		this._finished = true;
	}
	,AddSamples: function(f) {
		this._circularBuffer.Write(f,0,f.length);
	}
	,ResetSamples: function() {
		this._circularBuffer.Clear();
	}
	,RequestBuffers: function() {
		var count = (10 / 2 | 0) * 4096;
		if(this._circularBuffer.get_Count() < count && this.SampleRequest != null) {
			var i = 0;
			while(i < (10 / 2 | 0)) {
				system._EventAction.EventAction_Impl_.Invoke(this.SampleRequest);
				++i;
			}
		}
	}
	,GenerateSound: function(e) {
		var left = e.outputBuffer.getChannelData(0);
		var right = e.outputBuffer.getChannelData(1);
		var samples = left.length + right.length;
		if(this._circularBuffer.get_Count() < samples) {
			if(this._finished) {
				system._EventAction.EventAction_Impl_.Invoke(this.Finished);
			}
		} else {
			var this1 = new Float32Array(samples);
			var buffer = this1;
			this._circularBuffer.Read(buffer,0,buffer.length);
			var s = 0;
			var i = 0;
			while(i < left.length) {
				left[i] = buffer[s++];
				right[i] = buffer[s++];
				++i;
			}
			system._EventAction1.EventAction1_Impl_.Invoke(this.SamplesPlayed,left.length);
		}
		if(!this._finished) {
			this.RequestBuffers();
		}
	}
	,add_Ready: function(value) {
		return this.Ready = system._EventAction.EventAction_Impl_.add(this.Ready,value);
	}
	,remove_Ready: function(value) {
		return this.Ready = system._EventAction.EventAction_Impl_.sub(this.Ready,value);
	}
	,add_SamplesPlayed: function(value) {
		return this.SamplesPlayed = system._EventAction1.EventAction1_Impl_.add(this.SamplesPlayed,value);
	}
	,remove_SamplesPlayed: function(value) {
		return this.SamplesPlayed = system._EventAction1.EventAction1_Impl_.sub(this.SamplesPlayed,value);
	}
	,add_SampleRequest: function(value) {
		return this.SampleRequest = system._EventAction.EventAction_Impl_.add(this.SampleRequest,value);
	}
	,remove_SampleRequest: function(value) {
		return this.SampleRequest = system._EventAction.EventAction_Impl_.sub(this.SampleRequest,value);
	}
	,add_Finished: function(value) {
		return this.Finished = system._EventAction.EventAction_Impl_.add(this.Finished,value);
	}
	,remove_Finished: function(value) {
		return this.Finished = system._EventAction.EventAction_Impl_.sub(this.Finished,value);
	}
	,__class__: alphaTab.platform.javaScript.AlphaSynthWebAudioOutput
};
alphaTab.platform.javaScript.AlphaSynthWebWorkerApi = $hx_exports["alphaTab"]["platform"]["javaScript"]["AlphaSynthWebWorkerApi"] = function(player,alphaSynthScriptFile,logLevel) {
	this._synth = null;
	this._output = null;
	this._events = null;
	this._workerIsReadyForPlayback = false;
	this._workerIsReady = false;
	this._outputIsReady = false;
	this._state = 0;
	this._logLevel = 0;
	this._masterVolume = 0.0;
	this._metronomeVolume = 0.0;
	this._playbackSpeed = 0.0;
	this._isSoundFontLoaded = false;
	this._isMidiLoaded = false;
	this._tickPosition = 0;
	this._timePosition = 0.0;
	this._isLooping = false;
	this._playbackRange = null;
	this._output = player;
	this._output.Ready = system._EventAction.EventAction_Impl_.add(this._output.Ready,$bind(this,this.OnOutputReady));
	this._output.SamplesPlayed = system._EventAction1.EventAction1_Impl_.add(this._output.SamplesPlayed,$bind(this,this.OnOutputSamplesPlayed));
	this._output.SampleRequest = system._EventAction.EventAction_Impl_.add(this._output.SampleRequest,$bind(this,this.OnOutputSampleRequest));
	this._output.Finished = system._EventAction.EventAction_Impl_.add(this._output.Finished,$bind(this,this.OnOutputFinished));
	var this1 = {}
	this._events = this1;
	this._output.Open();
	try {
		this._synth = new Worker(alphaSynthScriptFile);
	} catch( __e ) {
		try {
			var script = "importScripts('" + alphaSynthScriptFile + "')";
			var blob = new Blob([script]);
			this._synth = new Worker(URL.createObjectURL(blob));
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				alphaTab.util.Logger.Error("AlphaSynth","Failed to create WebWorker: " + Std.string(e),null);
			} else throw(e);
		}
	}
	this._synth.addEventListener("message",$bind(this,this.HandleWorkerMessage),false);
	this._synth.postMessage({ cmd : "alphaSynth." + "initialize", sampleRate : this._output.get_SampleRate(), logLevel : logLevel});
	this.set_MasterVolume(1);
	this.set_PlaybackSpeed(1);
	this.set_MetronomeVolume(0);
};
alphaTab.platform.javaScript.AlphaSynthWebWorkerApi.__name__ = ["alphaTab","platform","javaScript","AlphaSynthWebWorkerApi"];
alphaTab.platform.javaScript.AlphaSynthWebWorkerApi.__interfaces__ = [alphaTab.audio.synth.IAlphaSynth];
alphaTab.platform.javaScript.AlphaSynthWebWorkerApi.prototype = {
	get_IsReady: function() {
		if(this._workerIsReady) {
			return this._outputIsReady;
		} else {
			return false;
		}
	}
	,get_IsReadyForPlayback: function() {
		return this._workerIsReadyForPlayback;
	}
	,get_State: function() {
		return this._state;
	}
	,get_LogLevel: function() {
		return alphaTab.util.Logger.LogLevel;
	}
	,set_LogLevel: function(value) {
		alphaTab.util.Logger.LogLevel = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setLogLevel", value : value});
		return this.get_LogLevel();
	}
	,get_MasterVolume: function() {
		return this._masterVolume;
	}
	,set_MasterVolume: function(value) {
		value = alphaTab.audio.synth.util.SynthHelper.ClampF(value,0,10);
		this._masterVolume = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setMasterVolume", value : value});
		return this.get_MasterVolume();
	}
	,get_MetronomeVolume: function() {
		return this._metronomeVolume;
	}
	,set_MetronomeVolume: function(value) {
		value = alphaTab.audio.synth.util.SynthHelper.ClampF(value,0,10);
		this._metronomeVolume = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setMetronomeVolume", value : value});
		return this.get_MetronomeVolume();
	}
	,get_PlaybackSpeed: function() {
		return this._playbackSpeed;
	}
	,set_PlaybackSpeed: function(value) {
		value = alphaTab.audio.synth.util.SynthHelper.ClampD(value,0.125,8);
		this._playbackSpeed = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setPlaybackSpeed", value : value});
		return this.get_PlaybackSpeed();
	}
	,get_TickPosition: function() {
		return this._tickPosition;
	}
	,set_TickPosition: function(value) {
		if(value < 0) {
			value = 0;
		}
		this._tickPosition = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setTickPosition", value : value});
		return this.get_TickPosition();
	}
	,get_TimePosition: function() {
		return this._timePosition;
	}
	,set_TimePosition: function(value) {
		if(value < 0) {
			value = 0;
		}
		this._timePosition = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setTimePosition", value : value});
		return this.get_TimePosition();
	}
	,get_IsLooping: function() {
		return this._isLooping;
	}
	,set_IsLooping: function(value) {
		this._isLooping = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setIsLooping", value : value});
		return this.get_IsLooping();
	}
	,get_PlaybackRange: function() {
		return this._playbackRange;
	}
	,set_PlaybackRange: function(value) {
		if(value != null) {
			if(value.StartTick < 0) {
				value.StartTick = 0;
			}
			if(value.EndTick < 0) {
				value.EndTick = 0;
			}
		}
		this._playbackRange = value;
		this._synth.postMessage({ cmd : "alphaSynth." + "setPlaybackRange", value : value});
		return this.get_PlaybackRange();
	}
	,Play: function() {
		this._synth.postMessage({ cmd : "alphaSynth." + "play"});
	}
	,Pause: function() {
		this._synth.postMessage({ cmd : "alphaSynth." + "pause"});
	}
	,PlayPause: function() {
		this._synth.postMessage({ cmd : "alphaSynth." + "playPause"});
	}
	,Stop: function() {
		this._synth.postMessage({ cmd : "alphaSynth." + "stop"});
	}
	,LoadSoundFont: function(data) {
		this._synth.postMessage({ cmd : "alphaSynth." + "loadSoundFontBytes", data : data});
	}
	,LoadSoundFontFromUrl: function(data) {
		var _gthis = this;
		var url = data;
		alphaTab.util.Logger.Info("AlphaSynth","Start loading Soundfont from url " + url,null);
		var request = new XMLHttpRequest();
		request.open("GET",url,true,null,null);
		request.responseType = "arraybuffer";
		request.onload = function(e) {
			var buffer = new Uint8Array(request.response);
			_gthis._synth.postMessage({ cmd : "alphaSynth." + "loadSoundFontBytes", data : buffer});
		};
		request.onerror = function(e1) {
			alphaTab.util.Logger.Error("AlphaSynth","Loading failed: " + e1["message"],null);
			_gthis.TriggerEvent("soundFontLoadFailed",null);
		};
		request.onprogress = function(e2) {
			alphaTab.util.Logger.Debug("AlphaSynth","Soundfont downloading: " + e2["loaded"] + "/" + e2["total"] + " bytes",null);
			_gthis.TriggerEvent("soundFontLoad",[{ loaded : e2["loaded"], total : e2["total"]}]);
		};
		request.send();
	}
	,LoadMidiFile: function(midi) {
		this._synth.postMessage({ cmd : "alphaSynth." + "loadMidi", midi : alphaTab.model.JsonConverter.MidiFileToJsObject(midi)});
	}
	,SetChannelMute: function(channel,mute) {
		this._synth.postMessage({ cmd : "alphaSynth." + "setChannelMute", channel : channel, mute : mute});
	}
	,ResetChannelStates: function() {
		this._synth.postMessage({ cmd : "alphaSynth." + "resetChannelStates"});
	}
	,SetChannelSolo: function(channel,solo) {
		this._synth.postMessage({ cmd : "alphaSynth." + "setChannelSolo", channel : channel, solo : solo});
	}
	,SetChannelVolume: function(channel,volume) {
		var this1 = 0;
		var this2 = 10;
		volume = alphaTab.audio.synth.util.SynthHelper.ClampD(volume,this1,this2);
		this._synth.postMessage({ cmd : "alphaSynth." + "setChannelVolume", channel : channel, volume : volume});
	}
	,SetChannelProgram: function(channel,program) {
		program = alphaTab.audio.synth.util.SynthHelper.ClampB(program,0,127);
		this._synth.postMessage({ cmd : "alphaSynth." + "setChannelProgram", channel : channel, program : program});
	}
	,HandleWorkerMessage: function(e) {
		var data = e.data;
		var cmd = data.cmd;
		switch(cmd) {
		case "alphaSynth.finished":
			this.TriggerEvent("finished",null);
			break;
		case "alphaSynth.log":
			alphaTab.util.Logger.Log(data.level,"AlphaSynth",data.message,null);
			break;
		case "alphaSynth.midiLoadFailed":
			this._isSoundFontLoaded = true;
			this.CheckReadyForPlayback();
			this.TriggerEvent("midiFileLoadFailed",null);
			break;
		case "alphaSynth.midiLoaded":
			this._isMidiLoaded = true;
			this.CheckReadyForPlayback();
			this.TriggerEvent("midiFileLoaded",null);
			break;
		case "alphaSynth.output.addSamples":
			this._output.AddSamples(data.samples);
			break;
		case "alphaSynth.output.pause":
			this._output.Pause();
			break;
		case "alphaSynth.output.play":
			this._output.Play();
			break;
		case "alphaSynth.output.resetSamples":
			this._output.ResetSamples();
			break;
		case "alphaSynth.output.sequencerFinished":
			this._output.SequencerFinished();
			break;
		case "alphaSynth.playerStateChanged":
			this._state = data.state;
			this.TriggerEvent("playerStateChanged",[new alphaTab.audio.synth.PlayerStateChangedEventArgs(data.state)]);
			break;
		case "alphaSynth.positionChanged":
			this._timePosition = data.currentTime;
			this._tickPosition = data.currentTick;
			this.TriggerEvent("positionChanged",[new alphaTab.audio.synth.PositionChangedEventArgs(data.currentTime,data.endTime,data.currentTick,data.endTick)]);
			break;
		case "alphaSynth.ready":
			this._workerIsReady = true;
			this.CheckReady();
			break;
		case "alphaSynth.readyForPlayback":
			this._workerIsReadyForPlayback = true;
			this.CheckReadyForPlayback();
			break;
		case "alphaSynth.soundFontLoadFailed":
			this.TriggerEvent("soundFontLoadFailed",null);
			break;
		case "alphaSynth.soundFontLoaded":
			this.TriggerEvent("soundFontLoaded",null);
			break;
		default:
		}
	}
	,CheckReady: function() {
		if(this.get_IsReady()) {
			this.TriggerEvent("ready",null);
		}
	}
	,CheckReadyForPlayback: function() {
		if(this.get_IsReadyForPlayback()) {
			this.TriggerEvent("readyForPlayback",null);
		}
	}
	,On: function(events,action) {
		if(!this._events.hasOwnProperty(events)) {
			var this1 = this._events;
			var this2 = [];
			this1[events] = this2;
		}
		this._events[events].push(action);
	}
	,TriggerEvent: function(name,args) {
		var events = this._events[name];
		if(events != null) {
			var i = 0;
			while(i < events.length) {
				var action = events[i];
				action.apply(null, args);
				++i;
			}
		}
	}
	,OnOutputSampleRequest: function() {
		this._synth.postMessage({ cmd : "alphaSynth." + "output." + "sampleRequest"});
	}
	,OnOutputFinished: function() {
		this._synth.postMessage({ cmd : "alphaSynth." + "output." + "finished"});
	}
	,OnOutputSamplesPlayed: function(samples) {
		this._synth.postMessage({ cmd : "alphaSynth." + "output." + "samplesPlayed", samples : samples});
	}
	,OnOutputReady: function() {
		this._outputIsReady = true;
		this.CheckReady();
	}
	,__class__: alphaTab.platform.javaScript.AlphaSynthWebWorkerApi
};
alphaTab.platform.javaScript.AlphaTabApi = $hx_exports["alphaTab"]["platform"]["javaScript"]["AlphaTabApi"] = function(element,options) {
	var _gthis = this;
	this._element = null;
	this._canvasElement = null;
	this._visibilityCheckerInterval = 0;
	this._visibilityCheckerIntervalId = 0;
	this._renderResults = null;
	this._totalResultCount = 0;
	this.Settings = null;
	this.Renderer = null;
	this.Score = null;
	this.TrackIndexes = null;
	this.Player = null;
	this._playbackSpeed = 0.0;
	this._tickCache = null;
	this._cursorWrapper = null;
	this._beatCursor = null;
	this._barCursor = null;
	this._selectionWrapper = null;
	this._previousTick = 0;
	this._cursorCache = null;
	this._playerState = 0;
	this._selectionStart = null;
	this._selectionEnd = null;
	this._selecting = false;
	this._currentBeat = null;
	this._previousStateForCursor = 0;
	this._lastScroll = 0;
	this._element = element;
	this._element.classList.add("alphaTab");
	var dataAttributes = this.GetDataAttributes();
	var settings = this.Settings = alphaTab.Settings.FromJson(options,dataAttributes);
	var autoSize = settings.Width < 0;
	alphaTab.util.Logger.LogLevel = settings.LogLevel;
	var tracksData;
	if(options != null && options.tracks) {
		tracksData = options.tracks;
	} else if(dataAttributes.hasOwnProperty("tracks")) {
		tracksData = dataAttributes["tracks"];
	} else {
		tracksData = 0;
	}
	this.SetTracks(tracksData,false);
	var contents = "";
	if(element != null) {
		if(dataAttributes.hasOwnProperty("tex") && !(!element.innerText)) {
			contents = element.innerHTML;
			element.innerHTML = "";
			contents = StringTools.trim(contents);
		}
		this._canvasElement = window.document.createElement("div");
		this._canvasElement.className = "alphaTabSurface";
		this._canvasElement.style.fontSize = "0";
		this._canvasElement.style.overflow = "hidden";
		this._canvasElement.style.lineHeight = "0";
		element.appendChild(this._canvasElement);
		if(settings.Engine == "default" || settings.Engine == "svg") {
			window.addEventListener("scroll",function() {
				_gthis.ShowSvgsInViewPort();
			},true);
			window.addEventListener("resize",function() {
				_gthis.ShowSvgsInViewPort();
			},true);
		}
		if(autoSize) {
			settings.Width = element.offsetWidth;
			var timeoutId = 0;
			window.addEventListener("resize",function() {
				window.clearTimeout(timeoutId);
				timeoutId = window.setTimeout(function() {
					if(element.offsetWidth != settings.Width) {
						_gthis.TriggerResize();
					}
				},1);
			});
		}
	}
	this.CreateStyleElement(settings);
	if(element != null && autoSize) {
		var initialResizeEventInfo = new alphaTab.platform.javaScript.ResizeEventArgs();
		initialResizeEventInfo.OldWidth = 0;
		initialResizeEventInfo.NewWidth = element.offsetWidth;
		initialResizeEventInfo.Settings = settings;
		this.TriggerEvent("resize",initialResizeEventInfo);
		settings.Width = initialResizeEventInfo.NewWidth;
	}
	var workersUnsupported = !window["Worker"];
	if(settings.UseWebWorker && !workersUnsupported && settings.Engine != "html5") {
		this.Renderer = new alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer(this,settings);
	} else {
		this.Renderer = new alphaTab.rendering.ScoreRenderer(settings);
	}
	this.Renderer.RenderFinished = system._EventAction1.EventAction1_Impl_.add(this.Renderer.RenderFinished,function(o) {
		_gthis.TriggerEvent("rendered",null);
	});
	this.Renderer.PostRenderFinished = system._EventAction.EventAction_Impl_.add(this.Renderer.PostRenderFinished,function() {
		_gthis._element.classList.remove("loading");
		_gthis._element.classList.remove("rendering");
		_gthis.TriggerEvent("postRendered",null);
	});
	this.Renderer.PreRender = system._EventAction1.EventAction1_Impl_.add(this.Renderer.PreRender,function(result) {
		var this1 = [];
		_gthis._renderResults = this1;
		_gthis._totalResultCount = 0;
		_gthis.AppendRenderResult(result);
	});
	this.Renderer.PartialRenderFinished = system._EventAction1.EventAction1_Impl_.add(this.Renderer.PartialRenderFinished,$bind(this,this.AppendRenderResult));
	this.Renderer.RenderFinished = system._EventAction1.EventAction1_Impl_.add(this.Renderer.RenderFinished,function(r) {
		_gthis.AppendRenderResult(r);
		_gthis.AppendRenderResult(null);
	});
	this.Renderer.Error = system._EventAction2.EventAction2_Impl_.add(this.Renderer.Error,$bind(this,this.Error));
	if(settings.EnablePlayer) {
		this.SetupPlayer();
	}
	var initialRender = function() {
		if(autoSize) {
			_gthis.Settings.Width = _gthis._element.offsetWidth;
			_gthis.Renderer.UpdateSettings(settings);
		}
		if(!(contents == null || contents.length == 0)) {
			_gthis.Tex(contents);
		} else if(options && options.file) {
			_gthis.Load(options.file);
		} else if(dataAttributes.hasOwnProperty("file")) {
			_gthis.Load(dataAttributes["file"]);
		}
	};
	this._visibilityCheckerInterval = 500;
	if(options && options.visibilityCheckInterval) {
		this._visibilityCheckerInterval = options.visibilityCheckInterval;
	}
	if(this.get_IsElementVisible()) {
		initialRender();
	} else {
		alphaTab.util.Logger.Warning("Rendering","AlphaTab container is invisible, checking for element visibility in " + this._visibilityCheckerInterval + "ms intervals",null);
		this._visibilityCheckerIntervalId = window.setInterval(function() {
			if(_gthis.get_IsElementVisible()) {
				alphaTab.util.Logger.Info("Rendering","AlphaTab container became visible, triggering initial rendering",null);
				initialRender();
				window.clearInterval(_gthis._visibilityCheckerIntervalId);
				_gthis._visibilityCheckerIntervalId = 0;
			}
		},this._visibilityCheckerInterval);
	}
};
alphaTab.platform.javaScript.AlphaTabApi.__name__ = ["alphaTab","platform","javaScript","AlphaTabApi"];
alphaTab.platform.javaScript.AlphaTabApi.IsElementInViewPort = function(el) {
	var rect = el.getBoundingClientRect();
	if(rect.top + rect.height >= 0 && rect.top <= window.innerHeight && rect.left + rect.width >= 0) {
		return rect.left <= window.innerWidth;
	} else {
		return false;
	}
};
alphaTab.platform.javaScript.AlphaTabApi.prototype = {
	get_IsElementVisible: function() {
		if(!(!(!this._element.offsetWidth) || !(!this._element.offsetHeight))) {
			return !(!this._element.getClientRects().length);
		} else {
			return true;
		}
	}
	,get_Tracks: function() {
		var tracks = this.TrackIndexesToTracks(this.TrackIndexes);
		if(tracks.length == 0 && this.Score.Tracks.length > 0) {
			tracks.push(this.Score.Tracks[0]);
		}
		return tracks;
	}
	,GetDataAttributes: function() {
		var this1 = {}
		var dataAttributes = this1;
		if(this._element.dataset) {
			var json = this._element.dataset;
			var key = HxOverrides.iter(Object.keys(json));
			while(key.hasNext()) {
				var key1 = key.next();
				var value = this._element.dataset[key1];
				try {
					var stringValue = value;
					value = JSON.parse(stringValue);
				} catch( __e ) {
					if(value == "") {
						value = null;
					}
				}
				dataAttributes[key1] = value;
			}
		} else {
			var i = 0;
			while(i < this._element.attributes.length) {
				var attr = this._element.attributes.item(i);
				var nodeName = attr.nodeName;
				if(StringTools.startsWith(nodeName,"data-")) {
					var a = HxOverrides.substr(nodeName,5,null);
					var this2 = system.Convert.ToUInt16(45);
					var this3 = this2;
					var keyParts = system._CsString.CsString_Impl_.Split_CharArray(a,[this3]);
					var key2 = keyParts[0];
					var j = 1;
					while(j < keyParts.length) {
						key2 = key2 + (HxOverrides.substr(keyParts[j],0,1).toUpperCase() + HxOverrides.substr(keyParts[j],1,null));
						++j;
					}
					var value1 = attr.nodeValue;
					try {
						value1 = JSON.parse(value1);
					} catch( __e1 ) {
						if(value1 == "") {
							value1 = null;
						}
					}
					dataAttributes[key2] = value1;
				}
				++i;
			}
		}
		return dataAttributes;
	}
	,TriggerResize: function() {
		if(this.get_IsElementVisible()) {
			if(this._visibilityCheckerIntervalId != 0) {
				alphaTab.util.Logger.Info("Rendering","AlphaTab container became visible again, doing autosizing",null);
				window.clearInterval(this._visibilityCheckerIntervalId);
				this._visibilityCheckerIntervalId = 0;
			}
			var resizeEventInfo = new alphaTab.platform.javaScript.ResizeEventArgs();
			resizeEventInfo.OldWidth = this.Settings.Width;
			resizeEventInfo.NewWidth = this._element.offsetWidth;
			resizeEventInfo.Settings = this.Settings;
			this.TriggerEvent("resize",resizeEventInfo);
			this.Settings.Width = resizeEventInfo.NewWidth;
			this.Renderer.UpdateSettings(this.Settings);
			this.Renderer.Resize(this._element.offsetWidth);
		} else if(this._visibilityCheckerIntervalId == 0) {
			alphaTab.util.Logger.Warning("Rendering","AlphaTab container was invisible while autosizing, checking for element visibility in " + this._visibilityCheckerInterval + "ms intervals",null);
			this._visibilityCheckerIntervalId = window.setInterval($bind(this,this.TriggerResize),this._visibilityCheckerInterval);
		}
	}
	,ShowSvgsInViewPort: function() {
		var placeholders = this._canvasElement.querySelectorAll("[data-lazy=true]");
		var i = 0;
		while(i < placeholders.length) {
			var placeholder = placeholders.item(i);
			if(alphaTab.platform.javaScript.AlphaTabApi.IsElementInViewPort(placeholder)) {
				placeholder.outerHTML = placeholder["svg"];
			}
			++i;
		}
	}
	,Print: function(width) {
		var preview = window.open("","","width=0,height=0");
		var a4 = preview.document.createElement("div");
		if(!(width == null || width.length == 0)) {
			a4.style.width = width;
		} else if(this.Settings.Layout.Mode == "horizontal") {
			a4.style.width = "297mm";
		} else {
			a4.style.width = "210mm";
		}
		preview.document.write("<!DOCTYPE html><html></head><body></body></html>");
		preview.document.body.appendChild(a4);
		var dualScreenLeft;
		var o = window["ScreenLeft"];
		if(typeof(o) != "undefined") {
			dualScreenLeft = window["ScreenLeft"];
		} else {
			dualScreenLeft = window.screen.left;
		}
		var dualScreenTop;
		var o1 = window["ScreenTop"];
		if(typeof(o1) != "undefined") {
			dualScreenTop = window["ScreenTop"];
		} else {
			dualScreenTop = window.screen.top;
		}
		var screenWidth;
		var o2 = window.innerWidth;
		if(typeof(o2) != "undefined") {
			screenWidth = window.innerWidth;
		} else {
			var o3 = window.document.documentElement.clientWidth;
			if(typeof(o3) != "undefined") {
				screenWidth = window.document.documentElement.clientWidth;
			} else {
				screenWidth = window.screen.width;
			}
		}
		var screenHeight;
		var o4 = window.innerHeight;
		if(typeof(o4) != "undefined") {
			screenHeight = window.innerHeight;
		} else {
			var o5 = window.document.documentElement.clientHeight;
			if(typeof(o5) != "undefined") {
				screenHeight = window.document.documentElement.clientHeight;
			} else {
				screenHeight = window.screen.height;
			}
		}
		var w = a4.offsetWidth + 50;
		var h = window.innerHeight;
		var left = (screenWidth / 2 | 0) - (w / 2 | 0) + dualScreenLeft;
		var top = (screenHeight / 2 | 0) - (h / 2 | 0) + dualScreenTop;
		preview.resizeTo(w,h);
		preview.moveTo(left,top);
		preview.focus();
		var settings = alphaTab.Settings.get_Defaults();
		settings.ScriptFile = this.Settings.ScriptFile;
		settings.FontDirectory = this.Settings.FontDirectory;
		settings.Scale = 0.8;
		settings.StretchForce = 0.8;
		settings.DisableLazyLoading = true;
		settings.UseWebWorker = false;
		var alphaTab1 = new alphaTab.platform.javaScript.AlphaTabApi(a4,settings);
		alphaTab1.Renderer.PostRenderFinished = system._EventAction.EventAction_Impl_.add(alphaTab1.Renderer.PostRenderFinished,function() {
			alphaTab1._canvasElement.style.height = "100%";
			preview.print();
		});
		var tmp = this.get_Tracks();
		alphaTab1.SetTracks(tmp,true);
	}
	,AppendRenderResult: function(result) {
		var _gthis = this;
		if(result != null) {
			this._canvasElement.style.width = Std.string(result.TotalWidth) + "px";
			this._canvasElement.style.height = Std.string(result.TotalHeight) + "px";
		}
		if(result == null || result.RenderResult != null) {
			this._renderResults.push(result);
			window.setTimeout(function() {
				while(_gthis._renderResults.length > 0) {
					var renderResult = _gthis._renderResults[0];
					if(true) {
						_gthis._renderResults.splice(0,1);
					}
					if(renderResult == null) {
						while(_gthis._canvasElement.childElementCount > _gthis._totalResultCount) _gthis._canvasElement.removeChild(_gthis._canvasElement.lastChild);
					} else {
						var body = renderResult.RenderResult;
						if(typeof(body) == "string") {
							var placeholder;
							if(_gthis._totalResultCount < _gthis._canvasElement.childElementCount) {
								placeholder = _gthis._canvasElement.childNodes.item(_gthis._totalResultCount);
							} else {
								placeholder = window.document.createElement("div");
								_gthis._canvasElement.appendChild(placeholder);
							}
							placeholder.style.width = Std.string(renderResult.Width) + "px";
							placeholder.style.height = Std.string(renderResult.Height) + "px";
							placeholder.style.display = "inline-block";
							if(alphaTab.platform.javaScript.AlphaTabApi.IsElementInViewPort(placeholder) || _gthis.Settings.DisableLazyLoading) {
								var bodyHtml = body;
								placeholder.outerHTML = bodyHtml;
							} else {
								placeholder["svg"] = body;
								placeholder.setAttribute("data-lazy","true");
							}
						} else if(_gthis._totalResultCount < _gthis._canvasElement.childElementCount) {
							_gthis._canvasElement.replaceChild(renderResult.RenderResult,_gthis._canvasElement.childNodes.item(_gthis._totalResultCount));
						} else {
							_gthis._canvasElement.appendChild(renderResult.RenderResult);
						}
						_gthis._totalResultCount++;
					}
				}
			},1);
		}
	}
	,CreateStyleElement: function(settings) {
		var elementDocument = this._element.ownerDocument;
		var styleElement = elementDocument.getElementById("alphaTabStyle");
		if(styleElement == null) {
			var fontDirectory = settings.FontDirectory;
			styleElement = elementDocument.createElement("style");
			styleElement.id = "alphaTabStyle";
			styleElement.type = "text/css";
			var this1 = "";
			var css = this1;
			css = css + ("@font-face {" + "\r\n");
			css = css + ("    font-family: 'alphaTab';" + "\r\n");
			css = css + ("     src: url('" + fontDirectory + "Bravura.eot');" + "\r\n");
			css = css + ("     src: url('" + fontDirectory + "Bravura.eot?#iefix') format('embedded-opentype')" + "\r\n");
			css = css + ("          , url('" + fontDirectory + "Bravura.woff') format('woff')" + "\r\n");
			css = css + ("          , url('" + fontDirectory + "Bravura.otf') format('opentype')" + "\r\n");
			css = css + ("          , url('" + fontDirectory + "Bravura.svg#Bravura') format('svg');" + "\r\n");
			css = css + ("     font-weight: normal;" + "\r\n");
			css = css + ("     font-style: normal;" + "\r\n");
			css = css + ("}" + "\r\n");
			css = css + (".alphaTabSurface * {" + "\r\n");
			css = css + ("    cursor: default;" + "\r\n");
			css = css + ("}" + "\r\n");
			css = css + (".at {" + "\r\n");
			css = css + ("     font-family: 'alphaTab';" + "\r\n");
			css = css + ("     speak: none;" + "\r\n");
			css = css + ("     font-style: normal;" + "\r\n");
			css = css + ("     font-weight: normal;" + "\r\n");
			css = css + ("     font-variant: normal;" + "\r\n");
			css = css + ("     text-transform: none;" + "\r\n");
			css = css + ("     line-height: 1;" + "\r\n");
			css = css + ("     line-height: 1;" + "\r\n");
			css = css + ("     -webkit-font-smoothing: antialiased;" + "\r\n");
			css = css + ("     -moz-osx-font-smoothing: grayscale;" + "\r\n");
			css = css + ("     font-size: 34px;" + "\r\n");
			css = css + ("     overflow: visible !important;" + "\r\n");
			css = css + ("}" + "\r\n");
			styleElement.innerHTML = css;
			elementDocument.getElementsByTagName("head").item(0).appendChild(styleElement);
		}
	}
	,Destroy: function() {
		this._element.innerHTML = "";
		this.Renderer.Destroy();
	}
	,Load: function(data) {
		var _gthis = this;
		this._element.classList.add("loading");
		try {
			if((data instanceof ArrayBuffer)) {
				this.ScoreLoaded(alphaTab.importer.ScoreLoader.LoadScoreFromBytes(new Uint8Array(data),this.Settings.ImporterSettings),true);
			} else if((data instanceof Uint8Array)) {
				this.ScoreLoaded(alphaTab.importer.ScoreLoader.LoadScoreFromBytes(data,this.Settings.ImporterSettings),true);
			} else if(typeof(data) == "string") {
				alphaTab.importer.ScoreLoader.LoadScoreAsync(data,function(s) {
					_gthis.ScoreLoaded(s,true);
				},function(e) {
					_gthis.Error("import",e);
				},this.Settings.ImporterSettings);
			}
		} catch( e1 ) {
			if (e1 instanceof js._Boot.HaxeError) e1 = e1.val;
			if( js.Boot.__instanceof(e1,system.Exception) ) {
				this.Error("import",e1);
			} else throw(e1);
		}
	}
	,Tex: function(contents) {
		this._element.classList.add("loading");
		try {
			var parser = new alphaTab.importer.AlphaTexImporter();
			var data = alphaTab.io.ByteBuffer.FromBuffer(alphaTab.platform.Platform.StringToByteArray(contents));
			parser.Init(data,this.Settings.ImporterSettings);
			this.ScoreLoaded(parser.ReadScore(),true);
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				this.Error("import",e);
			} else throw(e);
		}
	}
	,SetTracks: function(tracksData,render) {
		if(render == null) {
			render = true;
		}
		var tmp;
		if(tracksData.length) {
			var o = tracksData[0].Index;
			tmp = typeof(o) == "number";
		} else {
			tmp = false;
		}
		if(tmp) {
			this.Score = tracksData[0].Score;
		} else {
			var o1 = tracksData.Index;
			if(typeof(o1) == "number") {
				this.Score = tracksData.Score;
			}
		}
		this.TrackIndexes = this.ParseTracks(tracksData);
		if(render) {
			this.Render();
		}
	}
	,TrackIndexesToTracks: function(trackIndexes) {
		var this1 = [];
		var tracks = this1;
		var track = new system.Int32ArrayIterator(trackIndexes);
		while(track.hasNext()) {
			var track1 = track.next();
			if(track1 >= 0 && track1 < this.Score.Tracks.length) {
				tracks.push(this.Score.Tracks[track1]);
			}
		}
		return tracks;
	}
	,ParseTracks: function(tracksData) {
		var this1 = [];
		var tracks = this1;
		if(typeof(tracksData) == "string") {
			try {
				tracksData = JSON.parse(tracksData.As());
			} catch( __e ) {
				tracksData = [0];
			}
		}
		if(typeof(tracksData) == "number") {
			tracks.push(tracksData);
		} else if(tracksData.length) {
			var i = 0;
			while(i < tracksData.length) {
				var value;
				if(typeof(tracksData[i]) == "number") {
					value = tracksData[i];
				} else {
					var o = tracksData[i].Index;
					if(typeof(o) == "number") {
						var track = tracksData[i];
						value = track.Index;
					} else {
						value = alphaTab.platform.Platform.ParseInt(tracksData[i].ToString());
					}
				}
				if(value >= 0) {
					tracks.push(value);
				}
				++i;
			}
		} else {
			var o1 = tracksData.Index;
			if(typeof(o1) == "number") {
				tracks.push(tracksData.Index.As());
			}
		}
		return new Int32Array(tracks);
	}
	,ScoreLoaded: function(score,render) {
		if(render == null) {
			render = true;
		}
		alphaTab.model.ModelUtils.ApplyPitchOffsets(this.Settings,score);
		this.Score = score;
		this.LoadMidiForScore();
		this.TriggerEvent("loaded",score);
		if(render) {
			this.Render();
		}
	}
	,Error: function(type,details) {
		alphaTab.util.Logger.Error(type,"An unexpected error occurred",details);
		this.TriggerEvent("error",{ type : type, details : details});
	}
	,TriggerEvent: function(name,details) {
		if(this._element != null) {
			name = "alphaTab." + name;
			var e = window.document.createEvent("CustomEvent");
			e.initCustomEvent(name,false,false,details);
			this._element.dispatchEvent(e);
			var json = window;
			if((json && "jQuery" in json)) {
				var jquery = window["jQuery"];
				jquery(this._element).trigger(name,details);
			}
		}
	}
	,Render: function() {
		var _gthis = this;
		if(this.Renderer == null) {
			return;
		}
		var renderAction = null;
		renderAction = function() {
			if(!alphaTab.Environment.IsFontLoaded && _gthis.Settings.Engine == "html5") {
				window.setTimeout(function() {
					renderAction();
				},500);
			} else {
				_gthis.Renderer.Render(_gthis.Score,_gthis.TrackIndexes);
			}
		};
		renderAction();
	}
	,UpdateLayout: function(json) {
		this.Settings.Layout = alphaTab.Settings.LayoutFromJson(json);
		this.Renderer.UpdateSettings(this.Settings);
		this.Renderer.Invalidate();
	}
	,SetupPlayer: function() {
		var _gthis = this;
		var supportsWebAudio = !!window.ScriptProcessorNode;
		var supportsWebWorkers = !!window.Worker;
		var forceFlash = !!window.ForceFlash;
		var alphaSynthScriptFile = alphaTab.Environment.ScriptFile;
		if(supportsWebAudio && !forceFlash) {
			alphaTab.util.Logger.Info("Player","Will use webworkers for synthesizing and web audio api for playback",null);
			this.Player = new alphaTab.platform.javaScript.AlphaSynthWebWorkerApi(new alphaTab.platform.javaScript.AlphaSynthWebAudioOutput(),alphaSynthScriptFile,this.Settings.LogLevel);
		} else if(supportsWebWorkers) {
			alphaTab.util.Logger.Info("Player","Will use webworkers for synthesizing and flash for playback",null);
			this.Player = new alphaTab.platform.javaScript.AlphaSynthWebWorkerApi(new alphaTab.platform.javaScript.AlphaSynthFlashOutput(alphaSynthScriptFile),alphaSynthScriptFile,this.Settings.LogLevel);
		}
		if(this.Player == null) {
			alphaTab.util.Logger.Error("Player","Player requires webworkers and web audio api or flash, browser unsupported",null);
		} else {
			this.Player.On("ready",function() {
				_gthis.LoadSoundFont(_gthis.Settings.SoundFontFile);
				_gthis.LoadMidiForScore();
			});
			this.Player.On("readyForPlayback",function() {
				_gthis._playbackSpeed = _gthis.Player.get_PlaybackSpeed();
				_gthis.TriggerEvent("playerReady",null);
			});
			this.Player.On("soundFontLoad",function(data) {
				_gthis.TriggerEvent("soundFontLoad",data);
			});
			this.Player.On("soundFontLoaded",function() {
				_gthis.TriggerEvent("soundFontLoaded",null);
			});
			this.Player.On("soundFontLoadFailed",function() {
				_gthis.TriggerEvent("soundFontLoadFailed",null);
			});
			this.Player.On("midiLoad",function(data1) {
				_gthis.TriggerEvent("midiLoad",data1);
			});
			this.Player.On("midiFileLoaded",function() {
				_gthis.TriggerEvent("midiFileLoaded",null);
			});
			this.Player.On("midiFileLoadFailed",function() {
				_gthis.TriggerEvent("midiFileLoadFailed",null);
			});
			this.Player.On("playerStateChanged",function(data2) {
				_gthis.TriggerEvent("playerStateChanged",data2);
			});
			this.Player.On("positionChanged",function(data3) {
				_gthis.TriggerEvent("positionChanged",data3);
			});
			this.Player.On("finished",function(data4) {
				_gthis.TriggerEvent("finished",data4);
			});
			if(this.Settings.EnableCursor) {
				this.SetupCursor();
			}
		}
	}
	,LoadMidiForScore: function() {
		if(this.Player == null || this.Score == null || !this.Player.get_IsReady()) {
			return;
		}
		alphaTab.util.Logger.Info("AlphaTab","Generating Midi",null);
		var midiFile = new alphaTab.audio.synth.midi.MidiFile();
		var handler = new alphaTab.audio.generator.AlphaSynthMidiFileHandler(midiFile);
		var generator = new alphaTab.audio.generator.MidiFileGenerator(this.Score,handler);
		generator.Generate();
		this._tickCache = generator.TickLookup;
		this.Player.LoadMidiFile(midiFile);
	}
	,SetTrackVolume: function(tracks,volume) {
		if(this.Player == null) {
			return;
		}
		var trackList = this.TrackIndexesToTracks(this.ParseTracks(tracks));
		var track = $iterator(trackList)();
		while(track.hasNext()) {
			var track1 = track.next();
			var this1 = volume;
			this.Player.SetChannelVolume(track1.PlaybackInfo.PrimaryChannel,this1);
			var this2 = volume;
			this.Player.SetChannelVolume(track1.PlaybackInfo.SecondaryChannel,this2);
		}
	}
	,SetTrackSolo: function(tracks,solo) {
		if(this.Player == null) {
			return;
		}
		var trackList = this.TrackIndexesToTracks(this.ParseTracks(tracks));
		var track = $iterator(trackList)();
		while(track.hasNext()) {
			var track1 = track.next();
			this.Player.SetChannelSolo(track1.PlaybackInfo.PrimaryChannel,solo);
			this.Player.SetChannelSolo(track1.PlaybackInfo.SecondaryChannel,solo);
		}
	}
	,SetTrackMute: function(tracks,mute) {
		if(this.Player == null) {
			return;
		}
		var trackList = this.TrackIndexesToTracks(this.ParseTracks(tracks));
		var track = $iterator(trackList)();
		while(track.hasNext()) {
			var track1 = track.next();
			this.Player.SetChannelMute(track1.PlaybackInfo.PrimaryChannel,mute);
			this.Player.SetChannelMute(track1.PlaybackInfo.SecondaryChannel,mute);
		}
	}
	,LoadSoundFont: function(value) {
		if(this.Player == null) {
			return;
		}
		if(typeof(value) == "string") {
			this.Player.LoadSoundFontFromUrl(value);
		} else {
			this.Player.LoadSoundFont(value);
		}
	}
	,Play: function() {
		if(this.Player == null) {
			return;
		}
		this.Player.Play();
	}
	,Pause: function() {
		if(this.Player == null) {
			return;
		}
		this.Player.Pause();
	}
	,PlayPause: function() {
		if(this.Player == null) {
			return;
		}
		this.Player.PlayPause();
	}
	,Stop: function() {
		if(this.Player == null) {
			return;
		}
		this.Player.Stop();
		this.CursorUpdateTick(0,true);
	}
	,SetupCursor: function() {
		var _gthis = this;
		var cursorWrapper = window.document.createElement("div");
		cursorWrapper.classList.add("cursors");
		var selectionWrapper = window.document.createElement("div");
		selectionWrapper.classList.add("selectionWrapper");
		var barCursor = window.document.createElement("div");
		barCursor.classList.add("barCursor");
		var beatCursor = window.document.createElement("div");
		beatCursor.classList.add("beatCursor");
		var surface = this._element.querySelector(".alphaTabSurface");
		this._element.style.position = "relative";
		this._element.style.textAlign = "left";
		cursorWrapper.style.position = "absolute";
		cursorWrapper.style.zIndex = "1000";
		cursorWrapper.style.display = "inline";
		cursorWrapper.style.pointerEvents = 'none';
		selectionWrapper.style.position = "absolute";
		barCursor.style.position = "absolute";
		beatCursor.style.position = "absolute";
		beatCursor.style.transition = "all 0s linear";
		this._cursorWrapper = cursorWrapper;
		this._barCursor = barCursor;
		this._beatCursor = beatCursor;
		this._selectionWrapper = selectionWrapper;
		this._element.insertBefore(cursorWrapper,this._element.firstChild);
		cursorWrapper.appendChild(selectionWrapper);
		cursorWrapper.appendChild(barCursor);
		cursorWrapper.appendChild(beatCursor);
		this._previousTick = 0;
		this._playerState = 0;
		this.Renderer.PostRenderFinished = system._EventAction.EventAction_Impl_.add(this.Renderer.PostRenderFinished,function() {
			_gthis._cursorCache = _gthis.Renderer.get_BoundsLookup();
			_gthis.CursorUpdateTick(_gthis._previousTick,false);
			var surfaceSite = surface.getBoundingClientRect();
			cursorWrapper.style.width = surfaceSite.width + "px";
			cursorWrapper.style.height = surfaceSite.height + "px";
		});
		this.Player.On("positionChanged",function(data) {
			_gthis._previousTick = data.CurrentTick;
			window.setTimeout(function() {
				_gthis.CursorUpdateTick(data.CurrentTick,false);
			},0);
		});
		this.Player.On("playerStateChanged",function(data1) {
			_gthis._playerState = data1.State;
			window.setTimeout(function() {
				_gthis.CursorUpdateTick(_gthis._previousTick,false);
			},0);
		});
		if(this.Settings.EnableSeekByClick) {
			this.SetupClickHandling();
		}
	}
	,SetupClickHandling: function() {
		var _gthis = this;
		this._canvasElement.addEventListener("mousedown",function(e) {
			if(e.button != 0) {
				return;
			}
			e.preventDefault();
			var parentOffset = _gthis.GetOffset(_gthis._canvasElement);
			var relX = e.pageX - parentOffset.X;
			var relY = e.pageY - parentOffset.Y;
			var beat = _gthis._cursorCache.GetBeatAtPos(relX,relY);
			if(beat != null) {
				_gthis._selectionStart = new alphaTab.platform.javaScript.SelectionInfo(beat);
				_gthis._selectionEnd = null;
				_gthis._selecting = true;
			}
		});
		this._canvasElement.addEventListener("mousemove",function(e1) {
			if(_gthis._selecting) {
				var parentOffset1 = _gthis.GetOffset(_gthis._canvasElement);
				var relX1 = e1.pageX - parentOffset1.X;
				var relY1 = e1.pageY - parentOffset1.Y;
				var beat1 = _gthis._cursorCache.GetBeatAtPos(relX1,relY1);
				if(beat1 != null && (_gthis._selectionEnd == null || _gthis._selectionEnd.Beat != beat1)) {
					_gthis._selectionEnd = new alphaTab.platform.javaScript.SelectionInfo(beat1);
					_gthis.CursorSelectRange(_gthis._selectionStart,_gthis._selectionEnd);
				}
			}
		});
		this._canvasElement.addEventListener("mouseup",function(e2) {
			e2.preventDefault();
			if(_gthis._selectionEnd != null) {
				var startTick = _gthis._selectionStart.Beat.get_AbsoluteStart();
				var endTick = _gthis._selectionStart.Beat.get_AbsoluteStart();
				if(endTick < startTick) {
					var t = _gthis._selectionStart;
					_gthis._selectionStart = _gthis._selectionEnd;
					_gthis._selectionEnd = t;
				}
			}
			if(_gthis._selectionStart != null) {
				var tickCache = _gthis._tickCache;
				var realMasterBarStart = tickCache.GetMasterBarStart(_gthis._selectionStart.Beat.Voice.Bar.get_MasterBar());
				_gthis.CursorUpdateBeat(_gthis._selectionStart.Beat,null,0,false);
				_gthis.Player.set_TickPosition(realMasterBarStart + _gthis._selectionStart.Beat.Start);
				if(_gthis._selectionEnd != null && _gthis._selectionStart.Beat != _gthis._selectionEnd.Beat) {
					var realMasterBarEnd = tickCache.GetMasterBarStart(_gthis._selectionEnd.Beat.Voice.Bar.get_MasterBar());
					var _gthis1 = _gthis.Player;
					var _tmp = new alphaTab.audio.synth.synthesis.PlaybackRange();
					_tmp.StartTick = realMasterBarStart + _gthis._selectionStart.Beat.Start;
					_tmp.EndTick = realMasterBarEnd + _gthis._selectionEnd.Beat.Start + _gthis._selectionEnd.Beat.CalculateDuration() - 50;
					_gthis1.set_PlaybackRange(_tmp);
				} else {
					_gthis._selectionStart = null;
					_gthis.Player.set_PlaybackRange(null);
					_gthis.CursorSelectRange(_gthis._selectionStart,_gthis._selectionEnd);
				}
			}
			_gthis._selecting = false;
		});
		this.Renderer.PostRenderFinished = system._EventAction.EventAction_Impl_.add(this.Renderer.PostRenderFinished,function() {
			if(_gthis._selectionStart != null) {
				_gthis.CursorSelectRange(_gthis._selectionStart,_gthis._selectionEnd);
			}
		});
	}
	,GetOffset: function(element) {
		var bounds = element.getBoundingClientRect();
		var top = bounds.top + element.ownerDocument.defaultView.pageYOffset;
		var left = bounds.left + element.ownerDocument.defaultView.pageXOffset;
		var _tmp = new alphaTab.rendering.utils.Bounds();
		_tmp.X = left;
		_tmp.Y = top;
		_tmp.W = bounds.width;
		_tmp.H = bounds.height;
		return _tmp;
	}
	,CursorUpdateTick: function(tick,stop) {
		if(stop == null) {
			stop = false;
		}
		var _gthis = this;
		window.requestAnimationFrame(function(f) {
			var cache = _gthis._tickCache;
			if(cache != null) {
				var tracks = _gthis.get_Tracks();
				if(tracks.length > 0) {
					var beat = cache.FindBeat(tracks,tick);
					if(beat != null) {
						var this1 = beat.Duration;
						_gthis.CursorUpdateBeat(beat.CurrentBeat,beat.NextBeat,this1,stop);
					}
				}
			}
		});
	}
	,CursorUpdateBeat: function(beat,nextBeat,duration,stop) {
		if(beat == null) {
			return;
		}
		var cache = this._cursorCache;
		if(cache == null) {
			return;
		}
		var previousBeat = this._currentBeat;
		var previousCache = this._cursorCache;
		var previousState = this._previousStateForCursor;
		this._currentBeat = beat;
		this._cursorCache = cache;
		this._previousStateForCursor = this._playerState;
		if(beat == previousBeat && cache == previousCache && previousState == this._playerState) {
			return;
		}
		var barCursor = this._barCursor;
		var beatCursor = this._beatCursor;
		var beatBoundings = cache.FindBeat(beat);
		if(beatBoundings == null) {
			return;
		}
		var barBoundings = beatBoundings.BarBounds.MasterBarBounds;
		barCursor.style.top = Std.string(barBoundings.VisualBounds.Y) + "px";
		barCursor.style.left = Std.string(barBoundings.VisualBounds.X) + "px";
		barCursor.style.width = Std.string(barBoundings.VisualBounds.W) + "px";
		barCursor.style.height = Std.string(barBoundings.VisualBounds.H) + "px";
		beatCursor.style.transition = "all 0s linear";
		beatCursor.style.transitionDuration = "0ms";
		beatCursor.style.top = Std.string(barBoundings.VisualBounds.Y) + "px";
		beatCursor.style.left = Std.string(beatBoundings.VisualBounds.X) + "px";
		beatCursor.style.width = Std.string(this.Settings.BeatCursorWidth) + "px";
		beatCursor.style.height = Std.string(barBoundings.VisualBounds.H) + "px";
		var elements = this._element.getElementsByClassName("atHighlight");
		while(elements.length > 0) elements.item(0).classList.remove("atHighlight");
		if(this._playerState == 1 || stop) {
			duration = duration / this._playbackSpeed;
			if(!stop) {
				var className = "b" + beat.Id;
				var elementsToHighlight = this._element.getElementsByClassName(className);
				var i = 0;
				while(i < elementsToHighlight.length) {
					elementsToHighlight.item(i).classList.add("atHighlight");
					++i;
				}
				var nextBeatX = barBoundings.VisualBounds.X + barBoundings.VisualBounds.W;
				if(nextBeat != null) {
					var nextBeatBoundings = cache.FindBeat(nextBeat);
					if(nextBeatBoundings.BarBounds.MasterBarBounds.StaveGroupBounds == barBoundings.StaveGroupBounds) {
						nextBeatX = nextBeatBoundings.VisualBounds.X;
					}
				}
				beatCursor.style.transition = "all 0s linear";
				beatCursor.style.transitionDuration = duration + "ms";
				beatCursor.style.left = Std.string(nextBeatX) + "px";
			}
			if(!this._selecting) {
				var scrollElement = this.Settings.ScrollElement;
				var scrollElement1 = window.document.querySelector(scrollElement);
				var elementOffset = this.GetOffset(this._element);
				var nodeName = scrollElement1.nodeName.toLowerCase();
				if(nodeName != "html" && nodeName != "body") {
					var scrollElementOffset = this.GetOffset(scrollElement1);
					elementOffset.Y = elementOffset.Y + scrollElement1.scrollTop - scrollElementOffset.Y;
					elementOffset.X = elementOffset.X + scrollElement1.scrollLeft - scrollElementOffset.X;
				} else {
					scrollElement1 = window.document.documentElement;
				}
				if(this.Settings.ScrollMode == "vertical") {
					var scrollTop = system.Convert.ToInt32_Single(elementOffset.Y + barBoundings.RealBounds.Y + this.Settings.ScrollOffsetY);
					if(scrollTop != this._lastScroll) {
						this._lastScroll = scrollTop;
						var this1 = this.Settings.ScrollSpeed;
						this.ScrollToY(scrollElement1,scrollTop,this1);
					}
				} else if(this.Settings.ScrollMode == "horizontal-bar") {
					var x = system.Convert.ToInt32_Single(barBoundings.VisualBounds.X);
					if(x != this._lastScroll) {
						var scrollLeft = system.Convert.ToInt32_Single(barBoundings.RealBounds.X + this.Settings.ScrollOffsetX);
						this._lastScroll = system.Convert.ToInt32_Single(barBoundings.VisualBounds.X);
						this.ScrollToX(scrollElement1,scrollLeft,this.Settings.ScrollSpeed);
					}
				} else if(this.Settings.ScrollMode == "horizontal-offscreen") {
					var elementRight = scrollElement1.scrollLeft + this.GetOffset(scrollElement1).W;
					if(barBoundings.VisualBounds.X + barBoundings.VisualBounds.W >= elementRight || barBoundings.VisualBounds.X < scrollElement1.scrollLeft) {
						var scrollLeft1 = barBoundings.RealBounds.X + this.Settings.ScrollOffsetX;
						this._lastScroll = system.Convert.ToInt32_Single(barBoundings.VisualBounds.X);
						this.ScrollToX(scrollElement1,system.Convert.ToInt32_Single(scrollLeft1),this.Settings.ScrollSpeed);
					}
				}
			}
			this.TriggerEvent("playedBeatChanged",beat);
		}
	}
	,ScrollToY: function(element,scrollTargetY,speed) {
		var startY = element.scrollTop;
		var diff = scrollTargetY - startY;
		var start = 0;
		var step = null;
		step = function(x) {
			if(start == 0) {
				start = x;
			}
			var time = x - start;
			var percent = Math.min(time / speed,1);
			var step1 = system.Convert.ToInt32_Double(startY + diff * percent);
			element.scrollTop = step1;
			if(time < speed) {
				window.requestAnimationFrame(step);
			}
		};
		window.requestAnimationFrame(step);
	}
	,ScrollToX: function(element,scrollTargetX,speed) {
		var startX = element.scrollLeft;
		var diff = scrollTargetX - startX;
		var start = 0;
		var step = null;
		step = function(t) {
			if(start == 0) {
				start = t;
			}
			var time = t - start;
			var percent = Math.min(time / speed,1);
			var step1 = system.Convert.ToInt32_Double(startX + diff * percent);
			element.scrollLeft = step1;
			if(time < speed) {
				window.requestAnimationFrame(step);
			}
		};
		window.requestAnimationFrame(step);
	}
	,CursorSelectRange: function(startBeat,endBeat) {
		var cache = this._cursorCache;
		if(cache == null) {
			return;
		}
		var selectionWrapper = this._selectionWrapper;
		selectionWrapper.innerHTML = "";
		if(startBeat == null || endBeat == null || startBeat.Beat == endBeat.Beat) {
			return;
		}
		if(startBeat.Bounds == null) {
			startBeat.Bounds = cache.FindBeat(startBeat.Beat);
		}
		if(endBeat.Bounds == null) {
			endBeat.Bounds = cache.FindBeat(endBeat.Beat);
		}
		var startTick = startBeat.Beat.get_AbsoluteStart();
		var endTick = endBeat.Beat.get_AbsoluteStart();
		if(endTick < startTick) {
			var t = startBeat;
			startBeat = endBeat;
			endBeat = t;
		}
		var startX = startBeat.Bounds.RealBounds.X;
		var endX = endBeat.Bounds.RealBounds.X + endBeat.Bounds.RealBounds.W;
		if(endBeat.Beat.Index == endBeat.Beat.Voice.Beats.length - 1) {
			endX = endBeat.Bounds.BarBounds.MasterBarBounds.RealBounds.X + endBeat.Bounds.BarBounds.MasterBarBounds.RealBounds.W;
		}
		if(startBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds != endBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds) {
			var staffStartX = startBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds.VisualBounds.X;
			var staffEndX = startBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds.VisualBounds.X + startBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds.VisualBounds.W;
			var startSelection = window.document.createElement("div");
			startSelection.style.position = "absolute";
			startSelection.style.top = Std.string(startBeat.Bounds.BarBounds.MasterBarBounds.VisualBounds.Y) + "px";
			startSelection.style.left = Std.string(startX) + "px";
			startSelection.style.width = Std.string(staffEndX - startX) + "px";
			startSelection.style.height = Std.string(startBeat.Bounds.BarBounds.MasterBarBounds.VisualBounds.H) + "px";
			selectionWrapper.appendChild(startSelection);
			var staffStartIndex = startBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds.Index + 1;
			var staffEndIndex = endBeat.Bounds.BarBounds.MasterBarBounds.StaveGroupBounds.Index;
			var staffIndex = staffStartIndex;
			while(staffIndex < staffEndIndex) {
				var staffBounds = cache.StaveGroups[staffIndex];
				var middleSelection = window.document.createElement("div");
				middleSelection.style.position = "absolute";
				middleSelection.style.top = Std.string(staffBounds.VisualBounds.Y) + "px";
				middleSelection.style.left = Std.string(staffStartX) + "px";
				middleSelection.style.width = Std.string(staffEndX - staffStartX) + "px";
				middleSelection.style.height = Std.string(staffBounds.VisualBounds.H) + "px";
				selectionWrapper.appendChild(middleSelection);
				++staffIndex;
			}
			var endSelection = window.document.createElement("div");
			endSelection.style.position = "absolute";
			endSelection.style.top = Std.string(endBeat.Bounds.BarBounds.MasterBarBounds.VisualBounds.Y) + "px";
			endSelection.style.left = Std.string(staffStartX) + "px";
			endSelection.style.width = Std.string(endX - staffStartX) + "px";
			endSelection.style.height = Std.string(endBeat.Bounds.BarBounds.MasterBarBounds.VisualBounds.H) + "px";
			selectionWrapper.appendChild(endSelection);
		} else {
			var selection = window.document.createElement("div");
			selection.style.position = "absolute";
			selection.style.top = Std.string(startBeat.Bounds.BarBounds.MasterBarBounds.VisualBounds.Y) + "px";
			selection.style.left = Std.string(startX) + "px";
			selection.style.width = Std.string(endX - startX) + "px";
			selection.style.height = Std.string(startBeat.Bounds.BarBounds.MasterBarBounds.VisualBounds.H) + "px";
			selectionWrapper.appendChild(selection);
		}
	}
	,__class__: alphaTab.platform.javaScript.AlphaTabApi
};
alphaTab.rendering.IScoreRenderer = $hx_exports["alphaTab"]["rendering"]["IScoreRenderer"] = function() { };
alphaTab.rendering.IScoreRenderer.__name__ = ["alphaTab","rendering","IScoreRenderer"];
alphaTab.rendering.IScoreRenderer.prototype = {
	__class__: alphaTab.rendering.IScoreRenderer
};
alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer = $hx_exports["alphaTab"]["platform"]["javaScript"]["AlphaTabWorkerScoreRenderer"] = function(api,settings) {
	this._api = null;
	this._worker = null;
	this._api = api;
	try {
		this._worker = new Worker(settings.ScriptFile);
	} catch( __e ) {
		try {
			var script = "importScripts('" + settings.ScriptFile + "')";
			var blob = new Blob([script]);
			this._worker = new Worker(URL.createObjectURL(blob));
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				alphaTab.util.Logger.Error("Rendering","Failed to create WebWorker: " + Std.string(e),null);
			} else throw(e);
		}
	}
	this._worker.postMessage({ cmd : "alphaTab.initialize", settings : settings.ToJson()});
	this._worker.addEventListener("message",$bind(this,this.HandleWorkerMessage));
};
alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer.__name__ = ["alphaTab","platform","javaScript","AlphaTabWorkerScoreRenderer"];
alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer.__interfaces__ = [alphaTab.rendering.IScoreRenderer];
alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer.prototype = {
	get_BoundsLookup: function() {
		return this.__BoundsLookup;
	}
	,set_BoundsLookup: function(value) {
		return this.__BoundsLookup = value;
	}
	,Destroy: function() {
		this._worker.terminate();
	}
	,UpdateSettings: function(settings) {
		this._worker.postMessage({ cmd : "alphaTab.updateSettings", settings : settings.ToJson()});
	}
	,Invalidate: function() {
		this._worker.postMessage({ cmd : "alphaTab.invalidate"});
	}
	,Resize: function(width) {
		this._worker.postMessage({ cmd : "alphaTab.resize", width : width});
	}
	,HandleWorkerMessage: function(e) {
		var data = (js.Boot.__cast(e , MessageEvent)).data;
		var cmd = data.cmd;
		switch(cmd) {
		case "alphaTab.error":
			this.OnError(data.type,data.detail);
			break;
		case "alphaTab.partialRenderFinished":
			this.OnPartialRenderFinished(data.result);
			break;
		case "alphaTab.postRenderFinished":
			this.set_BoundsLookup(alphaTab.rendering.utils.BoundsLookup.FromJson(data.boundsLookup,this._api.Score));
			this.OnPostRenderFinished();
			break;
		case "alphaTab.preRender":
			this.OnPreRender(data.result);
			break;
		case "alphaTab.renderFinished":
			this.OnRenderFinished(data.result);
			break;
		default:
		}
	}
	,Render: function(score,trackIndexes) {
		score = alphaTab.model.JsonConverter.ScoreToJsObject(score);
		this._worker.postMessage({ cmd : "alphaTab.render", score : score, trackIndexes : trackIndexes});
	}
	,add_PreRender: function(value) {
		return this.PreRender = system._EventAction1.EventAction1_Impl_.add(this.PreRender,value);
	}
	,remove_PreRender: function(value) {
		return this.PreRender = system._EventAction1.EventAction1_Impl_.sub(this.PreRender,value);
	}
	,OnPreRender: function(obj) {
		var _e = this.PreRender;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.Invoke(_e,p);
		};
		if(handler != null) {
			handler(obj);
		}
	}
	,add_PartialRenderFinished: function(value) {
		return this.PartialRenderFinished = system._EventAction1.EventAction1_Impl_.add(this.PartialRenderFinished,value);
	}
	,remove_PartialRenderFinished: function(value) {
		return this.PartialRenderFinished = system._EventAction1.EventAction1_Impl_.sub(this.PartialRenderFinished,value);
	}
	,OnPartialRenderFinished: function(obj) {
		var _e = this.PartialRenderFinished;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.Invoke(_e,p);
		};
		if(handler != null) {
			handler(obj);
		}
	}
	,add_RenderFinished: function(value) {
		return this.RenderFinished = system._EventAction1.EventAction1_Impl_.add(this.RenderFinished,value);
	}
	,remove_RenderFinished: function(value) {
		return this.RenderFinished = system._EventAction1.EventAction1_Impl_.sub(this.RenderFinished,value);
	}
	,OnRenderFinished: function(obj) {
		var _e = this.RenderFinished;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.Invoke(_e,p);
		};
		if(handler != null) {
			handler(obj);
		}
	}
	,add_Error: function(value) {
		return this.Error = system._EventAction2.EventAction2_Impl_.add(this.Error,value);
	}
	,remove_Error: function(value) {
		return this.Error = system._EventAction2.EventAction2_Impl_.sub(this.Error,value);
	}
	,OnError: function(type,details) {
		var _e = this.Error;
		var handler = function(p1,p2) {
			system._EventAction2.EventAction2_Impl_.Invoke(_e,p1,p2);
		};
		if(handler != null) {
			handler(type,details);
		}
	}
	,add_PostRenderFinished: function(value) {
		return this.PostRenderFinished = system._EventAction.EventAction_Impl_.add(this.PostRenderFinished,value);
	}
	,remove_PostRenderFinished: function(value) {
		return this.PostRenderFinished = system._EventAction.EventAction_Impl_.sub(this.PostRenderFinished,value);
	}
	,OnPostRenderFinished: function() {
		var _e = this.PostRenderFinished;
		var handler = function() {
			system._EventAction.EventAction_Impl_.Invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,__class__: alphaTab.platform.javaScript.AlphaTabWorkerScoreRenderer
};
alphaTab.platform.javaScript.IFlashSynthOutput = $hx_exports["alphaTab"]["platform"]["javaScript"]["IFlashSynthOutput"] = function() { };
alphaTab.platform.javaScript.IFlashSynthOutput.__name__ = ["alphaTab","platform","javaScript","IFlashSynthOutput"];
alphaTab.platform.javaScript.IFlashSynthOutput.prototype = {
	__class__: alphaTab.platform.javaScript.IFlashSynthOutput
};
alphaTab.platform.javaScript.ResizeEventArgs = $hx_exports["alphaTab"]["platform"]["javaScript"]["ResizeEventArgs"] = function() {
};
alphaTab.platform.javaScript.ResizeEventArgs.__name__ = ["alphaTab","platform","javaScript","ResizeEventArgs"];
alphaTab.platform.javaScript.ResizeEventArgs.prototype = {
	__class__: alphaTab.platform.javaScript.ResizeEventArgs
};
alphaTab.platform.javaScript.SelectionInfo = $hx_exports["alphaTab"]["platform"]["javaScript"]["SelectionInfo"] = function(beat) {
	this.Beat = null;
	this.Bounds = null;
	this.Beat = beat;
};
alphaTab.platform.javaScript.SelectionInfo.__name__ = ["alphaTab","platform","javaScript","SelectionInfo"];
alphaTab.platform.javaScript.SelectionInfo.prototype = {
	__class__: alphaTab.platform.javaScript.SelectionInfo
};
alphaTab.platform.model._FontStyle = {};
alphaTab.platform.model._FontStyle.FontStyle_Impl_ = $hx_exports["alphaTab"]["platform"]["model"]["_FontStyle"]["FontStyle_Impl_"] = {};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.__name__ = ["alphaTab","platform","model","_FontStyle","FontStyle_Impl_"];
alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._FontStyle.FontStyle_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Plain";
	case 1:
		return "Bold";
	case 2:
		return "Italic";
	}
	return "";
};
alphaTab.platform.model._TextAlign = {};
alphaTab.platform.model._TextAlign.TextAlign_Impl_ = $hx_exports["alphaTab"]["platform"]["model"]["_TextAlign"]["TextAlign_Impl_"] = {};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.__name__ = ["alphaTab","platform","model","_TextAlign","TextAlign_Impl_"];
alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextAlign.TextAlign_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Left";
	case 1:
		return "Center";
	case 2:
		return "Right";
	}
	return "";
};
alphaTab.platform.model._TextBaseline = {};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_ = $hx_exports["alphaTab"]["platform"]["model"]["_TextBaseline"]["TextBaseline_Impl_"] = {};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.__name__ = ["alphaTab","platform","model","_TextBaseline","TextBaseline_Impl_"];
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Top";
	case 1:
		return "Middle";
	case 2:
		return "Bottom";
	}
	return "";
};
alphaTab.platform.svg.FontSizes = $hx_exports["alphaTab"]["platform"]["svg"]["FontSizes"] = function() {
};
alphaTab.platform.svg.FontSizes.__name__ = ["alphaTab","platform","svg","FontSizes"];
alphaTab.platform.svg.FontSizes.MeasureString = function(s,f,size,style) {
	var data;
	var dataSize;
	var factor = 1;
	if((style & 2) != 0) {
		factor = factor * 1.2;
	}
	if((style & 1) != 0) {
		factor = factor * 1.2;
	}
	if(f == 0) {
		data = alphaTab.platform.svg.FontSizes.TimesNewRoman;
		dataSize = 11;
	} else if(f == 1) {
		data = alphaTab.platform.svg.FontSizes.Arial11Pt;
		dataSize = 11;
	} else {
		data = new Uint8Array([8]);
		dataSize = 11;
	}
	var stringSize = 0;
	var i = 0;
	while(i < s.length) {
		var a = data.length - 1;
		var this1 = system.Convert.ToUInt16(HxOverrides.cca(s,i));
		var code = Math.min(a,this1 - 32);
		if(code >= 0) {
			stringSize = stringSize + data[code] * size / dataSize;
		}
		++i;
	}
	return stringSize * factor;
};
alphaTab.platform.svg.FontSizes.prototype = {
	__class__: alphaTab.platform.svg.FontSizes
};
alphaTab.platform.svg._SupportedFonts = {};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_ = $hx_exports["alphaTab"]["platform"]["svg"]["_SupportedFonts"]["SupportedFonts_Impl_"] = {};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.__name__ = ["alphaTab","platform","svg","_SupportedFonts","SupportedFonts_Impl_"];
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "TimesNewRoman";
	case 1:
		return "Arial";
	}
	return "";
};
alphaTab.rendering.BarRendererBase = $hx_exports["alphaTab"]["rendering"]["BarRendererBase"] = function(renderer,bar) {
	this._preBeatGlyphs = null;
	this._voiceContainers = null;
	this._postBeatGlyphs = null;
	this.Staff = null;
	this.X = 0.0;
	this.Y = 0.0;
	this.Width = 0.0;
	this.Height = 0.0;
	this.Index = 0;
	this.TopOverflow = 0.0;
	this.BottomOverflow = 0.0;
	this.Helpers = null;
	this.Bar = null;
	this.IsLinkedToPrevious = false;
	this.ScoreRenderer = null;
	this._wasFirstOfLine = false;
	this.LayoutingInfo = null;
	this._appliedLayoutingInfo = 0;
	this.IsFinalized = false;
	this.TopPadding = 0.0;
	this.BottomPadding = 0.0;
	this.Bar = bar;
	this.ScoreRenderer = renderer;
	this.Helpers = new alphaTab.rendering.utils.BarHelpers(bar);
};
alphaTab.rendering.BarRendererBase.__name__ = ["alphaTab","rendering","BarRendererBase"];
alphaTab.rendering.BarRendererBase.prototype = {
	get_NextRenderer: function() {
		if(this.Bar.NextBar == null) {
			return null;
		}
		return this.ScoreRenderer.Layout.GetRendererForBar(this.Staff.get_StaveId(),this.Bar.NextBar);
	}
	,get_PreviousRenderer: function() {
		if(this.Bar.PreviousBar == null) {
			return null;
		}
		return this.ScoreRenderer.Layout.GetRendererForBar(this.Staff.get_StaveId(),this.Bar.PreviousBar);
	}
	,RegisterOverflowTop: function(topOverflow) {
		if(topOverflow > this.TopOverflow) {
			this.TopOverflow = topOverflow;
		}
	}
	,RegisterOverflowBottom: function(bottomOverflow) {
		if(bottomOverflow > this.BottomOverflow) {
			this.BottomOverflow = bottomOverflow;
		}
	}
	,ScaleToWidth: function(width) {
		var containerWidth = width - this._preBeatGlyphs.Width - this._postBeatGlyphs.Width;
		var this1 = this._voiceContainers;
		var voice = $iterator(Object.keys(this1))();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var c = this._voiceContainers[voice1];
			c.ScaleToWidth(containerWidth);
		}
		this._postBeatGlyphs.X = this._preBeatGlyphs.X + this._preBeatGlyphs.Width + containerWidth;
		this.Width = width;
	}
	,get_Resources: function() {
		return this.ScoreRenderer.RenderingResources;
	}
	,get_Settings: function() {
		return this.ScoreRenderer.Settings;
	}
	,get_Scale: function() {
		return this.get_Settings().Scale;
	}
	,get_IsFirstOfLine: function() {
		return this.Index == 0;
	}
	,get_IsLast: function() {
		if(this.Staff.StaveGroup.IsLast) {
			return this.Index == this.Staff.BarRenderers.length - 1;
		} else {
			return false;
		}
	}
	,RegisterLayoutingInfo: function() {
		var info = this.LayoutingInfo;
		var preSize = this._preBeatGlyphs.Width;
		if(info.PreBeatSize < preSize) {
			info.PreBeatSize = preSize;
		}
		var this1 = this._voiceContainers;
		var voice = $iterator(Object.keys(this1))();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var c = this._voiceContainers[voice1];
			c.RegisterLayoutingInfo(info);
		}
		var postSize = this._postBeatGlyphs.Width;
		if(info.PostBeatSize < postSize) {
			info.PostBeatSize = postSize;
		}
	}
	,ApplyLayoutingInfo: function() {
		if(this._appliedLayoutingInfo >= this.LayoutingInfo.Version) {
			return false;
		}
		this._appliedLayoutingInfo = this.LayoutingInfo.Version;
		this._preBeatGlyphs.Width = this.LayoutingInfo.PreBeatSize;
		var voiceEnd = this._preBeatGlyphs.X + this._preBeatGlyphs.Width;
		var this1 = this._voiceContainers;
		var voice = $iterator(Object.keys(this1))();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var c = this._voiceContainers[voice1];
			c.X = this._preBeatGlyphs.X + this._preBeatGlyphs.Width;
			c.ApplyLayoutingInfo(this.LayoutingInfo);
			var newEnd = c.X + c.Width;
			if(voiceEnd < newEnd) {
				voiceEnd = newEnd;
			}
		}
		this._postBeatGlyphs.X = voiceEnd;
		this._postBeatGlyphs.Width = this.LayoutingInfo.PostBeatSize;
		this.Width = this._postBeatGlyphs.X + this._postBeatGlyphs.Width;
		return true;
	}
	,FinalizeRenderer: function() {
		this.IsFinalized = true;
	}
	,DoLayout: function() {
		this._preBeatGlyphs = new alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup();
		this._preBeatGlyphs.Renderer = this;
		var this1 = {}
		this._voiceContainers = this1;
		this._postBeatGlyphs = new alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup();
		this._postBeatGlyphs.Renderer = this;
		var i = 0;
		while(i < this.Bar.Voices.length) {
			var voice = this.Bar.Voices[i];
			if(this.HasVoiceContainer(voice)) {
				var c = new alphaTab.rendering.glyphs.VoiceContainerGlyph(0,0,voice);
				c.Renderer = this;
				this._voiceContainers[this.Bar.Voices[i].Index] = c;
			}
			++i;
		}
		this.CreatePreBeatGlyphs();
		this.CreateBeatGlyphs();
		this.CreatePostBeatGlyphs();
		this.UpdateSizes();
	}
	,HasVoiceContainer: function(voice) {
		if(!(!voice.IsEmpty)) {
			return voice.Index == 0;
		} else {
			return true;
		}
	}
	,UpdateSizes: function() {
		this.Staff.RegisterStaffTop(this.TopPadding);
		this.Staff.RegisterStaffBottom(this.Height - this.BottomPadding);
		var voiceContainers = this._voiceContainers;
		var beatGlyphsStart = this.get_BeatGlyphsStart();
		var postBeatStart = beatGlyphsStart;
		var voice = $iterator(Object.keys(voiceContainers))();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var c = voiceContainers[voice1];
			c.X = beatGlyphsStart;
			c.DoLayout();
			var x = c.X + c.Width;
			if(postBeatStart < x) {
				postBeatStart = x;
			}
		}
		this._postBeatGlyphs.X = postBeatStart;
		this.Width = this._postBeatGlyphs.X + this._postBeatGlyphs.Width;
	}
	,AddPreBeatGlyph: function(g) {
		this._preBeatGlyphs.AddGlyph(g);
	}
	,AddBeatGlyph: function(g) {
		g.Renderer = this;
		g.PreNotes.Renderer = this;
		g.OnNotes.Renderer = this;
		g.OnNotes.BeamingHelper = this.Helpers.BeamHelperLookup[g.Beat.Voice.Index][g.Beat.Index];
		this.GetOrCreateVoiceContainer(g.Beat.Voice).AddGlyph(g);
	}
	,GetOrCreateVoiceContainer: function(voice) {
		return this._voiceContainers[voice.Index];
	}
	,GetBeatContainer: function(beat) {
		return this.GetOrCreateVoiceContainer(beat.Voice).BeatGlyphs[beat.Index];
	}
	,GetPreNotesGlyphForBeat: function(beat) {
		return this.GetBeatContainer(beat).PreNotes;
	}
	,GetOnNotesGlyphForBeat: function(beat) {
		return this.GetBeatContainer(beat).OnNotes;
	}
	,Paint: function(cx,cy,canvas) {
		this.PaintBackground(cx,cy,canvas);
		canvas.set_Color(this.get_Resources().MainGlyphColor);
		this._preBeatGlyphs.Paint(cx + this.X,cy + this.Y,canvas);
		var this1 = this._voiceContainers;
		var voice = $iterator(Object.keys(this1))();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var c = this._voiceContainers[voice1];
			canvas.set_Color(c.Voice.Index == 0 ? this.get_Resources().MainGlyphColor : this.get_Resources().SecondaryGlyphColor);
			c.Paint(cx + this.X,cy + this.Y,canvas);
		}
		canvas.set_Color(this.get_Resources().MainGlyphColor);
		this._postBeatGlyphs.Paint(cx + this.X,cy + this.Y,canvas);
	}
	,PaintBackground: function(cx,cy,canvas) {
	}
	,BuildBoundingsLookup: function(masterBarBounds,cx,cy) {
		var _gthis = this;
		var barBounds = new alphaTab.rendering.utils.BarBounds();
		barBounds.Bar = this.Bar;
		var _tmp = new alphaTab.rendering.utils.Bounds();
		_tmp.X = cx + _gthis.X;
		_tmp.Y = cy + _gthis.Y + _gthis.TopPadding;
		_tmp.W = _gthis.Width;
		_tmp.H = _gthis.Height - _gthis.TopPadding - _gthis.BottomPadding;
		barBounds.VisualBounds = _tmp;
		var _tmp1 = new alphaTab.rendering.utils.Bounds();
		_tmp1.X = cx + _gthis.X;
		_tmp1.Y = cy + _gthis.Y;
		_tmp1.W = _gthis.Width;
		_tmp1.H = _gthis.Height;
		barBounds.RealBounds = _tmp1;
		masterBarBounds.AddBar(barBounds);
		var this1 = this._voiceContainers;
		var voice = $iterator(Object.keys(this1))();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			var c = this._voiceContainers[voice1];
			if(!c.Voice.IsEmpty || this.Bar.get_IsEmpty() && voice1 == 0) {
				var i = 0;
				var j = c.BeatGlyphs.length;
				while(i < j) {
					var bc = c.BeatGlyphs[i];
					var beatBoundings = new alphaTab.rendering.utils.BeatBounds();
					beatBoundings.Beat = bc.Beat;
					var _tmp2 = new alphaTab.rendering.utils.Bounds();
					_tmp2.X = cx + _gthis.X + c.X + bc.X + bc.OnNotes.X;
					_tmp2.Y = barBounds.VisualBounds.Y;
					_tmp2.W = bc.OnNotes.Width;
					_tmp2.H = barBounds.VisualBounds.H;
					beatBoundings.VisualBounds = _tmp2;
					var _tmp3 = new alphaTab.rendering.utils.Bounds();
					_tmp3.X = cx + _gthis.X + c.X + bc.X;
					_tmp3.Y = barBounds.RealBounds.Y;
					_tmp3.W = bc.Width;
					_tmp3.H = barBounds.RealBounds.H;
					beatBoundings.RealBounds = _tmp3;
					barBounds.AddBeat(beatBoundings);
					++i;
				}
			}
		}
	}
	,AddPostBeatGlyph: function(g) {
		this._postBeatGlyphs.AddGlyph(g);
	}
	,CreatePreBeatGlyphs: function() {
		this._wasFirstOfLine = this.get_IsFirstOfLine();
	}
	,CreateBeatGlyphs: function() {
	}
	,CreatePostBeatGlyphs: function() {
		this.AddPostBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_Scale()));
	}
	,get_BeatGlyphsStart: function() {
		return this._preBeatGlyphs.X + this._preBeatGlyphs.Width;
	}
	,GetNoteX: function(note,onEnd) {
		if(onEnd == null) {
			onEnd = true;
		}
		return 0;
	}
	,GetBeatX: function(beat,requestedPosition) {
		if(requestedPosition == null) {
			requestedPosition = 0;
		}
		var container = this.GetBeatContainer(beat);
		if(container != null) {
			switch(requestedPosition) {
			case 0:
				return container.VoiceContainer.X + container.X + container.PreNotes.X;
			case 1:
				return container.VoiceContainer.X + container.X + container.OnNotes.X;
			case 2:
				return container.VoiceContainer.X + container.X + container.OnNotes.X + container.OnNotes.Width;
			case 3:
				return container.VoiceContainer.X + container.X + container.Width;
			default:
			}
		}
		return 0;
	}
	,GetNoteY: function(note,aboveNote) {
		if(aboveNote == null) {
			aboveNote = false;
		}
		return 0;
	}
	,ReLayout: function() {
		if(this._wasFirstOfLine && !this.get_IsFirstOfLine() || !this._wasFirstOfLine && this.get_IsFirstOfLine()) {
			this._preBeatGlyphs = new alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup();
			this._preBeatGlyphs.Renderer = this;
			this.CreatePreBeatGlyphs();
		}
		this.UpdateSizes();
		this.RegisterLayoutingInfo();
	}
	,__class__: alphaTab.rendering.BarRendererBase
};
alphaTab.rendering._BeatXPosition = {};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_ = $hx_exports["alphaTab"]["rendering"]["_BeatXPosition"]["BeatXPosition_Impl_"] = {};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.__name__ = ["alphaTab","rendering","_BeatXPosition","BeatXPosition_Impl_"];
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "PreNotes";
	case 1:
		return "OnNotes";
	case 2:
		return "PostNotes";
	case 3:
		return "EndBeat";
	}
	return "";
};
alphaTab.rendering.glyphs = {};
alphaTab.rendering.glyphs.Glyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["Glyph"] = function(x,y) {
	this.X = 0.0;
	this.Y = 0.0;
	this.Width = 0.0;
	this.Renderer = null;
	this.X = x;
	this.Y = y;
};
alphaTab.rendering.glyphs.Glyph.__name__ = ["alphaTab","rendering","glyphs","Glyph"];
alphaTab.rendering.glyphs.Glyph.prototype = {
	get_Scale: function() {
		return this.Renderer.get_Scale();
	}
	,DoLayout: function() {
	}
	,Paint: function(cx,cy,canvas) {
	}
	,__class__: alphaTab.rendering.glyphs.Glyph
};
alphaTab.rendering.EffectBand = $hx_exports["alphaTab"]["rendering"]["EffectBand"] = function(info) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._uniqueEffectGlyphs = null;
	this._effectGlyphs = null;
	this.IsEmpty = false;
	this.PreviousBand = null;
	this.IsLinkedToPrevious = false;
	this.FirstBeat = null;
	this.LastBeat = null;
	this.Height = 0.0;
	this.Info = null;
	this.Info = info;
	var this1 = [];
	this._uniqueEffectGlyphs = this1;
	var this2 = [];
	this._effectGlyphs = this2;
	this.IsEmpty = true;
};
alphaTab.rendering.EffectBand.__name__ = ["alphaTab","rendering","EffectBand"];
alphaTab.rendering.EffectBand.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.EffectBand.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.Glyph.prototype.DoLayout.call(this);
		var i = 0;
		while(i < this.Renderer.Bar.Voices.length) {
			var this1 = this._effectGlyphs;
			var this2 = {}
			this1.push(this2);
			var this3 = this._uniqueEffectGlyphs;
			var this4 = [];
			this3.push(this4);
			++i;
		}
	}
	,CreateGlyph: function(beat) {
		if(this.Info.ShouldCreateGlyph(beat) && (!this.Info.get_HideOnMultiTrack() || this.Renderer.Staff.TrackIndex == 0)) {
			this.IsEmpty = false;
			if(this.FirstBeat == null || this.FirstBeat.Index > beat.Index) {
				this.FirstBeat = beat;
			}
			if(this.LastBeat == null || this.LastBeat.Index < beat.Index) {
				this.LastBeat = beat;
			}
			var glyph = this.CreateOrResizeGlyph(this.Info.get_SizingMode(),beat);
			if(glyph.Height > this.Height) {
				this.Height = glyph.Height;
			}
		}
	}
	,CreateOrResizeGlyph: function(sizing,b) {
		var g;
		switch(sizing) {
		case 0:case 1:
			g = this.Info.CreateNewGlyph(this.Renderer,b);
			g.Renderer = this.Renderer;
			g.Beat = b;
			g.DoLayout();
			this._effectGlyphs[b.Voice.Index][b.Index] = g;
			this._uniqueEffectGlyphs[b.Voice.Index].push(g);
			return g;
		case 3:
			if(b.Index > 0 || this.Renderer.Index > 0) {
				var prevBeat = b.PreviousBeat;
				if(this.Info.ShouldCreateGlyph(prevBeat)) {
					var prevEffect = null;
					if(b.Index > 0 && this._effectGlyphs[b.Voice.Index].hasOwnProperty(prevBeat.Index)) {
						prevEffect = this._effectGlyphs[b.Voice.Index][prevBeat.Index];
					} else if(this.Renderer.Index > 0) {
						var previousRenderer = js.Boot.__cast(this.Renderer.get_PreviousRenderer() , alphaTab.rendering.EffectBarRenderer);
						var previousBand = previousRenderer.BandLookup[this.Info.get_EffectId()];
						var voiceGlyphs = previousBand._effectGlyphs[b.Voice.Index];
						if(voiceGlyphs.hasOwnProperty(prevBeat.Index)) {
							prevEffect = voiceGlyphs[prevBeat.Index];
						}
					}
					var newGlyph = this.CreateOrResizeGlyph(1,b);
					if(prevEffect != null && this.Info.CanExpand(prevBeat,b)) {
						prevEffect.NextGlyph = newGlyph;
						newGlyph.PreviousGlyph = prevEffect;
						this.IsLinkedToPrevious = true;
					}
					return newGlyph;
				}
				return this.CreateOrResizeGlyph(1,b);
			}
			return this.CreateOrResizeGlyph(1,b);
		case 4:
			g = this.Info.CreateNewGlyph(this.Renderer,b);
			g.Renderer = this.Renderer;
			g.Beat = b;
			g.DoLayout();
			this._effectGlyphs[b.Voice.Index][b.Index] = g;
			this._uniqueEffectGlyphs[b.Voice.Index].push(g);
			return g;
		default:
		}
		return null;
	}
	,Paint: function(cx,cy,canvas) {
		alphaTab.rendering.glyphs.Glyph.prototype.Paint.call(this,cx,cy,canvas);
		var i = 0;
		var j = this._uniqueEffectGlyphs.length;
		while(i < j) {
			var v = this._uniqueEffectGlyphs[i];
			var k = 0;
			var l = v.length;
			while(k < l) {
				var g = v[k];
				g.Paint(cx + this.X,cy + this.Y,canvas);
				++k;
			}
			++i;
		}
	}
	,AlignGlyphs: function() {
		var v = 0;
		while(v < this._effectGlyphs.length) {
			var this1 = this._effectGlyphs[v];
			var key = $iterator(Object.keys(this1))();
			while(key.hasNext()) {
				var key1 = key.next();
				this.AlignGlyph(this.Info.get_SizingMode(),this.Renderer.Bar.Voices[v].Beats[key1]);
			}
			++v;
		}
	}
	,AlignGlyph: function(sizing,beat) {
		var g = this._effectGlyphs[beat.Voice.Index][beat.Index];
		var pos;
		var container = this.Renderer.GetBeatContainer(beat);
		switch(sizing) {
		case 0:
			pos = container.PreNotes;
			g.X = this.Renderer.get_BeatGlyphsStart() + pos.X + container.X;
			g.Width = pos.Width;
			break;
		case 1:case 3:
			pos = container.OnNotes;
			g.X = this.Renderer.get_BeatGlyphsStart() + pos.X + container.X;
			g.Width = pos.Width;
			break;
		case 4:
			g.Width = this.Renderer.Width;
			break;
		default:
		}
	}
	,__class__: alphaTab.rendering.EffectBand
});
alphaTab.rendering.EffectBandSizingInfo = $hx_exports["alphaTab"]["rendering"]["EffectBandSizingInfo"] = function() {
	this._effectSlot = null;
	this.Slots = null;
	var this1 = [];
	this.Slots = this1;
	var this2 = {}
	this._effectSlot = this2;
};
alphaTab.rendering.EffectBandSizingInfo.__name__ = ["alphaTab","rendering","EffectBandSizingInfo"];
alphaTab.rendering.EffectBandSizingInfo.prototype = {
	GetOrCreateSlot: function(band) {
		var this1 = this._effectSlot;
		var key = band.Info.get_EffectId();
		if(this1.hasOwnProperty(key)) {
			var slot = this._effectSlot[band.Info.get_EffectId()];
			if(slot.CanBeUsed(band)) {
				return slot;
			}
		}
		var slot1 = $iterator(this.Slots)();
		while(slot1.hasNext()) {
			var slot2 = slot1.next();
			if(slot2.CanBeUsed(band)) {
				return slot2;
			}
		}
		var newSlot = new alphaTab.rendering.EffectBandSlot();
		this.Slots.push(newSlot);
		return newSlot;
	}
	,CopySlots: function(sizingInfo) {
		var slot = $iterator(sizingInfo.Slots)();
		while(slot.hasNext()) {
			var slot1 = slot.next();
			var copy = new alphaTab.rendering.EffectBandSlot();
			copy.Y = slot1.Y;
			copy.Height = slot1.Height;
			copy.UniqueEffectId = slot1.UniqueEffectId;
			this.Slots.push(copy);
			var band = $iterator(slot1.Bands)();
			while(band.hasNext()) {
				var band1 = band.next();
				this._effectSlot[band1.Info.get_EffectId()] = copy;
			}
		}
	}
	,Register: function(effectBand) {
		var freeSlot = this.GetOrCreateSlot(effectBand);
		freeSlot.Update(effectBand);
		this._effectSlot[effectBand.Info.get_EffectId()] = freeSlot;
	}
	,__class__: alphaTab.rendering.EffectBandSizingInfo
};
alphaTab.rendering.EffectBandSlot = $hx_exports["alphaTab"]["rendering"]["EffectBandSlot"] = function() {
	this.Y = 0.0;
	this.Height = 0.0;
	this.FirstBeat = null;
	this.LastBeat = null;
	this.Bands = null;
	this.UniqueEffectId = null;
	var this1 = [];
	this.Bands = this1;
};
alphaTab.rendering.EffectBandSlot.__name__ = ["alphaTab","rendering","EffectBandSlot"];
alphaTab.rendering.EffectBandSlot.prototype = {
	Update: function(effectBand) {
		if(!effectBand.Info.get_CanShareBand()) {
			this.UniqueEffectId = effectBand.Info.get_EffectId();
		}
		this.Bands.push(effectBand);
		if(effectBand.Height > this.Height) {
			this.Height = effectBand.Height;
		}
		if(this.FirstBeat == null || this.FirstBeat.Index > effectBand.FirstBeat.Index) {
			this.FirstBeat = effectBand.FirstBeat;
		}
		if(this.LastBeat == null || this.LastBeat.Index < effectBand.LastBeat.Index) {
			this.LastBeat = effectBand.LastBeat;
		}
	}
	,CanBeUsed: function(band) {
		if(this.UniqueEffectId == null && band.Info.get_CanShareBand() || band.Info.get_EffectId() == this.UniqueEffectId) {
			if(!(this.FirstBeat == null || this.LastBeat.Index < band.FirstBeat.Index)) {
				return band.LastBeat.Index < this.FirstBeat.Index;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,__class__: alphaTab.rendering.EffectBandSlot
};
alphaTab.rendering._EffectBarGlyphSizing = {};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_ = $hx_exports["alphaTab"]["rendering"]["_EffectBarGlyphSizing"]["EffectBarGlyphSizing_Impl_"] = {};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.__name__ = ["alphaTab","rendering","_EffectBarGlyphSizing","EffectBarGlyphSizing_Impl_"];
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "SinglePreBeat";
	case 1:
		return "SingleOnBeat";
	case 2:
		return "GroupedBeforeBeat";
	case 3:
		return "GroupedOnBeat";
	case 4:
		return "FullBar";
	}
	return "";
};
alphaTab.rendering.EffectBarRenderer = $hx_exports["alphaTab"]["rendering"]["EffectBarRenderer"] = function(renderer,bar,infos) {
	alphaTab.rendering.BarRendererBase.call(this,renderer,bar);
	this._infos = null;
	this._bands = null;
	this.BandLookup = null;
	this.SizingInfo = null;
	this._infos = infos;
};
alphaTab.rendering.EffectBarRenderer.__name__ = ["alphaTab","rendering","EffectBarRenderer"];
alphaTab.rendering.EffectBarRenderer.__super__ = alphaTab.rendering.BarRendererBase;
alphaTab.rendering.EffectBarRenderer.prototype = $extend(alphaTab.rendering.BarRendererBase.prototype,{
	UpdateSizes: function() {
		this.TopOverflow = 0;
		this.BottomOverflow = 0;
		this.TopPadding = 0;
		this.BottomPadding = 0;
		this.UpdateHeight();
		alphaTab.rendering.BarRendererBase.prototype.UpdateSizes.call(this);
	}
	,UpdateHeight: function() {
		if(this.SizingInfo == null) {
			return;
		}
		var y = 0;
		var slot = $iterator(this.SizingInfo.Slots)();
		while(slot.hasNext()) {
			var slot1 = slot.next();
			slot1.Y = y;
			var band = $iterator(slot1.Bands)();
			while(band.hasNext()) {
				var band1 = band.next();
				band1.Y = y;
				band1.Height = slot1.Height;
			}
			y = y + slot1.Height;
		}
		this.Height = y;
	}
	,ApplyLayoutingInfo: function() {
		if(!alphaTab.rendering.BarRendererBase.prototype.ApplyLayoutingInfo.call(this)) {
			return false;
		}
		this.SizingInfo = new alphaTab.rendering.EffectBandSizingInfo();
		if(this.Index > 0) {
			var previousRenderer = js.Boot.__cast(this.get_PreviousRenderer() , alphaTab.rendering.EffectBarRenderer);
			this.SizingInfo.CopySlots(previousRenderer.SizingInfo);
		}
		var effectBand = HxOverrides.iter(this._bands);
		while(effectBand.hasNext()) {
			var effectBand1 = effectBand.next();
			effectBand1.AlignGlyphs();
			if(!effectBand1.IsEmpty) {
				this.SizingInfo.Register(effectBand1);
			}
		}
		this.UpdateHeight();
		return true;
	}
	,ScaleToWidth: function(width) {
		alphaTab.rendering.BarRendererBase.prototype.ScaleToWidth.call(this,width);
		var effectBand = HxOverrides.iter(this._bands);
		while(effectBand.hasNext()) {
			var effectBand1 = effectBand.next();
			effectBand1.AlignGlyphs();
		}
	}
	,CreateBeatGlyphs: function() {
		var size = this._infos.length;
		var this1 = new Array(size);
		this._bands = this1;
		var this2 = {}
		this.BandLookup = this2;
		var i = 0;
		while(i < this._infos.length) {
			this._bands[i] = new alphaTab.rendering.EffectBand(this._infos[i]);
			this._bands[i].Renderer = this;
			this._bands[i].DoLayout();
			this.BandLookup[this._infos[i].get_EffectId()] = this._bands[i];
			++i;
		}
		var voice = $iterator(this.Bar.Voices)();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			if(this.HasVoiceContainer(voice1)) {
				this.CreateVoiceGlyphs(voice1);
			}
		}
		var effectBand = HxOverrides.iter(this._bands);
		while(effectBand.hasNext()) {
			var effectBand1 = effectBand.next();
			if(effectBand1.IsLinkedToPrevious) {
				this.IsLinkedToPrevious = true;
			}
		}
	}
	,CreateVoiceGlyphs: function(v) {
		var b = $iterator(v.Beats)();
		while(b.hasNext()) {
			var b1 = b.next();
			var container = new alphaTab.rendering.glyphs.BeatContainerGlyph(b1,this.GetOrCreateVoiceContainer(v));
			container.PreNotes = new alphaTab.rendering.glyphs.BeatGlyphBase();
			container.OnNotes = new alphaTab.rendering.glyphs.BeatOnNoteGlyphBase();
			this.AddBeatGlyph(container);
			var effectBand = HxOverrides.iter(this._bands);
			while(effectBand.hasNext()) {
				var effectBand1 = effectBand.next();
				effectBand1.CreateGlyph(b1);
			}
		}
	}
	,Paint: function(cx,cy,canvas) {
		this.PaintBackground(cx,cy,canvas);
		canvas.set_Color(this.get_Resources().MainGlyphColor);
		var effectBand = HxOverrides.iter(this._bands);
		while(effectBand.hasNext()) {
			var effectBand1 = effectBand.next();
			effectBand1.Paint(cx + this.X,cy + this.Y,canvas);
		}
	}
	,__class__: alphaTab.rendering.EffectBarRenderer
});
alphaTab.rendering.RenderFinishedEventArgs = $hx_exports["alphaTab"]["rendering"]["RenderFinishedEventArgs"] = function() {
};
alphaTab.rendering.RenderFinishedEventArgs.__name__ = ["alphaTab","rendering","RenderFinishedEventArgs"];
alphaTab.rendering.RenderFinishedEventArgs.prototype = {
	__class__: alphaTab.rendering.RenderFinishedEventArgs
};
alphaTab.rendering.RenderingResources = $hx_exports["alphaTab"]["rendering"]["RenderingResources"] = function(scale) {
	this.CopyrightFont = null;
	this.TitleFont = null;
	this.SubTitleFont = null;
	this.WordsFont = null;
	this.EffectFont = null;
	this.TablatureFont = null;
	this.GraceFont = null;
	this.StaveLineColor = null;
	this.BarSeperatorColor = null;
	this.BarNumberFont = null;
	this.BarNumberColor = null;
	this.MarkerFont = null;
	this.TabClefFont = null;
	this.MainGlyphColor = null;
	this.SecondaryGlyphColor = null;
	this.Scale = 0.0;
	this.ScoreInfoColor = null;
	this.Init(scale);
};
alphaTab.rendering.RenderingResources.__name__ = ["alphaTab","rendering","RenderingResources"];
alphaTab.rendering.RenderingResources.prototype = {
	Init: function(scale) {
		this.Scale = scale;
		var sansFont = "Arial";
		var serifFont = "Georgia";
		this.EffectFont = new alphaTab.platform.model.Font(serifFont,12 * scale,2);
		this.CopyrightFont = new alphaTab.platform.model.Font(sansFont,12 * scale,1);
		this.TitleFont = new alphaTab.platform.model.Font(serifFont,32 * scale,0);
		this.SubTitleFont = new alphaTab.platform.model.Font(serifFont,20 * scale,0);
		this.WordsFont = new alphaTab.platform.model.Font(serifFont,15 * scale,0);
		this.TablatureFont = new alphaTab.platform.model.Font(sansFont,13 * scale,0);
		this.GraceFont = new alphaTab.platform.model.Font(sansFont,11 * scale,0);
		this.StaveLineColor = new alphaTab.platform.model.Color(0,0,0,255);
		this.BarSeperatorColor = new alphaTab.platform.model.Color(34,34,17,255);
		this.BarNumberFont = new alphaTab.platform.model.Font(sansFont,11 * scale,0);
		this.BarNumberColor = new alphaTab.platform.model.Color(200,0,0,255);
		this.MarkerFont = new alphaTab.platform.model.Font(serifFont,14 * scale,1);
		this.TabClefFont = new alphaTab.platform.model.Font(sansFont,18 * scale,1);
		this.ScoreInfoColor = new alphaTab.platform.model.Color(0,0,0,255);
		this.MainGlyphColor = new alphaTab.platform.model.Color(0,0,0,255);
		this.SecondaryGlyphColor = new alphaTab.platform.model.Color(0,0,0,100);
	}
	,__class__: alphaTab.rendering.RenderingResources
};
alphaTab.rendering.utils = {};
alphaTab.rendering.utils.IBeamYCalculator = $hx_exports["alphaTab"]["rendering"]["utils"]["IBeamYCalculator"] = function() { };
alphaTab.rendering.utils.IBeamYCalculator.__name__ = ["alphaTab","rendering","utils","IBeamYCalculator"];
alphaTab.rendering.utils.IBeamYCalculator.prototype = {
	__class__: alphaTab.rendering.utils.IBeamYCalculator
};
alphaTab.rendering.ScoreBarRenderer = $hx_exports["alphaTab"]["rendering"]["ScoreBarRenderer"] = function(renderer,bar) {
	alphaTab.rendering.BarRendererBase.call(this,renderer,bar);
	this.AccidentalHelper = null;
	this._startSpacing = false;
	this.AccidentalHelper = new alphaTab.rendering.utils.AccidentalHelper();
};
alphaTab.rendering.ScoreBarRenderer.__name__ = ["alphaTab","rendering","ScoreBarRenderer"];
alphaTab.rendering.ScoreBarRenderer.__interfaces__ = [alphaTab.rendering.utils.IBeamYCalculator];
alphaTab.rendering.ScoreBarRenderer.PaintSingleBar = function(canvas,x1,y1,x2,y2,size) {
	canvas.BeginPath();
	canvas.MoveTo(x1,y1);
	canvas.LineTo(x2,y2);
	canvas.LineTo(x2,y2 + size);
	canvas.LineTo(x1,y1 + size);
	canvas.ClosePath();
	canvas.Fill();
};
alphaTab.rendering.ScoreBarRenderer.__super__ = alphaTab.rendering.BarRendererBase;
alphaTab.rendering.ScoreBarRenderer.prototype = $extend(alphaTab.rendering.BarRendererBase.prototype,{
	GetBeatDirection: function(beat) {
		var g = js.Boot.__cast(this.GetOnNotesGlyphForBeat(beat) , alphaTab.rendering.glyphs.ScoreBeatGlyph);
		if(g != null) {
			return g.NoteHeads.get_Direction();
		}
		return 0;
	}
	,GetNoteX: function(note,onEnd) {
		if(onEnd == null) {
			onEnd = true;
		}
		var g = js.Boot.__cast(this.GetOnNotesGlyphForBeat(note.Beat) , alphaTab.rendering.glyphs.ScoreBeatGlyph);
		if(g != null) {
			var x = g.Container.VoiceContainer.X + g.Container.X + g.X;
			if(onEnd) {
				x = x + g.Width;
			}
			return x;
		}
		return 0;
	}
	,GetNoteY: function(note,aboveNote) {
		if(aboveNote == null) {
			aboveNote = false;
		}
		var beat = js.Boot.__cast(this.GetOnNotesGlyphForBeat(note.Beat) , alphaTab.rendering.glyphs.ScoreBeatGlyph);
		if(beat != null) {
			return beat.NoteHeads.GetNoteY(note,aboveNote);
		}
		return 0;
	}
	,get_LineOffset: function() {
		return (8 + 1) * this.get_Scale();
	}
	,UpdateSizes: function() {
		var res = this.get_Resources();
		var this1 = 0.2;
		var glyphOverflow = res.TablatureFont.Size / 2 + res.TablatureFont.Size * this1;
		this.TopPadding = glyphOverflow;
		this.BottomPadding = glyphOverflow;
		this.Height = this.get_LineOffset() * 4 + this.TopPadding + this.BottomPadding;
		alphaTab.rendering.BarRendererBase.prototype.UpdateSizes.call(this);
	}
	,DoLayout: function() {
		alphaTab.rendering.BarRendererBase.prototype.DoLayout.call(this);
		var top = this.GetScoreY(0,0);
		var bottom = this.GetScoreY(8,0);
		var i = 0;
		var j = this.Helpers.BeamHelpers.length;
		while(i < j) {
			var v = this.Helpers.BeamHelpers[i];
			var k = 0;
			var l = v.length;
			while(k < l) {
				var h = v[k];
				var this1 = this.GetNoteLine(h.MaxNote);
				var maxNoteY = this.GetScoreY(this1,0);
				if(h.Direction == 0) {
					maxNoteY = maxNoteY - this.GetStemSize(h);
					maxNoteY = maxNoteY - h.FingeringCount * this.get_Resources().GraceFont.Size;
					if(h.HasTuplet) {
						maxNoteY = maxNoteY - this.get_Resources().EffectFont.Size * 2;
					}
				}
				if(h.HasTuplet) {
					var this2 = 1.5;
					maxNoteY = maxNoteY - this.get_Resources().EffectFont.Size * this2;
				}
				if(maxNoteY < top) {
					this.RegisterOverflowTop(Math.abs(maxNoteY));
				}
				var this3 = this.GetNoteLine(h.MinNote);
				var minNoteY = this.GetScoreY(this3,0);
				if(h.Direction == 1) {
					minNoteY = minNoteY + this.GetStemSize(h);
					minNoteY = minNoteY + h.FingeringCount * this.get_Resources().GraceFont.Size;
				}
				if(minNoteY > bottom) {
					this.RegisterOverflowBottom(Math.abs(minNoteY) - bottom);
				}
				++k;
			}
			++i;
		}
	}
	,Paint: function(cx,cy,canvas) {
		alphaTab.rendering.BarRendererBase.prototype.Paint.call(this,cx,cy,canvas);
		this.PaintBeams(cx,cy,canvas);
		this.PaintTuplets(cx,cy,canvas);
	}
	,PaintTuplets: function(cx,cy,canvas) {
		var i = 0;
		var j = this.Helpers.TupletHelpers.length;
		while(i < j) {
			var v = this.Helpers.TupletHelpers[i];
			var k = 0;
			var l = v.length;
			while(k < l) {
				var h = v[k];
				this.PaintTupletHelper(cx + this.get_BeatGlyphsStart(),cy,canvas,h);
				++k;
			}
			++i;
		}
	}
	,PaintBeams: function(cx,cy,canvas) {
		var i = 0;
		var j = this.Helpers.BeamHelpers.length;
		while(i < j) {
			var v = this.Helpers.BeamHelpers[i];
			var k = 0;
			var l = v.length;
			while(k < l) {
				var h = v[k];
				this.PaintBeamHelper(cx + this.get_BeatGlyphsStart(),cy,canvas,h);
				++k;
			}
			++i;
		}
	}
	,PaintBeamHelper: function(cx,cy,canvas,h) {
		canvas.set_Color(h.Voice.Index == 0 ? this.get_Resources().MainGlyphColor : this.get_Resources().SecondaryGlyphColor);
		if(h.Beats.length == 1) {
			this.PaintFooter(cx,cy,canvas,h);
		} else {
			this.PaintBar(cx,cy,canvas,h);
		}
	}
	,PaintTupletHelper: function(cx,cy,canvas,h) {
		var res = this.get_Resources();
		var oldAlign = canvas.get_TextAlign();
		canvas.set_TextAlign(1);
		if(h.Beats.length == 1 || !h.get_IsFull()) {
			var i = 0;
			var j = h.Beats.length;
			while(i < j) {
				var beat = h.Beats[i];
				var beamingHelper = this.Helpers.BeamHelperLookup[h.VoiceIndex][beat.Index];
				if(beamingHelper == null) {
					++i;
					continue;
				}
				var direction = beamingHelper.Direction;
				var tupletX = beamingHelper.GetBeatLineX(beat) + this.get_Scale();
				var tupletY = cy + this.Y + this.CalculateBeamY(beamingHelper,tupletX);
				var offset;
				if(direction == 0) {
					var this1 = 1.8;
					offset = res.EffectFont.Size * this1;
				} else {
					offset = -3 * this.get_Scale();
				}
				canvas.set_Font(res.EffectFont);
				canvas.FillText(Std.string(h.Tuplet),cx + this.X + tupletX,tupletY - offset);
				++i;
			}
		} else {
			var firstBeat = h.Beats[0];
			var lastBeat = h.Beats[h.Beats.length - 1];
			var firstBeamingHelper = this.Helpers.BeamHelperLookup[h.VoiceIndex][firstBeat.Index];
			var lastBeamingHelper = this.Helpers.BeamHelperLookup[h.VoiceIndex][lastBeat.Index];
			if(firstBeamingHelper != null && lastBeamingHelper != null) {
				var direction1 = firstBeamingHelper.Direction;
				var startX = firstBeamingHelper.GetBeatLineX(firstBeat) + this.get_Scale();
				var endX = lastBeamingHelper.GetBeatLineX(lastBeat) + this.get_Scale();
				canvas.set_Font(res.EffectFont);
				var s = Std.string(h.Tuplet);
				var sw = canvas.MeasureText(s);
				var sp = 3 * this.get_Scale();
				var middleX = (startX + endX) / 2;
				var offset1X = middleX - sw / 2 - sp;
				var offset2X = middleX + sw / 2 + sp;
				var startY = this.CalculateBeamYWithDirection(firstBeamingHelper,startX,firstBeamingHelper.Direction);
				var endY = this.CalculateBeamYWithDirection(lastBeamingHelper,endX,firstBeamingHelper.Direction);
				var k = (endY - startY) / (endX - startX);
				var d = startY - k * startX;
				var offset1Y = k * offset1X + d;
				var middleY = k * middleX + d;
				var offset2Y = k * offset2X + d;
				var offset1 = 10 * this.get_Scale();
				var size = 5 * this.get_Scale();
				if(direction1 == 1) {
					offset1 = offset1 * -1;
					size = size * -1;
				}
				canvas.BeginPath();
				var tmp = cx + this.X + startX;
				var this2 = system.Convert.ToInt32_Single(cy + this.Y + startY - offset1);
				canvas.MoveTo(tmp,this2);
				var tmp1 = cx + this.X + startX;
				var this3 = system.Convert.ToInt32_Single(cy + this.Y + startY - offset1 - size);
				canvas.LineTo(tmp1,this3);
				var tmp2 = cx + this.X + offset1X;
				var this4 = system.Convert.ToInt32_Single(cy + this.Y + offset1Y - offset1 - size);
				canvas.LineTo(tmp2,this4);
				canvas.Stroke();
				canvas.BeginPath();
				var tmp3 = cx + this.X + offset2X;
				var this5 = system.Convert.ToInt32_Single(cy + this.Y + offset2Y - offset1 - size);
				canvas.MoveTo(tmp3,this5);
				var tmp4 = cx + this.X + endX;
				var this6 = system.Convert.ToInt32_Single(cy + this.Y + endY - offset1 - size);
				canvas.LineTo(tmp4,this6);
				var tmp5 = cx + this.X + endX;
				var this7 = system.Convert.ToInt32_Single(cy + this.Y + endY - offset1);
				canvas.LineTo(tmp5,this7);
				canvas.Stroke();
				canvas.FillText(s,cx + this.X + middleX,cy + this.Y + middleY - offset1 - size - res.EffectFont.Size);
			}
		}
		canvas.set_TextAlign(oldAlign);
	}
	,GetStemSize: function(helper) {
		if(helper.Beats.length == 1) {
			return this.GetFooterStemSize(helper.ShortestDuration);
		} else {
			return this.GetBarStemSize(helper.ShortestDuration);
		}
	}
	,GetBarStemSize: function(duration) {
		var size;
		switch(duration) {
		case -4:
			size = 6;
			break;
		case 2:
			size = 6;
			break;
		case 4:
			size = 6;
			break;
		case 8:
			size = 6;
			break;
		case 16:
			size = 6;
			break;
		case 32:
			size = 7;
			break;
		case 64:
			size = 7;
			break;
		case 128:
			size = 9;
			break;
		case 256:
			size = 10;
			break;
		default:
			size = 0;
		}
		var this1 = size;
		return this.GetScoreY(this1,0);
	}
	,GetFooterStemSize: function(duration) {
		var size;
		switch(duration) {
		case -4:
			size = 6;
			break;
		case 2:
			size = 6;
			break;
		case 4:
			size = 6;
			break;
		case 8:
			size = 6;
			break;
		case 16:
			size = 6;
			break;
		case 32:
			size = 6;
			break;
		case 64:
			size = 6;
			break;
		case 128:
			size = 6;
			break;
		case 256:
			size = 6;
			break;
		default:
			size = 0;
		}
		var this1 = size;
		return this.GetScoreY(this1,0);
	}
	,GetYPositionForNote: function(note) {
		var this1 = this.GetNoteLine(note);
		return this.GetScoreY(this1,0);
	}
	,CalculateBeamY: function(h,x) {
		var stemSize = this.GetStemSize(h);
		return h.CalculateBeamY(stemSize,this.get_Scale(),x,this.get_Scale(),this);
	}
	,CalculateBeamYWithDirection: function(h,x,direction) {
		var stemSize = this.GetStemSize(h);
		return h.CalculateBeamYWithDirection(stemSize,this.get_Scale(),x,this.get_Scale(),this,direction);
	}
	,PaintBar: function(cx,cy,canvas,h) {
		var i = 0;
		var j = h.Beats.length;
		while(i < j) {
			var beat = h.Beats[i];
			var isGrace = beat.GraceType != 0;
			var scaleMod = isGrace ? 0.75 : 1;
			var beatLineX = h.GetBeatLineX(beat) + this.get_Scale();
			var direction = h.Direction;
			var y1 = cy + this.Y;
			var y11;
			if(direction == 0) {
				var this1 = this.GetNoteLine(beat.get_MinNote());
				y11 = this.GetScoreY(this1,0);
			} else {
				var this2 = this.GetNoteLine(beat.get_MaxNote());
				y11 = this.GetScoreY(this2,0);
			}
			y1 = y1 + y11;
			var y2 = cy + this.Y;
			y2 = y2 + scaleMod * this.CalculateBeamY(h,beatLineX);
			canvas.set_LineWidth(1.3 * this.get_Scale());
			canvas.BeginPath();
			canvas.MoveTo(cx + this.X + beatLineX,y1);
			canvas.LineTo(cx + this.X + beatLineX,y2);
			canvas.Stroke();
			canvas.set_LineWidth(this.get_Scale());
			var fingeringY = y2;
			if(direction == 1) {
				var this3 = 2;
				fingeringY = fingeringY + canvas.get_Font().Size * this3;
			} else if(i != 0) {
				var this4 = 1.5;
				fingeringY = fingeringY - canvas.get_Font().Size * this4;
			}
			this.PaintFingering(canvas,beat,cx + this.X + beatLineX,direction,fingeringY);
			var brokenBarOffset = 6 * this.get_Scale() * scaleMod;
			var barSpacing = 7 * this.get_Scale() * scaleMod;
			var barSize = 8 / 2 * this.get_Scale() * scaleMod;
			var barCount = alphaTab.model.ModelUtils.GetIndex(beat.Duration) - 2;
			var barStart = cy + this.Y;
			if(direction == 1) {
				barSpacing = -barSpacing;
				barSize = -barSize;
			}
			var barIndex = 0;
			while(barIndex < barCount) {
				var barStartX;
				var barEndX;
				var barStartY;
				var barEndY;
				var barY = barStart + barIndex * barSpacing;
				if(i < h.Beats.length - 1) {
					if(alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin(beat,h.Beats[i + 1],barIndex)) {
						barStartX = beatLineX;
						barEndX = h.GetBeatLineX(h.Beats[i + 1]) + this.get_Scale();
					} else if(i == 0 || !alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin(h.Beats[i - 1],beat,barIndex)) {
						barStartX = beatLineX;
						barEndX = barStartX + brokenBarOffset;
					} else {
						++barIndex;
						continue;
					}
					barStartY = barY + this.CalculateBeamY(h,barStartX) * scaleMod;
					barEndY = barY + this.CalculateBeamY(h,barEndX) * scaleMod;
					alphaTab.rendering.ScoreBarRenderer.PaintSingleBar(canvas,cx + this.X + barStartX,barStartY,cx + this.X + barEndX,barEndY,barSize);
				} else if(i > 0 && !alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin(beat,h.Beats[i - 1],barIndex)) {
					barStartX = beatLineX - brokenBarOffset;
					barEndX = beatLineX;
					barStartY = barY + this.CalculateBeamY(h,barStartX) * scaleMod;
					barEndY = barY + this.CalculateBeamY(h,barEndX) * scaleMod;
					alphaTab.rendering.ScoreBarRenderer.PaintSingleBar(canvas,cx + this.X + barStartX,barStartY,cx + this.X + barEndX,barEndY,barSize);
				}
				++barIndex;
			}
			++i;
		}
	}
	,PaintFooter: function(cx,cy,canvas,h) {
		var beat = h.Beats[0];
		var isGrace = beat.GraceType != 0;
		var scaleMod = isGrace ? 0.75 : 1;
		var stemSize = this.GetFooterStemSize(h.ShortestDuration);
		var beatLineX = h.GetBeatLineX(beat) + this.get_Scale();
		var direction = h.Direction;
		var this1 = this.GetNoteLine(beat.get_MaxNote());
		var topY = this.GetScoreY(this1,0);
		var this2 = this.GetNoteLine(beat.get_MinNote());
		var bottomY = this.GetScoreY(this2,0);
		var beamY;
		var fingeringY;
		if(direction == 1) {
			bottomY = bottomY + stemSize * scaleMod;
			beamY = bottomY;
			fingeringY = cy + this.Y + bottomY;
		} else {
			topY = topY - stemSize * scaleMod;
			beamY = topY;
			fingeringY = cy + this.Y + topY;
		}
		this.PaintFingering(canvas,beat,cx + this.X + beatLineX,direction,fingeringY);
		if(beat.Duration == 1 || beat.Duration == -2 || beat.Duration == -4) {
			return;
		}
		canvas.set_LineWidth(1.3 * this.get_Scale());
		canvas.BeginPath();
		canvas.MoveTo(cx + this.X + beatLineX,cy + this.Y + topY);
		canvas.LineTo(cx + this.X + beatLineX,cy + this.Y + bottomY);
		canvas.Stroke();
		canvas.set_LineWidth(this.get_Scale());
		if(isGrace) {
			var graceSizeY = 15 * this.get_Scale();
			var graceSizeX = 12 * this.get_Scale();
			canvas.BeginPath();
			if(direction == 1) {
				canvas.MoveTo(cx + this.X + beatLineX - graceSizeX / 2,cy + this.Y + bottomY - graceSizeY);
				canvas.LineTo(cx + this.X + beatLineX + graceSizeX / 2,cy + this.Y + bottomY);
			} else {
				canvas.MoveTo(cx + this.X + beatLineX - graceSizeX / 2,cy + this.Y + topY + graceSizeY);
				canvas.LineTo(cx + this.X + beatLineX + graceSizeX / 2,cy + this.Y + topY);
			}
			canvas.Stroke();
		}
		if(beat.Duration > 4) {
			var this3 = 2;
			var glyph = new alphaTab.rendering.glyphs.BeamGlyph(beatLineX - this.get_Scale() / this3,beamY,beat.Duration,direction,isGrace);
			glyph.Renderer = this;
			glyph.DoLayout();
			glyph.Paint(cx + this.X,cy + this.Y,canvas);
		}
	}
	,PaintFingering: function(canvas,beat,beatLineX,direction,topY) {
		if(direction == 0) {
			beatLineX = beatLineX - 10 * this.get_Scale();
		} else {
			beatLineX = beatLineX + 3 * this.get_Scale();
		}
		var noteList = beat.Notes.slice(0);
		var comparison = function(a,b) {
			return a.get_RealValue() - b.get_RealValue();
		};
		noteList.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
		var n = 0;
		while(n < noteList.length) {
			var note = noteList[n];
			var text = null;
			if(note.LeftHandFinger != -2) {
				text = this.FingerToString(beat,note.LeftHandFinger,true);
			} else if(note.RightHandFinger != -2) {
				text = this.FingerToString(beat,note.RightHandFinger,false);
			}
			if(text == null) {
				++n;
				continue;
			}
			canvas.FillText(text,beatLineX,topY);
			topY = topY - system.Convert.ToInt32_Single(canvas.get_Font().Size);
			++n;
		}
	}
	,FingerToString: function(beat,finger,leftHand) {
		if(this.get_Settings().ForcePianoFingering || alphaTab.audio.GeneralMidi.IsPiano(beat.Voice.Bar.Staff.Track.PlaybackInfo.Program)) {
			switch(finger) {
			case -2:case -1:
				return null;
			case 0:
				return "1";
			case 1:
				return "2";
			case 2:
				return "3";
			case 3:
				return "4";
			case 4:
				return "5";
			default:
				return null;
			}
		} else if(leftHand) {
			switch(finger) {
			case -2:case -1:
				return "0";
			case 0:
				return "T";
			case 1:
				return "1";
			case 2:
				return "2";
			case 3:
				return "3";
			case 4:
				return "4";
			default:
				return null;
			}
		} else {
			switch(finger) {
			case -2:case -1:
				return null;
			case 0:
				return "p";
			case 1:
				return "i";
			case 2:
				return "m";
			case 3:
				return "a";
			case 4:
				return "c";
			default:
				return null;
			}
		}
	}
	,CreatePreBeatGlyphs: function() {
		alphaTab.rendering.BarRendererBase.prototype.CreatePreBeatGlyphs.call(this);
		if(this.Bar.get_MasterBar().IsRepeatStart) {
			this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.RepeatOpenGlyph(0,0,1.5,3));
		}
		if(this.get_IsFirstOfLine() || this.Bar.Clef != this.Bar.PreviousBar.Clef || this.Bar.ClefOttavia != this.Bar.PreviousBar.ClefOttavia) {
			var offset = 0;
			var correction = 0;
			var _g = this.Bar.Clef;
			switch(_g) {
			case 0:
				offset = 6;
				break;
			case 1:
				offset = 6;
				break;
			case 2:
				offset = 4;
				break;
			case 3:
				offset = 4;
				correction = -1;
				break;
			case 4:
				offset = 8;
				break;
			default:
			}
			this.CreateStartSpacing();
			var this1 = offset;
			var this2 = correction;
			this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.ClefGlyph(0,this.GetScoreY(this1,this2),this.Bar.Clef,this.Bar.ClefOttavia));
		}
		if(this.Index == 0 && this.Bar.get_MasterBar().KeySignature != 0 || this.Bar.PreviousBar != null && this.Bar.get_MasterBar().KeySignature != this.Bar.PreviousBar.get_MasterBar().KeySignature) {
			this.CreateStartSpacing();
			this.CreateKeySignatureGlyphs();
		}
		if(this.Bar.PreviousBar == null || this.Bar.PreviousBar != null && this.Bar.get_MasterBar().TimeSignatureNumerator != this.Bar.PreviousBar.get_MasterBar().TimeSignatureNumerator || this.Bar.PreviousBar != null && this.Bar.get_MasterBar().TimeSignatureDenominator != this.Bar.PreviousBar.get_MasterBar().TimeSignatureDenominator) {
			this.CreateStartSpacing();
			this.CreateTimeSignatureGlyphs();
		}
		this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.BarNumberGlyph(0,this.GetScoreY(-0.5,0),this.Bar.Index + 1));
		if(this.Bar.get_IsEmpty()) {
			this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,30 * this.get_Scale()));
		}
	}
	,CreateBeatGlyphs: function() {
		var v = 0;
		while(v < this.Bar.Voices.length) {
			var voice = this.Bar.Voices[v];
			if(this.HasVoiceContainer(voice)) {
				this.CreateVoiceGlyphs(voice);
			}
			++v;
		}
	}
	,CreatePostBeatGlyphs: function() {
		alphaTab.rendering.BarRendererBase.prototype.CreatePostBeatGlyphs.call(this);
		if(this.Bar.get_MasterBar().get_IsRepeatEnd()) {
			this.AddPostBeatGlyph(new alphaTab.rendering.glyphs.RepeatCloseGlyph(this.X,0));
			if(this.Bar.get_MasterBar().RepeatCount > 2) {
				this.AddPostBeatGlyph(new alphaTab.rendering.glyphs.RepeatCountGlyph(0,this.GetScoreY(-1,-3),this.Bar.get_MasterBar().RepeatCount));
			}
		} else if(this.Bar.NextBar == null || !this.Bar.NextBar.get_MasterBar().IsRepeatStart) {
			this.AddPostBeatGlyph(new alphaTab.rendering.glyphs.BarSeperatorGlyph(0,0));
		}
	}
	,CreateStartSpacing: function() {
		if(this._startSpacing) {
			return;
		}
		this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,2 * this.get_Scale()));
		this._startSpacing = true;
	}
	,CreateKeySignatureGlyphs: function() {
		var offsetClef = 0;
		var currentKey = this.Bar.get_MasterBar().KeySignature;
		var previousKey = this.Bar.PreviousBar == null ? 0 : this.Bar.PreviousBar.get_MasterBar().KeySignature;
		var _g = this.Bar.Clef;
		switch(_g) {
		case 0:
			offsetClef = 0;
			break;
		case 1:
			offsetClef = -1;
			break;
		case 2:
			offsetClef = 1;
			break;
		case 3:
			offsetClef = 2;
			break;
		case 4:
			offsetClef = 1;
			break;
		default:
		}
		var this1 = {}
		var newLines = this1;
		var this2 = [];
		var newGlyphs = this2;
		if(alphaTab.model.ModelUtils.KeySignatureIsSharp(currentKey)) {
			var i = 0;
			while(i < Math.abs(currentKey)) {
				var step = alphaTab.rendering.ScoreBarRenderer.SharpKsSteps[i] + offsetClef;
				var this3 = step;
				newGlyphs.push(new alphaTab.rendering.glyphs.SharpGlyph(0,this.GetScoreY(this3,0),false));
				newLines[step] = true;
				++i;
			}
		} else {
			var i1 = 0;
			while(i1 < Math.abs(currentKey)) {
				var step1 = alphaTab.rendering.ScoreBarRenderer.FlatKsSteps[i1] + offsetClef;
				var this4 = step1;
				newGlyphs.push(new alphaTab.rendering.glyphs.FlatGlyph(0,this.GetScoreY(this4,0),false));
				newLines[step1] = true;
				++i1;
			}
		}
		var naturalizeSymbols = Math.abs(previousKey);
		var previousKeyPositions = alphaTab.model.ModelUtils.KeySignatureIsSharp(previousKey) ? alphaTab.rendering.ScoreBarRenderer.SharpKsSteps : alphaTab.rendering.ScoreBarRenderer.FlatKsSteps;
		var i2 = 0;
		while(i2 < naturalizeSymbols) {
			var step2 = previousKeyPositions[i2] + offsetClef;
			if(!newLines.hasOwnProperty(step2)) {
				var this5 = previousKeyPositions[i2] + offsetClef;
				this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.NaturalizeGlyph(0,this.GetScoreY(this5,0),false));
			}
			++i2;
		}
		var newGlyph = $iterator(newGlyphs)();
		while(newGlyph.hasNext()) {
			var newGlyph1 = newGlyph.next();
			this.AddPreBeatGlyph(newGlyph1);
		}
	}
	,CreateTimeSignatureGlyphs: function() {
		this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_Scale()));
		this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph(0,this.GetScoreY(2,0),this.Bar.get_MasterBar().TimeSignatureNumerator,this.Bar.get_MasterBar().TimeSignatureDenominator,this.Bar.get_MasterBar().TimeSignatureCommon));
	}
	,CreateVoiceGlyphs: function(v) {
		var i = 0;
		var j = v.Beats.length;
		while(i < j) {
			var b = v.Beats[i];
			var container = new alphaTab.rendering.ScoreBeatContainerGlyph(b,this.GetOrCreateVoiceContainer(v));
			container.PreNotes = new alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph();
			container.OnNotes = new alphaTab.rendering.glyphs.ScoreBeatGlyph();
			this.AddBeatGlyph(container);
			++i;
		}
	}
	,GetNoteLine: function(n) {
		return this.AccidentalHelper.GetNoteLine(n);
	}
	,GetScoreY: function(steps,correction) {
		if(correction == null) {
			correction = 0;
		}
		return this.get_LineOffset() / 2 * steps + correction * this.get_Scale();
	}
	,PaintBackground: function(cx,cy,canvas) {
		alphaTab.rendering.BarRendererBase.prototype.PaintBackground.call(this,cx,cy,canvas);
		var res = this.get_Resources();
		canvas.set_Color(res.StaveLineColor);
		var lineY = cy + this.Y + this.TopPadding;
		var lineOffset = this.get_LineOffset();
		var i = 0;
		while(i < 5) {
			if(i > 0) {
				lineY = lineY + lineOffset;
			}
			var tmp = cx + this.X;
			var this1 = system.Convert.ToInt32_Single(lineY);
			canvas.FillRect(tmp,this1,this.Width,this.get_Scale());
			++i;
		}
		canvas.set_Color(res.MainGlyphColor);
	}
	,__class__: alphaTab.rendering.ScoreBarRenderer
});
alphaTab.rendering.glyphs.BeatContainerGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["BeatContainerGlyph"] = function(beat,voiceContainer) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this.VoiceContainer = null;
	this.Beat = null;
	this.PreNotes = null;
	this.OnNotes = null;
	this.Ties = null;
	this.MinWidth = 0.0;
	this.OnTimeX = 0.0;
	this.Beat = beat;
	var this1 = [];
	this.Ties = this1;
	this.VoiceContainer = voiceContainer;
};
alphaTab.rendering.glyphs.BeatContainerGlyph.__name__ = ["alphaTab","rendering","glyphs","BeatContainerGlyph"];
alphaTab.rendering.glyphs.BeatContainerGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.BeatContainerGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	RegisterLayoutingInfo: function(layoutings) {
		var preBeatStretch = this.PreNotes.Width + this.OnNotes.Width / 2;
		layoutings.AddBeatSpring(this.Beat,this.MinWidth,preBeatStretch);
		layoutings.SetPreBeatSize(this.Beat,this.PreNotes.Width);
		layoutings.SetOnBeatSize(this.Beat,this.OnNotes.Width);
	}
	,ApplyLayoutingInfo: function(info) {
		this.PreNotes.Width = info.GetPreBeatSize(this.Beat);
		this.OnNotes.Width = info.GetOnBeatSize(this.Beat);
		this.OnNotes.X = this.PreNotes.X + this.PreNotes.Width;
		this.OnTimeX = this.OnNotes.X + this.OnNotes.Width / 2;
		this.OnNotes.UpdateBeamingHelper();
	}
	,DoLayout: function() {
		this.PreNotes.X = 0;
		this.PreNotes.Renderer = this.Renderer;
		this.PreNotes.Container = this;
		this.PreNotes.DoLayout();
		this.OnNotes.X = this.PreNotes.X + this.PreNotes.Width;
		this.OnNotes.Renderer = this.Renderer;
		this.OnNotes.Container = this;
		this.OnNotes.DoLayout();
		var i = this.Beat.Notes.length - 1;
		while(i >= 0) this.CreateTies(this.Beat.Notes[i--]);
		this.MinWidth = this.PreNotes.Width + this.OnNotes.Width;
		if(!this.Beat.get_IsRest()) {
			if(this.OnNotes.BeamingHelper.Beats.length == 1) {
				if(this.Beat.Duration >= 8) {
					this.MinWidth = this.MinWidth + 20 * this.get_Scale();
				}
			} else {
				var _g = this.Beat.Duration;
				switch(_g) {
				case 128:case 256:
					this.MinWidth = this.MinWidth + 10 * this.get_Scale();
					break;
				default:
				}
			}
		}
		this.Width = this.MinWidth;
		this.OnTimeX = this.OnNotes.X + this.OnNotes.Width / 2;
	}
	,ScaleToWidth: function(beatWidth) {
		this.OnNotes.UpdateBeamingHelper();
		this.Width = beatWidth;
	}
	,CreateTies: function(n) {
	}
	,Paint: function(cx,cy,canvas) {
		if(this.Beat.Voice.IsEmpty) {
			return;
		}
		var isEmptyGlyph = this.PreNotes.get_IsEmpty() && this.OnNotes.get_IsEmpty() && this.Ties.length == 0;
		if(isEmptyGlyph) {
			return;
		}
		canvas.BeginGroup("b" + this.Beat.Id);
		var oldColor = canvas.get_Color();
		this.PreNotes.Paint(cx + this.X,cy + this.Y,canvas);
		this.OnNotes.Paint(cx + this.X,cy + this.Y,canvas);
		var staffX = cx - this.VoiceContainer.X - this.Renderer.X;
		var staffY = cy - this.VoiceContainer.Y - this.Renderer.Y;
		var i = 0;
		var j = this.Ties.length;
		while(i < j) {
			var t = this.Ties[i];
			t.Renderer = this.Renderer;
			t.Paint(staffX,staffY,canvas);
			++i;
		}
		canvas.EndGroup();
	}
	,__class__: alphaTab.rendering.glyphs.BeatContainerGlyph
});
alphaTab.rendering.ScoreBeatContainerGlyph = $hx_exports["alphaTab"]["rendering"]["ScoreBeatContainerGlyph"] = function(beat,voiceContainer) {
	alphaTab.rendering.glyphs.BeatContainerGlyph.call(this,beat,voiceContainer);
};
alphaTab.rendering.ScoreBeatContainerGlyph.__name__ = ["alphaTab","rendering","ScoreBeatContainerGlyph"];
alphaTab.rendering.ScoreBeatContainerGlyph.__super__ = alphaTab.rendering.glyphs.BeatContainerGlyph;
alphaTab.rendering.ScoreBeatContainerGlyph.prototype = $extend(alphaTab.rendering.glyphs.BeatContainerGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.BeatContainerGlyph.prototype.DoLayout.call(this);
		if(this.Beat.IsLegatoOrigin) {
			if(this.Beat.PreviousBeat == null || !this.Beat.PreviousBeat.IsLegatoOrigin) {
				var destination = this.Beat.NextBeat;
				while(destination.NextBeat != null && destination.NextBeat.get_IsLegatoDestination()) destination = destination.NextBeat;
				this.Ties.push(new alphaTab.rendering.glyphs.ScoreLegatoGlyph(this.Beat,destination,false));
			}
		} else if(this.Beat.get_IsLegatoDestination()) {
			if(!this.Beat.IsLegatoOrigin) {
				var origin = this.Beat.PreviousBeat;
				while(origin.PreviousBeat != null && origin.PreviousBeat.IsLegatoOrigin) origin = origin.PreviousBeat;
				this.Ties.push(new alphaTab.rendering.glyphs.ScoreLegatoGlyph(origin,this.Beat,true));
			}
		}
	}
	,CreateTies: function(n) {
		if(n.IsTieOrigin) {
			var tie = new alphaTab.rendering.glyphs.ScoreTieGlyph(n,n.TieDestination,false);
			this.Ties.push(tie);
		}
		if(n.IsTieDestination) {
			var tie1 = new alphaTab.rendering.glyphs.ScoreTieGlyph(n.TieOrigin,n,true);
			this.Ties.push(tie1);
		} else if(n.IsHammerPullOrigin) {
			if(n.HammerPullOrigin == null) {
				var destination = n.HammerPullDestination;
				while(destination.HammerPullDestination != null) destination = destination.HammerPullDestination;
				var tie2 = new alphaTab.rendering.glyphs.ScoreTieGlyph(n,destination,false);
				this.Ties.push(tie2);
			}
		} else if(n.get_IsHammerPullDestination()) {
			if(n.HammerPullDestination == null) {
				var origin = n.HammerPullOrigin;
				while(origin.HammerPullOrigin != null) origin = origin.HammerPullOrigin;
				var tie3 = new alphaTab.rendering.glyphs.ScoreTieGlyph(origin,n,true);
				this.Ties.push(tie3);
			}
		} else if(n.SlideType == 2) {
			var tie4 = new alphaTab.rendering.glyphs.ScoreTieGlyph(n,n.SlideTarget,false);
			this.Ties.push(tie4);
		}
		if(n.SlideType != 0) {
			var l = new alphaTab.rendering.glyphs.ScoreSlideLineGlyph(n.SlideType,n,this);
			this.Ties.push(l);
		}
	}
	,__class__: alphaTab.rendering.ScoreBeatContainerGlyph
});
alphaTab.rendering.ScoreRenderer = $hx_exports["alphaTab"]["rendering"]["ScoreRenderer"] = function(settings) {
	this._currentLayoutMode = null;
	this._currentRenderEngine = null;
	this._renderedTracks = null;
	this.Canvas = null;
	this.Score = null;
	this.Tracks = null;
	this.Layout = null;
	this.RenderingResources = null;
	this.Settings = null;
	this.Settings = settings;
	this.RenderingResources = new alphaTab.rendering.RenderingResources(1);
	this.RecreateCanvas();
	this.RecreateLayout();
};
alphaTab.rendering.ScoreRenderer.__name__ = ["alphaTab","rendering","ScoreRenderer"];
alphaTab.rendering.ScoreRenderer.__interfaces__ = [alphaTab.rendering.IScoreRenderer];
alphaTab.rendering.ScoreRenderer.prototype = {
	get_BoundsLookup: function() {
		return this.__BoundsLookup;
	}
	,set_BoundsLookup: function(value) {
		return this.__BoundsLookup = value;
	}
	,Destroy: function() {
		this.Score = null;
		this.Canvas = null;
		this.Layout = null;
		this.RenderingResources = null;
		this.Settings = null;
		this.set_BoundsLookup(null);
		this.Tracks = null;
	}
	,RecreateCanvas: function() {
		if(this._currentRenderEngine != this.Settings.Engine) {
			if(this.Settings.Engine == null || !alphaTab.Environment.RenderEngines.hasOwnProperty(this.Settings.Engine)) {
				this.Canvas = alphaTab.Environment.RenderEngines["default"]();
			} else {
				this.Canvas = alphaTab.Environment.RenderEngines[this.Settings.Engine]();
			}
			this._currentRenderEngine = this.Settings.Engine;
			return true;
		}
		return false;
	}
	,RecreateLayout: function() {
		if(this._currentLayoutMode != this.Settings.Layout.Mode) {
			if(this.Settings.Layout == null || !alphaTab.Environment.LayoutEngines.hasOwnProperty(this.Settings.Layout.Mode)) {
				this.Layout = alphaTab.Environment.LayoutEngines["default"](this);
			} else {
				this.Layout = alphaTab.Environment.LayoutEngines[this.Settings.Layout.Mode](this);
			}
			this._currentLayoutMode = this.Settings.Layout.Mode;
			return true;
		}
		return false;
	}
	,Render: function(score,trackIndexes) {
		try {
			this.Score = score;
			var this1 = [];
			var tracks = this1;
			var track = new system.Int32ArrayIterator(trackIndexes);
			while(track.hasNext()) {
				var track1 = track.next();
				if(track1 >= 0 && track1 < score.Tracks.length) {
					tracks.push(score.Tracks[track1]);
				}
			}
			if(tracks.length == 0 && score.Tracks.length > 0) {
				tracks.push(score.Tracks[0]);
			}
			this.Tracks = tracks;
			this.Invalidate();
		} catch( e ) {
			if (e instanceof js._Boot.HaxeError) e = e.val;
			if( js.Boot.__instanceof(e,system.Exception) ) {
				this.OnError("render",e);
			} else throw(e);
		}
	}
	,RenderTracks: function(tracks) {
		if(tracks.length == 0) {
			this.Score = null;
		} else {
			this.Score = tracks[0].Score;
		}
		this.Tracks = tracks;
		this.Invalidate();
	}
	,UpdateSettings: function(settings) {
		this.Settings = settings;
	}
	,Invalidate: function() {
		if(this.Settings.Width == 0) {
			alphaTab.util.Logger.Warning("Rendering","AlphaTab skipped rendering because of width=0 (element invisible)",null);
			return;
		}
		this.set_BoundsLookup(new alphaTab.rendering.utils.BoundsLookup());
		if(this.Tracks.length == 0) {
			return;
		}
		this.RecreateCanvas();
		if(this.RenderingResources.Scale != this.Settings.Scale) {
			this.RenderingResources.Init(this.Settings.Scale);
			this.Canvas.set_LineWidth(this.Settings.Scale);
		}
		this.Canvas.set_Resources(this.RenderingResources);
		alphaTab.util.Logger.Info("Rendering","Rendering " + this.Tracks.length + " tracks",null);
		var i = 0;
		while(i < this.Tracks.length) {
			var track = this.Tracks[i];
			alphaTab.util.Logger.Info("Rendering","Track " + i + ": " + track.Name,null);
			++i;
		}
		this.OnPreRender();
		this.RecreateLayout();
		this.LayoutAndRender();
		this._renderedTracks = this.Tracks;
		alphaTab.util.Logger.Info("Rendering","Rendering finished",null);
	}
	,Resize: function(width) {
		if(this.RecreateLayout() || this.RecreateCanvas() || this._renderedTracks != this.Tracks || this.Tracks == null) {
			alphaTab.util.Logger.Info("Rendering","Starting full rerendering due to layout or canvas change",null);
			this.Invalidate();
		} else if(this.Layout.get_SupportsResize()) {
			alphaTab.util.Logger.Info("Rendering","Starting optimized rerendering for resize",null);
			this.set_BoundsLookup(new alphaTab.rendering.utils.BoundsLookup());
			this.OnPreRender();
			this.Settings.Width = width;
			this.Layout.Resize();
			this.Layout.RenderAnnotation();
			this.OnRenderFinished();
			this.OnPostRender();
		} else {
			alphaTab.util.Logger.Warning("Rendering","Current layout does not support dynamic resizing, nothing was done",null);
		}
		alphaTab.util.Logger.Info("Rendering","Resize finished",null);
	}
	,LayoutAndRender: function() {
		alphaTab.util.Logger.Info("Rendering","Rendering at scale " + this.Settings.Scale + " with layout " + this.Layout.get_Name(),null);
		this.Layout.LayoutAndRender();
		this.Layout.RenderAnnotation();
		this.OnRenderFinished();
		this.OnPostRender();
	}
	,add_PreRender: function(value) {
		return this.PreRender = system._EventAction1.EventAction1_Impl_.add(this.PreRender,value);
	}
	,remove_PreRender: function(value) {
		return this.PreRender = system._EventAction1.EventAction1_Impl_.sub(this.PreRender,value);
	}
	,OnPreRender: function() {
		var result = this.Canvas.OnPreRender();
		var _e = this.PreRender;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.Invoke(_e,p);
		};
		var args = new alphaTab.rendering.RenderFinishedEventArgs();
		args.TotalWidth = 0;
		args.TotalHeight = 0;
		args.Width = 0;
		args.Height = 0;
		args.RenderResult = result;
		if(handler != null) {
			handler(args);
		}
	}
	,add_PartialRenderFinished: function(value) {
		return this.PartialRenderFinished = system._EventAction1.EventAction1_Impl_.add(this.PartialRenderFinished,value);
	}
	,remove_PartialRenderFinished: function(value) {
		return this.PartialRenderFinished = system._EventAction1.EventAction1_Impl_.sub(this.PartialRenderFinished,value);
	}
	,OnPartialRenderFinished: function(e) {
		var _e = this.PartialRenderFinished;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.Invoke(_e,p);
		};
		if(handler != null) {
			handler(e);
		}
	}
	,add_RenderFinished: function(value) {
		return this.RenderFinished = system._EventAction1.EventAction1_Impl_.add(this.RenderFinished,value);
	}
	,remove_RenderFinished: function(value) {
		return this.RenderFinished = system._EventAction1.EventAction1_Impl_.sub(this.RenderFinished,value);
	}
	,OnRenderFinished: function() {
		var _gthis = this;
		var result = this.Canvas.OnRenderFinished();
		var _e = this.RenderFinished;
		var handler = function(p) {
			system._EventAction1.EventAction1_Impl_.Invoke(_e,p);
		};
		if(handler != null) {
			var _tmp = new alphaTab.rendering.RenderFinishedEventArgs();
			_tmp.RenderResult = result;
			_tmp.TotalHeight = _gthis.Layout.Height;
			_tmp.TotalWidth = _gthis.Layout.Width;
			handler(_tmp);
		}
	}
	,add_Error: function(value) {
		return this.Error = system._EventAction2.EventAction2_Impl_.add(this.Error,value);
	}
	,remove_Error: function(value) {
		return this.Error = system._EventAction2.EventAction2_Impl_.sub(this.Error,value);
	}
	,OnError: function(type,details) {
		var _e = this.Error;
		var handler = function(p1,p2) {
			system._EventAction2.EventAction2_Impl_.Invoke(_e,p1,p2);
		};
		if(handler != null) {
			handler(type,details);
		}
	}
	,add_PostRenderFinished: function(value) {
		return this.PostRenderFinished = system._EventAction.EventAction_Impl_.add(this.PostRenderFinished,value);
	}
	,remove_PostRenderFinished: function(value) {
		return this.PostRenderFinished = system._EventAction.EventAction_Impl_.sub(this.PostRenderFinished,value);
	}
	,OnPostRender: function() {
		var _e = this.PostRenderFinished;
		var handler = function() {
			system._EventAction.EventAction_Impl_.Invoke(_e);
		};
		if(handler != null) {
			handler();
		}
	}
	,__class__: alphaTab.rendering.ScoreRenderer
};
alphaTab.rendering.TabBarRenderer = $hx_exports["alphaTab"]["rendering"]["TabBarRenderer"] = function(renderer,bar) {
	alphaTab.rendering.BarRendererBase.call(this,renderer,bar);
	this.ShowTimeSignature = false;
	this.ShowRests = false;
	this.ShowTiedNotes = false;
	this.RenderRhythm = false;
	this.RhythmHeight = 0.0;
	this.RhythmBeams = false;
	this._startSpacing = false;
	this.RhythmHeight = 15 * renderer.Layout.get_Scale();
	this.RhythmBeams = true;
};
alphaTab.rendering.TabBarRenderer.__name__ = ["alphaTab","rendering","TabBarRenderer"];
alphaTab.rendering.TabBarRenderer.PaintSingleBar = function(canvas,x1,y1,x2,y2,size) {
	canvas.BeginPath();
	canvas.MoveTo(x1,y1);
	canvas.LineTo(x2,y2);
	canvas.LineTo(x2,y2 - size);
	canvas.LineTo(x1,y1 - size);
	canvas.ClosePath();
	canvas.Fill();
};
alphaTab.rendering.TabBarRenderer.__super__ = alphaTab.rendering.BarRendererBase;
alphaTab.rendering.TabBarRenderer.prototype = $extend(alphaTab.rendering.BarRendererBase.prototype,{
	get_LineOffset: function() {
		return (10 + 1) * this.get_Scale();
	}
	,GetNoteX: function(note,onEnd) {
		if(onEnd == null) {
			onEnd = true;
		}
		var beat = js.Boot.__cast(this.GetOnNotesGlyphForBeat(note.Beat) , alphaTab.rendering.glyphs.TabBeatGlyph);
		if(beat != null) {
			return beat.Container.X + beat.Container.VoiceContainer.X + beat.X + beat.NoteNumbers.GetNoteX(note,onEnd);
		}
		return 0;
	}
	,GetNoteY: function(note,aboveNote) {
		if(aboveNote == null) {
			aboveNote = false;
		}
		var beat = js.Boot.__cast(this.GetOnNotesGlyphForBeat(note.Beat) , alphaTab.rendering.glyphs.TabBeatGlyph);
		if(beat != null) {
			return beat.NoteNumbers.GetNoteY(note,aboveNote);
		}
		return 0;
	}
	,UpdateSizes: function() {
		var res = this.get_Resources();
		var this1 = 0.2;
		var numberOverflow = res.TablatureFont.Size / 2 + res.TablatureFont.Size * this1;
		this.TopPadding = numberOverflow;
		this.BottomPadding = numberOverflow;
		this.Height = this.get_LineOffset() * (this.Bar.Staff.Tuning.length - 1) + numberOverflow * 2;
		if(this.RenderRhythm) {
			this.Height = this.Height + this.RhythmHeight;
			this.BottomPadding = this.BottomPadding + this.RhythmHeight;
		}
		alphaTab.rendering.BarRendererBase.prototype.UpdateSizes.call(this);
	}
	,CreatePreBeatGlyphs: function() {
		alphaTab.rendering.BarRendererBase.prototype.CreatePreBeatGlyphs.call(this);
		if(this.Bar.get_MasterBar().IsRepeatStart) {
			this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.RepeatOpenGlyph(0,0,1.5,3));
		}
		if(this.get_IsFirstOfLine()) {
			var this1 = 2;
			var center = (this.Bar.Staff.Tuning.length + 1) / this1;
			this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.TabClefGlyph(5 * this.get_Scale(),this.GetTabY(center,0)));
		}
		if(this.ShowTimeSignature && (this.Bar.PreviousBar == null || this.Bar.PreviousBar != null && this.Bar.get_MasterBar().TimeSignatureNumerator != this.Bar.PreviousBar.get_MasterBar().TimeSignatureNumerator || this.Bar.PreviousBar != null && this.Bar.get_MasterBar().TimeSignatureDenominator != this.Bar.PreviousBar.get_MasterBar().TimeSignatureDenominator)) {
			this.CreateStartSpacing();
			this.CreateTimeSignatureGlyphs();
		}
		this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.BarNumberGlyph(0,this.GetTabY(-0.5,0),this.Bar.Index + 1));
		if(this.Bar.get_IsEmpty()) {
			this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,30 * this.get_Scale()));
		}
	}
	,CreateStartSpacing: function() {
		if(this._startSpacing) {
			return;
		}
		this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,2 * this.get_Scale()));
		this._startSpacing = true;
	}
	,CreateTimeSignatureGlyphs: function() {
		this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_Scale()));
		this.AddPreBeatGlyph(new alphaTab.rendering.glyphs.TabTimeSignatureGlyph(0,this.GetTabY(0,0),this.Bar.get_MasterBar().TimeSignatureNumerator,this.Bar.get_MasterBar().TimeSignatureDenominator,this.Bar.get_MasterBar().TimeSignatureCommon));
	}
	,CreateBeatGlyphs: function() {
		var v = 0;
		while(v < this.Bar.Voices.length) {
			var voice = this.Bar.Voices[v];
			if(this.HasVoiceContainer(voice)) {
				this.CreateVoiceGlyphs(this.Bar.Voices[v]);
			}
			++v;
		}
	}
	,CreateVoiceGlyphs: function(v) {
		var i = 0;
		var j = v.Beats.length;
		while(i < j) {
			var b = v.Beats[i];
			var container = new alphaTab.rendering.glyphs.TabBeatContainerGlyph(b,this.GetOrCreateVoiceContainer(v));
			container.PreNotes = new alphaTab.rendering.glyphs.TabBeatPreNotesGlyph();
			container.OnNotes = new alphaTab.rendering.glyphs.TabBeatGlyph();
			this.AddBeatGlyph(container);
			++i;
		}
	}
	,CreatePostBeatGlyphs: function() {
		alphaTab.rendering.BarRendererBase.prototype.CreatePostBeatGlyphs.call(this);
		if(this.Bar.get_MasterBar().get_IsRepeatEnd()) {
			this.AddPostBeatGlyph(new alphaTab.rendering.glyphs.RepeatCloseGlyph(this.X,0));
			if(this.Bar.get_MasterBar().RepeatCount > 2) {
				this.AddPostBeatGlyph(new alphaTab.rendering.glyphs.RepeatCountGlyph(0,this.GetTabY(-0.5,-3),this.Bar.get_MasterBar().RepeatCount));
			}
		} else if(this.Bar.NextBar == null || !this.Bar.NextBar.get_MasterBar().IsRepeatStart) {
			this.AddPostBeatGlyph(new alphaTab.rendering.glyphs.BarSeperatorGlyph(0,0));
		}
	}
	,GetTabY: function(line,correction) {
		if(correction == null) {
			correction = 0;
		}
		return this.get_LineOffset() * line + correction * this.get_Scale();
	}
	,PaintBackground: function(cx,cy,canvas) {
		alphaTab.rendering.BarRendererBase.prototype.PaintBackground.call(this,cx,cy,canvas);
		var res = this.get_Resources();
		canvas.set_Color(res.StaveLineColor);
		var lineY = cy + this.Y + this.TopPadding;
		var padding = this.get_Scale();
		var this1 = [];
		var tabNotes = this1;
		var i = 0;
		var j = this.Bar.Staff.Tuning.length;
		while(i < j) {
			var this2 = [];
			tabNotes.push(this2);
			++i;
		}
		var voice = $iterator(this.Bar.Voices)();
		while(voice.hasNext()) {
			var voice1 = voice.next();
			if(this.HasVoiceContainer(voice1)) {
				var vc = this.GetOrCreateVoiceContainer(voice1);
				var bg = $iterator(vc.BeatGlyphs)();
				while(bg.hasNext()) {
					var bg1 = bg.next();
					var notes = js.Boot.__cast(bg1.OnNotes , alphaTab.rendering.glyphs.TabBeatGlyph);
					var noteNumbers = notes.NoteNumbers;
					if(noteNumbers != null) {
						var this3 = noteNumbers.NotesPerString;
						var s = $iterator(Object.keys(this3))();
						while(s.hasNext()) {
							var s1 = s.next();
							var noteNumber = noteNumbers.NotesPerString[s1];
							if(!noteNumber.IsEmpty) {
								tabNotes[this.Bar.Staff.Tuning.length - s1].push(new Float32Array([vc.X + bg1.X + notes.X + noteNumbers.X,noteNumbers.Width + padding]));
							}
						}
					}
				}
			}
		}
		var line = $iterator(tabNotes)();
		while(line.hasNext()) {
			var line1 = line.next();
			line1.sort((function(comparison) {
				return function(a,b) {
					return comparison[0](a,b);
				};
			})([(function() {
				return function(a1,b1) {
					if(a1[0] > b1[0]) {
						return 1;
					} else if(a1[0] < b1[0]) {
						return -1;
					} else {
						return 0;
					}
				};
			})()]));
		}
		var lineOffset = this.get_LineOffset();
		var i1 = 0;
		var j1 = this.Bar.Staff.Tuning.length;
		while(i1 < j1) {
			if(i1 > 0) {
				lineY = lineY + lineOffset;
			}
			var lineX = 0;
			var line2 = $iterator(tabNotes[i1])();
			while(line2.hasNext()) {
				var line3 = line2.next();
				var tmp = cx + this.X + lineX;
				var this4 = system.Convert.ToInt32_Single(lineY);
				var tmp1 = this.get_Scale();
				canvas.FillRect(tmp,this4,line3[0] - lineX,tmp1);
				lineX = line3[0] + line3[1];
			}
			var tmp2 = cx + this.X + lineX;
			var this5 = system.Convert.ToInt32_Single(lineY);
			canvas.FillRect(tmp2,this5,this.Width - lineX,this.get_Scale());
			++i1;
		}
		canvas.set_Color(res.MainGlyphColor);
	}
	,Paint: function(cx,cy,canvas) {
		alphaTab.rendering.BarRendererBase.prototype.Paint.call(this,cx,cy,canvas);
		if(this.RenderRhythm) {
			this.PaintBeams(cx,cy,canvas);
		}
	}
	,PaintBeams: function(cx,cy,canvas) {
		var i = 0;
		var j = this.Helpers.BeamHelpers.length;
		while(i < j) {
			var v = this.Helpers.BeamHelpers[i];
			var k = 0;
			var l = v.length;
			while(k < l) {
				var h = v[k];
				this.PaintBeamHelper(cx + this.get_BeatGlyphsStart(),cy,canvas,h);
				++k;
			}
			++i;
		}
	}
	,PaintBeamHelper: function(cx,cy,canvas,h) {
		canvas.set_Color(h.Voice.Index == 0 ? this.get_Resources().MainGlyphColor : this.get_Resources().SecondaryGlyphColor);
		if(h.Beats.length == 1 || !this.RhythmBeams) {
			this.PaintFooter(cx,cy,canvas,h);
		} else {
			this.PaintBar(cx,cy,canvas,h);
		}
	}
	,PaintBar: function(cx,cy,canvas,h) {
		var i = 0;
		var j = h.Beats.length;
		while(i < j) {
			var beat = h.Beats[i];
			if(h.HasBeatLineX(beat)) {
				var beatLineX = h.GetBeatLineX(beat);
				var y1 = cy + this.Y;
				var y2 = cy + this.Y + this.Height;
				var startGlyph = js.Boot.__cast(this.GetOnNotesGlyphForBeat(beat) , alphaTab.rendering.glyphs.TabBeatGlyph);
				if(startGlyph.NoteNumbers == null) {
					y1 = y1 + (this.Height - this.RhythmHeight);
				} else {
					y1 = y1 + (startGlyph.NoteNumbers.GetNoteY(startGlyph.NoteNumbers.MinStringNote,false) + this.get_LineOffset() / 2);
				}
				if(h.Direction == 0) {
					var this1 = 2;
					beatLineX = beatLineX - startGlyph.Width / this1;
				} else {
					var this2 = 2;
					beatLineX = beatLineX + startGlyph.Width / this2;
				}
				canvas.BeginPath();
				canvas.MoveTo(cx + this.X + beatLineX,y1);
				canvas.LineTo(cx + this.X + beatLineX,y2);
				canvas.Stroke();
				var brokenBarOffset = 6 * this.get_Scale();
				var barSpacing = 6 * this.get_Scale();
				var barSize = 3 * this.get_Scale();
				var barCount = alphaTab.model.ModelUtils.GetIndex(beat.Duration) - 2;
				var barStart = cy + this.Y;
				barSpacing = -barSpacing;
				barStart = barStart + this.Height;
				var barIndex = 0;
				while(barIndex < barCount) {
					var barStartX;
					var barEndX;
					var barStartY;
					var barEndY;
					var barY = barStart + barIndex * barSpacing;
					if(h.Beats.length == 1) {
						barStartX = beatLineX;
						barEndX = beatLineX + brokenBarOffset;
						barStartY = barY;
						barEndY = barY;
						alphaTab.rendering.TabBarRenderer.PaintSingleBar(canvas,cx + this.X + barStartX,barStartY,cx + this.X + barEndX,barEndY,barSize);
					} else if(i < h.Beats.length - 1) {
						if(alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin(beat,h.Beats[i + 1],barIndex)) {
							barStartX = beatLineX;
							barEndX = h.GetBeatLineX(h.Beats[i + 1]) + this.get_Scale();
							var endGlyph = this.GetOnNotesGlyphForBeat(h.Beats[i + 1]);
							if(h.Direction == 0) {
								var this3 = 2;
								barEndX = barEndX - endGlyph.Width / this3;
							} else {
								var this4 = 2;
								barEndX = barEndX + endGlyph.Width / this4;
							}
						} else if(i == 0 || !alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin(h.Beats[i - 1],beat,barIndex)) {
							barStartX = beatLineX;
							barEndX = barStartX + brokenBarOffset;
						} else {
							++barIndex;
							continue;
						}
						barStartY = barY;
						barEndY = barY;
						alphaTab.rendering.TabBarRenderer.PaintSingleBar(canvas,cx + this.X + barStartX,barStartY,cx + this.X + barEndX,barEndY,barSize);
					} else if(i > 0 && !alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin(beat,h.Beats[i - 1],barIndex)) {
						barStartX = beatLineX - brokenBarOffset;
						barEndX = beatLineX;
						barStartY = barY;
						barEndY = barY;
						alphaTab.rendering.TabBarRenderer.PaintSingleBar(canvas,cx + this.X + barStartX,barStartY,cx + this.X + barEndX,barEndY,barSize);
					}
					++barIndex;
				}
			}
			++i;
		}
	}
	,PaintFooter: function(cx,cy,canvas,h) {
		var beat = $iterator(h.Beats)();
		while(beat.hasNext()) {
			var beat1 = beat.next();
			if(beat1.Duration == 1 || beat1.Duration == -2 || beat1.Duration == -4) {
				return;
			}
			var beatLineX = h.GetBeatLineX(beat1);
			var y1 = cy + this.Y;
			var y2 = cy + this.Y + this.Height;
			var startGlyph = js.Boot.__cast(this.GetOnNotesGlyphForBeat(beat1) , alphaTab.rendering.glyphs.TabBeatGlyph);
			if(startGlyph.NoteNumbers == null) {
				y1 = y1 + (this.Height - this.RhythmHeight);
			} else {
				y1 = y1 + (startGlyph.NoteNumbers.GetNoteY(startGlyph.NoteNumbers.MinStringNote,false) + this.get_LineOffset() / 2);
			}
			if(h.Direction == 0) {
				var this1 = 2;
				beatLineX = beatLineX - startGlyph.Width / this1;
			} else {
				var this2 = 2;
				beatLineX = beatLineX + startGlyph.Width / this2;
			}
			canvas.BeginPath();
			canvas.MoveTo(cx + this.X + beatLineX,y1);
			canvas.LineTo(cx + this.X + beatLineX,y2);
			canvas.Stroke();
			if(beat1.Duration > 4) {
				var glyph = new alphaTab.rendering.glyphs.BeamGlyph(0,0,beat1.Duration,1,false);
				glyph.Renderer = this;
				glyph.DoLayout();
				glyph.Paint(cx + this.X + beatLineX,y2,canvas);
			}
		}
	}
	,__class__: alphaTab.rendering.TabBarRenderer
});
alphaTab.rendering.glyphs.EffectGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["EffectGlyph"] = function(x,y) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this.Beat = null;
	this.NextGlyph = null;
	this.PreviousGlyph = null;
	this.Height = 0.0;
};
alphaTab.rendering.glyphs.EffectGlyph.__name__ = ["alphaTab","rendering","glyphs","EffectGlyph"];
alphaTab.rendering.glyphs.EffectGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.EffectGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	__class__: alphaTab.rendering.glyphs.EffectGlyph
});
alphaTab.rendering.glyphs.MusicFontGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["MusicFontGlyph"] = function(x,y,glyphScale,symbol) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
	this.GlyphScale = 0.0;
	this._symbol = -1;
	this.GlyphScale = glyphScale;
	this._symbol = symbol;
};
alphaTab.rendering.glyphs.MusicFontGlyph.__name__ = ["alphaTab","rendering","glyphs","MusicFontGlyph"];
alphaTab.rendering.glyphs.MusicFontGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.MusicFontGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	Paint: function(cx,cy,canvas) {
		canvas.FillMusicFontSymbol(cx + this.X,cy + this.Y,this.GlyphScale * this.get_Scale(),this._symbol);
	}
	,__class__: alphaTab.rendering.glyphs.MusicFontGlyph
});
alphaTab.rendering.glyphs.AccentuationGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["AccentuationGlyph"] = function(x,y,accentuation) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,1,alphaTab.rendering.glyphs.AccentuationGlyph.GetSymbol(accentuation));
};
alphaTab.rendering.glyphs.AccentuationGlyph.__name__ = ["alphaTab","rendering","glyphs","AccentuationGlyph"];
alphaTab.rendering.glyphs.AccentuationGlyph.GetSymbol = function(accentuation) {
	switch(accentuation) {
	case 0:
		return -1;
	case 1:
		return 58528;
	case 2:
		return 58540;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.AccentuationGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.AccentuationGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 9 * this.get_Scale();
	}
	,__class__: alphaTab.rendering.glyphs.AccentuationGlyph
});
alphaTab.rendering.glyphs.GlyphGroup = $hx_exports["alphaTab"]["rendering"]["glyphs"]["GlyphGroup"] = function(x,y) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this.Glyphs = null;
};
alphaTab.rendering.glyphs.GlyphGroup.__name__ = ["alphaTab","rendering","glyphs","GlyphGroup"];
alphaTab.rendering.glyphs.GlyphGroup.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.GlyphGroup.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	get_IsEmpty: function() {
		if(this.Glyphs != null) {
			return this.Glyphs.length == 0;
		} else {
			return true;
		}
	}
	,DoLayout: function() {
		if(this.Glyphs == null || this.Glyphs.length == 0) {
			this.Width = 0;
			return;
		}
		var w = 0;
		var i = 0;
		var j = this.Glyphs.length;
		while(i < j) {
			var g = this.Glyphs[i];
			g.Renderer = this.Renderer;
			g.DoLayout();
			w = Math.max(w,g.Width);
			++i;
		}
		this.Width = w;
	}
	,AddGlyph: function(g) {
		if(this.Glyphs == null) {
			var this1 = [];
			this.Glyphs = this1;
		}
		this.Glyphs.push(g);
	}
	,Paint: function(cx,cy,canvas) {
		var glyphs = this.Glyphs;
		if(glyphs == null || glyphs.length == 0) {
			return;
		}
		var g = $iterator(glyphs)();
		while(g.hasNext()) {
			var g1 = g.next();
			g1.Paint(cx + this.X,cy + this.Y,canvas);
		}
	}
	,__class__: alphaTab.rendering.glyphs.GlyphGroup
});
alphaTab.rendering.glyphs.AccidentalGroupGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["AccidentalGroupGlyph"] = function() {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,0,0);
};
alphaTab.rendering.glyphs.AccidentalGroupGlyph.__name__ = ["alphaTab","rendering","glyphs","AccidentalGroupGlyph"];
alphaTab.rendering.glyphs.AccidentalGroupGlyph.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.AccidentalGroupGlyph.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	DoLayout: function() {
		if(this.Glyphs == null) {
			this.Width = 0;
			return;
		}
		var comparison = function(a,b) {
			if(a.Y < b.Y) {
				return -1;
			}
			if(a.Y > b.Y) {
				return 1;
			}
			return 0;
		};
		this.Glyphs.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
		var this1 = [];
		var columns = this1;
		var this2 = -3000;
		columns.push(this2);
		var accidentalSize = 21 * this.get_Scale();
		var i = 0;
		var j = this.Glyphs.length;
		while(i < j) {
			var g = this.Glyphs[i];
			g.Renderer = this.Renderer;
			g.DoLayout();
			var gColumn = 0;
			while(columns[gColumn] > g.Y) {
				++gColumn;
				if(gColumn == columns.length) {
					var this3 = -3000;
					columns.push(this3);
				}
			}
			var this4 = gColumn;
			g.X = this4;
			columns[gColumn] = g.Y + accidentalSize;
			++i;
		}
		var columnWidth = 8 * this.get_Scale();
		var padding = 2 * this.get_Scale();
		if(this.Glyphs.length == 0) {
			this.Width = 0;
		} else {
			this.Width = padding + columnWidth * columns.length;
		}
		var i1 = 0;
		var j1 = this.Glyphs.length;
		while(i1 < j1) {
			var g1 = this.Glyphs[i1];
			g1.X = padding + (this.Width - (g1.X + 1) * columnWidth);
			++i1;
		}
	}
	,__class__: alphaTab.rendering.glyphs.AccidentalGroupGlyph
});
alphaTab.rendering.glyphs.AlternateEndingsGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["AlternateEndingsGlyph"] = function(x,y,alternateEndings) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
	this._endings = null;
	this._endingsString = null;
	var this1 = [];
	this._endings = this1;
	var i = 0;
	while(i < 8) {
		if((alternateEndings & 1 << i) != 0) {
			this._endings.push(i);
		}
		++i;
	}
};
alphaTab.rendering.glyphs.AlternateEndingsGlyph.__name__ = ["alphaTab","rendering","glyphs","AlternateEndingsGlyph"];
alphaTab.rendering.glyphs.AlternateEndingsGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.AlternateEndingsGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
		this.Height = this.Renderer.get_Resources().WordsFont.Size + (3 * this.get_Scale() + 2);
		var this1 = "";
		var endingsStrings = this1;
		var i = 0;
		var j = this._endings.length;
		while(i < j) {
			endingsStrings += Std.string(this._endings[i] + 1);
			endingsStrings += Std.string(". ");
			++i;
		}
		this._endingsString = endingsStrings;
	}
	,Paint: function(cx,cy,canvas) {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.Paint.call(this,cx,cy,canvas);
		if(this._endings.length > 0) {
			var res = this.Renderer.get_Resources();
			canvas.set_Font(res.WordsFont);
			canvas.MoveTo(cx + this.X,cy + this.Y + this.Height);
			canvas.LineTo(cx + this.X,cy + this.Y);
			canvas.LineTo(cx + this.X + this.Width,cy + this.Y);
			canvas.Stroke();
			canvas.FillText(this._endingsString,cx + this.X + 3 * this.get_Scale(),cy + this.Y * this.get_Scale());
		}
	}
	,__class__: alphaTab.rendering.glyphs.AlternateEndingsGlyph
});
alphaTab.rendering.glyphs.BarNumberGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["BarNumberGlyph"] = function(x,y,number) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this._number = 0;
	this._number = number;
};
alphaTab.rendering.glyphs.BarNumberGlyph.__name__ = ["alphaTab","rendering","glyphs","BarNumberGlyph"];
alphaTab.rendering.glyphs.BarNumberGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.BarNumberGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		this.Renderer.ScoreRenderer.Canvas.set_Font(this.Renderer.get_Resources().BarNumberFont);
		this.Width = this.Renderer.ScoreRenderer.Canvas.MeasureText(Std.string(this._number)) + 5 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		if(!this.Renderer.Staff.IsFirstInAccolade) {
			return;
		}
		var res = this.Renderer.get_Resources();
		canvas.set_Color(res.BarNumberColor);
		canvas.set_Font(res.BarNumberFont);
		canvas.FillText(Std.string(this._number),cx + this.X,cy + this.Y);
		canvas.set_Color(res.MainGlyphColor);
	}
	,__class__: alphaTab.rendering.glyphs.BarNumberGlyph
});
alphaTab.rendering.glyphs.BarSeperatorGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["BarSeperatorGlyph"] = function(x,y) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
};
alphaTab.rendering.glyphs.BarSeperatorGlyph.__name__ = ["alphaTab","rendering","glyphs","BarSeperatorGlyph"];
alphaTab.rendering.glyphs.BarSeperatorGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.BarSeperatorGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		this.Width = 8 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		var blockWidth = 4 * this.get_Scale();
		var top = cy + this.Y + this.Renderer.TopPadding;
		var bottom = cy + this.Y + this.Renderer.Height - this.Renderer.BottomPadding;
		var left = system.Convert.ToInt32_Single(cx + this.X);
		var h = bottom - top;
		if(this.Renderer.get_IsLast()) {
			var this1 = left;
			canvas.FillRect(this1,top,this.get_Scale(),h);
			canvas.FillRect(left + this.Width - blockWidth,top,blockWidth,h);
		} else {
			canvas.FillRect(left + this.Width,top,this.get_Scale(),h);
			if(this.Renderer.Bar.get_MasterBar().IsDoubleBar) {
				canvas.FillRect(left + this.Width - 5 * this.get_Scale(),top,this.get_Scale(),h);
			}
		}
	}
	,__class__: alphaTab.rendering.glyphs.BarSeperatorGlyph
});
alphaTab.rendering.glyphs.BeamGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["BeamGlyph"] = function(x,y,duration,direction,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,alphaTab.rendering.glyphs.BeamGlyph.GetSymbol(duration,direction,isGrace));
};
alphaTab.rendering.glyphs.BeamGlyph.__name__ = ["alphaTab","rendering","glyphs","BeamGlyph"];
alphaTab.rendering.glyphs.BeamGlyph.GetSymbol = function(duration,direction,isGrace) {
	if(direction == 0) {
		switch(duration) {
		case 8:
			return 57920;
		case 16:
			return 57922;
		case 32:
			return 57924;
		case 64:
			return 57926;
		case 128:
			return 57928;
		case 256:
			return 57930;
		default:
			return 57920;
		}
	} else {
		switch(duration) {
		case 8:
			return 57921;
		case 16:
			return 57923;
		case 32:
			return 57925;
		case 64:
			return 57927;
		case 128:
			return 57929;
		case 256:
			return 57929;
		default:
			return 57921;
		}
	}
};
alphaTab.rendering.glyphs.BeamGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.BeamGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 0;
	}
	,__class__: alphaTab.rendering.glyphs.BeamGlyph
});
alphaTab.rendering.glyphs.BeatGlyphBase = $hx_exports["alphaTab"]["rendering"]["glyphs"]["BeatGlyphBase"] = function() {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,0,0);
	this.Container = null;
};
alphaTab.rendering.glyphs.BeatGlyphBase.__name__ = ["alphaTab","rendering","glyphs","BeatGlyphBase"];
alphaTab.rendering.glyphs.BeatGlyphBase.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.BeatGlyphBase.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	DoLayout: function() {
		var w = 0;
		if(this.Glyphs != null) {
			var i = 0;
			var j = this.Glyphs.length;
			while(i < j) {
				var g = this.Glyphs[i];
				g.X = w;
				g.Renderer = this.Renderer;
				g.DoLayout();
				w = w + g.Width;
				++i;
			}
		}
		this.Width = w;
	}
	,NoteLoop: function(action) {
		var i = this.Container.Beat.Notes.length - 1;
		while(i >= 0) {
			action(this.Container.Beat.Notes[i]);
			--i;
		}
	}
	,__class__: alphaTab.rendering.glyphs.BeatGlyphBase
});
alphaTab.rendering.glyphs.BeatOnNoteGlyphBase = $hx_exports["alphaTab"]["rendering"]["glyphs"]["BeatOnNoteGlyphBase"] = function() {
	alphaTab.rendering.glyphs.BeatGlyphBase.call(this);
};
alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.__name__ = ["alphaTab","rendering","glyphs","BeatOnNoteGlyphBase"];
alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.__super__ = alphaTab.rendering.glyphs.BeatGlyphBase;
alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.prototype = $extend(alphaTab.rendering.glyphs.BeatGlyphBase.prototype,{
	UpdateBeamingHelper: function() {
	}
	,__class__: alphaTab.rendering.glyphs.BeatOnNoteGlyphBase
});
alphaTab.rendering.glyphs.BendGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["BendGlyph"] = function(n,bendValueHeight) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._note = null;
	this._renderPoints = null;
	this._bendValueHeight = 0.0;
	this._note = n;
	this._bendValueHeight = bendValueHeight;
	this._renderPoints = this.CreateRenderingPoints(n);
};
alphaTab.rendering.glyphs.BendGlyph.__name__ = ["alphaTab","rendering","glyphs","BendGlyph"];
alphaTab.rendering.glyphs.BendGlyph.GetFractionSign = function(steps) {
	switch(steps) {
	case 1:
		return "¼";
	case 2:
		return "½";
	case 3:
		return "¾";
	default:
		return Std.string(steps) + "/ 4";
	}
};
alphaTab.rendering.glyphs.BendGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.BendGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	CreateRenderingPoints: function(note) {
		if(note.BendType == 1) {
			return note.BendPoints;
		}
		var this1 = [];
		var renderingPoints = this1;
		var _g = note.BendType;
		switch(_g) {
		case 4:
			renderingPoints.push(new alphaTab.model.BendPoint(0,note.BendPoints[0].Value));
			renderingPoints.push(new alphaTab.model.BendPoint(60 / 2 | 0,note.BendPoints[1].Value));
			renderingPoints.push(new alphaTab.model.BendPoint(60,note.BendPoints[3].Value));
			break;
		case 2:case 3:case 5:case 6:case 7:case 8:
			renderingPoints.push(new alphaTab.model.BendPoint(0,note.BendPoints[0].Value));
			renderingPoints.push(new alphaTab.model.BendPoint(60,note.BendPoints[1].Value));
			break;
		default:
		}
		return renderingPoints;
	}
	,Paint: function(cx,cy,canvas) {
		var width = this.Width - 6 * this.get_Scale() / 2;
		var dX = width / 60;
		cx = cx + this.X;
		cy = cy + this.Y;
		canvas.BeginPath();
		var i = 0;
		var j = this._renderPoints.length - 1;
		while(i < j) {
			var firstPt = this._renderPoints[i];
			var secondPt = this._renderPoints[i + 1];
			if(i == 0 && firstPt.Value != 0 && !this._note.IsTieDestination) {
				this.PaintBend(new alphaTab.model.BendPoint(0,0),firstPt,cx,cy,dX,canvas);
			}
			if(firstPt.Value == secondPt.Value && i == this._note.BendPoints.length - 2) {
				++i;
				continue;
			}
			this.PaintBend(firstPt,secondPt,cx,cy,dX,canvas);
			++i;
		}
	}
	,PaintBend: function(firstPt,secondPt,cx,cy,dX,canvas) {
		var r = js.Boot.__cast(this.Renderer , alphaTab.rendering.TabBarRenderer);
		var res = this.Renderer.get_Resources();
		var overflowOffset = r.get_LineOffset() / 2;
		var x1 = cx + dX * firstPt.Offset;
		var y1 = cy - this._bendValueHeight * firstPt.Value;
		if(firstPt.Value == 0) {
			if(secondPt.Offset == firstPt.Offset) {
				y1 = y1 + r.GetNoteY(this._note.Beat.get_MaxStringNote(),true);
			} else {
				y1 = y1 + r.GetNoteY(this._note,false);
			}
		} else {
			y1 = y1 + overflowOffset;
		}
		var x2 = cx + dX * secondPt.Offset;
		var y2 = cy - this._bendValueHeight * secondPt.Value;
		if(secondPt.Value == 0) {
			y2 = y2 + r.GetNoteY(this._note,false);
		} else {
			y2 = y2 + overflowOffset;
		}
		var arrowOffset = 0;
		var arrowSize = 6 * this.get_Scale();
		if(secondPt.Value > firstPt.Value) {
			canvas.BeginPath();
			canvas.MoveTo(x2,y2);
			var this1 = 0.5;
			canvas.LineTo(x2 - arrowSize * this1,y2 + arrowSize);
			var this2 = 0.5;
			canvas.LineTo(x2 + arrowSize * this2,y2 + arrowSize);
			canvas.ClosePath();
			canvas.Fill();
			arrowOffset = arrowSize;
		} else if(secondPt.Value != firstPt.Value) {
			canvas.BeginPath();
			canvas.MoveTo(x2,y2);
			var this3 = 0.5;
			canvas.LineTo(x2 - arrowSize * this3,y2 - arrowSize);
			var this4 = 0.5;
			canvas.LineTo(x2 + arrowSize * this4,y2 - arrowSize);
			canvas.ClosePath();
			canvas.Fill();
			arrowOffset = -arrowSize;
		}
		canvas.Stroke();
		if(firstPt.Value == secondPt.Value) {
			var dashX = x2;
			var dashSize = 3 * this.get_Scale();
			var end = x1 + dashSize;
			var dashes = (dashX - x1) / (dashSize * 2);
			if(dashes < 1) {
				canvas.MoveTo(dashX,y1);
				canvas.LineTo(x1,y1);
			} else {
				while(dashX > end) {
					canvas.MoveTo(dashX,y1);
					canvas.LineTo(dashX - dashSize,y1);
					dashX = dashX - dashSize * 2;
				}
			}
			canvas.Stroke();
		} else if(x2 > x1) {
			canvas.MoveTo(x1,y1);
			canvas.BezierCurveTo(x2,y1,x2,y2 + arrowOffset,x2,y2 + arrowOffset);
			canvas.Stroke();
		} else {
			canvas.MoveTo(x1,y1);
			canvas.LineTo(x2,y2);
			canvas.Stroke();
		}
		if(secondPt.Value != 0 && secondPt.Value != firstPt.Value) {
			var dV = secondPt.Value;
			var up = secondPt.Value > firstPt.Value;
			dV = Math.abs(dV);
			var s = "";
			if(dV == 4) {
				s = "full";
				dV = dV - 4;
			} else if(dV >= 4 || dV <= -4) {
				var steps = dV / 4 | 0;
				s = s + Std.string(steps);
				dV = dV - steps * 4;
			}
			if(dV > 0) {
				s = s + alphaTab.rendering.glyphs.BendGlyph.GetFractionSign(dV);
			}
			if(s != "") {
				if(!up && s != "full") {
					s = "-" + s;
				}
				canvas.set_Font(res.TablatureFont);
				var size = canvas.MeasureText(s);
				var y = up ? y2 - res.TablatureFont.Size - 2 * this.get_Scale() : y2 + 2 * this.get_Scale();
				var x = x2 - size / 2;
				canvas.FillText(s,x,y);
			}
		}
	}
	,__class__: alphaTab.rendering.glyphs.BendGlyph
});
alphaTab.rendering.glyphs.ChineseCymbalGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["ChineseCymbalGlyph"] = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57564);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.ChineseCymbalGlyph.__name__ = ["alphaTab","rendering","glyphs","ChineseCymbalGlyph"];
alphaTab.rendering.glyphs.ChineseCymbalGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.ChineseCymbalGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 9 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
	}
	,__class__: alphaTab.rendering.glyphs.ChineseCymbalGlyph
});
alphaTab.rendering.glyphs.CircleGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["CircleGlyph"] = function(x,y,size) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this._size = 0.0;
	this._size = size;
};
alphaTab.rendering.glyphs.CircleGlyph.__name__ = ["alphaTab","rendering","glyphs","CircleGlyph"];
alphaTab.rendering.glyphs.CircleGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.CircleGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		this.Width = this._size + 3 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		canvas.FillCircle(cx + this.X,cy + this.Y,this._size);
	}
	,__class__: alphaTab.rendering.glyphs.CircleGlyph
});
alphaTab.rendering.glyphs.ClefGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["ClefGlyph"] = function(x,y,clef,clefOttavia) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,1,alphaTab.rendering.glyphs.ClefGlyph.GetSymbol(clef));
	this._clef = 0;
	this._clefOttavia = 0;
	this._clef = clef;
	this._clefOttavia = clefOttavia;
};
alphaTab.rendering.glyphs.ClefGlyph.__name__ = ["alphaTab","rendering","glyphs","ClefGlyph"];
alphaTab.rendering.glyphs.ClefGlyph.GetSymbol = function(clef) {
	switch(clef) {
	case 0:
		return 57449;
	case 1:
		return 57436;
	case 2:
		return 57436;
	case 3:
		return 57442;
	case 4:
		return 57424;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.ClefGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.ClefGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		var _g = this._clef;
		switch(_g) {
		case 0:
			this.Width = 15 * this.get_Scale();
			break;
		case 1:case 2:case 3:case 4:
			this.Width = 28 * this.get_Scale();
			break;
		default:
		}
	}
	,Paint: function(cx,cy,canvas) {
		alphaTab.rendering.glyphs.MusicFontGlyph.prototype.Paint.call(this,cx,cy,canvas);
		var numberGlyph;
		var top = false;
		var _g = this._clefOttavia;
		switch(_g) {
		case 0:
			numberGlyph = new alphaTab.rendering.glyphs.NumberGlyph(this.Width / 2,0,15,0.5);
			top = true;
			break;
		case 1:
			numberGlyph = new alphaTab.rendering.glyphs.NumberGlyph(0,0,8,0.5);
			top = true;
			break;
		case 3:
			numberGlyph = new alphaTab.rendering.glyphs.NumberGlyph(0,0,8,0.5);
			break;
		case 4:
			numberGlyph = new alphaTab.rendering.glyphs.NumberGlyph(0,0,15,0.5);
			break;
		default:
			return;
		}
		var offset;
		var _g1 = this._clef;
		switch(_g1) {
		case 0:
			if(top) {
				offset = -25;
			} else {
				offset = 10;
			}
			break;
		case 1:
			if(top) {
				offset = -30;
			} else {
				offset = 20;
			}
			break;
		case 2:
			if(top) {
				offset = -30;
			} else {
				offset = 20;
			}
			break;
		case 3:
			if(top) {
				offset = -25;
			} else {
				offset = 20;
			}
			break;
		case 4:
			if(top) {
				offset = -50;
			} else {
				offset = 25;
			}
			break;
		default:
			return;
		}
		numberGlyph.Renderer = this.Renderer;
		numberGlyph.DoLayout();
		var x = (this.Width - numberGlyph.Width) / 2;
		numberGlyph.Paint(cx + this.X + x,cy + this.Y + offset * this.get_Scale(),canvas);
	}
	,__class__: alphaTab.rendering.glyphs.ClefGlyph
});
alphaTab.rendering.glyphs.GroupedEffectGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["GroupedEffectGlyph"] = function(endPosition) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,0,0);
	this._endPosition = 0;
	this._endPosition = endPosition;
};
alphaTab.rendering.glyphs.GroupedEffectGlyph.__name__ = ["alphaTab","rendering","glyphs","GroupedEffectGlyph"];
alphaTab.rendering.glyphs.GroupedEffectGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	get_IsLinkedWithPrevious: function() {
		if(this.PreviousGlyph != null) {
			return this.PreviousGlyph.Renderer.Staff.StaveGroup == this.Renderer.Staff.StaveGroup;
		} else {
			return false;
		}
	}
	,get_IsLinkedWithNext: function() {
		if(this.NextGlyph != null && this.NextGlyph.Renderer.IsFinalized) {
			return this.NextGlyph.Renderer.Staff.StaveGroup == this.Renderer.Staff.StaveGroup;
		} else {
			return false;
		}
	}
	,Paint: function(cx,cy,canvas) {
		if(this.get_IsLinkedWithPrevious()) {
			return;
		}
		if(!this.get_IsLinkedWithNext()) {
			this.PaintNonGrouped(cx,cy,canvas);
			return;
		}
		var lastLinkedGlyph = js.Boot.__cast(this.NextGlyph , alphaTab.rendering.glyphs.GroupedEffectGlyph);
		while(lastLinkedGlyph.get_IsLinkedWithNext()) lastLinkedGlyph = js.Boot.__cast(lastLinkedGlyph.NextGlyph , alphaTab.rendering.glyphs.GroupedEffectGlyph);
		var cxRenderer = cx - this.Renderer.X;
		var endRenderer = lastLinkedGlyph.Renderer;
		var endBeatX = endRenderer.GetBeatX(lastLinkedGlyph.Beat,this._endPosition);
		var endX = cxRenderer + endRenderer.X + endBeatX;
		this.PaintGrouped(cx,cy,endX,canvas);
	}
	,PaintNonGrouped: function(cx,cy,canvas) {
		var endBeatX = this.Renderer.GetBeatX(this.Beat,3);
		var endX = cx + endBeatX;
		this.PaintGrouped(cx,cy,endX,canvas);
	}
	,PaintGrouped: function(cx,cy,endX,canvas) {
		throw new js._Boot.HaxeError("abstract");
	}
	,__class__: alphaTab.rendering.glyphs.GroupedEffectGlyph
});
alphaTab.rendering.glyphs.CrescendoGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["CrescendoGlyph"] = function(x,y,crescendo) {
	alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this,3);
	this._crescendo = 0;
	this._crescendo = crescendo;
	this.X = x;
	this.Y = y;
};
alphaTab.rendering.glyphs.CrescendoGlyph.__name__ = ["alphaTab","rendering","glyphs","CrescendoGlyph"];
alphaTab.rendering.glyphs.CrescendoGlyph.__super__ = alphaTab.rendering.glyphs.GroupedEffectGlyph;
alphaTab.rendering.glyphs.CrescendoGlyph.prototype = $extend(alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.DoLayout.call(this);
		this.Height = 17 * this.get_Scale();
	}
	,PaintGrouped: function(cx,cy,endX,canvas) {
		var startX = cx + this.X;
		var height = this.Height * this.get_Scale();
		canvas.BeginPath();
		if(this._crescendo == 1) {
			canvas.MoveTo(endX,cy + this.Y);
			canvas.LineTo(startX,cy + this.Y + height / 2);
			canvas.LineTo(endX,cy + this.Y + height);
		} else {
			canvas.MoveTo(cx + this.X,cy + this.Y);
			canvas.LineTo(endX,cy + this.Y + height / 2);
			canvas.LineTo(cx + this.X,cy + this.Y + height);
		}
		canvas.Stroke();
	}
	,__class__: alphaTab.rendering.glyphs.CrescendoGlyph
});
alphaTab.rendering.glyphs.DeadNoteHeadGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["DeadNoteHeadGlyph"] = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57514);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.DeadNoteHeadGlyph.__name__ = ["alphaTab","rendering","glyphs","DeadNoteHeadGlyph"];
alphaTab.rendering.glyphs.DeadNoteHeadGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.DeadNoteHeadGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 9 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
	}
	,__class__: alphaTab.rendering.glyphs.DeadNoteHeadGlyph
});
alphaTab.rendering.glyphs.DiamondNoteHeadGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["DiamondNoteHeadGlyph"] = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57564);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.__name__ = ["alphaTab","rendering","glyphs","DiamondNoteHeadGlyph"];
alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.DiamondNoteHeadGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 9 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
	}
	,__class__: alphaTab.rendering.glyphs.DiamondNoteHeadGlyph
});
alphaTab.rendering.glyphs.DigitGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["DigitGlyph"] = function(x,y,digit,scale) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,scale,alphaTab.rendering.glyphs.DigitGlyph.GetSymbol(digit));
	this._digit = 0;
	this._scale = 0.0;
	this._digit = digit;
	this._scale = scale;
};
alphaTab.rendering.glyphs.DigitGlyph.__name__ = ["alphaTab","rendering","glyphs","DigitGlyph"];
alphaTab.rendering.glyphs.DigitGlyph.GetSymbol = function(digit) {
	switch(digit) {
	case 0:
		return 57472;
	case 1:
		return 57473;
	case 2:
		return 57474;
	case 3:
		return 57475;
	case 4:
		return 57476;
	case 5:
		return 57477;
	case 6:
		return 57478;
	case 7:
		return 57479;
	case 8:
		return 57480;
	case 9:
		return 57481;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.DigitGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.DigitGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Y = this.Y + 7 * this.get_Scale();
		this.Width = this.GetDigitWidth(this._digit) * this.get_Scale() * this._scale;
	}
	,GetDigitWidth: function(digit) {
		switch(digit) {
		case 1:
			return 10;
		case 0:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:
			return 14;
		default:
			return 0;
		}
	}
	,__class__: alphaTab.rendering.glyphs.DigitGlyph
});
alphaTab.rendering.glyphs.DrumSticksGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["DrumSticksGlyph"] = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57513);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.DrumSticksGlyph.__name__ = ["alphaTab","rendering","glyphs","DrumSticksGlyph"];
alphaTab.rendering.glyphs.DrumSticksGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.DrumSticksGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 9 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
	}
	,__class__: alphaTab.rendering.glyphs.DrumSticksGlyph
});
alphaTab.rendering.glyphs.DynamicsGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["DynamicsGlyph"] = function(x,y,dynamics) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,0.6,alphaTab.rendering.glyphs.DynamicsGlyph.GetSymbol(dynamics));
};
alphaTab.rendering.glyphs.DynamicsGlyph.__name__ = ["alphaTab","rendering","glyphs","DynamicsGlyph"];
alphaTab.rendering.glyphs.DynamicsGlyph.GetSymbol = function(dynamics) {
	switch(dynamics) {
	case 0:
		return 58666;
	case 1:
		return 58667;
	case 2:
		return 58656;
	case 3:
		return 58668;
	case 4:
		return 58669;
	case 5:
		return 58658;
	case 6:
		return 58672;
	case 7:
		return 58672;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.DynamicsGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.DynamicsGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.MusicFontGlyph.prototype.DoLayout.call(this);
		this.Height = 17 * this.get_Scale();
		this.Y = this.Y + this.Height / 2;
	}
	,__class__: alphaTab.rendering.glyphs.DynamicsGlyph
});
alphaTab.rendering.glyphs.FadeInGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["FadeInGlyph"] = function(x,y) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
};
alphaTab.rendering.glyphs.FadeInGlyph.__name__ = ["alphaTab","rendering","glyphs","FadeInGlyph"];
alphaTab.rendering.glyphs.FadeInGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.FadeInGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
		this.Height = 17 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		var size = 6 * this.get_Scale();
		var width = Math.max(this.Width,14 * this.get_Scale());
		var offset = this.Height / 2;
		canvas.BeginPath();
		canvas.MoveTo(cx + this.X,cy + this.Y + offset);
		canvas.QuadraticCurveTo(cx + this.X + width / 2,cy + this.Y + offset,cx + this.X + width,cy + this.Y + offset - size);
		canvas.MoveTo(cx + this.X,cy + this.Y + offset);
		canvas.QuadraticCurveTo(cx + this.X + width / 2,cy + this.Y + offset,cx + this.X + width,cy + this.Y + offset + size);
		canvas.Stroke();
	}
	,__class__: alphaTab.rendering.glyphs.FadeInGlyph
});
alphaTab.rendering.glyphs.FlatGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["FlatGlyph"] = function(x,y,isGrace) {
	if(isGrace == null) {
		isGrace = false;
	}
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57952);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.FlatGlyph.__name__ = ["alphaTab","rendering","glyphs","FlatGlyph"];
alphaTab.rendering.glyphs.FlatGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.FlatGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 8 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
	}
	,__class__: alphaTab.rendering.glyphs.FlatGlyph
});
alphaTab.rendering.glyphs.HiHatGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["HiHatGlyph"] = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57523);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.HiHatGlyph.__name__ = ["alphaTab","rendering","glyphs","HiHatGlyph"];
alphaTab.rendering.glyphs.HiHatGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.HiHatGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 9 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
	}
	,__class__: alphaTab.rendering.glyphs.HiHatGlyph
});
alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup = $hx_exports["alphaTab"]["rendering"]["glyphs"]["LeftToRightLayoutingGlyphGroup"] = function() {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,0,0);
	var this1 = [];
	this.Glyphs = this1;
};
alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup.__name__ = ["alphaTab","rendering","glyphs","LeftToRightLayoutingGlyphGroup"];
alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	AddGlyph: function(g) {
		g.X = this.Glyphs.length == 0 ? 0 : this.Glyphs[this.Glyphs.length - 1].X + this.Glyphs[this.Glyphs.length - 1].Width;
		g.Renderer = this.Renderer;
		g.DoLayout();
		this.Width = g.X + g.Width;
		alphaTab.rendering.glyphs.GlyphGroup.prototype.AddGlyph.call(this,g);
	}
	,__class__: alphaTab.rendering.glyphs.LeftToRightLayoutingGlyphGroup
});
alphaTab.rendering.glyphs.LineRangedGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["LineRangedGlyph"] = function(label) {
	alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this,2);
	this._label = null;
	this._label = label;
};
alphaTab.rendering.glyphs.LineRangedGlyph.__name__ = ["alphaTab","rendering","glyphs","LineRangedGlyph"];
alphaTab.rendering.glyphs.LineRangedGlyph.__super__ = alphaTab.rendering.glyphs.GroupedEffectGlyph;
alphaTab.rendering.glyphs.LineRangedGlyph.prototype = $extend(alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.DoLayout.call(this);
		this.Height = this.Renderer.get_Resources().EffectFont.Size;
	}
	,PaintNonGrouped: function(cx,cy,canvas) {
		var res = this.Renderer.get_Resources();
		canvas.set_Font(res.EffectFont);
		canvas.set_TextAlign(0);
		canvas.FillText(this._label,cx + this.X,cy + this.Y);
	}
	,PaintGrouped: function(cx,cy,endX,canvas) {
		this.PaintNonGrouped(cx,cy,canvas);
		var lineSpacing = 3 * this.get_Scale();
		var textWidth = canvas.MeasureText(this._label);
		var startX = cx + this.X + textWidth + lineSpacing;
		var lineY = cy + this.Y + 8 * this.get_Scale();
		var lineSize = 8 * this.get_Scale();
		if(endX > startX) {
			var lineX = startX;
			while(lineX < endX) {
				canvas.BeginPath();
				var this1 = system.Convert.ToInt32_Single(lineY);
				canvas.MoveTo(lineX,this1);
				var tmp = Math.min(lineX + lineSize,endX);
				var this2 = system.Convert.ToInt32_Single(lineY);
				canvas.LineTo(tmp,this2);
				lineX = lineX + (lineSize + lineSpacing);
				canvas.Stroke();
			}
			canvas.BeginPath();
			var this3 = system.Convert.ToInt32_Single(lineY - 6 * this.get_Scale());
			canvas.MoveTo(endX,this3);
			var this4 = system.Convert.ToInt32_Single(lineY + 6 * this.get_Scale());
			canvas.LineTo(endX,this4);
			canvas.Stroke();
		}
	}
	,__class__: alphaTab.rendering.glyphs.LineRangedGlyph
});
alphaTab.rendering.glyphs.LyricsGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["LyricsGlyph"] = function(x,y,lines,font,textAlign) {
	if(textAlign == null) {
		textAlign = 1;
	}
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
	this._lines = null;
	this.Font = null;
	this.TextAlign = 0;
	this._lines = lines;
	this.Font = font;
	this.TextAlign = textAlign;
};
alphaTab.rendering.glyphs.LyricsGlyph.__name__ = ["alphaTab","rendering","glyphs","LyricsGlyph"];
alphaTab.rendering.glyphs.LyricsGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.LyricsGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
		this.Height = this.Font.Size * this._lines.length;
	}
	,Paint: function(cx,cy,canvas) {
		canvas.set_Font(this.Font);
		var old = canvas.get_TextAlign();
		canvas.set_TextAlign(this.TextAlign);
		var i = 0;
		while(i < this._lines.length) {
			if(this._lines[i] != null) {
				canvas.FillText(this._lines[i],cx + this.X,cy + this.Y + i * this.Font.Size);
			}
			++i;
		}
		canvas.set_TextAlign(old);
	}
	,__class__: alphaTab.rendering.glyphs.LyricsGlyph
});
alphaTab.rendering.glyphs._MusicFontSymbol = {};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_ = $hx_exports["alphaTab"]["rendering"]["glyphs"]["_MusicFontSymbol"]["MusicFontSymbol_Impl_"] = {};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.__name__ = ["alphaTab","rendering","glyphs","_MusicFontSymbol","MusicFontSymbol_Impl_"];
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.toString = function(this1) {
	switch(this1) {
	case -1:
		return "None";
	case 57424:
		return "ClefG";
	case 57436:
		return "ClefC";
	case 57442:
		return "ClefF";
	case 57449:
		return "ClefNeutral";
	case 57453:
		return "ClefTab";
	case 57454:
		return "ClefTabSmall";
	case 57472:
		return "Num0";
	case 57473:
		return "Num1";
	case 57474:
		return "Num2";
	case 57475:
		return "Num3";
	case 57476:
		return "Num4";
	case 57477:
		return "Num5";
	case 57478:
		return "Num6";
	case 57479:
		return "Num7";
	case 57480:
		return "Num8";
	case 57481:
		return "Num9";
	case 57482:
		return "TimeSignatureCommon";
	case 57483:
		return "TimeSignatureCutCommon";
	case 57504:
		return "NoteDoubleWhole";
	case 57505:
		return "NoteQuadrupleWhole";
	case 57506:
		return "NoteWhole";
	case 57507:
		return "NoteHalf";
	case 57508:
		return "NoteQuarter";
	case 57513:
		return "NoteSideStick";
	case 57514:
		return "NoteDead";
	case 57523:
		return "NoteHiHat";
	case 57564:
		return "NoteHarmonic";
	case 57566:
		return "NoteRideCymbal";
	case 57591:
		return "NoteHiHatHalf";
	case 57593:
		return "NoteChineseCymbal";
	case 57813:
		return "Tempo";
	case 57815:
		return "GraceUp";
	case 57816:
		return "GraceDown";
	case 57888:
		return "TremoloPickingEighth";
	case 57889:
		return "TremoloPickingSixteenth";
	case 57890:
		return "TremoloPickingThirtySecond";
	case 57920:
		return "FooterUpEighth";
	case 57921:
		return "FooterDownEighth";
	case 57922:
		return "FooterUpSixteenth";
	case 57923:
		return "FooterDownSixteenth";
	case 57924:
		return "FooterUpThirtySecond";
	case 57925:
		return "FooterDownThirtySecond";
	case 57926:
		return "FooterUpSixtyFourth";
	case 57927:
		return "FooterDownSixtyFourth";
	case 57928:
		return "FooterUpOneHundredTwentyEighth";
	case 57929:
		return "FooterDownOneHundredTwentyEighth";
	case 57930:
		return "FooterUpTwoHundredFiftySixth";
	case 57931:
		return "FooterDownTwoHundredFiftySixth";
	case 57952:
		return "AccidentalFlat";
	case 57953:
		return "AccidentalNatural";
	case 57954:
		return "AccidentalSharp";
	case 58528:
		return "Accentuation";
	case 58540:
		return "HeavyAccentuation";
	case 58593:
		return "RestQuadrupleWhole";
	case 58594:
		return "RestDoubleWhole";
	case 58595:
		return "RestWhole";
	case 58596:
		return "RestHalf";
	case 58597:
		return "RestQuarter";
	case 58598:
		return "RestEighth";
	case 58599:
		return "RestSixteenth";
	case 58600:
		return "RestThirtySecond";
	case 58601:
		return "RestSixtyFourth";
	case 58602:
		return "RestOneHundredTwentyEighth";
	case 58603:
		return "RestTwoHundredFiftySixth";
	case 58656:
		return "DynamicP";
	case 58658:
		return "DynamicF";
	case 58666:
		return "DynamicPPP";
	case 58667:
		return "DynamicPP";
	case 58668:
		return "DynamicMP";
	case 58669:
		return "DynamicMF";
	case 58671:
		return "DynamicFF";
	case 58672:
		return "DynamicFFF";
	case 58726:
		return "Trill";
	case 58896:
		return "PickStrokeDown";
	case 58898:
		return "PickStrokeUp";
	case 60068:
		return "WaveHorizontal";
	}
	return "";
};
alphaTab.rendering.glyphs.NaturalizeGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["NaturalizeGlyph"] = function(x,y,isGrace) {
	if(isGrace == null) {
		isGrace = false;
	}
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57953);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.NaturalizeGlyph.__name__ = ["alphaTab","rendering","glyphs","NaturalizeGlyph"];
alphaTab.rendering.glyphs.NaturalizeGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.NaturalizeGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 8 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
	}
	,__class__: alphaTab.rendering.glyphs.NaturalizeGlyph
});
alphaTab.rendering.glyphs.NoteHeadGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["NoteHeadGlyph"] = function(x,y,duration,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,alphaTab.rendering.glyphs.NoteHeadGlyph.GetSymbol(duration));
	this._isGrace = false;
	this._duration = -4;
	this._isGrace = isGrace;
	this._duration = duration;
};
alphaTab.rendering.glyphs.NoteHeadGlyph.__name__ = ["alphaTab","rendering","glyphs","NoteHeadGlyph"];
alphaTab.rendering.glyphs.NoteHeadGlyph.GetSymbol = function(duration) {
	switch(duration) {
	case -4:
		return 57505;
	case -2:
		return 57504;
	case 1:
		return 57506;
	case 2:
		return 57507;
	default:
		return 57508;
	}
};
alphaTab.rendering.glyphs.NoteHeadGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.NoteHeadGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		var _g = this._duration;
		switch(_g) {
		case -4:
			this.Width = 14 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
			break;
		case -2:
			this.Width = 14 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
			break;
		case 1:
			this.Width = 14 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
			break;
		default:
			var this1 = 8;
			this.Width = this1 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
		}
	}
	,__class__: alphaTab.rendering.glyphs.NoteHeadGlyph
});
alphaTab.rendering.glyphs.NoteNumberGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["NoteNumberGlyph"] = function(x,y,n) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this._noteString = null;
	this._noteStringWidth = 0.0;
	this._trillNoteString = null;
	this._trillNoteStringWidth = 0.0;
	this.IsEmpty = false;
	this.Height = 0.0;
	if(!n.IsTieDestination) {
		this._noteString = n.IsDead ? "x" : Std.string(n.Fret - n.Beat.Voice.Bar.Staff.TranspositionPitch);
		if(n.IsGhost) {
			this._noteString = "(" + this._noteString + ")";
		}
	} else if(n.Beat.Index == 0 || n.get_HasBend()) {
		this._noteString = "(" + (n.TieOrigin.Fret - n.Beat.Voice.Bar.Staff.TranspositionPitch) + ")";
	} else {
		this._noteString = "";
	}
	if(n.get_IsTrill()) {
		this._trillNoteString = "(" + (n.get_TrillFret() - n.Beat.Voice.Bar.Staff.TranspositionPitch) + ")";
	} else {
		this._trillNoteString = "";
	}
};
alphaTab.rendering.glyphs.NoteNumberGlyph.__name__ = ["alphaTab","rendering","glyphs","NoteNumberGlyph"];
alphaTab.rendering.glyphs.NoteNumberGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.NoteNumberGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		var tmp;
		var s = this._noteString;
		if(s == null || s.length == 0) {
			var s1 = this._trillNoteString;
			if(s1 != null) {
				tmp = s1.length == 0;
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		this.IsEmpty = tmp;
		if(!this.IsEmpty) {
			this.Renderer.ScoreRenderer.Canvas.set_Font(this.Renderer.get_Resources().TablatureFont);
			this._noteStringWidth = this.Renderer.ScoreRenderer.Canvas.MeasureText(this._noteString);
			this._trillNoteStringWidth = this.Renderer.ScoreRenderer.Canvas.MeasureText(this._trillNoteString);
			this.Width = this._noteStringWidth + this._trillNoteStringWidth;
			this.Height = this.Renderer.ScoreRenderer.Canvas.get_Font().Size;
		}
	}
	,Paint: function(cx,cy,canvas) {
		if(this.IsEmpty) {
			return;
		}
		var textWidth = this._noteStringWidth + this._trillNoteStringWidth;
		var x = cx + this.X + (this.Width - textWidth) / 2;
		canvas.FillText(this._noteString,x,cy + this.Y);
		canvas.FillText(this._trillNoteString,x + this._noteStringWidth,cy + this.Y);
	}
	,__class__: alphaTab.rendering.glyphs.NoteNumberGlyph
});
alphaTab.rendering.glyphs.NumberGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["NumberGlyph"] = function(x,y,number,scale) {
	if(scale == null) {
		scale = 1.0;
	}
	alphaTab.rendering.glyphs.GlyphGroup.call(this,x,y);
	this._number = 0;
	this._scale = 0.0;
	this._number = number;
	this._scale = scale;
};
alphaTab.rendering.glyphs.NumberGlyph.__name__ = ["alphaTab","rendering","glyphs","NumberGlyph"];
alphaTab.rendering.glyphs.NumberGlyph.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.NumberGlyph.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	DoLayout: function() {
		var i = this._number;
		while(i > 0) {
			var num = i % 10;
			var gl = new alphaTab.rendering.glyphs.DigitGlyph(0,0,num,this._scale);
			this.AddGlyph(gl);
			i = i / 10 | 0;
		}
		this.Glyphs.reverse();
		var cx = 0;
		var j = 0;
		var k = this.Glyphs.length;
		while(j < k) {
			var g = this.Glyphs[j];
			g.X = cx;
			g.Y = 0;
			g.Renderer = this.Renderer;
			g.DoLayout();
			cx = cx + g.Width;
			++j;
		}
		this.Width = cx;
	}
	,__class__: alphaTab.rendering.glyphs.NumberGlyph
});
alphaTab.rendering.glyphs.PickStrokeGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["PickStrokeGlyph"] = function(x,y,pickStroke) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,0.75,alphaTab.rendering.glyphs.PickStrokeGlyph.GetSymbol(pickStroke));
};
alphaTab.rendering.glyphs.PickStrokeGlyph.__name__ = ["alphaTab","rendering","glyphs","PickStrokeGlyph"];
alphaTab.rendering.glyphs.PickStrokeGlyph.GetSymbol = function(pickStroke) {
	switch(pickStroke) {
	case 1:
		return 58898;
	case 2:
		return 58896;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.PickStrokeGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.PickStrokeGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 9 * this.get_Scale();
		this.Height = 10 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		alphaTab.rendering.glyphs.MusicFontGlyph.prototype.Paint.call(this,cx,cy + this.Height,canvas);
	}
	,__class__: alphaTab.rendering.glyphs.PickStrokeGlyph
});
alphaTab.rendering.glyphs.RepeatCloseGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["RepeatCloseGlyph"] = function(x,y) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
};
alphaTab.rendering.glyphs.RepeatCloseGlyph.__name__ = ["alphaTab","rendering","glyphs","RepeatCloseGlyph"];
alphaTab.rendering.glyphs.RepeatCloseGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.RepeatCloseGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		this.Width = 11 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		var blockWidth = 4 * this.get_Scale();
		var top = cy + this.Y + this.Renderer.TopPadding;
		var bottom = cy + this.Y + this.Renderer.Height - this.Renderer.BottomPadding;
		var left = cx + this.X;
		var h = bottom - top;
		var this1 = 1.5;
		var circleSize = this1 * this.get_Scale();
		var middle = (top + bottom) / 2;
		var dotOffset = 3;
		canvas.FillCircle(left,middle - circleSize * dotOffset,circleSize);
		canvas.FillCircle(left,middle + circleSize * dotOffset,circleSize);
		left = left + 4 * this.get_Scale();
		canvas.BeginPath();
		canvas.MoveTo(left,top);
		canvas.LineTo(left,bottom);
		canvas.Stroke();
		var this2 = 0.5;
		left = left + (3 * this.get_Scale() + this2);
		canvas.FillRect(left,top,blockWidth,h);
	}
	,__class__: alphaTab.rendering.glyphs.RepeatCloseGlyph
});
alphaTab.rendering.glyphs.RepeatCountGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["RepeatCountGlyph"] = function(x,y,count) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this._count = 0;
	this._count = count;
};
alphaTab.rendering.glyphs.RepeatCountGlyph.__name__ = ["alphaTab","rendering","glyphs","RepeatCountGlyph"];
alphaTab.rendering.glyphs.RepeatCountGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.RepeatCountGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		this.Width = 0;
	}
	,Paint: function(cx,cy,canvas) {
		var res = this.Renderer.get_Resources();
		var oldAlign = canvas.get_TextAlign();
		canvas.set_Font(res.BarNumberFont);
		canvas.set_TextAlign(2);
		var s = "x" + this._count;
		var this1 = 1.5;
		var w = canvas.MeasureText(s) / this1;
		canvas.FillText(s,cx + this.X - w,cy + this.Y);
		canvas.set_TextAlign(oldAlign);
	}
	,__class__: alphaTab.rendering.glyphs.RepeatCountGlyph
});
alphaTab.rendering.glyphs.RepeatOpenGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["RepeatOpenGlyph"] = function(x,y,circleSize,dotOffset) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this._dotOffset = 0.0;
	this._circleSize = 0.0;
	this._dotOffset = dotOffset;
	this._circleSize = circleSize;
};
alphaTab.rendering.glyphs.RepeatOpenGlyph.__name__ = ["alphaTab","rendering","glyphs","RepeatOpenGlyph"];
alphaTab.rendering.glyphs.RepeatOpenGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.RepeatOpenGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		this.Width = 13 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		var blockWidth = 4 * this.get_Scale();
		var top = cy + this.Y + this.Renderer.TopPadding;
		var bottom = cy + this.Y + this.Renderer.Height - this.Renderer.BottomPadding;
		var this1 = 0.5;
		var left = cx + this.X + this1;
		var h = bottom - top;
		canvas.FillRect(left,top,blockWidth,h);
		var this2 = 0.5;
		left = left + (blockWidth * 2 - this2);
		canvas.BeginPath();
		canvas.MoveTo(left,top);
		canvas.LineTo(left,bottom);
		canvas.Stroke();
		left = left + 3 * this.get_Scale();
		var circleSize = this._circleSize * this.get_Scale();
		var middle = (top + bottom) / 2;
		canvas.FillCircle(left,middle - circleSize * this._dotOffset,circleSize);
		canvas.FillCircle(left,middle + circleSize * this._dotOffset,circleSize);
	}
	,__class__: alphaTab.rendering.glyphs.RepeatOpenGlyph
});
alphaTab.rendering.glyphs.RideCymbalGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["RideCymbalGlyph"] = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57566);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.RideCymbalGlyph.__name__ = ["alphaTab","rendering","glyphs","RideCymbalGlyph"];
alphaTab.rendering.glyphs.RideCymbalGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.RideCymbalGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 9 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
	}
	,__class__: alphaTab.rendering.glyphs.RideCymbalGlyph
});
alphaTab.rendering.glyphs.ScoreBeatGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["ScoreBeatGlyph"] = function() {
	alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.call(this);
};
alphaTab.rendering.glyphs.ScoreBeatGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreBeatGlyph"];
alphaTab.rendering.glyphs.ScoreBeatGlyph.__super__ = alphaTab.rendering.glyphs.BeatOnNoteGlyphBase;
alphaTab.rendering.glyphs.ScoreBeatGlyph.prototype = $extend(alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.prototype,{
	UpdateBeamingHelper: function() {
		if(this.NoteHeads != null) {
			this.NoteHeads.UpdateBeamingHelper(this.Container.X + this.X);
		} else if(this.RestGlyph != null) {
			this.RestGlyph.UpdateBeamingHelper(this.Container.X + this.X);
		}
	}
	,DoLayout: function() {
		var sr = js.Boot.__cast(this.Renderer , alphaTab.rendering.ScoreBarRenderer);
		if(!this.Container.Beat.IsEmpty) {
			if(!this.Container.Beat.get_IsRest()) {
				this.NoteHeads = new alphaTab.rendering.glyphs.ScoreNoteChordGlyph();
				this.NoteHeads.Beat = this.Container.Beat;
				this.NoteHeads.BeamingHelper = this.BeamingHelper;
				var note = $iterator(this.Container.Beat.Notes)();
				while(note.hasNext()) {
					var note1 = note.next();
					this.CreateNoteGlyph(note1);
				}
				this.AddGlyph(this.NoteHeads);
				if(this.Container.Beat.Dots > 0) {
					this.AddGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_Scale()));
					var i = 0;
					while(i < this.Container.Beat.Dots) {
						var group = new alphaTab.rendering.glyphs.GlyphGroup(0,0);
						var note2 = $iterator(this.Container.Beat.Notes)();
						while(note2.hasNext()) {
							var note3 = note2.next();
							this.CreateBeatDot(sr.GetNoteLine(note3),group);
						}
						this.AddGlyph(group);
						++i;
					}
				}
			} else {
				var dotLine = 0;
				var line = 0;
				var offset = 0;
				var _g = this.Container.Beat.Duration;
				switch(_g) {
				case -4:
					line = 6;
					dotLine = 5;
					break;
				case -2:
					line = 6;
					dotLine = 5;
					break;
				case 1:
					line = 4;
					dotLine = 5;
					break;
				case 2:
					line = 6;
					dotLine = 5;
					break;
				case 4:
					line = 6;
					offset = -2;
					dotLine = 5;
					break;
				case 8:
					line = 6;
					dotLine = 5;
					break;
				case 16:
					line = 6;
					dotLine = 5;
					break;
				case 32:
					line = 6;
					dotLine = 3;
					break;
				case 64:
					line = 6;
					dotLine = 3;
					break;
				case 128:
					line = 6;
					dotLine = 3;
					break;
				case 256:
					line = 6;
					dotLine = 3;
					break;
				default:
				}
				var this1 = line;
				var this2 = offset;
				var y = sr.GetScoreY(this1,this2);
				this.RestGlyph = new alphaTab.rendering.glyphs.ScoreRestGlyph(0,y,this.Container.Beat.Duration);
				this.RestGlyph.Beat = this.Container.Beat;
				this.RestGlyph.BeamingHelper = this.BeamingHelper;
				this.AddGlyph(this.RestGlyph);
				if(this.Container.Beat.Dots > 0) {
					this.AddGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_Scale()));
					var i1 = 0;
					while(i1 < this.Container.Beat.Dots) {
						var group1 = new alphaTab.rendering.glyphs.GlyphGroup(0,0);
						this.CreateBeatDot(dotLine,group1);
						this.AddGlyph(group1);
						++i1;
					}
				}
			}
		}
		alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.prototype.DoLayout.call(this);
	}
	,CreateBeatDot: function(line,group) {
		var sr = js.Boot.__cast(this.Renderer , alphaTab.rendering.ScoreBarRenderer);
		var this1 = line;
		var this2 = 1.5;
		group.AddGlyph(new alphaTab.rendering.glyphs.CircleGlyph(0,sr.GetScoreY(this1,0),this2 * this.get_Scale()));
	}
	,CreateNoteHeadGlyph: function(n) {
		var isGrace = this.Container.Beat.GraceType != 0;
		if(n.Beat.Voice.Bar.Staff.StaffKind == 2) {
			var value = n.get_RealValue();
			if(value <= 30 || value >= 67 || alphaTab.rendering.glyphs.ScoreBeatGlyph.NormalKeys.hasOwnProperty(value)) {
				return new alphaTab.rendering.glyphs.NoteHeadGlyph(0,0,4,isGrace);
			}
			if(alphaTab.rendering.glyphs.ScoreBeatGlyph.XKeys.hasOwnProperty(value)) {
				return new alphaTab.rendering.glyphs.DrumSticksGlyph(0,0,isGrace);
			}
			if(value == 46) {
				return new alphaTab.rendering.glyphs.HiHatGlyph(0,0,isGrace);
			}
			if(value == 49 || value == 57) {
				return new alphaTab.rendering.glyphs.DiamondNoteHeadGlyph(0,0,isGrace);
			}
			if(value == 52) {
				return new alphaTab.rendering.glyphs.ChineseCymbalGlyph(0,0,isGrace);
			}
			if(value == 51 || value == 53 || value == 59) {
				return new alphaTab.rendering.glyphs.RideCymbalGlyph(0,0,isGrace);
			}
			return new alphaTab.rendering.glyphs.NoteHeadGlyph(0,0,4,isGrace);
		}
		if(n.IsDead) {
			return new alphaTab.rendering.glyphs.DeadNoteHeadGlyph(0,0,isGrace);
		}
		if(n.HarmonicType == 0) {
			return new alphaTab.rendering.glyphs.NoteHeadGlyph(0,0,n.Beat.Duration,isGrace);
		}
		return new alphaTab.rendering.glyphs.DiamondNoteHeadGlyph(0,0,isGrace);
	}
	,CreateNoteGlyph: function(n) {
		var sr = js.Boot.__cast(this.Renderer , alphaTab.rendering.ScoreBarRenderer);
		var noteHeadGlyph = this.CreateNoteHeadGlyph(n);
		var line = sr.GetNoteLine(n);
		var this1 = line;
		noteHeadGlyph.Y = sr.GetScoreY(this1,0);
		this.NoteHeads.AddNoteGlyph(noteHeadGlyph,n,line);
		if(n.IsStaccato && !this.NoteHeads.BeatEffects.hasOwnProperty("Staccato")) {
			this.NoteHeads.BeatEffects["Staccato"] = new alphaTab.rendering.glyphs.CircleGlyph(0,0,1.5);
		}
		if(n.Accentuated == 1 && !this.NoteHeads.BeatEffects.hasOwnProperty("Accent")) {
			this.NoteHeads.BeatEffects["Accent"] = new alphaTab.rendering.glyphs.AccentuationGlyph(0,0,1);
		}
		if(n.Accentuated == 2 && !this.NoteHeads.BeatEffects.hasOwnProperty("HAccent")) {
			this.NoteHeads.BeatEffects["HAccent"] = new alphaTab.rendering.glyphs.AccentuationGlyph(0,0,2);
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreBeatGlyph
});
alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["ScoreBeatPreNotesGlyph"] = function() {
	alphaTab.rendering.glyphs.BeatGlyphBase.call(this);
};
alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreBeatPreNotesGlyph"];
alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph.__super__ = alphaTab.rendering.glyphs.BeatGlyphBase;
alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph.prototype = $extend(alphaTab.rendering.glyphs.BeatGlyphBase.prototype,{
	DoLayout: function() {
		if(!this.Container.Beat.get_IsRest()) {
			if(this.Container.Beat.BrushType != 0) {
				this.AddGlyph(new alphaTab.rendering.glyphs.ScoreBrushGlyph(this.Container.Beat));
				this.AddGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,4 * this.get_Scale()));
			}
			var accidentals = new alphaTab.rendering.glyphs.AccidentalGroupGlyph();
			var note = $iterator(this.Container.Beat.Notes)();
			while(note.hasNext()) {
				var note1 = note.next();
				this.CreateAccidentalGlyph(note1,accidentals);
			}
			if(!accidentals.get_IsEmpty()) {
				this.AddGlyph(accidentals);
				this.AddGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,4 * (this.Container.Beat.GraceType != 0 ? 0.75 : 1) * this.get_Scale()));
			}
		}
		alphaTab.rendering.glyphs.BeatGlyphBase.prototype.DoLayout.call(this);
	}
	,CreateAccidentalGlyph: function(n,accidentals) {
		var sr = js.Boot.__cast(this.Renderer , alphaTab.rendering.ScoreBarRenderer);
		var accidental = sr.AccidentalHelper.ApplyAccidental(n);
		var noteLine = sr.GetNoteLine(n);
		var isGrace = this.Container.Beat.GraceType != 0;
		switch(accidental) {
		case 1:
			var this1 = noteLine;
			accidentals.AddGlyph(new alphaTab.rendering.glyphs.NaturalizeGlyph(0,sr.GetScoreY(this1,0),isGrace));
			break;
		case 2:
			var this2 = noteLine;
			accidentals.AddGlyph(new alphaTab.rendering.glyphs.SharpGlyph(0,sr.GetScoreY(this2,0),isGrace));
			break;
		case 3:
			var this3 = noteLine;
			accidentals.AddGlyph(new alphaTab.rendering.glyphs.FlatGlyph(0,sr.GetScoreY(this3,0),isGrace));
			break;
		default:
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreBeatPreNotesGlyph
});
alphaTab.rendering.glyphs.ScoreBrushGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["ScoreBrushGlyph"] = function(beat) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._beat = null;
	this._beat = beat;
};
alphaTab.rendering.glyphs.ScoreBrushGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreBrushGlyph"];
alphaTab.rendering.glyphs.ScoreBrushGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.ScoreBrushGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		this.Width = 10 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		var scoreBarRenderer = js.Boot.__cast(this.Renderer , alphaTab.rendering.ScoreBarRenderer);
		var lineSize = scoreBarRenderer.get_LineOffset();
		var startY = cy + this.Y + (scoreBarRenderer.GetNoteY(this._beat.get_MaxNote(),false) - lineSize / 2);
		var endY = cy + this.Y + scoreBarRenderer.GetNoteY(this._beat.get_MinNote(),false) + lineSize;
		var arrowX = cx + this.X + this.Width / 2;
		var arrowSize = 8 * this.get_Scale();
		if(this._beat.BrushType != 0) {
			if(this._beat.BrushType == 3) {
				canvas.BeginPath();
				canvas.MoveTo(arrowX,endY);
				canvas.LineTo(arrowX + arrowSize / 2,endY - arrowSize);
				canvas.LineTo(arrowX - arrowSize / 2,endY - arrowSize);
				canvas.ClosePath();
				canvas.Fill();
			} else if(this._beat.BrushType == 4) {
				canvas.BeginPath();
				canvas.MoveTo(arrowX,startY);
				canvas.LineTo(arrowX + arrowSize / 2,startY + arrowSize);
				canvas.LineTo(arrowX - arrowSize / 2,startY + arrowSize);
				canvas.ClosePath();
				canvas.Fill();
			}
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreBrushGlyph
});
alphaTab.rendering.glyphs.TieGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TieGlyph"] = function(startBeat,endBeat,forEnd) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this.StartBeat = null;
	this.EndBeat = null;
	this.YOffset = 0.0;
	this._forEnd = false;
	this.StartBeat = startBeat;
	this.EndBeat = endBeat;
	this._forEnd = forEnd;
};
alphaTab.rendering.glyphs.TieGlyph.__name__ = ["alphaTab","rendering","glyphs","TieGlyph"];
alphaTab.rendering.glyphs.TieGlyph.PaintTie = function(canvas,scale,x1,y1,x2,y2,down) {
	if(down == null) {
		down = false;
	}
	if(x1 == x2 && y1 == y2) {
		return;
	}
	if(x2 < x1) {
		var t = x1;
		x1 = x2;
		x2 = t;
		t = y1;
		y1 = y2;
		y2 = t;
	}
	var offset = 22 * scale;
	var size = 4 * scale;
	var normalVectorX = y2 - y1;
	var normalVectorY = x2 - x1;
	var this1 = normalVectorX * normalVectorX + normalVectorY * normalVectorY;
	var length = js.Boot.__cast(Math.sqrt(this1) , Float);
	if(down) {
		normalVectorX = normalVectorX * -1;
	} else {
		normalVectorY = normalVectorY * -1;
	}
	normalVectorX = normalVectorX / length;
	normalVectorY = normalVectorY / length;
	var centerX = (x2 + x1) / 2;
	var centerY = (y2 + y1) / 2;
	var cp1X = centerX + offset * normalVectorX;
	var cp1Y = centerY + offset * normalVectorY;
	var cp2X = centerX + (offset - size) * normalVectorX;
	var cp2Y = centerY + (offset - size) * normalVectorY;
	canvas.BeginPath();
	canvas.MoveTo(x1,y1);
	canvas.QuadraticCurveTo(cp1X,cp1Y,x2,y2);
	canvas.QuadraticCurveTo(cp2X,cp2Y,x1,y1);
	canvas.ClosePath();
};
alphaTab.rendering.glyphs.TieGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.TieGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		this.Width = 0;
	}
	,Paint: function(cx,cy,canvas) {
		if(this.EndBeat == null) {
			return;
		}
		var startNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(this.Renderer.Staff.get_StaveId(),this.StartBeat.Voice.Bar);
		var endNoteRenderer = this.Renderer.ScoreRenderer.Layout.GetRendererForBar(this.Renderer.Staff.get_StaveId(),this.EndBeat.Voice.Bar);
		var startX = 0;
		var endX = 0;
		var startY = 0;
		var endY = 0;
		var shouldDraw = false;
		var direction = this.GetBeamDirection(this.StartBeat,startNoteRenderer);
		if(!this._forEnd) {
			if(startNoteRenderer != endNoteRenderer) {
				startX = cx + startNoteRenderer.X + this.GetStartX(startNoteRenderer);
				startY = cy + startNoteRenderer.Y + this.GetStartY(startNoteRenderer,direction) + this.YOffset;
				if(endNoteRenderer == null || startNoteRenderer.Staff != endNoteRenderer.Staff) {
					endX = cx + startNoteRenderer.X + startNoteRenderer.Width;
					endY = startY;
				} else {
					endX = cx + endNoteRenderer.X + this.GetEndX(endNoteRenderer);
					endY = cy + endNoteRenderer.Y + this.GetEndY(endNoteRenderer,direction) + this.YOffset;
				}
			} else {
				startX = cx + startNoteRenderer.X + this.GetStartX(startNoteRenderer);
				endX = cx + endNoteRenderer.X + this.GetEndX(endNoteRenderer);
				startY = cy + startNoteRenderer.Y + this.GetStartY(startNoteRenderer,direction) + this.YOffset;
				endY = cy + endNoteRenderer.Y + this.GetEndY(endNoteRenderer,direction) + this.YOffset;
			}
			shouldDraw = true;
		} else if(startNoteRenderer.Staff != endNoteRenderer.Staff) {
			startX = cx + endNoteRenderer.X;
			endX = cx + endNoteRenderer.X + this.GetEndX(endNoteRenderer);
			startY = cy + endNoteRenderer.Y + this.GetEndY(endNoteRenderer,direction) + this.YOffset;
			endY = startY;
			shouldDraw = true;
		}
		if(shouldDraw) {
			alphaTab.rendering.glyphs.TieGlyph.PaintTie(canvas,this.get_Scale(),startX,startY,endX,endY,direction == 1);
			canvas.Fill();
		}
	}
	,GetBeamDirection: function(beat,noteRenderer) {
		return 1;
	}
	,GetStartY: function(noteRenderer,direction) {
		return 0;
	}
	,GetEndY: function(noteRenderer,direction) {
		return 0;
	}
	,GetStartX: function(noteRenderer) {
		return 0;
	}
	,GetEndX: function(noteRenderer) {
		return 0;
	}
	,__class__: alphaTab.rendering.glyphs.TieGlyph
});
alphaTab.rendering.glyphs.ScoreLegatoGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["ScoreLegatoGlyph"] = function(startBeat,endBeat,forEnd) {
	if(forEnd == null) {
		forEnd = false;
	}
	alphaTab.rendering.glyphs.TieGlyph.call(this,startBeat,endBeat,forEnd);
};
alphaTab.rendering.glyphs.ScoreLegatoGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreLegatoGlyph"];
alphaTab.rendering.glyphs.ScoreLegatoGlyph.__super__ = alphaTab.rendering.glyphs.TieGlyph;
alphaTab.rendering.glyphs.ScoreLegatoGlyph.prototype = $extend(alphaTab.rendering.glyphs.TieGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.TieGlyph.prototype.DoLayout.call(this);
		this.YOffset = 9 / 2;
	}
	,GetBeamDirection: function(beat,noteRenderer) {
		if(beat.get_IsRest()) {
			return 0;
		}
		var _g = (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).GetBeatDirection(beat);
		if(_g == 0) {
			return 1;
		} else {
			return 0;
		}
	}
	,GetStartY: function(noteRenderer,direction) {
		if(this.StartBeat.get_IsRest()) {
			return (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).GetScoreY(9,0);
		}
		if(direction == 0) {
			return noteRenderer.GetNoteY(this.StartBeat.get_MinNote(),false);
		} else {
			return noteRenderer.GetNoteY(this.StartBeat.get_MaxNote(),false);
		}
	}
	,GetEndY: function(noteRenderer,direction) {
		if(this.EndBeat.get_IsRest()) {
			if(direction == 0) {
				return (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).GetScoreY(9,0);
			} else {
				return (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).GetScoreY(0,0);
			}
		}
		if(direction == 0) {
			return (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).GetNoteY(this.EndBeat.get_MinNote(),false);
		} else {
			return (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).GetNoteY(this.EndBeat.get_MaxNote(),false);
		}
	}
	,GetStartX: function(noteRenderer) {
		if(this.StartBeat.get_IsRest()) {
			return noteRenderer.GetBeatX(this.StartBeat,0);
		} else {
			return noteRenderer.GetNoteX(this.StartBeat.get_MinNote(),true);
		}
	}
	,GetEndX: function(noteRenderer) {
		if(this.EndBeat.get_IsRest()) {
			return noteRenderer.GetBeatX(this.EndBeat,0);
		} else {
			return noteRenderer.GetNoteX(this.EndBeat.get_MinNote(),false);
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreLegatoGlyph
});
alphaTab.rendering.glyphs.ScoreNoteChordGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["ScoreNoteChordGlyph"] = function() {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._infos = null;
	this._noteLookup = null;
	this._tremoloPicking = null;
	this._noteHeadPadding = 0.0;
	this.MinNote = null;
	this.MaxNote = null;
	this.SpacingChanged = null;
	this.UpLineX = 0.0;
	this.DownLineX = 0.0;
	this.BeatEffects = null;
	this.Beat = null;
	this.BeamingHelper = null;
	var this1 = [];
	this._infos = this1;
	var this2 = {}
	this.BeatEffects = this2;
	var this3 = {}
	this._noteLookup = this3;
};
alphaTab.rendering.glyphs.ScoreNoteChordGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreNoteChordGlyph"];
alphaTab.rendering.glyphs.ScoreNoteChordGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.ScoreNoteChordGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	get_Direction: function() {
		return this.BeamingHelper.Direction;
	}
	,GetNoteX: function(note,onEnd) {
		if(onEnd == null) {
			onEnd = true;
		}
		if(this._noteLookup.hasOwnProperty(note.String)) {
			var n = this._noteLookup[note.String];
			var pos = this.X + n.X;
			if(onEnd) {
				pos = pos + n.Width;
			}
			return pos;
		}
		return 0;
	}
	,GetNoteY: function(note,aboveNote) {
		if(aboveNote == null) {
			aboveNote = false;
		}
		if(this._noteLookup.hasOwnProperty(note.String)) {
			return this.Y + this._noteLookup[note.String].Y + (aboveNote ? -(9 * this.get_Scale()) / 2 : 0);
		}
		return 0;
	}
	,AddNoteGlyph: function(noteGlyph,note,noteLine) {
		var info = new alphaTab.rendering.glyphs.ScoreNoteGlyphInfo(noteGlyph,noteLine,note);
		this._infos.push(info);
		this._noteLookup[note.String] = noteGlyph;
		if(this.MinNote == null || this.MinNote.Line > info.Line) {
			this.MinNote = info;
		}
		if(this.MaxNote == null || this.MaxNote.Line < info.Line) {
			this.MaxNote = info;
		}
	}
	,UpdateBeamingHelper: function(cx) {
		if(this.BeamingHelper != null) {
			this.BeamingHelper.RegisterBeatLineX("score",this.Beat,cx + this.X + this.UpLineX,cx + this.X + this.DownLineX);
		}
	}
	,get_HasTopOverflow: function() {
		if(this.MinNote != null) {
			return this.MinNote.Line < 0;
		} else {
			return false;
		}
	}
	,get_HasBottomOverflow: function() {
		if(this.MaxNote != null) {
			return this.MaxNote.Line > 8;
		} else {
			return false;
		}
	}
	,DoLayout: function() {
		var comparison = function(a,b) {
			return system._Int32.Int32_Impl_.CompareTo_Int32(a.Line,b.Line);
		};
		this._infos.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
		var padding = 0;
		var displacedX = 0;
		var lastDisplaced = false;
		var lastLine = 0;
		var anyDisplaced = false;
		var direction = this.get_Direction();
		var w = 0;
		var i = 0;
		var j = this._infos.length;
		while(i < j) {
			var g = this._infos[i].Glyph;
			g.Renderer = this.Renderer;
			g.DoLayout();
			var displace = false;
			if(i == 0) {
				displacedX = g.Width + padding;
			} else if(Math.abs(lastLine - this._infos[i].Line) <= 1) {
				if(!lastDisplaced) {
					displace = true;
					g.X = displacedX - this.get_Scale();
					anyDisplaced = true;
					lastDisplaced = true;
				} else {
					lastDisplaced = false;
				}
			} else {
				lastDisplaced = false;
			}
			if(direction == 1) {
				var tmp;
				if(displace) {
					var this1 = padding;
					tmp = this1;
				} else {
					tmp = displacedX;
				}
				g.X = tmp;
			} else {
				var tmp1;
				if(displace) {
					tmp1 = displacedX;
				} else {
					var this2 = padding;
					tmp1 = this2;
				}
				g.X = tmp1;
			}
			lastLine = this._infos[i].Line;
			w = Math.max(w,g.X + g.Width);
			++i;
		}
		if(anyDisplaced) {
			this._noteHeadPadding = 0;
			this.UpLineX = displacedX;
			this.DownLineX = displacedX;
		} else {
			this._noteHeadPadding = direction == 1 ? -displacedX : 0;
			w = w + this._noteHeadPadding;
			this.UpLineX = w;
			var this3 = padding;
			this.DownLineX = this3;
		}
		var this4 = this.BeatEffects;
		var effectKey = $iterator(Object.keys(this4))();
		while(effectKey.hasNext()) {
			var effectKey1 = effectKey.next();
			var effect = this.BeatEffects[effectKey1];
			effect.Renderer = this.Renderer;
			effect.DoLayout();
		}
		if(this.Beat.get_IsTremolo()) {
			var offset;
			var baseNote = direction == 0 ? this.MinNote : this.MaxNote;
			var tremoloX = direction == 0 ? displacedX : 0;
			var speed = this.Beat.TremoloSpeed;
			switch(speed) {
			case 8:
				if(direction == 0) {
					offset = -10;
				} else {
					offset = 10;
				}
				break;
			case 16:
				if(direction == 0) {
					offset = -12;
				} else {
					offset = 15;
				}
				break;
			case 32:
				if(direction == 0) {
					offset = -15;
				} else {
					offset = 15;
				}
				break;
			default:
				if(direction == 0) {
					offset = -10;
				} else {
					offset = 15;
				}
			}
			this._tremoloPicking = new alphaTab.rendering.glyphs.TremoloPickingGlyph(tremoloX,baseNote.Glyph.Y + offset * this.get_Scale(),this.Beat.TremoloSpeed);
			this._tremoloPicking.Renderer = this.Renderer;
			this._tremoloPicking.DoLayout();
		}
		this.Width = w + padding;
	}
	,Paint: function(cx,cy,canvas) {
		cx = cx + this.X;
		cy = cy + this.Y;
		var scoreRenderer = js.Boot.__cast(this.Renderer , alphaTab.rendering.ScoreBarRenderer);
		var effectY;
		if(this.BeamingHelper.Direction == 0) {
			var this1 = this.MaxNote.Line;
			var this2 = 1.5;
			effectY = scoreRenderer.GetScoreY(this1,this2 * 9);
		} else {
			var this3 = this.MinNote.Line;
			effectY = scoreRenderer.GetScoreY(this3,-1.0 * 9);
		}
		var effectSpacing = this.BeamingHelper.Direction == 0 ? 7 * this.get_Scale() : -7 * this.get_Scale();
		var this4 = this.BeatEffects;
		var effectKey = $iterator(Object.keys(this4))();
		while(effectKey.hasNext()) {
			var effectKey1 = effectKey.next();
			var g = this.BeatEffects[effectKey1];
			g.Y = effectY;
			g.X = this.Width / 2;
			g.Paint(cx,cy,canvas);
			effectY = effectY + effectSpacing;
		}
		var linePadding = 3 * this.get_Scale();
		var lineWidth = this.Width + linePadding * 2;
		if(this.get_HasTopOverflow()) {
			var color = canvas.get_Color();
			canvas.set_Color(this.Renderer.ScoreRenderer.RenderingResources.StaveLineColor);
			var l = -1;
			while(l >= this.MinNote.Line) {
				var this5 = l;
				var lY = cy + scoreRenderer.GetScoreY(this5,0);
				canvas.FillRect(cx - linePadding,lY,lineWidth,this.get_Scale());
				l = l - 2;
			}
			canvas.set_Color(color);
		}
		if(this.get_HasBottomOverflow()) {
			var color1 = canvas.get_Color();
			canvas.set_Color(this.Renderer.ScoreRenderer.RenderingResources.StaveLineColor);
			var l1 = 12;
			while(l1 <= this.MaxNote.Line) {
				var this6 = l1;
				var lY1 = cy + scoreRenderer.GetScoreY(this6,0);
				canvas.FillRect(cx - linePadding,lY1,lineWidth,this.get_Scale());
				l1 = l1 + 2;
			}
			canvas.set_Color(color1);
		}
		if(this._tremoloPicking != null) {
			this._tremoloPicking.Paint(cx,cy,canvas);
		}
		var infos = this._infos;
		var x = cx + this._noteHeadPadding;
		var g1 = $iterator(infos)();
		while(g1.hasNext()) {
			var g2 = g1.next();
			g2.Glyph.Renderer = this.Renderer;
			g2.Glyph.Paint(x,cy,canvas);
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreNoteChordGlyph
});
alphaTab.rendering.glyphs.ScoreNoteGlyphInfo = $hx_exports["alphaTab"]["rendering"]["glyphs"]["ScoreNoteGlyphInfo"] = function(glyph,line,note) {
	this.Glyph = null;
	this.Line = 0;
	this.Note = null;
	this.Glyph = glyph;
	this.Line = line;
};
alphaTab.rendering.glyphs.ScoreNoteGlyphInfo.__name__ = ["alphaTab","rendering","glyphs","ScoreNoteGlyphInfo"];
alphaTab.rendering.glyphs.ScoreNoteGlyphInfo.prototype = {
	__class__: alphaTab.rendering.glyphs.ScoreNoteGlyphInfo
};
alphaTab.rendering.glyphs.ScoreRestGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["ScoreRestGlyph"] = function(x,y,duration) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,1,alphaTab.rendering.glyphs.ScoreRestGlyph.GetSymbol(duration));
	this._duration = -4;
	this.BeamingHelper = null;
	this._duration = duration;
};
alphaTab.rendering.glyphs.ScoreRestGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreRestGlyph"];
alphaTab.rendering.glyphs.ScoreRestGlyph.GetSymbol = function(duration) {
	switch(duration) {
	case -4:
		return 58593;
	case -2:
		return 58594;
	case 1:
		return 58595;
	case 2:
		return 58596;
	case 4:
		return 58597;
	case 8:
		return 58598;
	case 16:
		return 58599;
	case 32:
		return 58600;
	case 64:
		return 58601;
	case 128:
		return 58602;
	case 256:
		return 58603;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.ScoreRestGlyph.GetSize = function(duration) {
	switch(duration) {
	case -4:case -2:case 1:case 2:case 4:case 8:case 16:
		return 9;
	case 32:
		return 12;
	case 64:
		return 14;
	case 128:case 256:
		return 20;
	default:
	}
	return 10;
};
alphaTab.rendering.glyphs.ScoreRestGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.ScoreRestGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = alphaTab.rendering.glyphs.ScoreRestGlyph.GetSize(this._duration) * this.get_Scale();
	}
	,UpdateBeamingHelper: function(cx) {
		if(this.BeamingHelper != null) {
			this.BeamingHelper.RegisterBeatLineX("score",this.Beat,cx + this.X + this.Width / 2,cx + this.X + this.Width / 2);
		}
	}
	,__class__: alphaTab.rendering.glyphs.ScoreRestGlyph
});
alphaTab.rendering.glyphs.ScoreSlideLineGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["ScoreSlideLineGlyph"] = function(type,startNote,parent) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._startNote = null;
	this._type = 0;
	this._parent = null;
	this._type = type;
	this._startNote = startNote;
	this._parent = parent;
};
alphaTab.rendering.glyphs.ScoreSlideLineGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreSlideLineGlyph"];
alphaTab.rendering.glyphs.ScoreSlideLineGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.ScoreSlideLineGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		this.Width = 0;
	}
	,Paint: function(cx,cy,canvas) {
		var r = js.Boot.__cast(this.Renderer , alphaTab.rendering.ScoreBarRenderer);
		cx = cx + r.X;
		cy = cy + r.Y;
		var sizeX = 12 * this.get_Scale();
		var offsetX = this.get_Scale();
		var startX;
		var startY;
		var endX;
		var endY;
		var _g = this._type;
		switch(_g) {
		case 1:case 2:
			startX = cx + r.GetNoteX(this._startNote,true) + offsetX;
			startY = cy + r.GetNoteY(this._startNote,false) + 9 / 2;
			if(this._startNote.SlideTarget != null) {
				endX = cx + r.GetNoteX(this._startNote.SlideTarget,false) - offsetX;
				endY = cy + r.GetNoteY(this._startNote.SlideTarget,false) + 9 / 2;
			} else {
				endX = cx + this._parent.X;
				endY = startY;
			}
			break;
		case 3:
			endX = cx + r.GetNoteX(this._startNote,false) - offsetX;
			endY = cy + r.GetNoteY(this._startNote,false) + 9 / 2;
			startX = endX - sizeX;
			startY = cy + r.GetNoteY(this._startNote,false) + 9;
			break;
		case 4:
			endX = cx + r.GetNoteX(this._startNote,false) - offsetX;
			endY = cy + r.GetNoteY(this._startNote,false) + 9 / 2;
			startX = endX - sizeX;
			startY = cy + r.GetNoteY(this._startNote,false);
			break;
		case 5:
			startX = cx + r.GetNoteX(this._startNote,true) + offsetX;
			startY = cy + r.GetNoteY(this._startNote,false) + 9 / 2;
			endX = startX + sizeX;
			endY = cy + r.GetNoteY(this._startNote,false);
			break;
		case 6:
			startX = cx + r.GetNoteX(this._startNote,true) + offsetX;
			startY = cy + r.GetNoteY(this._startNote,false) + 9 / 2;
			endX = startX + sizeX;
			endY = cy + r.GetNoteY(this._startNote,false) + 9;
			break;
		default:
			return;
		}
		canvas.BeginPath();
		canvas.MoveTo(startX,startY);
		canvas.LineTo(endX,endY);
		canvas.Stroke();
	}
	,__class__: alphaTab.rendering.glyphs.ScoreSlideLineGlyph
});
alphaTab.rendering.glyphs.ScoreTieGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["ScoreTieGlyph"] = function(startNote,endNote,forEnd) {
	if(forEnd == null) {
		forEnd = false;
	}
	alphaTab.rendering.glyphs.TieGlyph.call(this,startNote == null ? null : startNote.Beat,endNote == null ? null : endNote.Beat,forEnd);
	this._startNote = null;
	this._endNote = null;
	this._startNote = startNote;
	this._endNote = endNote;
};
alphaTab.rendering.glyphs.ScoreTieGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreTieGlyph"];
alphaTab.rendering.glyphs.ScoreTieGlyph.__super__ = alphaTab.rendering.glyphs.TieGlyph;
alphaTab.rendering.glyphs.ScoreTieGlyph.prototype = $extend(alphaTab.rendering.glyphs.TieGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.TieGlyph.prototype.DoLayout.call(this);
		this.YOffset = 9 / 2;
	}
	,GetBeamDirection: function(beat,noteRenderer) {
		var _g = (js.Boot.__cast(noteRenderer , alphaTab.rendering.ScoreBarRenderer)).GetBeatDirection(beat);
		if(_g == 0) {
			return 1;
		} else {
			return 0;
		}
	}
	,GetStartY: function(noteRenderer,direction) {
		return noteRenderer.GetNoteY(this._startNote,false);
	}
	,GetEndY: function(noteRenderer,direction) {
		return noteRenderer.GetNoteY(this._endNote,false);
	}
	,GetStartX: function(noteRenderer) {
		return noteRenderer.GetNoteX(this._startNote,true);
	}
	,GetEndX: function(noteRenderer) {
		return noteRenderer.GetNoteX(this._endNote,false);
	}
	,__class__: alphaTab.rendering.glyphs.ScoreTieGlyph
});
alphaTab.rendering.glyphs.TimeSignatureGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TimeSignatureGlyph"] = function(x,y,numerator,denominator,isCommon) {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,x,y);
	this._numerator = 0;
	this._denominator = 0;
	this._isCommon = false;
	this._numerator = numerator;
	this._denominator = denominator;
	this._isCommon = isCommon;
};
alphaTab.rendering.glyphs.TimeSignatureGlyph.__name__ = ["alphaTab","rendering","glyphs","TimeSignatureGlyph"];
alphaTab.rendering.glyphs.TimeSignatureGlyph.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.TimeSignatureGlyph.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	get_CommonY: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_NumeratorY: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_DenominatorY: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_CommonScale: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,get_NumberScale: function() {
		throw new js._Boot.HaxeError("abstract");
	}
	,DoLayout: function() {
		if(this._isCommon && this._numerator == 2 && this._denominator == 2) {
			var common = new alphaTab.rendering.glyphs.MusicFontGlyph(0,this.get_CommonY(),this.get_CommonScale(),57483);
			common.Width = 14 * this.get_Scale();
			this.AddGlyph(common);
			alphaTab.rendering.glyphs.GlyphGroup.prototype.DoLayout.call(this);
		} else if(this._isCommon && this._numerator == 4 && this._denominator == 4) {
			var common1 = new alphaTab.rendering.glyphs.MusicFontGlyph(0,this.get_CommonY(),this.get_CommonScale(),57482);
			common1.Width = 14 * this.get_Scale();
			this.AddGlyph(common1);
			alphaTab.rendering.glyphs.GlyphGroup.prototype.DoLayout.call(this);
		} else {
			var numerator = new alphaTab.rendering.glyphs.NumberGlyph(0,this.get_NumeratorY(),this._numerator,this.get_NumberScale());
			var denominator = new alphaTab.rendering.glyphs.NumberGlyph(0,this.get_DenominatorY(),this._denominator,this.get_NumberScale());
			this.AddGlyph(numerator);
			this.AddGlyph(denominator);
			alphaTab.rendering.glyphs.GlyphGroup.prototype.DoLayout.call(this);
			var i = 0;
			var j = this.Glyphs.length;
			while(i < j) {
				var g = this.Glyphs[i];
				g.X = (this.Width - g.Width) / 2;
				++i;
			}
		}
	}
	,__class__: alphaTab.rendering.glyphs.TimeSignatureGlyph
});
alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["ScoreTimeSignatureGlyph"] = function(x,y,numerator,denominator,isCommon) {
	alphaTab.rendering.glyphs.TimeSignatureGlyph.call(this,x,y,numerator,denominator,isCommon);
};
alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph.__name__ = ["alphaTab","rendering","glyphs","ScoreTimeSignatureGlyph"];
alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph.__super__ = alphaTab.rendering.glyphs.TimeSignatureGlyph;
alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph.prototype = $extend(alphaTab.rendering.glyphs.TimeSignatureGlyph.prototype,{
	get_CommonY: function() {
		var renderer = js.Boot.__cast(this.Renderer , alphaTab.rendering.ScoreBarRenderer);
		return renderer.GetScoreY(4,0);
	}
	,get_NumeratorY: function() {
		return 2 * this.get_Scale();
	}
	,get_DenominatorY: function() {
		return 20 * this.get_Scale();
	}
	,get_CommonScale: function() {
		return 1;
	}
	,get_NumberScale: function() {
		return 1;
	}
	,__class__: alphaTab.rendering.glyphs.ScoreTimeSignatureGlyph
});
alphaTab.rendering.glyphs.SharpGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["SharpGlyph"] = function(x,y,isGrace) {
	if(isGrace == null) {
		isGrace = false;
	}
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,isGrace ? 0.75 : 1,57954);
	this._isGrace = false;
	this._isGrace = isGrace;
};
alphaTab.rendering.glyphs.SharpGlyph.__name__ = ["alphaTab","rendering","glyphs","SharpGlyph"];
alphaTab.rendering.glyphs.SharpGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.SharpGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 8 * (this._isGrace ? 0.75 : 1) * this.get_Scale();
	}
	,__class__: alphaTab.rendering.glyphs.SharpGlyph
});
alphaTab.rendering.glyphs.SpacingGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["SpacingGlyph"] = function(x,y,width) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this.Width = width;
};
alphaTab.rendering.glyphs.SpacingGlyph.__name__ = ["alphaTab","rendering","glyphs","SpacingGlyph"];
alphaTab.rendering.glyphs.SpacingGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.SpacingGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	__class__: alphaTab.rendering.glyphs.SpacingGlyph
});
alphaTab.rendering.glyphs.TabBeatContainerGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TabBeatContainerGlyph"] = function(beat,voiceContainer) {
	alphaTab.rendering.glyphs.BeatContainerGlyph.call(this,beat,voiceContainer);
	this._bendGlyphs = null;
};
alphaTab.rendering.glyphs.TabBeatContainerGlyph.__name__ = ["alphaTab","rendering","glyphs","TabBeatContainerGlyph"];
alphaTab.rendering.glyphs.TabBeatContainerGlyph.__super__ = alphaTab.rendering.glyphs.BeatContainerGlyph;
alphaTab.rendering.glyphs.TabBeatContainerGlyph.prototype = $extend(alphaTab.rendering.glyphs.BeatContainerGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.BeatContainerGlyph.prototype.DoLayout.call(this);
		var this1 = [];
		this._bendGlyphs = this1;
		var n = $iterator(this.Beat.Notes)();
		while(n.hasNext()) {
			var n1 = n.next();
			if(n1.get_HasBend()) {
				var bendValueHeight = 6;
				var bendHeight = n1.MaxBendPoint.Value * bendValueHeight;
				var this2 = bendHeight;
				this.Renderer.RegisterOverflowTop(this2);
				var this3 = bendValueHeight;
				var bend = new alphaTab.rendering.glyphs.BendGlyph(n1,this3);
				if(n1.IsContinuedBend || n1.BendType == 7 || n1.BendType == 6 || n1.BendType == 8) {
					bend.X = this.OnNotes.X + this.OnNotes.Width / 2;
				} else {
					bend.X = this.OnNotes.X + this.OnNotes.Width;
				}
				bend.Renderer = this.Renderer;
				this._bendGlyphs.push(bend);
			}
		}
	}
	,ScaleToWidth: function(beatWidth) {
		alphaTab.rendering.glyphs.BeatContainerGlyph.prototype.ScaleToWidth.call(this,beatWidth);
		var i = 0;
		while(i < this._bendGlyphs.length) {
			var g = this._bendGlyphs[i];
			g.Width = beatWidth - g.X;
			++i;
		}
	}
	,CreateTies: function(n) {
		var renderer = js.Boot.__cast(this.Renderer , alphaTab.rendering.TabBarRenderer);
		if(n.IsTieOrigin && renderer.ShowTiedNotes) {
			var tie = new alphaTab.rendering.glyphs.TabTieGlyph(n,n.TieDestination,false,false);
			this.Ties.push(tie);
		}
		if(n.IsTieDestination && renderer.ShowTiedNotes) {
			var tie1 = new alphaTab.rendering.glyphs.TabTieGlyph(n.TieOrigin,n,false,true);
			this.Ties.push(tie1);
		} else if(n.IsHammerPullOrigin) {
			if(n.HammerPullOrigin == null) {
				var destination = n.HammerPullDestination;
				while(destination.HammerPullDestination != null) destination = destination.HammerPullDestination;
				var tie2 = new alphaTab.rendering.glyphs.TabTieGlyph(n,destination,false,false);
				this.Ties.push(tie2);
			}
		} else if(n.get_IsHammerPullDestination()) {
			if(n.HammerPullDestination == null) {
				var origin = n.HammerPullOrigin;
				while(origin.HammerPullOrigin != null) origin = origin.HammerPullOrigin;
				var tie3 = new alphaTab.rendering.glyphs.TabTieGlyph(origin,n,false,true);
				this.Ties.push(tie3);
			}
		} else if(n.SlideType == 2) {
			var tie4 = new alphaTab.rendering.glyphs.TabTieGlyph(n,n.SlideTarget,true,false);
			this.Ties.push(tie4);
		}
		if(n.SlideType != 0) {
			var l = new alphaTab.rendering.glyphs.TabSlideLineGlyph(n.SlideType,n,this);
			this.Ties.push(l);
		}
	}
	,Paint: function(cx,cy,canvas) {
		alphaTab.rendering.glyphs.BeatContainerGlyph.prototype.Paint.call(this,cx,cy,canvas);
		var i = 0;
		while(i < this._bendGlyphs.length) {
			var g = this._bendGlyphs[i];
			g.Paint(cx + this.X,cy + this.Y,canvas);
			++i;
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabBeatContainerGlyph
});
alphaTab.rendering.glyphs.TabBeatGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TabBeatGlyph"] = function() {
	alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.call(this);
};
alphaTab.rendering.glyphs.TabBeatGlyph.__name__ = ["alphaTab","rendering","glyphs","TabBeatGlyph"];
alphaTab.rendering.glyphs.TabBeatGlyph.__super__ = alphaTab.rendering.glyphs.BeatOnNoteGlyphBase;
alphaTab.rendering.glyphs.TabBeatGlyph.prototype = $extend(alphaTab.rendering.glyphs.BeatOnNoteGlyphBase.prototype,{
	DoLayout: function() {
		var tabRenderer = js.Boot.__cast(this.Renderer , alphaTab.rendering.TabBarRenderer);
		if(!this.Container.Beat.get_IsRest()) {
			this.NoteNumbers = new alphaTab.rendering.glyphs.TabNoteChordGlyph(0,0,this.Container.Beat.GraceType != 0);
			this.NoteNumbers.Beat = this.Container.Beat;
			this.NoteNumbers.BeamingHelper = this.BeamingHelper;
			var note = $iterator(this.Container.Beat.Notes)();
			while(note.hasNext()) {
				var note1 = note.next();
				this.CreateNoteGlyph(note1);
			}
			this.AddGlyph(this.NoteNumbers);
			if(this.Container.Beat.get_HasWhammyBar() && !this.NoteNumbers.BeatEffects.hasOwnProperty("Whammy")) {
				this.NoteNumbers.BeatEffects["Whammy"] = new alphaTab.rendering.glyphs.WhammyBarGlyph(this.Container.Beat,this.Container);
				var whammyValueHeight = 60.0 * this.get_Scale() / 24;
				var whammyHeight = this.Container.Beat.MaxWhammyPoint.Value * whammyValueHeight;
				this.Renderer.RegisterOverflowTop(whammyHeight);
			}
			if(this.Container.Beat.get_IsTremolo() && !this.NoteNumbers.BeatEffects.hasOwnProperty("Tremolo")) {
				var offset = 0;
				var speed = this.Container.Beat.TremoloSpeed;
				switch(speed) {
				case 8:
					offset = 0;
					break;
				case 16:
					offset = 5;
					break;
				case 32:
					offset = 10;
					break;
				default:
				}
				this.NoteNumbers.BeatEffects["Tremolo"] = new alphaTab.rendering.glyphs.TremoloPickingGlyph(5 * this.get_Scale(),offset * this.get_Scale(),this.Container.Beat.TremoloSpeed);
			}
			if(this.Container.Beat.Dots > 0 && tabRenderer.RenderRhythm) {
				this.AddGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_Scale()));
				var i = 0;
				while(i < this.Container.Beat.Dots) {
					var this1 = 1.5;
					this.AddGlyph(new alphaTab.rendering.glyphs.CircleGlyph(0,tabRenderer.get_LineOffset() * tabRenderer.Bar.Staff.Tuning.length + tabRenderer.RhythmHeight,this1 * this.get_Scale()));
					++i;
				}
			}
		} else {
			var line = 0;
			var offset1 = 0;
			var _g = this.Container.Beat.Duration;
			switch(_g) {
			case -4:
				line = 3;
				break;
			case -2:
				line = 3;
				break;
			case 1:
				line = 2;
				break;
			case 2:
				line = 3;
				break;
			case 4:
				line = 3;
				break;
			case 8:
				line = 2;
				offset1 = 5;
				break;
			case 16:
				line = 2;
				offset1 = 5;
				break;
			case 32:
				line = 3;
				break;
			case 64:
				line = 3;
				break;
			case 128:
				line = 3;
				break;
			case 256:
				line = 3;
				break;
			default:
			}
			var this2 = offset1;
			var y = tabRenderer.GetTabY(line,this2);
			this.RestGlyph = new alphaTab.rendering.glyphs.TabRestGlyph(0,y,tabRenderer.ShowRests,this.Container.Beat.Duration);
			this.RestGlyph.Beat = this.Container.Beat;
			this.RestGlyph.BeamingHelper = this.BeamingHelper;
			this.AddGlyph(this.RestGlyph);
			if(this.Container.Beat.Dots > 0 && tabRenderer.ShowRests) {
				this.AddGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,5 * this.get_Scale()));
				var i1 = 0;
				while(i1 < this.Container.Beat.Dots) {
					var this3 = 1.5;
					this.AddGlyph(new alphaTab.rendering.glyphs.CircleGlyph(0,y,this3 * this.get_Scale()));
					++i1;
				}
			}
		}
		if(this.Glyphs == null) {
			return;
		}
		var w = 0;
		var i2 = 0;
		var j = this.Glyphs.length;
		while(i2 < j) {
			var g = this.Glyphs[i2];
			g.X = w;
			g.Renderer = this.Renderer;
			g.DoLayout();
			w = w + g.Width;
			++i2;
		}
		this.Width = w;
	}
	,UpdateBeamingHelper: function() {
		if(!this.Container.Beat.get_IsRest()) {
			this.NoteNumbers.UpdateBeamingHelper(this.Container.X + this.X);
		} else {
			this.RestGlyph.UpdateBeamingHelper(this.Container.X + this.X);
		}
	}
	,CreateNoteGlyph: function(n) {
		var tr = js.Boot.__cast(this.Renderer , alphaTab.rendering.TabBarRenderer);
		var noteNumberGlyph = new alphaTab.rendering.glyphs.NoteNumberGlyph(0,0,n);
		var l = n.Beat.Voice.Bar.Staff.Tuning.length - n.String + 1;
		var this1 = l;
		noteNumberGlyph.Y = tr.GetTabY(this1,-2);
		noteNumberGlyph.Renderer = this.Renderer;
		noteNumberGlyph.DoLayout();
		this.NoteNumbers.AddNoteGlyph(noteNumberGlyph,n);
	}
	,__class__: alphaTab.rendering.glyphs.TabBeatGlyph
});
alphaTab.rendering.glyphs.TabBeatPreNotesGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TabBeatPreNotesGlyph"] = function() {
	alphaTab.rendering.glyphs.BeatGlyphBase.call(this);
};
alphaTab.rendering.glyphs.TabBeatPreNotesGlyph.__name__ = ["alphaTab","rendering","glyphs","TabBeatPreNotesGlyph"];
alphaTab.rendering.glyphs.TabBeatPreNotesGlyph.__super__ = alphaTab.rendering.glyphs.BeatGlyphBase;
alphaTab.rendering.glyphs.TabBeatPreNotesGlyph.prototype = $extend(alphaTab.rendering.glyphs.BeatGlyphBase.prototype,{
	DoLayout: function() {
		if(this.Container.Beat.BrushType != 0 && !this.Container.Beat.get_IsRest()) {
			this.AddGlyph(new alphaTab.rendering.glyphs.TabBrushGlyph(this.Container.Beat));
			this.AddGlyph(new alphaTab.rendering.glyphs.SpacingGlyph(0,0,4 * this.get_Scale()));
		}
		alphaTab.rendering.glyphs.BeatGlyphBase.prototype.DoLayout.call(this);
	}
	,__class__: alphaTab.rendering.glyphs.TabBeatPreNotesGlyph
});
alphaTab.rendering.glyphs.TabBrushGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TabBrushGlyph"] = function(beat) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._beat = null;
	this._beat = beat;
};
alphaTab.rendering.glyphs.TabBrushGlyph.__name__ = ["alphaTab","rendering","glyphs","TabBrushGlyph"];
alphaTab.rendering.glyphs.TabBrushGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.TabBrushGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		this.Width = 10 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		var tabBarRenderer = js.Boot.__cast(this.Renderer , alphaTab.rendering.TabBarRenderer);
		var res = this.Renderer.get_Resources();
		var startY = cy + this.X + (tabBarRenderer.GetNoteY(this._beat.get_MaxNote(),false) - res.TablatureFont.Size / 2);
		var endY = cy + this.Y + tabBarRenderer.GetNoteY(this._beat.get_MinNote(),false) + res.TablatureFont.Size / 2;
		var arrowX = system.Convert.ToInt32_Single(cx + this.X + this.Width / 2);
		var arrowSize = 8 * this.get_Scale();
		if(this._beat.BrushType != 0) {
			if(this._beat.BrushType == 1 || this._beat.BrushType == 2) {
				canvas.BeginPath();
				var this1 = arrowX;
				canvas.MoveTo(this1,startY);
				var this2 = arrowX;
				canvas.LineTo(this2,endY);
				canvas.Stroke();
			}
			if(this._beat.BrushType == 1 || this._beat.BrushType == 3) {
				canvas.BeginPath();
				var this3 = arrowX;
				canvas.MoveTo(this3,endY);
				canvas.LineTo(arrowX + arrowSize / 2,endY - arrowSize);
				canvas.LineTo(arrowX - arrowSize / 2,endY - arrowSize);
				canvas.ClosePath();
				canvas.Fill();
			} else {
				canvas.BeginPath();
				var this4 = arrowX;
				canvas.MoveTo(this4,startY);
				canvas.LineTo(arrowX + arrowSize / 2,startY + arrowSize);
				canvas.LineTo(arrowX - arrowSize / 2,startY + arrowSize);
				canvas.ClosePath();
				canvas.Fill();
			}
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabBrushGlyph
});
alphaTab.rendering.glyphs.TabClefGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TabClefGlyph"] = function(x,y) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
};
alphaTab.rendering.glyphs.TabClefGlyph.__name__ = ["alphaTab","rendering","glyphs","TabClefGlyph"];
alphaTab.rendering.glyphs.TabClefGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.TabClefGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		this.Width = 28 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		var strings = this.Renderer.Bar.Staff.Tuning.length;
		var this1 = 0.5;
		var correction = strings * this.get_Scale() * this1;
		var symbol = strings <= 4 ? 57454 : 57453;
		var scale;
		if(strings <= 4) {
			var this2 = 4.5;
			scale = strings / this2;
		} else {
			var this3 = 6.5;
			scale = strings / this3;
		}
		canvas.FillMusicFontSymbol(cx + this.X + 5 * this.get_Scale(),cy + this.Y - correction,scale * this.get_Scale(),symbol);
	}
	,__class__: alphaTab.rendering.glyphs.TabClefGlyph
});
alphaTab.rendering.glyphs.TabNoteChordGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TabNoteChordGlyph"] = function(x,y,isGrace) {
	alphaTab.rendering.glyphs.Glyph.call(this,x,y);
	this._notes = null;
	this._isGrace = false;
	this.Beat = null;
	this.BeamingHelper = null;
	this.MinStringNote = null;
	this.BeatEffects = null;
	this.NotesPerString = null;
	this._isGrace = isGrace;
	var this1 = [];
	this._notes = this1;
	var this2 = {}
	this.BeatEffects = this2;
	var this3 = {}
	this.NotesPerString = this3;
};
alphaTab.rendering.glyphs.TabNoteChordGlyph.__name__ = ["alphaTab","rendering","glyphs","TabNoteChordGlyph"];
alphaTab.rendering.glyphs.TabNoteChordGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.TabNoteChordGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	GetNoteX: function(note,onEnd) {
		if(onEnd == null) {
			onEnd = true;
		}
		if(this.NotesPerString.hasOwnProperty(note.String)) {
			var n = this.NotesPerString[note.String];
			var pos = this.X + n.X;
			if(onEnd) {
				pos = pos + n.Width;
			}
			return pos;
		}
		return 0;
	}
	,GetNoteY: function(note,aboveNote) {
		if(aboveNote == null) {
			aboveNote = false;
		}
		if(this.NotesPerString.hasOwnProperty(note.String)) {
			return this.Y + this.NotesPerString[note.String].Y + (aboveNote ? -this.NotesPerString[note.String].Height / 2 : 0);
		}
		return 0;
	}
	,DoLayout: function() {
		var w = 0;
		var i = 0;
		var j = this._notes.length;
		while(i < j) {
			var g = this._notes[i];
			g.Renderer = this.Renderer;
			g.DoLayout();
			if(g.Width > w) {
				w = g.Width;
			}
			++i;
		}
		var tabHeight = this.Renderer.get_Resources().TablatureFont.Size;
		var effectY = this.GetNoteY(this.MinStringNote,false) + tabHeight / 2;
		var effectSpacing = 7 * this.get_Scale();
		var this1 = this.BeatEffects;
		var beatEffectKey = $iterator(Object.keys(this1))();
		while(beatEffectKey.hasNext()) {
			var beatEffectKey1 = beatEffectKey.next();
			var g1 = this.BeatEffects[beatEffectKey1];
			g1.Y = g1.Y + effectY;
			g1.X = g1.X + this.Width / 2;
			g1.Renderer = this.Renderer;
			effectY = effectY + effectSpacing;
			g1.DoLayout();
		}
		this.Width = w;
	}
	,AddNoteGlyph: function(noteGlyph,note) {
		this._notes.push(noteGlyph);
		this.NotesPerString[note.String] = noteGlyph;
		if(this.MinStringNote == null || note.String < this.MinStringNote.String) {
			this.MinStringNote = note;
		}
	}
	,Paint: function(cx,cy,canvas) {
		cx = cx + this.X;
		cy = cy + this.Y;
		var res = this.Renderer.get_Resources();
		var oldBaseLine = canvas.get_TextBaseline();
		canvas.set_TextBaseline(1);
		canvas.set_Font(this._isGrace ? res.GraceFont : res.TablatureFont);
		var notes = this._notes;
		var w = this.Width;
		var g = $iterator(notes)();
		while(g.hasNext()) {
			var g1 = g.next();
			g1.Renderer = this.Renderer;
			g1.Width = w;
			g1.Paint(cx,cy,canvas);
		}
		canvas.set_TextBaseline(oldBaseLine);
		var this1 = this.BeatEffects;
		var beatEffectKey = $iterator(Object.keys(this1))();
		while(beatEffectKey.hasNext()) {
			var beatEffectKey1 = beatEffectKey.next();
			var g2 = this.BeatEffects[beatEffectKey1];
			g2.Paint(cx,cy,canvas);
		}
	}
	,UpdateBeamingHelper: function(cx) {
		if(this.BeamingHelper != null && this.BeamingHelper.IsPositionFrom("tab",this.Beat)) {
			this.BeamingHelper.RegisterBeatLineX("tab",this.Beat,cx + this.X + this.Width,cx + this.X);
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabNoteChordGlyph
});
alphaTab.rendering.glyphs.TabRestGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TabRestGlyph"] = function(x,y,isVisibleRest,duration) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,1,alphaTab.rendering.glyphs.ScoreRestGlyph.GetSymbol(duration));
	this._isVisibleRest = false;
	this._duration = -4;
	this.BeamingHelper = null;
	this._isVisibleRest = isVisibleRest;
	this._duration = duration;
};
alphaTab.rendering.glyphs.TabRestGlyph.__name__ = ["alphaTab","rendering","glyphs","TabRestGlyph"];
alphaTab.rendering.glyphs.TabRestGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.TabRestGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		if(this._isVisibleRest) {
			this.Width = alphaTab.rendering.glyphs.ScoreRestGlyph.GetSize(this._duration) * this.get_Scale();
		} else {
			this.Width = 10 * this.get_Scale();
		}
	}
	,UpdateBeamingHelper: function(cx) {
		if(this.BeamingHelper != null && this.BeamingHelper.IsPositionFrom("tab",this.Beat)) {
			this.BeamingHelper.RegisterBeatLineX("tab",this.Beat,cx + this.X + this.Width,cx + this.X);
		}
	}
	,Paint: function(cx,cy,canvas) {
		if(this._isVisibleRest) {
			alphaTab.rendering.glyphs.MusicFontGlyph.prototype.Paint.call(this,cx,cy,canvas);
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabRestGlyph
});
alphaTab.rendering.glyphs.TabSlideLineGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TabSlideLineGlyph"] = function(type,startNote,parent) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._startNote = null;
	this._type = 0;
	this._parent = null;
	this._type = type;
	this._startNote = startNote;
	this._parent = parent;
};
alphaTab.rendering.glyphs.TabSlideLineGlyph.__name__ = ["alphaTab","rendering","glyphs","TabSlideLineGlyph"];
alphaTab.rendering.glyphs.TabSlideLineGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.TabSlideLineGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		this.Width = 0;
	}
	,Paint: function(cx,cy,canvas) {
		var r = js.Boot.__cast(this.Renderer , alphaTab.rendering.TabBarRenderer);
		cx = cx + r.X;
		cy = cy + r.Y;
		var sizeX = 12 * this.get_Scale();
		var sizeY = 3 * this.get_Scale();
		var startX;
		var startY;
		var endX;
		var endY;
		var _g = this._type;
		switch(_g) {
		case 1:case 2:
			var startOffsetY;
			var endOffsetY;
			if(this._startNote.SlideTarget == null) {
				startOffsetY = 0;
				endOffsetY = 0;
			} else if(this._startNote.SlideTarget.Fret > this._startNote.Fret) {
				startOffsetY = sizeY;
				endOffsetY = sizeY * -1;
			} else {
				startOffsetY = sizeY * -1;
				endOffsetY = sizeY;
			}
			startX = cx + r.GetNoteX(this._startNote,true);
			startY = cy + r.GetNoteY(this._startNote,false) + startOffsetY;
			if(this._startNote.SlideTarget != null) {
				endX = cx + r.GetNoteX(this._startNote.SlideTarget,false);
				endY = cy + r.GetNoteY(this._startNote.SlideTarget,false) + endOffsetY;
			} else {
				endX = cx + this._parent.X;
				endY = startY;
			}
			break;
		case 3:
			endX = cx + r.GetNoteX(this._startNote,false);
			endY = cy + r.GetNoteY(this._startNote,false);
			startX = endX - sizeX;
			startY = cy + r.GetNoteY(this._startNote,false) + sizeY;
			break;
		case 4:
			endX = cx + r.GetNoteX(this._startNote,false);
			endY = cy + r.GetNoteY(this._startNote,false);
			startX = endX - sizeX;
			startY = cy + r.GetNoteY(this._startNote,false) - sizeY;
			break;
		case 5:
			startX = cx + r.GetNoteX(this._startNote,true);
			startY = cy + r.GetNoteY(this._startNote,false);
			endX = startX + sizeX;
			endY = cy + r.GetNoteY(this._startNote,false) - sizeY;
			break;
		case 6:
			startX = cx + r.GetNoteX(this._startNote,true);
			startY = cy + r.GetNoteY(this._startNote,false);
			endX = startX + sizeX;
			endY = cy + r.GetNoteY(this._startNote,false) + sizeY;
			break;
		default:
			return;
		}
		canvas.BeginPath();
		canvas.MoveTo(startX,startY);
		canvas.LineTo(endX,endY);
		canvas.Stroke();
	}
	,__class__: alphaTab.rendering.glyphs.TabSlideLineGlyph
});
alphaTab.rendering.glyphs.TabTieGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TabTieGlyph"] = function(startNote,endNote,forSlide,forEnd) {
	if(forEnd == null) {
		forEnd = false;
	}
	alphaTab.rendering.glyphs.TieGlyph.call(this,startNote.Beat,endNote.Beat,forEnd);
	this._startNote = null;
	this._endNote = null;
	this._forSlide = false;
	this._startNote = startNote;
	this._endNote = endNote;
	this._forSlide = forSlide;
};
alphaTab.rendering.glyphs.TabTieGlyph.__name__ = ["alphaTab","rendering","glyphs","TabTieGlyph"];
alphaTab.rendering.glyphs.TabTieGlyph.__super__ = alphaTab.rendering.glyphs.TieGlyph;
alphaTab.rendering.glyphs.TabTieGlyph.prototype = $extend(alphaTab.rendering.glyphs.TieGlyph.prototype,{
	get_Offset: function() {
		if(this._forSlide) {
			return 5 * this.get_Scale();
		} else {
			return 0;
		}
	}
	,GetBeamDirection: function(beat,noteRenderer) {
		if(this._startNote.String > 3) {
			return 1;
		} else {
			return 0;
		}
	}
	,GetStartY: function(noteRenderer,direction) {
		return noteRenderer.GetNoteY(this._startNote,false) - this.get_Offset();
	}
	,GetEndY: function(noteRenderer,direction) {
		return noteRenderer.GetNoteY(this._endNote,false) - this.get_Offset();
	}
	,GetStartX: function(noteRenderer) {
		return noteRenderer.GetNoteX(this._startNote,true);
	}
	,GetEndX: function(noteRenderer) {
		return noteRenderer.GetNoteX(this._endNote,false);
	}
	,__class__: alphaTab.rendering.glyphs.TabTieGlyph
});
alphaTab.rendering.glyphs.TabTimeSignatureGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TabTimeSignatureGlyph"] = function(x,y,numerator,denominator,isCommon) {
	alphaTab.rendering.glyphs.TimeSignatureGlyph.call(this,x,y,numerator,denominator,isCommon);
};
alphaTab.rendering.glyphs.TabTimeSignatureGlyph.__name__ = ["alphaTab","rendering","glyphs","TabTimeSignatureGlyph"];
alphaTab.rendering.glyphs.TabTimeSignatureGlyph.__super__ = alphaTab.rendering.glyphs.TimeSignatureGlyph;
alphaTab.rendering.glyphs.TabTimeSignatureGlyph.prototype = $extend(alphaTab.rendering.glyphs.TimeSignatureGlyph.prototype,{
	get_CommonY: function() {
		var renderer = js.Boot.__cast(this.Renderer , alphaTab.rendering.TabBarRenderer);
		return renderer.GetTabY(0,0);
	}
	,get_NumeratorY: function() {
		var renderer = js.Boot.__cast(this.Renderer , alphaTab.rendering.TabBarRenderer);
		var offset;
		if(renderer.Bar.Staff.Tuning.length <= 4) {
			var this1 = 4;
			offset = 1 / this1;
		} else {
			var this2 = 3;
			offset = 1 / this2;
		}
		return renderer.get_LineOffset() * renderer.Bar.Staff.Tuning.length * offset * this.get_Scale();
	}
	,get_DenominatorY: function() {
		var renderer = js.Boot.__cast(this.Renderer , alphaTab.rendering.TabBarRenderer);
		var offset;
		if(renderer.Bar.Staff.Tuning.length <= 4) {
			var this1 = 5;
			offset = 3 / this1;
		} else {
			var this2 = 5;
			offset = 3 / this2;
		}
		return renderer.get_LineOffset() * renderer.Bar.Staff.Tuning.length * offset * this.get_Scale();
	}
	,get_CommonScale: function() {
		return 1;
	}
	,get_NumberScale: function() {
		var renderer = js.Boot.__cast(this.Renderer , alphaTab.rendering.TabBarRenderer);
		if(renderer.Bar.Staff.Tuning.length <= 4) {
			return 0.75;
		} else {
			return 1;
		}
	}
	,__class__: alphaTab.rendering.glyphs.TabTimeSignatureGlyph
});
alphaTab.rendering.glyphs.TempoGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TempoGlyph"] = function(x,y,tempo) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
	this._tempo = 0;
	this._tempo = tempo;
};
alphaTab.rendering.glyphs.TempoGlyph.__name__ = ["alphaTab","rendering","glyphs","TempoGlyph"];
alphaTab.rendering.glyphs.TempoGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.TempoGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
		this.Height = 25 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		var res = this.Renderer.get_Resources();
		canvas.set_Font(res.MarkerFont);
		var this1 = 0.8;
		canvas.FillMusicFontSymbol(cx + this.X,cy + this.Y + this.Height * this1,0.75,57813);
		canvas.FillText("= " + this._tempo,cx + this.X + this.Height / 2,cy + this.Y + canvas.get_Font().Size / 2);
	}
	,__class__: alphaTab.rendering.glyphs.TempoGlyph
});
alphaTab.rendering.glyphs.TextGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TextGlyph"] = function(x,y,text,font,textAlign) {
	if(textAlign == null) {
		textAlign = 0;
	}
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
	this._lines = null;
	this.Font = null;
	this.TextAlign = 0;
	var this1 = system.Convert.ToUInt16(10);
	var this2 = this1;
	this._lines = system._CsString.CsString_Impl_.Split_CharArray(text,[this2]);
	this.Font = font;
	this.TextAlign = textAlign;
};
alphaTab.rendering.glyphs.TextGlyph.__name__ = ["alphaTab","rendering","glyphs","TextGlyph"];
alphaTab.rendering.glyphs.TextGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.TextGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
		this.Height = this.Font.Size * this._lines.length;
	}
	,Paint: function(cx,cy,canvas) {
		canvas.set_Font(this.Font);
		var old = canvas.get_TextAlign();
		var y = cy + this.Y;
		var line = HxOverrides.iter(this._lines);
		while(line.hasNext()) {
			var line1 = line.next();
			canvas.set_TextAlign(this.TextAlign);
			canvas.FillText(line1,cx + this.X,y);
			canvas.set_TextAlign(old);
			y = y + this.Font.Size;
		}
	}
	,__class__: alphaTab.rendering.glyphs.TextGlyph
});
alphaTab.rendering.glyphs.TremoloPickingGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TremoloPickingGlyph"] = function(x,y,duration) {
	alphaTab.rendering.glyphs.MusicFontGlyph.call(this,x,y,1,alphaTab.rendering.glyphs.TremoloPickingGlyph.GetSymbol(duration));
};
alphaTab.rendering.glyphs.TremoloPickingGlyph.__name__ = ["alphaTab","rendering","glyphs","TremoloPickingGlyph"];
alphaTab.rendering.glyphs.TremoloPickingGlyph.GetSymbol = function(duration) {
	switch(duration) {
	case 8:
		return 57888;
	case 16:
		return 57889;
	case 32:
		return 57890;
	default:
		return -1;
	}
};
alphaTab.rendering.glyphs.TremoloPickingGlyph.__super__ = alphaTab.rendering.glyphs.MusicFontGlyph;
alphaTab.rendering.glyphs.TremoloPickingGlyph.prototype = $extend(alphaTab.rendering.glyphs.MusicFontGlyph.prototype,{
	DoLayout: function() {
		this.Width = 12 * this.get_Scale();
	}
	,__class__: alphaTab.rendering.glyphs.TremoloPickingGlyph
});
alphaTab.rendering.glyphs.TrillGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TrillGlyph"] = function(x,y) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,x,y);
};
alphaTab.rendering.glyphs.TrillGlyph.__name__ = ["alphaTab","rendering","glyphs","TrillGlyph"];
alphaTab.rendering.glyphs.TrillGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.TrillGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
		this.Height = 20 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		var res = this.Renderer.get_Resources();
		canvas.set_Font(res.MarkerFont);
		var textw = canvas.MeasureText("tr");
		canvas.FillText("tr",cx + this.X,cy + this.Y + canvas.get_Font().Size / 2);
		var startX = textw + 3 * this.get_Scale();
		var endX = this.Width - startX;
		var waveScale = 1.2;
		var step = 11 * this.get_Scale() * waveScale;
		var loops = Math.max(1,(endX - startX) / step);
		var loopX = startX;
		var loopY = cy + this.Y + this.Height;
		var i = 0;
		while(i < loops) {
			canvas.FillMusicFontSymbol(cx + this.X + loopX,loopY,waveScale,60068);
			loopX = loopX + step;
			++i;
		}
	}
	,__class__: alphaTab.rendering.glyphs.TrillGlyph
});
alphaTab.rendering.glyphs.TripletFeelGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TripletFeelGlyph"] = function(tripletFeel) {
	alphaTab.rendering.glyphs.EffectGlyph.call(this,0,0);
	this._tripletFeel = 0;
	this._tripletFeel = tripletFeel;
};
alphaTab.rendering.glyphs.TripletFeelGlyph.__name__ = ["alphaTab","rendering","glyphs","TripletFeelGlyph"];
alphaTab.rendering.glyphs.TripletFeelGlyph.__super__ = alphaTab.rendering.glyphs.EffectGlyph;
alphaTab.rendering.glyphs.TripletFeelGlyph.prototype = $extend(alphaTab.rendering.glyphs.EffectGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.EffectGlyph.prototype.DoLayout.call(this);
		this.Height = 25 * this.get_Scale();
	}
	,Paint: function(cx,cy,canvas) {
		cx = cx + this.X;
		cy = cy + this.Y;
		var this1 = 0.75;
		var noteY = cy + this.Height * this1;
		canvas.set_Font(this.Renderer.get_Resources().EffectFont);
		var this2 = 0.3;
		canvas.FillText("(",cx,cy + this.Height * this2);
		var leftNoteX = cx + 10 * this.get_Scale();
		var rightNoteX = cx + 40 * this.get_Scale();
		var _g = this._tripletFeel;
		switch(_g) {
		case 0:
			this.RenderBarNote(leftNoteX,noteY,0.40,canvas,[0]);
			this.RenderBarNote(rightNoteX,noteY,0.40,canvas,[0]);
			break;
		case 1:
			this.RenderBarNote(leftNoteX,noteY,0.40,canvas,[0,0]);
			this.RenderBarNote(rightNoteX,noteY,0.40,canvas,[0,2]);
			this.RenderTriplet(rightNoteX,cy,canvas);
			break;
		case 2:
			this.RenderBarNote(leftNoteX,noteY,0.40,canvas,[0]);
			canvas.FillMusicFontSymbol(rightNoteX,noteY,0.40,57813);
			canvas.FillMusicFontSymbol(rightNoteX + 12 * this.get_Scale(),noteY,0.40,57815);
			this.RenderTriplet(rightNoteX,cy,canvas);
			break;
		case 3:
			this.RenderBarNote(leftNoteX,noteY,0.40,canvas,[0,0]);
			this.RenderBarNote(rightNoteX,noteY,0.40,canvas,[0,0,2]);
			canvas.FillCircle(rightNoteX + 9 * this.get_Scale(),noteY,this.get_Scale());
			break;
		case 4:
			this.RenderBarNote(leftNoteX,noteY,0.40,canvas,[0]);
			this.RenderBarNote(rightNoteX,noteY,0.40,canvas,[0,2]);
			canvas.FillCircle(rightNoteX + 9 * this.get_Scale(),noteY,this.get_Scale());
			break;
		case 5:
			this.RenderBarNote(leftNoteX,noteY,0.40,canvas,[0,0]);
			this.RenderBarNote(rightNoteX,noteY,0.40,canvas,[0,0,1]);
			canvas.FillCircle(rightNoteX + 12 * this.get_Scale() + 8 * this.get_Scale(),noteY,this.get_Scale());
			break;
		case 6:
			this.RenderBarNote(leftNoteX,noteY,0.40,canvas,[0]);
			this.RenderBarNote(rightNoteX,noteY,0.40,canvas,[0,1]);
			canvas.FillCircle(rightNoteX + 12 * this.get_Scale() + 8 * this.get_Scale(),noteY,this.get_Scale());
			break;
		default:
		}
		canvas.FillText("=",cx + 30 * this.get_Scale(),cy + 5 * this.get_Scale());
		var this3 = 0.3;
		canvas.FillText(")",cx + 65 * this.get_Scale(),cy + this.Height * this3);
	}
	,RenderBarNote: function(cx,noteY,noteScale,canvas,bars) {
		canvas.FillMusicFontSymbol(cx,noteY,noteScale,57813);
		var this1 = 2;
		var partialBarWidth = 12 / this1 * this.get_Scale();
		var i = 0;
		while(i < bars.length) {
			var _g = bars[i];
			switch(_g) {
			case 0:
				canvas.FillRect(cx + 4 * this.get_Scale(),noteY - 12 * this.get_Scale() + 3 * this.get_Scale() * i,12 * this.get_Scale(),2 * this.get_Scale());
				break;
			case 1:
				canvas.FillRect(cx + 4 * this.get_Scale(),noteY - 12 * this.get_Scale() + 3 * this.get_Scale() * i,partialBarWidth,2 * this.get_Scale());
				break;
			case 2:
				canvas.FillRect(cx + 4 * this.get_Scale() + partialBarWidth,noteY - 12 * this.get_Scale() + 3 * this.get_Scale() * i,partialBarWidth,2 * this.get_Scale());
				break;
			default:
			}
			++i;
		}
		canvas.FillMusicFontSymbol(cx + 12 * this.get_Scale(),noteY,noteScale,57813);
	}
	,RenderTriplet: function(cx,cy,canvas) {
		cy = cy + 2 * this.get_Scale();
		var font = this.Renderer.get_Resources().EffectFont;
		var this1 = 0.8;
		canvas.set_Font(new alphaTab.platform.model.Font(font.Family,font.Size * this1,font.Style));
		var rightX = cx + 12 * this.get_Scale() + 3 * this.get_Scale();
		canvas.BeginPath();
		canvas.MoveTo(cx,cy + 3 * this.get_Scale());
		canvas.LineTo(cx,cy);
		canvas.LineTo(cx + 5 * this.get_Scale(),cy);
		canvas.MoveTo(rightX + 5 * this.get_Scale(),cy + 3 * this.get_Scale());
		canvas.LineTo(rightX + 5 * this.get_Scale(),cy);
		canvas.LineTo(rightX,cy);
		canvas.Stroke();
		canvas.FillText("3",cx + 7 * this.get_Scale(),cy - 10 * this.get_Scale());
		canvas.set_Font(font);
	}
	,__class__: alphaTab.rendering.glyphs.TripletFeelGlyph
});
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType = {};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_ = $hx_exports["alphaTab"]["rendering"]["glyphs"]["_TripletFeelGlyph_BarType"]["TripletFeelGlyph_BarType_Impl_"] = {};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.__name__ = ["alphaTab","rendering","glyphs","_TripletFeelGlyph_BarType","TripletFeelGlyph_BarType_Impl_"];
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Full";
	case 1:
		return "PartialLeft";
	case 2:
		return "PartialRight";
	}
	return "";
};
alphaTab.rendering.glyphs.TuningGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["TuningGlyph"] = function(x,y,scale,resources,tuning) {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,x,y);
	this._scale = 0.0;
	this._resources = null;
	this.Height = 0.0;
	this._scale = scale;
	this._resources = resources;
	this.CreateGlyphs(tuning);
};
alphaTab.rendering.glyphs.TuningGlyph.__name__ = ["alphaTab","rendering","glyphs","TuningGlyph"];
alphaTab.rendering.glyphs.TuningGlyph.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.TuningGlyph.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	CreateGlyphs: function(tuning) {
		this.AddGlyph(new alphaTab.rendering.glyphs.TextGlyph(0,0,tuning.Name,this._resources.EffectFont,0));
		this.Height = this.Height + 15 * this._scale;
		if(!tuning.IsStandard) {
			var stringsPerColumn = system.Convert.ToInt32_Double(Math.ceil(tuning.Tunings.length / 2.0));
			var currentX = 0;
			var currentY = this.Height;
			var i = 0;
			var j = tuning.Tunings.length;
			while(i < j) {
				var str = "(" + (i + 1) + ") = " + alphaTab.model.Tuning.GetTextForTuning(tuning.Tunings[i],false);
				this.AddGlyph(new alphaTab.rendering.glyphs.TextGlyph(currentX,currentY,str,this._resources.EffectFont,0));
				currentY = currentY + this.Height;
				if(i == stringsPerColumn - 1) {
					currentY = this.Height;
					currentX = currentX + 43 * this._scale;
				}
				++i;
			}
			this.Height = this.Height + stringsPerColumn * (15 * this._scale);
		}
	}
	,__class__: alphaTab.rendering.glyphs.TuningGlyph
});
alphaTab.rendering.glyphs.VibratoGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["VibratoGlyph"] = function(x,y,scale) {
	if(scale == null) {
		scale = 1.2;
	}
	alphaTab.rendering.glyphs.GroupedEffectGlyph.call(this,3);
	this._scale = 0.0;
	this._scale = scale;
	this.X = x;
	this.Y = y;
};
alphaTab.rendering.glyphs.VibratoGlyph.__name__ = ["alphaTab","rendering","glyphs","VibratoGlyph"];
alphaTab.rendering.glyphs.VibratoGlyph.__super__ = alphaTab.rendering.glyphs.GroupedEffectGlyph;
alphaTab.rendering.glyphs.VibratoGlyph.prototype = $extend(alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.GroupedEffectGlyph.prototype.DoLayout.call(this);
		this.Height = 10 * this.get_Scale() * this._scale;
	}
	,PaintGrouped: function(cx,cy,endX,canvas) {
		var startX = cx + this.X;
		var width = endX - startX;
		var step = 9 * this.get_Scale() * this._scale;
		var loops = system.Convert.ToInt32_Single(Math.max(1,width / step));
		var h = this.Height;
		var loopX = 0;
		var i = 0;
		while(i < loops) {
			canvas.FillMusicFontSymbol(cx + this.X + loopX,cy + this.Y + h,this._scale,60068);
			loopX = loopX + step;
			++i;
		}
	}
	,__class__: alphaTab.rendering.glyphs.VibratoGlyph
});
alphaTab.rendering.glyphs.VoiceContainerGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["VoiceContainerGlyph"] = function(x,y,voice) {
	alphaTab.rendering.glyphs.GlyphGroup.call(this,x,y);
	this.BeatGlyphs = null;
	this.Voice = null;
	this.MinWidth = 0.0;
	this.Voice = voice;
	var this1 = [];
	this.BeatGlyphs = this1;
};
alphaTab.rendering.glyphs.VoiceContainerGlyph.__name__ = ["alphaTab","rendering","glyphs","VoiceContainerGlyph"];
alphaTab.rendering.glyphs.VoiceContainerGlyph.__super__ = alphaTab.rendering.glyphs.GlyphGroup;
alphaTab.rendering.glyphs.VoiceContainerGlyph.prototype = $extend(alphaTab.rendering.glyphs.GlyphGroup.prototype,{
	ScaleToWidth: function(width) {
		var force = this.Renderer.LayoutingInfo.SpaceToForce(width);
		this.ScaleToForce(force);
	}
	,ScaleToForce: function(force) {
		this.Width = this.Renderer.LayoutingInfo.CalculateVoiceWidth(force);
		var positions = this.Renderer.LayoutingInfo.BuildOnTimePositions(force);
		var beatGlyphs = this.BeatGlyphs;
		var i = 0;
		var j = beatGlyphs.length;
		while(i < j) {
			var currentBeatGlyph = beatGlyphs[i];
			var time = currentBeatGlyph.Beat.get_AbsoluteStart();
			currentBeatGlyph.X = positions[time] - currentBeatGlyph.OnTimeX;
			if(i > 0) {
				var beatWidth = currentBeatGlyph.X - beatGlyphs[i - 1].X;
				beatGlyphs[i - 1].ScaleToWidth(beatWidth);
			}
			if(i == j - 1) {
				var beatWidth1 = this.Width - beatGlyphs[beatGlyphs.length - 1].X;
				currentBeatGlyph.ScaleToWidth(beatWidth1);
			}
			++i;
		}
	}
	,RegisterLayoutingInfo: function(info) {
		info.UpdateVoiceSize(this.Width);
		var beatGlyphs = this.BeatGlyphs;
		var b = $iterator(beatGlyphs)();
		while(b.hasNext()) {
			var b1 = b.next();
			b1.RegisterLayoutingInfo(info);
		}
	}
	,ApplyLayoutingInfo: function(info) {
		var beatGlyphs = this.BeatGlyphs;
		var b = $iterator(beatGlyphs)();
		while(b.hasNext()) {
			var b1 = b.next();
			b1.ApplyLayoutingInfo(info);
		}
		this.ScaleToForce(Math.max(this.Renderer.get_Settings().StretchForce,info.MinStretchForce));
	}
	,AddGlyph: function(g) {
		g.X = this.BeatGlyphs.length == 0 ? 0 : this.BeatGlyphs[this.BeatGlyphs.length - 1].X + this.BeatGlyphs[this.BeatGlyphs.length - 1].Width;
		g.Renderer = this.Renderer;
		g.DoLayout();
		this.BeatGlyphs.push(js.Boot.__cast(g , alphaTab.rendering.glyphs.BeatContainerGlyph));
		this.Width = g.X + g.Width;
	}
	,DoLayout: function() {
		this.MinWidth = this.Width;
	}
	,Paint: function(cx,cy,canvas) {
		canvas.set_Color(this.Voice.Index == 0 ? this.Renderer.ScoreRenderer.RenderingResources.MainGlyphColor : this.Renderer.ScoreRenderer.RenderingResources.SecondaryGlyphColor);
		var i = 0;
		var j = this.BeatGlyphs.length;
		while(i < j) {
			this.BeatGlyphs[i].Paint(cx + this.X,cy + this.Y,canvas);
			++i;
		}
	}
	,__class__: alphaTab.rendering.glyphs.VoiceContainerGlyph
});
alphaTab.rendering.glyphs.WhammyBarGlyph = $hx_exports["alphaTab"]["rendering"]["glyphs"]["WhammyBarGlyph"] = function(beat,parent) {
	alphaTab.rendering.glyphs.Glyph.call(this,0,0);
	this._beat = null;
	this._parent = null;
	this._beat = beat;
	this._parent = parent;
};
alphaTab.rendering.glyphs.WhammyBarGlyph.__name__ = ["alphaTab","rendering","glyphs","WhammyBarGlyph"];
alphaTab.rendering.glyphs.WhammyBarGlyph.__super__ = alphaTab.rendering.glyphs.Glyph;
alphaTab.rendering.glyphs.WhammyBarGlyph.prototype = $extend(alphaTab.rendering.glyphs.Glyph.prototype,{
	DoLayout: function() {
		alphaTab.rendering.glyphs.Glyph.prototype.DoLayout.call(this);
		var minY = 0;
		var maxY = 0;
		var sizeY = 60.0 * this.get_Scale();
		if(this._beat.WhammyBarPoints.length >= 2) {
			var dy = sizeY / 24;
			var i = 0;
			var j = this._beat.WhammyBarPoints.length;
			while(i < j) {
				var pt = this._beat.WhammyBarPoints[i];
				var ptY = 0 - dy * pt.Value;
				if(ptY > maxY) {
					maxY = ptY;
				}
				if(ptY < minY) {
					minY = ptY;
				}
				++i;
			}
		}
		var tabBarRenderer = js.Boot.__cast(this.Renderer , alphaTab.rendering.TabBarRenderer);
		var staff = this.Renderer.Bar.Staff;
		var tabTop = tabBarRenderer.GetTabY(0,-2);
		var this1 = staff.Tuning.length;
		var tabBottom = tabBarRenderer.GetTabY(this1,-2);
		var absMinY = minY + tabTop;
		var absMaxY = maxY - tabBottom;
		if(absMinY < 0) {
			tabBarRenderer.RegisterOverflowTop(Math.abs(absMinY));
		}
		if(absMaxY > 0) {
			tabBarRenderer.RegisterOverflowBottom(Math.abs(absMaxY));
		}
	}
	,Paint: function(cx,cy,canvas) {
		var tabBarRenderer = js.Boot.__cast(this.Renderer , alphaTab.rendering.TabBarRenderer);
		var res = this.Renderer.get_Resources();
		var startX = cx + this.X + this._parent.OnNotes.Width / 2;
		var endX = this._beat.NextBeat == null || this._beat.Voice != this._beat.NextBeat.Voice ? cx + this.X + this._parent.Width : cx + tabBarRenderer.GetBeatX(this._beat.NextBeat,0);
		var startY = cy;
		var sizeY = 60.0 * this.get_Scale();
		var old = canvas.get_TextAlign();
		canvas.set_TextAlign(1);
		if(this._beat.WhammyBarPoints.length >= 2) {
			var dx = (endX - startX) / 60;
			var dy = sizeY / 24;
			canvas.BeginPath();
			var i = 0;
			var j = this._beat.WhammyBarPoints.length - 1;
			while(i < j) {
				var pt1 = this._beat.WhammyBarPoints[i];
				var pt2 = this._beat.WhammyBarPoints[i + 1];
				if(pt1.Value == pt2.Value && i == this._beat.WhammyBarPoints.length - 2) {
					++i;
					continue;
				}
				var pt1X = startX + dx * pt1.Offset;
				var pt1Y = startY - dy * pt1.Value;
				var pt2X = startX + dx * pt2.Offset;
				var pt2Y = startY - dy * pt2.Value;
				canvas.MoveTo(pt1X,pt1Y);
				canvas.LineTo(pt2X,pt2Y);
				if(pt2.Value != 0) {
					var dv = pt2.Value;
					var s = "";
					if(dv >= 4 || dv <= -4) {
						var steps = dv / 4 | 0;
						s = s + Std.string(steps);
						dv = dv - steps * 4;
					}
					if(dv > 0) {
						s = s + alphaTab.rendering.glyphs.BendGlyph.GetFractionSign(dv);
					}
					if(s != "") {
						canvas.set_Font(res.GraceFont);
						var sy = pt2Y;
						if(pt2Y < pt1Y) {
							sy = sy - canvas.get_Font().Size;
						} else {
							sy = sy + 3 * this.get_Scale();
						}
						var sx = pt2X;
						canvas.FillText(s,sx,sy);
					}
				}
				++i;
			}
			canvas.Stroke();
		}
		canvas.set_TextAlign(old);
	}
	,__class__: alphaTab.rendering.glyphs.WhammyBarGlyph
});
alphaTab.rendering.layout._HeaderFooterElements = {};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_ = $hx_exports["alphaTab"]["rendering"]["layout"]["_HeaderFooterElements"]["HeaderFooterElements_Impl_"] = {};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.__name__ = ["alphaTab","rendering","layout","_HeaderFooterElements","HeaderFooterElements_Impl_"];
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Title";
	case 2:
		return "SubTitle";
	case 4:
		return "Artist";
	case 8:
		return "Album";
	case 16:
		return "Words";
	case 32:
		return "Music";
	case 64:
		return "WordsAndMusic";
	case 128:
		return "Copyright";
	case 256:
		return "PageNumber";
	case 511:
		return "All";
	}
	return "";
};
alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo = $hx_exports["alphaTab"]["rendering"]["layout"]["HorizontalScreenLayoutPartialInfo"] = function() {
	this.Width = 0.0;
	this.MasterBars = null;
	var this1 = [];
	this.MasterBars = this1;
};
alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo.__name__ = ["alphaTab","rendering","layout","HorizontalScreenLayoutPartialInfo"];
alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo.prototype = {
	__class__: alphaTab.rendering.layout.HorizontalScreenLayoutPartialInfo
};
alphaTab.rendering.staves = {};
alphaTab.rendering.staves.BarLayoutingInfo = $hx_exports["alphaTab"]["rendering"]["staves"]["BarLayoutingInfo"] = function() {
	this._timeSortedSprings = null;
	this._xMin = 0.0;
	this._onTimePositionsForce = 0.0;
	this._onTimePositions = null;
	this.Version = 0;
	this.PreBeatSizes = null;
	this.OnBeatSizes = null;
	this.PreBeatSize = 0.0;
	this.PostBeatSize = 0.0;
	this.VoiceSize = 0.0;
	this.MinStretchForce = 0.0;
	this.TotalSpringConstant = 0.0;
	this.Springs = null;
	this.SmallestDuration = 0;
	var this1 = {}
	this.PreBeatSizes = this1;
	var this2 = {}
	this.OnBeatSizes = this2;
	this.VoiceSize = 0;
	var this3 = {}
	this.Springs = this3;
	this.Version = 0;
};
alphaTab.rendering.staves.BarLayoutingInfo.__name__ = ["alphaTab","rendering","staves","BarLayoutingInfo"];
alphaTab.rendering.staves.BarLayoutingInfo.prototype = {
	UpdateVoiceSize: function(size) {
		if(size > this.VoiceSize) {
			this.VoiceSize = size;
			this.Version++;
		}
	}
	,SetPreBeatSize: function(beat,size) {
		if(!this.PreBeatSizes.hasOwnProperty(beat.Index) || this.PreBeatSizes[beat.Index] < size) {
			this.PreBeatSizes[beat.Index] = size;
			this.Version++;
		}
	}
	,GetPreBeatSize: function(beat) {
		if(this.PreBeatSizes.hasOwnProperty(beat.Index)) {
			return this.PreBeatSizes[beat.Index];
		}
		return 0;
	}
	,SetOnBeatSize: function(beat,size) {
		if(!this.OnBeatSizes.hasOwnProperty(beat.Index) || this.OnBeatSizes[beat.Index] < size) {
			this.OnBeatSizes[beat.Index] = size;
			this.Version++;
		}
	}
	,GetOnBeatSize: function(beat) {
		if(this.OnBeatSizes.hasOwnProperty(beat.Index)) {
			return this.OnBeatSizes[beat.Index];
		}
		return 0;
	}
	,UpdateMinStretchForce: function(force) {
		if(this.MinStretchForce < force) {
			this.MinStretchForce = force;
			this.Version++;
		}
	}
	,AddSpring: function(start,duration,springSize,preSpringSize) {
		this.Version++;
		var spring;
		if(!this.Springs.hasOwnProperty(start)) {
			spring = new alphaTab.rendering.staves.Spring();
			spring.TimePosition = start;
			spring.SmallestDuration = duration;
			spring.LongestDuration = duration;
			spring.SpringWidth = springSize;
			spring.PreSpringWidth = preSpringSize;
			this.Springs[start] = spring;
		} else {
			spring = this.Springs[start];
			if(spring.SpringWidth < springSize) {
				spring.SpringWidth = springSize;
			}
			if(spring.PreSpringWidth < preSpringSize) {
				spring.PreSpringWidth = preSpringSize;
			}
			if(duration < spring.SmallestDuration) {
				spring.SmallestDuration = duration;
			}
			if(duration > spring.LongestDuration) {
				spring.LongestDuration = duration;
			}
		}
		if(duration < this.SmallestDuration) {
			this.SmallestDuration = duration;
		}
		return spring;
	}
	,AddBeatSpring: function(beat,beatSize,preBeatSize) {
		return this.AddSpring(beat.get_AbsoluteStart(),beat.CalculateDuration(),beatSize,preBeatSize);
	}
	,Finish: function() {
		this.CalculateSpringConstants();
		this.Version++;
	}
	,CalculateSpringConstants: function() {
		var this1 = [];
		var sortedSprings = this._timeSortedSprings = this1;
		this._xMin = 0;
		var springs = this.Springs;
		var time = $iterator(Object.keys(springs))();
		while(time.hasNext()) {
			var time1 = time.next();
			var spring = springs[time1];
			sortedSprings.push(spring);
			if(spring.SpringWidth < this._xMin) {
				this._xMin = spring.SpringWidth;
			}
		}
		var comparison = function(a,b) {
			if(a.TimePosition < b.TimePosition) {
				return -1;
			}
			if(a.TimePosition > b.TimePosition) {
				return 1;
			}
			return 0;
		};
		sortedSprings.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
		var totalSpringConstant = 0;
		var i = 0;
		while(i < sortedSprings.length) {
			var currentSpring = sortedSprings[i];
			var duration;
			if(i == sortedSprings.length - 1) {
				duration = currentSpring.LongestDuration;
			} else {
				var nextSpring = sortedSprings[i + 1];
				duration = nextSpring.TimePosition - currentSpring.TimePosition;
			}
			var this2 = duration;
			currentSpring.SpringConstant = this.CalculateSpringConstant(currentSpring,this2);
			totalSpringConstant = totalSpringConstant + 1 / currentSpring.SpringConstant;
			++i;
		}
		this.TotalSpringConstant = 1 / totalSpringConstant;
		var i1 = 0;
		while(i1 < sortedSprings.length) {
			var force = sortedSprings[i1].SpringWidth * sortedSprings[i1].SpringConstant;
			this.UpdateMinStretchForce(force);
			++i1;
		}
	}
	,CalculateSpringConstant: function(spring,duration) {
		var this1 = spring.SmallestDuration;
		var minDuration = this1;
		if(spring.SmallestDuration == 0) {
			minDuration = duration;
		}
		var this2 = 0.6;
		var phi = 1 + this2 * Math.log2(duration / js.Boot.__cast(30 , Float));
		return minDuration / duration / (phi * 10);
	}
	,SpaceToForce: function(space) {
		return space * this.TotalSpringConstant;
	}
	,CalculateVoiceWidth: function(force) {
		return this.CalculateWidth(force,this.TotalSpringConstant);
	}
	,CalculateWidth: function(force,springConstant) {
		return force / springConstant;
	}
	,BuildOnTimePositions: function(force) {
		if(Math.abs(this._onTimePositionsForce - force) < 0.00001 && this._onTimePositions != null) {
			return this._onTimePositions;
		}
		this._onTimePositionsForce = force;
		var this1 = {}
		var positions = this._onTimePositions = this1;
		var sortedSprings = this._timeSortedSprings;
		if(sortedSprings.length == 0) {
			return positions;
		}
		var springX = sortedSprings[0].PreSpringWidth;
		var i = 0;
		while(i < sortedSprings.length) {
			positions[sortedSprings[i].TimePosition] = springX;
			springX = springX + this.CalculateWidth(force,sortedSprings[i].SpringConstant);
			++i;
		}
		return positions;
	}
	,__class__: alphaTab.rendering.staves.BarLayoutingInfo
};
alphaTab.rendering.staves.MasterBarsRenderers = $hx_exports["alphaTab"]["rendering"]["staves"]["MasterBarsRenderers"] = function() {
	this.Width = 0.0;
	this.IsLinkedToPrevious = false;
	this.MasterBar = null;
	this.Renderers = null;
	this.LayoutingInfo = null;
	var this1 = [];
	this.Renderers = this1;
};
alphaTab.rendering.staves.MasterBarsRenderers.__name__ = ["alphaTab","rendering","staves","MasterBarsRenderers"];
alphaTab.rendering.staves.MasterBarsRenderers.prototype = {
	__class__: alphaTab.rendering.staves.MasterBarsRenderers
};
alphaTab.rendering.staves.Spring = $hx_exports["alphaTab"]["rendering"]["staves"]["Spring"] = function() {
};
alphaTab.rendering.staves.Spring.__name__ = ["alphaTab","rendering","staves","Spring"];
alphaTab.rendering.staves.Spring.prototype = {
	__class__: alphaTab.rendering.staves.Spring
};
alphaTab.rendering.staves.Staff = $hx_exports["alphaTab"]["rendering"]["staves"]["Staff"] = function(trackIndex,staff,factory) {
	this._factory = null;
	this.StaveTrackGroup = null;
	this.StaveGroup = null;
	this.BarRenderers = null;
	this.X = 0.0;
	this.Y = 0.0;
	this.Height = 0.0;
	this.Index = 0;
	this.StaffIndex = 0;
	this.TrackIndex = 0;
	this.ModelStaff = null;
	this.StaveTop = 0.0;
	this.TopSpacing = 0.0;
	this.BottomSpacing = 0.0;
	this.StaveBottom = 0.0;
	this.IsFirstInAccolade = false;
	this.IsLastInAccolade = false;
	var this1 = [];
	this.BarRenderers = this1;
	this.TrackIndex = trackIndex;
	this.ModelStaff = staff;
	this._factory = factory;
	this.TopSpacing = 15;
	this.BottomSpacing = 5;
	this.StaveTop = 0;
	this.StaveBottom = 0;
};
alphaTab.rendering.staves.Staff.__name__ = ["alphaTab","rendering","staves","Staff"];
alphaTab.rendering.staves.Staff.prototype = {
	get_StaveId: function() {
		return this._factory.get_StaffId();
	}
	,get_IsInAccolade: function() {
		return this._factory.IsInAccolade;
	}
	,RegisterStaffTop: function(offset) {
		this.StaveTop = offset;
	}
	,RegisterStaffBottom: function(offset) {
		this.StaveBottom = offset;
	}
	,AddBarRenderer: function(renderer) {
		renderer.Staff = this;
		renderer.Index = this.BarRenderers.length;
		renderer.ReLayout();
		this.BarRenderers.push(renderer);
		this.StaveGroup.Layout.RegisterBarRenderer(this.get_StaveId(),renderer);
	}
	,AddBar: function(bar,layoutingInfo) {
		var renderer;
		if(bar == null) {
			renderer = new alphaTab.rendering.BarRendererBase(this.StaveGroup.Layout.Renderer,bar);
		} else {
			renderer = this._factory.Create(this.StaveGroup.Layout.Renderer,bar,this.StaveGroup.Layout.Renderer.Settings.Staves);
		}
		renderer.Staff = this;
		renderer.Index = this.BarRenderers.length;
		renderer.LayoutingInfo = layoutingInfo;
		renderer.DoLayout();
		renderer.RegisterLayoutingInfo();
		this.BarRenderers.push(renderer);
		if(bar != null) {
			this.StaveGroup.Layout.RegisterBarRenderer(this.get_StaveId(),renderer);
		}
	}
	,RevertLastBar: function() {
		var lastBar = this.BarRenderers[this.BarRenderers.length - 1];
		var index = this.BarRenderers.length - 1;
		if(index != -1) {
			this.BarRenderers.splice(index,1);
		}
		this.StaveGroup.Layout.UnregisterBarRenderer(this.get_StaveId(),lastBar);
	}
	,ScaleToWidth: function(width) {
		var difference = width - this.StaveGroup.Width;
		var spacePerBar = difference / this.BarRenderers.length;
		var i = 0;
		var j = this.BarRenderers.length;
		while(i < j) {
			this.BarRenderers[i].ScaleToWidth(this.BarRenderers[i].Width + spacePerBar);
			++i;
		}
	}
	,get_TopOverflow: function() {
		var m = 0;
		var i = 0;
		var j = this.BarRenderers.length;
		while(i < j) {
			var r = this.BarRenderers[i];
			if(r.TopOverflow > m) {
				m = r.TopOverflow;
			}
			++i;
		}
		return m;
	}
	,get_BottomOverflow: function() {
		var m = 0;
		var i = 0;
		var j = this.BarRenderers.length;
		while(i < j) {
			var r = this.BarRenderers[i];
			if(r.BottomOverflow > m) {
				m = r.BottomOverflow;
			}
			++i;
		}
		return m;
	}
	,FinalizeStave: function() {
		var x = 0;
		this.Height = 0;
		var topOverflow = this.get_TopOverflow();
		var bottomOverflow = this.get_BottomOverflow();
		var i = 0;
		while(i < this.BarRenderers.length) {
			this.BarRenderers[i].X = x;
			this.BarRenderers[i].Y = this.TopSpacing + topOverflow;
			this.Height = Math.max(this.Height,this.BarRenderers[i].Height);
			this.BarRenderers[i].FinalizeRenderer();
			x = x + this.BarRenderers[i].Width;
			++i;
		}
		if(this.Height > 0) {
			this.Height = this.Height + (this.TopSpacing + topOverflow + bottomOverflow + this.BottomSpacing);
		}
	}
	,Paint: function(cx,cy,canvas,startIndex,count) {
		if(this.Height == 0 || count == 0) {
			return;
		}
		var i = startIndex;
		var j = Math.min(startIndex + count,this.BarRenderers.length);
		while(i < j) {
			this.BarRenderers[i].Paint(cx + this.X,cy + this.Y,canvas);
			++i;
		}
	}
	,__class__: alphaTab.rendering.staves.Staff
};
alphaTab.rendering.staves.StaveGroup = $hx_exports["alphaTab"]["rendering"]["staves"]["StaveGroup"] = function() {
	this._allStaves = null;
	this._firstStaffInAccolade = null;
	this._lastStaffInAccolade = null;
	this.X = 0.0;
	this.Y = 0.0;
	this.Index = 0;
	this._accoladeSpacingCalculated = false;
	this.AccoladeSpacing = 0.0;
	this.IsFull = false;
	this.Width = 0.0;
	this.IsLast = false;
	this.MasterBarsRenderers = null;
	this.Staves = null;
	this.Layout = null;
	var this1 = [];
	this.MasterBarsRenderers = this1;
	var this2 = [];
	this.Staves = this2;
	var this3 = [];
	this._allStaves = this3;
	this.Width = 0;
	this.Index = 0;
	this._accoladeSpacingCalculated = false;
	this.AccoladeSpacing = 0;
};
alphaTab.rendering.staves.StaveGroup.__name__ = ["alphaTab","rendering","staves","StaveGroup"];
alphaTab.rendering.staves.StaveGroup.prototype = {
	get_FirstBarIndex: function() {
		return this.MasterBarsRenderers[0].MasterBar.Index;
	}
	,get_LastBarIndex: function() {
		return this.MasterBarsRenderers[this.MasterBarsRenderers.length - 1].MasterBar.Index;
	}
	,AddMasterBarRenderers: function(tracks,renderers) {
		if(tracks.length == 0) {
			return null;
		}
		this.MasterBarsRenderers.push(renderers);
		this.CalculateAccoladeSpacing(tracks);
		renderers.LayoutingInfo.PreBeatSize = 0;
		var src = 0;
		var i = 0;
		var j = this.Staves.length;
		while(i < j) {
			var g = this.Staves[i];
			var k = 0;
			var l = g.Staves.length;
			while(k < l) {
				var s = g.Staves[k];
				var renderer = renderers.Renderers[src++];
				s.AddBarRenderer(renderer);
				++k;
			}
			++i;
		}
		this.UpdateWidth();
		return renderers;
	}
	,AddBars: function(tracks,barIndex) {
		if(tracks.length == 0) {
			return null;
		}
		var result = new alphaTab.rendering.staves.MasterBarsRenderers();
		result.LayoutingInfo = new alphaTab.rendering.staves.BarLayoutingInfo();
		result.MasterBar = tracks[0].Score.MasterBars[barIndex];
		this.MasterBarsRenderers.push(result);
		this.CalculateAccoladeSpacing(tracks);
		var barLayoutingInfo = result.LayoutingInfo;
		var g = $iterator(this.Staves)();
		while(g.hasNext()) {
			var g1 = g.next();
			var s = $iterator(g1.Staves)();
			while(s.hasNext()) {
				var s1 = s.next();
				var bar = g1.Track.Staves[s1.ModelStaff.Index].Bars[barIndex];
				s1.AddBar(bar,barLayoutingInfo);
				var renderer = s1.BarRenderers[s1.BarRenderers.length - 1];
				result.Renderers.push(renderer);
				if(renderer.IsLinkedToPrevious) {
					result.IsLinkedToPrevious = true;
				}
			}
		}
		barLayoutingInfo.Finish();
		result.Width = this.UpdateWidth();
		return result;
	}
	,RevertLastBar: function() {
		if(this.MasterBarsRenderers.length > 1) {
			var index = this.MasterBarsRenderers.length - 1;
			if(index != -1) {
				this.MasterBarsRenderers.splice(index,1);
			}
			var w = 0;
			var i = 0;
			var j = this._allStaves.length;
			while(i < j) {
				var s = this._allStaves[i];
				w = Math.max(w,s.BarRenderers[s.BarRenderers.length - 1].Width);
				s.RevertLastBar();
				++i;
			}
			this.Width = this.Width - w;
		}
	}
	,UpdateWidth: function() {
		var realWidth = 0;
		var i = 0;
		var j = this._allStaves.length;
		while(i < j) {
			var s = this._allStaves[i];
			s.BarRenderers[s.BarRenderers.length - 1].ApplyLayoutingInfo();
			if(s.BarRenderers[s.BarRenderers.length - 1].Width > realWidth) {
				realWidth = s.BarRenderers[s.BarRenderers.length - 1].Width;
			}
			++i;
		}
		this.Width = this.Width + realWidth;
		return realWidth;
	}
	,CalculateAccoladeSpacing: function(tracks) {
		if(!this._accoladeSpacingCalculated && this.Index == 0) {
			this._accoladeSpacingCalculated = true;
			if(this.Layout.Renderer.Settings.Layout.Get("hideTrackNames",false)) {
				this.AccoladeSpacing = 0;
			} else {
				var canvas = this.Layout.Renderer.Canvas;
				var res = this.Layout.Renderer.RenderingResources.EffectFont;
				canvas.set_Font(res);
				var t = HxOverrides.iter(tracks);
				while(t.hasNext()) {
					var t1 = t.next();
					this.AccoladeSpacing = Math.max(this.AccoladeSpacing,canvas.MeasureText(t1.ShortName));
				}
				this.AccoladeSpacing = this.AccoladeSpacing + 2 * 10;
				this.Width = this.Width + this.AccoladeSpacing;
			}
		}
	}
	,GetStaveTrackGroup: function(track) {
		var i = 0;
		var j = this.Staves.length;
		while(i < j) {
			var g = this.Staves[i];
			if(g.Track == track) {
				return g;
			}
			++i;
		}
		return null;
	}
	,AddStaff: function(track,staff) {
		var group = this.GetStaveTrackGroup(track);
		if(group == null) {
			group = new alphaTab.rendering.staves.StaveTrackGroup(this,track);
			this.Staves.push(group);
		}
		staff.StaveTrackGroup = group;
		staff.StaveGroup = this;
		staff.Index = this._allStaves.length;
		this._allStaves.push(staff);
		group.Staves.push(staff);
		if(staff.get_IsInAccolade()) {
			if(this._firstStaffInAccolade == null) {
				this._firstStaffInAccolade = staff;
				staff.IsFirstInAccolade = true;
			}
			if(group.FirstStaffInAccolade == null) {
				group.FirstStaffInAccolade = staff;
			}
			if(this._lastStaffInAccolade == null) {
				this._lastStaffInAccolade = staff;
				staff.IsLastInAccolade = true;
			}
			if(this._lastStaffInAccolade != null) {
				this._lastStaffInAccolade.IsLastInAccolade = false;
			}
			this._lastStaffInAccolade = staff;
			this._lastStaffInAccolade.IsLastInAccolade = true;
			group.LastStaffInAccolade = staff;
		}
	}
	,get_Height: function() {
		return this._allStaves[this._allStaves.length - 1].Y + this._allStaves[this._allStaves.length - 1].Height;
	}
	,ScaleToWidth: function(width) {
		var i = 0;
		var j = this._allStaves.length;
		while(i < j) {
			this._allStaves[i].ScaleToWidth(width);
			++i;
		}
		this.Width = width;
	}
	,Paint: function(cx,cy,canvas) {
		this.PaintPartial(cx + this.X,cy + this.Y,canvas,0,this.MasterBarsRenderers.length);
	}
	,PaintPartial: function(cx,cy,canvas,startIndex,count) {
		this.BuildBoundingsLookup(cx,cy);
		var i = 0;
		var j = this._allStaves.length;
		while(i < j) {
			this._allStaves[i].Paint(cx,cy,canvas,startIndex,count);
			++i;
		}
		var res = this.Layout.Renderer.RenderingResources;
		if(this.Staves.length > 0 && startIndex == 0) {
			if(this._firstStaffInAccolade != null && this._lastStaffInAccolade != null) {
				var firstStart = cy + this._firstStaffInAccolade.Y + this._firstStaffInAccolade.StaveTop + this._firstStaffInAccolade.TopSpacing + this._firstStaffInAccolade.get_TopOverflow();
				var lastEnd = cy + this._lastStaffInAccolade.Y + this._lastStaffInAccolade.TopSpacing + this._lastStaffInAccolade.get_TopOverflow() + this._lastStaffInAccolade.StaveBottom;
				var acooladeX = cx + this._firstStaffInAccolade.X;
				canvas.set_Color(res.BarSeperatorColor);
				canvas.BeginPath();
				canvas.MoveTo(acooladeX,firstStart);
				canvas.LineTo(acooladeX,lastEnd);
				canvas.Stroke();
			}
			canvas.set_Font(res.EffectFont);
			var i1 = 0;
			var j1 = this.Staves.length;
			while(i1 < j1) {
				var g = this.Staves[i1];
				if(g.FirstStaffInAccolade != null && g.LastStaffInAccolade != null) {
					var firstStart1 = cy + g.FirstStaffInAccolade.Y + g.FirstStaffInAccolade.StaveTop + g.FirstStaffInAccolade.TopSpacing + g.FirstStaffInAccolade.get_TopOverflow();
					var lastEnd1 = cy + g.LastStaffInAccolade.Y + g.LastStaffInAccolade.TopSpacing + g.LastStaffInAccolade.get_TopOverflow() + g.LastStaffInAccolade.StaveBottom;
					var acooladeX1 = cx + g.FirstStaffInAccolade.X;
					var barSize = 3 * this.Layout.Renderer.Settings.Scale;
					var barOffset = barSize;
					var accoladeStart = firstStart1 - barSize * 4;
					var accoladeEnd = lastEnd1 + barSize * 4;
					if(this.Index == 0 && !this.Layout.Renderer.Settings.Layout.Get("hideTrackNames",false)) {
						canvas.FillText(g.Track.ShortName,cx + 10 * this.Layout.get_Scale(),firstStart1);
					}
					canvas.FillRect(acooladeX1 - barOffset - barSize,accoladeStart,barSize,accoladeEnd - accoladeStart);
					var spikeStartX = acooladeX1 - barOffset - barSize;
					var spikeEndX = acooladeX1 + barSize * 2;
					canvas.BeginPath();
					canvas.MoveTo(spikeStartX,accoladeStart);
					canvas.BezierCurveTo(spikeStartX,accoladeStart,spikeStartX,accoladeStart,spikeEndX,accoladeStart - barSize);
					canvas.BezierCurveTo(acooladeX1,accoladeStart + barSize,spikeStartX,accoladeStart + barSize,spikeStartX,accoladeStart + barSize);
					canvas.ClosePath();
					canvas.Fill();
					canvas.BeginPath();
					canvas.MoveTo(spikeStartX,accoladeEnd);
					canvas.BezierCurveTo(spikeStartX,accoladeEnd,acooladeX1,accoladeEnd,spikeEndX,accoladeEnd + barSize);
					canvas.BezierCurveTo(acooladeX1,accoladeEnd - barSize,spikeStartX,accoladeEnd - barSize,spikeStartX,accoladeEnd - barSize);
					canvas.ClosePath();
					canvas.Fill();
				}
				++i1;
			}
		}
	}
	,FinalizeGroup: function() {
		var currentY = 0;
		var staff = $iterator(this._allStaves)();
		while(staff.hasNext()) {
			var staff1 = staff.next();
			staff1.X = this.AccoladeSpacing;
			staff1.Y = currentY;
			staff1.FinalizeStave();
			currentY = currentY + staff1.Height;
		}
	}
	,BuildBoundingsLookup: function(cx,cy) {
		var _gthis = this;
		if(this.Layout.Renderer.get_BoundsLookup().IsFinished) {
			return;
		}
		if(this._firstStaffInAccolade == null || this._lastStaffInAccolade == null) {
			return;
		}
		var visualTop = cy + this.Y + this._firstStaffInAccolade.Y;
		var visualBottom = cy + this.Y + this._lastStaffInAccolade.Y + this._lastStaffInAccolade.Height;
		var realTop = cy + this.Y + this._allStaves[0].Y;
		var realBottom = cy + this.Y + this._allStaves[this._allStaves.length - 1].Y + this._allStaves[this._allStaves.length - 1].Height;
		var visualHeight = visualBottom - visualTop;
		var realHeight = realBottom - realTop;
		var x = this.X + this._firstStaffInAccolade.X;
		var staveGroupBounds = new alphaTab.rendering.utils.StaveGroupBounds();
		var _tmp = new alphaTab.rendering.utils.Bounds();
		_tmp.X = cx;
		_tmp.Y = cy + _gthis.Y;
		_tmp.W = _gthis.Width;
		_tmp.H = _gthis.get_Height();
		staveGroupBounds.VisualBounds = _tmp;
		var _tmp1 = new alphaTab.rendering.utils.Bounds();
		_tmp1.X = cx;
		_tmp1.Y = cy + _gthis.Y;
		_tmp1.W = _gthis.Width;
		_tmp1.H = _gthis.get_Height();
		staveGroupBounds.RealBounds = _tmp1;
		this.Layout.Renderer.get_BoundsLookup().AddStaveGroup(staveGroupBounds);
		var this1 = [];
		var masterBarBoundsLookup = this1;
		var i = 0;
		while(i < this.Staves.length) {
			var j = 0;
			var k = this.Staves[i].FirstStaffInAccolade.BarRenderers.length;
			while(j < k) {
				var renderer = this.Staves[i].FirstStaffInAccolade.BarRenderers[j];
				if(i == 0) {
					var masterBarBounds = new alphaTab.rendering.utils.MasterBarBounds();
					masterBarBounds.Index = renderer.Bar.get_MasterBar().Index;
					masterBarBounds.IsFirstOfLine = renderer.get_IsFirstOfLine();
					var _tmp2 = new alphaTab.rendering.utils.Bounds();
					_tmp2.X = x + renderer.X;
					_tmp2.Y = realTop;
					_tmp2.W = renderer.Width;
					_tmp2.H = realHeight;
					masterBarBounds.RealBounds = _tmp2;
					var _tmp3 = new alphaTab.rendering.utils.Bounds();
					_tmp3.X = x + renderer.X;
					_tmp3.Y = visualTop;
					_tmp3.W = renderer.Width;
					_tmp3.H = visualHeight;
					masterBarBounds.VisualBounds = _tmp3;
					this.Layout.Renderer.get_BoundsLookup().AddMasterBar(masterBarBounds);
					masterBarBoundsLookup.push(masterBarBounds);
				}
				renderer.BuildBoundingsLookup(masterBarBoundsLookup[j],x,cy + this.Y + this._firstStaffInAccolade.Y);
				++j;
			}
			++i;
		}
	}
	,GetBarX: function(index) {
		if(this._firstStaffInAccolade == null || this.Layout.Renderer.Tracks.length == 0) {
			return 0;
		}
		var bar = this.Layout.Renderer.Tracks[0].Staves[0].Bars[index];
		var renderer = this.Layout.GetRendererForBar(this._firstStaffInAccolade.get_StaveId(),bar);
		return renderer.X;
	}
	,__class__: alphaTab.rendering.staves.StaveGroup
};
alphaTab.rendering.staves.StaveTrackGroup = $hx_exports["alphaTab"]["rendering"]["staves"]["StaveTrackGroup"] = function(staveGroup,track) {
	this.Track = null;
	this.StaveGroup = null;
	this.Staves = null;
	this.FirstStaffInAccolade = null;
	this.LastStaffInAccolade = null;
	this.StaveGroup = staveGroup;
	this.Track = track;
	var this1 = [];
	this.Staves = this1;
};
alphaTab.rendering.staves.StaveTrackGroup.__name__ = ["alphaTab","rendering","staves","StaveTrackGroup"];
alphaTab.rendering.staves.StaveTrackGroup.prototype = {
	__class__: alphaTab.rendering.staves.StaveTrackGroup
};
alphaTab.rendering.utils.AccidentalHelper = $hx_exports["alphaTab"]["rendering"]["utils"]["AccidentalHelper"] = function() {
	this._registeredAccidentals = null;
	this._appliedScoreLines = null;
	var this1 = {}
	this._registeredAccidentals = this1;
	var this2 = {}
	this._appliedScoreLines = this2;
};
alphaTab.rendering.utils.AccidentalHelper.__name__ = ["alphaTab","rendering","utils","AccidentalHelper"];
alphaTab.rendering.utils.AccidentalHelper.prototype = {
	ApplyAccidental: function(note) {
		var noteValue = note.get_RealValue();
		var ks = note.Beat.Voice.Bar.get_MasterBar().KeySignature;
		var ksi = ks + 7;
		var index = noteValue % 12;
		var accidentalToSet = 0;
		var line = this.RegisterNoteLine(note);
		if(note.Beat.Voice.Bar.Staff.StaffKind != 2) {
			var keySignatureAccidental = ksi < 7 ? 3 : 2;
			var hasNoteAccidentalForKeySignature = alphaTab.rendering.utils.AccidentalHelper.KeySignatureLookup[ksi][index];
			var isAccidentalNote = alphaTab.rendering.utils.AccidentalHelper.AccidentalNotes[index];
			var isAccidentalRegistered = this._registeredAccidentals.hasOwnProperty(line);
			if(hasNoteAccidentalForKeySignature != isAccidentalNote && !isAccidentalRegistered) {
				this._registeredAccidentals[line] = true;
				if(isAccidentalNote) {
					accidentalToSet = keySignatureAccidental;
				} else {
					accidentalToSet = 1;
				}
			} else if(hasNoteAccidentalForKeySignature == isAccidentalNote && isAccidentalRegistered) {
				var this1 = this._registeredAccidentals;
				delete this1[line];
				if(isAccidentalNote) {
					accidentalToSet = keySignatureAccidental;
				} else {
					accidentalToSet = 1;
				}
			}
		}
		return accidentalToSet;
	}
	,RegisterNoteLine: function(n) {
		var staff = n.Beat.Voice.Bar.Staff;
		var track = staff.Track;
		var value = staff.StaffKind == 2 ? alphaTab.rendering.utils.PercussionMapper.MapNoteForDisplay(n) : n.get_RealValue() - staff.DisplayTranspositionPitch;
		var ks = n.Beat.Voice.Bar.get_MasterBar().KeySignature;
		var clef = n.Beat.Voice.Bar.Clef;
		var index = value % 12;
		var octave = (value / 12 | 0) - 1;
		var steps = alphaTab.rendering.utils.AccidentalHelper.OctaveSteps[clef];
		steps = steps - octave * 7;
		var stepList = alphaTab.model.ModelUtils.KeySignatureIsSharp(ks) || alphaTab.model.ModelUtils.KeySignatureIsNatural(ks) ? alphaTab.rendering.utils.AccidentalHelper.SharpNoteSteps : alphaTab.rendering.utils.AccidentalHelper.FlatNoteSteps;
		var offset = 0;
		var _g = n.AccidentalMode;
		offset = stepList[index];
		steps = steps - stepList[index];
		this._appliedScoreLines[n.Id] = steps;
		return steps;
	}
	,GetNoteLine: function(n) {
		return this._appliedScoreLines[n.Id];
	}
	,__class__: alphaTab.rendering.utils.AccidentalHelper
};
alphaTab.rendering.utils.BarBounds = $hx_exports["alphaTab"]["rendering"]["utils"]["BarBounds"] = function() {
	this.MasterBarBounds = null;
	this.VisualBounds = null;
	this.RealBounds = null;
	this.Bar = null;
	this.Beats = null;
	var this1 = [];
	this.Beats = this1;
};
alphaTab.rendering.utils.BarBounds.__name__ = ["alphaTab","rendering","utils","BarBounds"];
alphaTab.rendering.utils.BarBounds.prototype = {
	AddBeat: function(bounds) {
		bounds.BarBounds = this;
		this.Beats.push(bounds);
		this.MasterBarBounds.AddBeat(bounds);
	}
	,FindBeatAtPos: function(x) {
		var beat = null;
		var i = 0;
		while(i < this.Beats.length) {
			if(beat == null || this.Beats[i].RealBounds.X < x) {
				beat = this.Beats[i];
			} else if(this.Beats[i].RealBounds.X > x) {
				break;
			}
			++i;
		}
		return beat;
	}
	,__class__: alphaTab.rendering.utils.BarBounds
};
alphaTab.rendering.utils.BarHelpers = $hx_exports["alphaTab"]["rendering"]["utils"]["BarHelpers"] = function(bar) {
	this.BeamHelpers = null;
	this.BeamHelperLookup = null;
	this.TupletHelpers = null;
	var this1 = [];
	this.BeamHelpers = this1;
	var this2 = [];
	this.BeamHelperLookup = this2;
	var this3 = [];
	this.TupletHelpers = this3;
	var currentBeamHelper = null;
	var currentTupletHelper = null;
	if(bar != null) {
		var i = 0;
		var j = bar.Voices.length;
		while(i < j) {
			var v = bar.Voices[i];
			var this4 = this.BeamHelpers;
			var this5 = [];
			this4.push(this5);
			var this6 = this.BeamHelperLookup;
			var this7 = {}
			this6.push(this7);
			var this8 = this.TupletHelpers;
			var this9 = [];
			this8.push(this9);
			var k = 0;
			var l = v.Beats.length;
			while(k < l) {
				var b = v.Beats[k];
				var forceNewTupletHelper = false;
				if(!b.get_IsRest()) {
					if(currentBeamHelper == null || !currentBeamHelper.CheckBeat(b)) {
						if(currentBeamHelper != null) {
							currentBeamHelper.Finish();
							forceNewTupletHelper = currentBeamHelper.Beats.length > 1;
						} else {
							forceNewTupletHelper = true;
						}
						currentBeamHelper = new alphaTab.rendering.utils.BeamingHelper(bar.Staff);
						currentBeamHelper.CheckBeat(b);
						this.BeamHelpers[v.Index].push(currentBeamHelper);
					}
				}
				if(b.get_HasTuplet()) {
					var previousBeat = b.PreviousBeat;
					if(previousBeat != null && previousBeat.Voice != b.Voice) {
						previousBeat = null;
					}
					if(forceNewTupletHelper && currentTupletHelper != null) {
						currentTupletHelper.Finish();
					}
					if(previousBeat == null || currentTupletHelper == null || !currentTupletHelper.Check(b)) {
						currentTupletHelper = new alphaTab.rendering.utils.TupletHelper(v.Index);
						currentTupletHelper.Check(b);
						this.TupletHelpers[v.Index].push(currentTupletHelper);
					}
				}
				this.BeamHelperLookup[v.Index][b.Index] = currentBeamHelper;
				++k;
			}
			if(currentBeamHelper != null) {
				currentBeamHelper.Finish();
			}
			if(currentTupletHelper != null) {
				currentTupletHelper.Finish();
			}
			currentBeamHelper = null;
			currentTupletHelper = null;
			++i;
		}
	}
};
alphaTab.rendering.utils.BarHelpers.__name__ = ["alphaTab","rendering","utils","BarHelpers"];
alphaTab.rendering.utils.BarHelpers.prototype = {
	__class__: alphaTab.rendering.utils.BarHelpers
};
alphaTab.rendering.utils._BeamDirection = {};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_ = $hx_exports["alphaTab"]["rendering"]["utils"]["_BeamDirection"]["BeamDirection_Impl_"] = {};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.__name__ = ["alphaTab","rendering","utils","_BeamDirection","BeamDirection_Impl_"];
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Up";
	case 1:
		return "Down";
	}
	return "";
};
alphaTab.rendering.utils.BeamingHelper = $hx_exports["alphaTab"]["rendering"]["utils"]["BeamingHelper"] = function(staff) {
	this._lastBeat = null;
	this._staff = null;
	this._beatLineXPositions = null;
	this.Voice = null;
	this.Beats = null;
	this.ShortestDuration = -4;
	this.FingeringCount = 0;
	this.HasTuplet = false;
	this.FirstMinNote = null;
	this.FirstMaxNote = null;
	this.LastMinNote = null;
	this.LastMaxNote = null;
	this.MinNote = null;
	this.MaxNote = null;
	this.InvertBeamDirection = false;
	this.Direction = 0;
	this._staff = staff;
	var this1 = [];
	this.Beats = this1;
	var this2 = {}
	this._beatLineXPositions = this2;
	this.ShortestDuration = -4;
};
alphaTab.rendering.utils.BeamingHelper.__name__ = ["alphaTab","rendering","utils","BeamingHelper"];
alphaTab.rendering.utils.BeamingHelper.CanJoin = function(b1,b2) {
	if(b1 == null || b2 == null || b1.get_IsRest() || b2.get_IsRest() || b1.GraceType != b2.GraceType) {
		return false;
	}
	var m1 = b1.Voice.Bar;
	var m2 = b1.Voice.Bar;
	if(m1 != m2) {
		return false;
	}
	var start1 = b1.Start;
	var start2 = b2.Start;
	if(!alphaTab.rendering.utils.BeamingHelper.CanJoinDuration(b1.Duration) || !alphaTab.rendering.utils.BeamingHelper.CanJoinDuration(b2.Duration)) {
		return start1 == start2;
	}
	var divisionLength = 960;
	var _g = m1.get_MasterBar().TimeSignatureDenominator;
	if(_g == 8) {
		if(m1.get_MasterBar().TimeSignatureNumerator % 3 == 0) {
			divisionLength = divisionLength + (960 / 2 | 0);
		}
	}
	var division1 = (divisionLength + start1) / divisionLength | 0 | 0;
	var division2 = (divisionLength + start2) / divisionLength | 0 | 0;
	return division1 == division2;
};
alphaTab.rendering.utils.BeamingHelper.CanJoinDuration = function(d) {
	switch(d) {
	case 1:case 2:case 4:
		return false;
	default:
		return true;
	}
};
alphaTab.rendering.utils.BeamingHelper.IsFullBarJoin = function(a,b,barIndex) {
	if(alphaTab.model.ModelUtils.GetIndex(a.Duration) - 2 - barIndex > 0) {
		return alphaTab.model.ModelUtils.GetIndex(b.Duration) - 2 - barIndex > 0;
	} else {
		return false;
	}
};
alphaTab.rendering.utils.BeamingHelper.prototype = {
	GetValue: function(n) {
		if(this._staff.StaffKind == 2) {
			return alphaTab.rendering.utils.PercussionMapper.MapNoteForDisplay(n);
		} else {
			return n.get_RealValue() - this._staff.DisplayTranspositionPitch;
		}
	}
	,GetBeatLineX: function(beat) {
		if(this.HasBeatLineX(beat)) {
			if(this.Direction == 0) {
				var this1 = system.Convert.ToInt32_Single(this._beatLineXPositions[beat.Index].Up);
				return this1;
			}
			var this2 = system.Convert.ToInt32_Single(this._beatLineXPositions[beat.Index].Down);
			return this2;
		}
		return 0;
	}
	,HasBeatLineX: function(beat) {
		return this._beatLineXPositions.hasOwnProperty(beat.Index);
	}
	,RegisterBeatLineX: function(staffId,beat,up,down) {
		this._beatLineXPositions[beat.Index] = new alphaTab.rendering.utils.BeatLinePositions(staffId,up,down);
	}
	,Finish: function() {
		this.Direction = this.CalculateDirection();
	}
	,CalculateDirection: function() {
		if(this.Voice.Index > 0) {
			return this.Invert(1);
		}
		if(this.Voice.Bar.Voices.length > 1) {
			var v = 1;
			while(v < this.Voice.Bar.Voices.length) {
				if(!this.Voice.Bar.Voices[v].IsEmpty) {
					return this.Invert(0);
				}
				++v;
			}
		}
		if(this.Beats.length == 1 && (this.Beats[0].Duration == 1 || this.Beats[0].Duration == -2)) {
			return this.Invert(0);
		}
		if(this.Beats[0].GraceType != 0) {
			return this.Invert(0);
		}
		var avg = (this.GetValue(this.MaxNote) + this.GetValue(this.MinNote)) / 2 | 0;
		return this.Invert(avg < alphaTab.rendering.utils.BeamingHelper.ScoreMiddleKeys[this._lastBeat.Voice.Bar.Clef] ? 0 : 1);
	}
	,Invert: function(direction) {
		if(!this.InvertBeamDirection) {
			return direction;
		}
		switch(direction) {
		case 0:
			return 1;
		case 1:
			return 0;
		default:
		}
		return 0;
	}
	,CheckBeat: function(beat) {
		if(beat.InvertBeamDirection) {
			this.InvertBeamDirection = true;
		}
		if(this.Voice == null) {
			this.Voice = beat.Voice;
		}
		var add = false;
		if(this.Beats.length == 0) {
			add = true;
		} else if(alphaTab.rendering.utils.BeamingHelper.CanJoin(this._lastBeat,beat)) {
			add = true;
		}
		if(add) {
			this._lastBeat = beat;
			this.Beats.push(beat);
			if(beat.get_HasTuplet()) {
				this.HasTuplet = true;
			}
			var fingeringCount = 0;
			var n = 0;
			while(n < beat.Notes.length) {
				var note = beat.Notes[n];
				if(note.LeftHandFinger != -2 || note.RightHandFinger != -2) {
					++fingeringCount;
				}
				++n;
			}
			if(fingeringCount > this.FingeringCount) {
				this.FingeringCount = fingeringCount;
			}
			this.CheckNote(beat.get_MinNote());
			this.CheckNote(beat.get_MaxNote());
			if(this.ShortestDuration < beat.Duration) {
				this.ShortestDuration = beat.Duration;
			}
			if(beat.get_HasTuplet()) {
				this.HasTuplet = true;
			}
		}
		return add;
	}
	,CheckNote: function(note) {
		var value = this.GetValue(note);
		if(this.FirstMinNote == null || note.Beat.Start < this.FirstMinNote.Beat.Start) {
			this.FirstMinNote = note;
		} else if(note.Beat.Start == this.FirstMinNote.Beat.Start) {
			if(value < this.GetValue(this.FirstMinNote)) {
				this.FirstMinNote = note;
			}
		}
		if(this.FirstMaxNote == null || note.Beat.Start < this.FirstMaxNote.Beat.Start) {
			this.FirstMaxNote = note;
		} else if(note.Beat.Start == this.FirstMaxNote.Beat.Start) {
			if(value > this.GetValue(this.FirstMaxNote)) {
				this.FirstMaxNote = note;
			}
		}
		if(this.LastMinNote == null || note.Beat.Start > this.LastMinNote.Beat.Start) {
			this.LastMinNote = note;
		} else if(note.Beat.Start == this.LastMinNote.Beat.Start) {
			if(value < this.GetValue(this.LastMinNote)) {
				this.LastMinNote = note;
			}
		}
		if(this.LastMaxNote == null || note.Beat.Start > this.LastMaxNote.Beat.Start) {
			this.LastMaxNote = note;
		} else if(note.Beat.Start == this.LastMaxNote.Beat.Start) {
			if(value > this.GetValue(this.LastMaxNote)) {
				this.LastMaxNote = note;
			}
		}
		if(this.MaxNote == null || value > this.GetValue(this.MaxNote)) {
			this.MaxNote = note;
		}
		if(this.MinNote == null || value < this.GetValue(this.MinNote)) {
			this.MinNote = note;
		}
	}
	,CalculateBeamY: function(stemSize,xCorrection,xPosition,scale,yPosition) {
		return this.CalculateBeamYWithDirection(stemSize,xCorrection,xPosition,scale,yPosition,this.Direction);
	}
	,CalculateBeamYWithDirection: function(stemSize,xCorrection,xPosition,scale,yPosition,direction) {
		if(this.Beats.length == 1) {
			if(direction == 0) {
				return yPosition.GetYPositionForNote(this.MaxNote) - stemSize;
			}
			return yPosition.GetYPositionForNote(this.MinNote) + stemSize;
		}
		var maxDistance = 10 * scale;
		if(direction == 1 && this.MinNote != this.FirstMinNote && this.MinNote != this.LastMinNote) {
			return yPosition.GetYPositionForNote(this.MinNote) + stemSize;
		}
		if(direction == 0 && this.MaxNote != this.FirstMaxNote && this.MaxNote != this.LastMaxNote) {
			return yPosition.GetYPositionForNote(this.MaxNote) - stemSize;
		}
		var startX = this.GetBeatLineX(this.FirstMinNote.Beat) + xCorrection;
		var startY = direction == 0 ? yPosition.GetYPositionForNote(this.FirstMaxNote) - stemSize : yPosition.GetYPositionForNote(this.FirstMinNote) + stemSize;
		var endX = this.GetBeatLineX(this.LastMaxNote.Beat) + xCorrection;
		var endY = direction == 0 ? yPosition.GetYPositionForNote(this.LastMaxNote) - stemSize : yPosition.GetYPositionForNote(this.LastMinNote) + stemSize;
		if(direction == 1 && startY > endY && startY - endY > maxDistance) {
			endY = startY - maxDistance;
		}
		if(direction == 1 && endY > startY && endY - startY > maxDistance) {
			startY = endY - maxDistance;
		}
		if(direction == 0 && startY < endY && endY - startY > maxDistance) {
			endY = startY + maxDistance;
		}
		if(direction == 0 && endY < startY && startY - endY > maxDistance) {
			startY = endY + maxDistance;
		}
		if(startX == endX) {
			return startY;
		}
		return (endY - startY) / (endX - startX) * (xPosition - startX) + startY;
	}
	,IsPositionFrom: function(staffId,beat) {
		if(!this._beatLineXPositions.hasOwnProperty(beat.Index)) {
			return true;
		}
		return this._beatLineXPositions[beat.Index].StaffId == staffId;
	}
	,__class__: alphaTab.rendering.utils.BeamingHelper
};
alphaTab.rendering.utils.BeatBounds = $hx_exports["alphaTab"]["rendering"]["utils"]["BeatBounds"] = function() {
};
alphaTab.rendering.utils.BeatBounds.__name__ = ["alphaTab","rendering","utils","BeatBounds"];
alphaTab.rendering.utils.BeatBounds.prototype = {
	__class__: alphaTab.rendering.utils.BeatBounds
};
alphaTab.rendering.utils.BeatLinePositions = $hx_exports["alphaTab"]["rendering"]["utils"]["BeatLinePositions"] = function(staffId,up,down) {
	this.StaffId = null;
	this.Up = 0.0;
	this.Down = 0.0;
	this.StaffId = staffId;
	this.Up = up;
	this.Down = down;
};
alphaTab.rendering.utils.BeatLinePositions.__name__ = ["alphaTab","rendering","utils","BeatLinePositions"];
alphaTab.rendering.utils.BeatLinePositions.prototype = {
	__class__: alphaTab.rendering.utils.BeatLinePositions
};
alphaTab.rendering.utils.Bounds = $hx_exports["alphaTab"]["rendering"]["utils"]["Bounds"] = function() {
};
alphaTab.rendering.utils.Bounds.__name__ = ["alphaTab","rendering","utils","Bounds"];
alphaTab.rendering.utils.Bounds.prototype = {
	__class__: alphaTab.rendering.utils.Bounds
};
alphaTab.rendering.utils.BoundsLookup = $hx_exports["alphaTab"]["rendering"]["utils"]["BoundsLookup"] = function() {
	this._beatLookup = null;
	this._masterBarLookup = null;
	this._currentStaveGroup = null;
	this.StaveGroups = null;
	this.IsFinished = false;
	var this1 = [];
	this.StaveGroups = this1;
	var this2 = {}
	this._beatLookup = this2;
	var this3 = {}
	this._masterBarLookup = this3;
};
alphaTab.rendering.utils.BoundsLookup.__name__ = ["alphaTab","rendering","utils","BoundsLookup"];
alphaTab.rendering.utils.BoundsLookup.FromJson = function(json,score) {
	var lookup = new alphaTab.rendering.utils.BoundsLookup();
	var staveGroups = json["StaveGroups"];
	var staveGroup = $iterator(staveGroups)();
	while(staveGroup.hasNext()) {
		var staveGroup1 = staveGroup.next();
		var sg = new alphaTab.rendering.utils.StaveGroupBounds();
		sg.VisualBounds = staveGroup1.VisualBounds;
		sg.RealBounds = staveGroup1.RealBounds;
		lookup.AddStaveGroup(sg);
		var masterBar = $iterator(staveGroup1.Bars)();
		while(masterBar.hasNext()) {
			var masterBar1 = masterBar.next();
			var mb = new alphaTab.rendering.utils.MasterBarBounds();
			mb.Index = masterBar1.Index;
			mb.IsFirstOfLine = masterBar1.IsFirstOfLine;
			mb.VisualBounds = masterBar1.VisualBounds;
			mb.RealBounds = masterBar1.RealBounds;
			sg.AddBar(mb);
			var bar = $iterator(masterBar1.Bars)();
			while(bar.hasNext()) {
				var bar1 = bar.next();
				var b = new alphaTab.rendering.utils.BarBounds();
				b.VisualBounds = bar1.VisualBounds;
				b.RealBounds = bar1.RealBounds;
				mb.AddBar(b);
				var beat = $iterator(bar1.Beats)();
				while(beat.hasNext()) {
					var beat1 = beat.next();
					var bb = new alphaTab.rendering.utils.BeatBounds();
					bb.VisualBounds = beat1.VisualBounds;
					bb.RealBounds = beat1.RealBounds;
					bb.Beat = score.Tracks[beat1["TrackIndex"]].Staves[beat1["StaffIndex"]].Bars[beat1["BarIndex"]].Voices[beat1["VoiceIndex"]].Beats[beat1["BeatIndex"]];
					b.AddBeat(bb);
				}
			}
		}
	}
	return lookup;
};
alphaTab.rendering.utils.BoundsLookup.prototype = {
	ToJson: function() {
		var json = {}
		var this1 = [];
		var staveGroups = this1;
		json.StaveGroups = staveGroups;
		var group = $iterator(this.StaveGroups)();
		while(group.hasNext()) {
			var group1 = group.next();
			var g = {}
			g.VisualBounds = this.BoundsToJson(group1.VisualBounds);
			g.RealBounds = this.BoundsToJson(group1.RealBounds);
			var this2 = [];
			g.Bars = this2;
			var masterBar = $iterator(group1.Bars)();
			while(masterBar.hasNext()) {
				var masterBar1 = masterBar.next();
				var mb = {}
				mb.VisualBounds = this.BoundsToJson(masterBar1.VisualBounds);
				mb.RealBounds = this.BoundsToJson(masterBar1.RealBounds);
				mb.Index = masterBar1.Index;
				var this3 = [];
				mb.Bars = this3;
				var bar = $iterator(masterBar1.Bars)();
				while(bar.hasNext()) {
					var bar1 = bar.next();
					var b = {}
					b.VisualBounds = this.BoundsToJson(bar1.VisualBounds);
					b.RealBounds = this.BoundsToJson(bar1.RealBounds);
					var this4 = [];
					b.Beats = this4;
					var beat = $iterator(bar1.Beats)();
					while(beat.hasNext()) {
						var beat1 = beat.next();
						var bb = {}
						bb.VisualBounds = this.BoundsToJson(beat1.VisualBounds);
						bb.RealBounds = this.BoundsToJson(beat1.RealBounds);
						bb.BeatIndex = beat1.Beat.Index;
						bb.VoiceIndex = beat1.Beat.Voice.Index;
						bb.BarIndex = beat1.Beat.Voice.Bar.Index;
						bb.StaffIndex = beat1.Beat.Voice.Bar.Staff.Index;
						bb.TrackIndex = beat1.Beat.Voice.Bar.Staff.Track.Index;
						b.Beats.push(bb);
					}
					mb.Bars.push(b);
				}
				g.Bars.push(mb);
			}
			staveGroups.push(g);
		}
		return json;
	}
	,BoundsToJson: function(bounds) {
		var json = {}
		json.X = bounds.X;
		json.Y = bounds.Y;
		json.W = bounds.W;
		json.H = bounds.H;
		return json;
	}
	,Finish: function() {
		var i = 0;
		while(i < this.StaveGroups.length) {
			this.StaveGroups[i].Finish();
			++i;
		}
		this.IsFinished = true;
	}
	,AddStaveGroup: function(bounds) {
		bounds.Index = this.StaveGroups.length;
		bounds.BoundsLookup = this;
		this.StaveGroups.push(bounds);
		this._currentStaveGroup = bounds;
	}
	,AddMasterBar: function(bounds) {
		if(bounds.StaveGroupBounds == null) {
			bounds.StaveGroupBounds = this._currentStaveGroup;
			this._masterBarLookup[bounds.Index] = bounds;
			this._currentStaveGroup.AddBar(bounds);
		} else {
			this._masterBarLookup[bounds.Index] = bounds;
		}
	}
	,AddBeat: function(bounds) {
		this._beatLookup[bounds.Beat.Id] = bounds;
	}
	,FindMasterBarByIndex: function(index) {
		if(this._masterBarLookup.hasOwnProperty(index)) {
			return this._masterBarLookup[index];
		}
		return null;
	}
	,FindMasterBar: function(bar) {
		var id = bar.Index;
		if(this._masterBarLookup.hasOwnProperty(id)) {
			return this._masterBarLookup[id];
		}
		return null;
	}
	,FindBeat: function(beat) {
		var id = beat.Id;
		if(this._beatLookup.hasOwnProperty(id)) {
			return this._beatLookup[id];
		}
		return null;
	}
	,GetBeatAtPos: function(x,y) {
		var bottom = 0;
		var top = this.StaveGroups.length - 1;
		var staveGroupIndex = -1;
		while(bottom <= top) {
			var middle = (top + bottom) / 2 | 0;
			var group = this.StaveGroups[middle];
			if(y >= group.RealBounds.Y && y <= group.RealBounds.Y + group.RealBounds.H) {
				staveGroupIndex = middle;
				break;
			}
			if(y < group.RealBounds.Y) {
				top = middle - 1;
			} else {
				bottom = middle + 1;
			}
		}
		if(staveGroupIndex == -1) {
			return null;
		}
		var staveGroup = this.StaveGroups[staveGroupIndex];
		var bar = staveGroup.FindBarAtPos(x);
		if(bar != null) {
			return bar.FindBeatAtPos(x,y);
		}
		return null;
	}
	,__class__: alphaTab.rendering.utils.BoundsLookup
};
alphaTab.rendering.utils.MasterBarBounds = $hx_exports["alphaTab"]["rendering"]["utils"]["MasterBarBounds"] = function() {
	this.Index = 0;
	this.IsFirstOfLine = false;
	this.VisualBounds = null;
	this.RealBounds = null;
	this.Bars = null;
	this.StaveGroupBounds = null;
	var this1 = [];
	this.Bars = this1;
};
alphaTab.rendering.utils.MasterBarBounds.__name__ = ["alphaTab","rendering","utils","MasterBarBounds"];
alphaTab.rendering.utils.MasterBarBounds.prototype = {
	AddBar: function(bounds) {
		bounds.MasterBarBounds = this;
		this.Bars.push(bounds);
	}
	,FindBeatAtPos: function(x,y) {
		var beat = null;
		var i = 0;
		while(i < this.Bars.length) {
			var b = this.Bars[i].FindBeatAtPos(x);
			if(b != null && (beat == null || beat.RealBounds.X < b.RealBounds.X)) {
				beat = b;
			}
			++i;
		}
		if(beat == null) {
			return null;
		} else {
			return beat.Beat;
		}
	}
	,Finish: function() {
		var comparison = function(a,b) {
			if(a.RealBounds.Y < b.RealBounds.Y) {
				return -1;
			}
			if(a.RealBounds.Y > b.RealBounds.Y) {
				return 1;
			}
			if(a.RealBounds.X < b.RealBounds.X) {
				return -1;
			}
			if(a.RealBounds.X > b.RealBounds.X) {
				return 1;
			}
			return 0;
		};
		this.Bars.sort(function(a1,b1) {
			return comparison(a1,b1);
		});
	}
	,AddBeat: function(bounds) {
		this.StaveGroupBounds.BoundsLookup.AddBeat(bounds);
	}
	,__class__: alphaTab.rendering.utils.MasterBarBounds
};
alphaTab.rendering.utils.PercussionMapper = $hx_exports["alphaTab"]["rendering"]["utils"]["PercussionMapper"] = function() {
};
alphaTab.rendering.utils.PercussionMapper.__name__ = ["alphaTab","rendering","utils","PercussionMapper"];
alphaTab.rendering.utils.PercussionMapper.MidiFromElementVariation = function(note) {
	return alphaTab.rendering.utils.PercussionMapper.ElementVariationToMidi[note.Element][note.Variation];
};
alphaTab.rendering.utils.PercussionMapper.MapNoteForDisplay = function(note) {
	var value = note.get_RealValue();
	if(value == 61 || value == 66) {
		return 50;
	} else if(value == 60 || value == 65) {
		return 52;
	} else if(value >= 35 && value <= 36 || value == 44) {
		return 53;
	} else if(value == 41 || value == 64) {
		return 55;
	} else if(value == 43 || value == 62) {
		return 57;
	} else if(value == 45 || value == 63) {
		return 59;
	} else if(value == 47 || value == 54) {
		return 62;
	} else if(value == 48 || value == 56) {
		return 64;
	} else if(value == 50) {
		return 65;
	} else if(value == 42 || value == 46 || value >= 49 && value <= 53 || value == 57 || value == 59) {
		return 67;
	}
	return 60;
};
alphaTab.rendering.utils.PercussionMapper.prototype = {
	__class__: alphaTab.rendering.utils.PercussionMapper
};
alphaTab.rendering.utils.StaveGroupBounds = $hx_exports["alphaTab"]["rendering"]["utils"]["StaveGroupBounds"] = function() {
	this.Index = 0;
	this.VisualBounds = null;
	this.RealBounds = null;
	this.Bars = null;
	this.BoundsLookup = null;
	var this1 = [];
	this.Bars = this1;
	this.Index = 0;
};
alphaTab.rendering.utils.StaveGroupBounds.__name__ = ["alphaTab","rendering","utils","StaveGroupBounds"];
alphaTab.rendering.utils.StaveGroupBounds.prototype = {
	Finish: function() {
		var i = 0;
		while(i < this.Bars.length) {
			this.Bars[i].Finish();
			++i;
		}
	}
	,AddBar: function(bounds) {
		this.BoundsLookup.AddMasterBar(bounds);
		bounds.StaveGroupBounds = this;
		this.Bars.push(bounds);
	}
	,FindBarAtPos: function(x) {
		var b = null;
		var i = 0;
		while(i < this.Bars.length) {
			if(b == null || this.Bars[i].RealBounds.X < x) {
				b = this.Bars[i];
			} else if(x > this.Bars[i].RealBounds.X + this.Bars[i].RealBounds.W) {
				break;
			}
			++i;
		}
		return b;
	}
	,__class__: alphaTab.rendering.utils.StaveGroupBounds
};
alphaTab.rendering.utils.TupletHelper = $hx_exports["alphaTab"]["rendering"]["utils"]["TupletHelper"] = function(voice) {
	this._isFinished = false;
	this.Beats = null;
	this.VoiceIndex = 0;
	this.Tuplet = 0;
	this.VoiceIndex = voice;
	var this1 = [];
	this.Beats = this1;
};
alphaTab.rendering.utils.TupletHelper.__name__ = ["alphaTab","rendering","utils","TupletHelper"];
alphaTab.rendering.utils.TupletHelper.prototype = {
	get_IsFull: function() {
		return this.Beats.length == this.Tuplet;
	}
	,Finish: function() {
		this._isFinished = true;
	}
	,Check: function(beat) {
		if(this.Beats.length == 0) {
			this.Tuplet = beat.TupletNumerator;
		} else if(beat.Voice.Index != this.VoiceIndex || beat.TupletNumerator != this.Tuplet || this.get_IsFull() || this._isFinished) {
			return false;
		}
		this.Beats.push(beat);
		return true;
	}
	,__class__: alphaTab.rendering.utils.TupletHelper
};
alphaTab.util.Lazy = $hx_exports["alphaTab"]["util"]["Lazy"] = function(factory) {
	this._factory = null;
	this._created = false;
	this._value = null;
	this._factory = factory;
};
alphaTab.util.Lazy.__name__ = ["alphaTab","util","Lazy"];
alphaTab.util.Lazy.prototype = {
	get_Value: function() {
		if(!this._created) {
			this._value = this._factory();
			this._created = true;
		}
		return this._value;
	}
	,__class__: alphaTab.util.Lazy
};
alphaTab.util._LogLevel = {};
alphaTab.util._LogLevel.LogLevel_Impl_ = $hx_exports["alphaTab"]["util"]["_LogLevel"]["LogLevel_Impl_"] = {};
alphaTab.util._LogLevel.LogLevel_Impl_.__name__ = ["alphaTab","util","_LogLevel","LogLevel_Impl_"];
alphaTab.util._LogLevel.LogLevel_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.util._LogLevel.LogLevel_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.util._LogLevel.LogLevel_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.util._LogLevel.LogLevel_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.util._LogLevel.LogLevel_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.util._LogLevel.LogLevel_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.util._LogLevel.LogLevel_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Debug";
	case 2:
		return "Info";
	case 3:
		return "Warning";
	case 4:
		return "Error";
	}
	return "";
};
alphaTab.utils = {};
alphaTab.utils._UnionData = {};
alphaTab.utils._UnionData.UnionData_Impl_ = $hx_exports["alphaTab"]["utils"]["_UnionData"]["UnionData_Impl_"] = {};
alphaTab.utils._UnionData.UnionData_Impl_.__name__ = ["alphaTab","utils","_UnionData","UnionData_Impl_"];
alphaTab.utils._UnionData.UnionData_Impl_._new = function() {
	var this1 = new DataView(new ArrayBuffer(8));
	return this1;
};
alphaTab.utils._UnionData.UnionData_Impl_.get_Double1 = function(this1) {
	return this1.getFloat64(0,true);
};
alphaTab.utils._UnionData.UnionData_Impl_.get_Float1 = function(this1) {
	return this1.getFloat32(0,true);
};
alphaTab.utils._UnionData.UnionData_Impl_.get_Float2 = function(this1) {
	return this1.getFloat32(4,true);
};
alphaTab.utils._UnionData.UnionData_Impl_.get_Int1 = function(this1) {
	return this1.getInt32(0,true);
};
alphaTab.utils._UnionData.UnionData_Impl_.get_Int2 = function(this1) {
	return this1.getInt32(4,true);
};
alphaTab.xml = {};
alphaTab.xml.XmlNode = $hx_exports["alphaTab"]["xml"]["XmlNode"] = function() {
	this.NodeType = 0;
	this.LocalName = null;
	this.Value = null;
	this.ChildNodes = null;
	this.Attributes = null;
	this.FirstChild = null;
	this.FirstElement = null;
	var this1 = {}
	this.Attributes = this1;
	var this2 = [];
	this.ChildNodes = this2;
};
alphaTab.xml.XmlNode.__name__ = ["alphaTab","xml","XmlNode"];
alphaTab.xml.XmlNode.prototype = {
	AddChild: function(node) {
		this.ChildNodes.push(node);
		this.FirstChild = node;
		if(node.NodeType == 1) {
			this.FirstElement = node;
		}
	}
	,GetAttribute: function(name) {
		if(this.Attributes.hasOwnProperty(name)) {
			return this.Attributes[name];
		}
		return "";
	}
	,GetElementsByTagName: function(name,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		var this1 = [];
		var tags = this1;
		this.SearchElementsByTagName(this.ChildNodes,tags,name,recursive);
		return tags;
	}
	,SearchElementsByTagName: function(all,result,name,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		var c = $iterator(all)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1 != null && c1.NodeType == 1 && c1.LocalName == name) {
				result.push(c1);
			}
			if(recursive) {
				this.SearchElementsByTagName(c1.ChildNodes,result,name,true);
			}
		}
	}
	,FindChildElement: function(name) {
		var c = $iterator(this.ChildNodes)();
		while(c.hasNext()) {
			var c1 = c.next();
			if(c1 != null && c1.NodeType == 1 && c1.LocalName == name) {
				return c1;
			}
		}
		return null;
	}
	,get_InnerText: function() {
		if(this.NodeType == 1 || this.NodeType == 9) {
			var this1 = "";
			var txt = this1;
			var c = $iterator(this.ChildNodes)();
			while(c.hasNext()) {
				var c1 = c.next();
				txt += Std.string(c1.get_InnerText());
			}
			var s = txt;
			return StringTools.trim(s);
		}
		return this.Value;
	}
	,__class__: alphaTab.xml.XmlNode
};
alphaTab.xml.XmlDocument = $hx_exports["alphaTab"]["xml"]["XmlDocument"] = function(xml) {
	alphaTab.xml.XmlNode.call(this);
	this.DocumentElement = null;
	this.NodeType = 9;
	alphaTab.xml.XmlParser.Parse(xml,0,this);
	var child = $iterator(this.ChildNodes)();
	while(child.hasNext()) {
		var child1 = child.next();
		if(child1.NodeType == 1) {
			this.DocumentElement = child1;
			break;
		}
	}
};
alphaTab.xml.XmlDocument.__name__ = ["alphaTab","xml","XmlDocument"];
alphaTab.xml.XmlDocument.__super__ = alphaTab.xml.XmlNode;
alphaTab.xml.XmlDocument.prototype = $extend(alphaTab.xml.XmlNode.prototype,{
	__class__: alphaTab.xml.XmlDocument
});
alphaTab.xml.XmlException = $hx_exports["alphaTab"]["xml"]["XmlException"] = function() {
	alphaTab.AlphaTabException.call(this);
};
alphaTab.xml.XmlException.__name__ = ["alphaTab","xml","XmlException"];
alphaTab.xml.XmlException.__super__ = alphaTab.AlphaTabException;
alphaTab.xml.XmlException.prototype = $extend(alphaTab.AlphaTabException.prototype,{
	XmlException: function(message,xml,pos) {
		this.AlphaTabException(message);
		this.Xml = null;
		this.Pos = 0;
		this.Xml = xml;
		this.Pos = pos;
		return this;
	}
	,__class__: alphaTab.xml.XmlException
});
alphaTab.xml._XmlNodeType = {};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_ = $hx_exports["alphaTab"]["xml"]["_XmlNodeType"]["XmlNodeType_Impl_"] = {};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.__name__ = ["alphaTab","xml","_XmlNodeType","XmlNodeType_Impl_"];
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToBoolean_IFormatProvider = function(this1,provider) {
	return this1 != 0;
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToChar_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToSByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt8(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToByte_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt8(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToInt16(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToUInt16_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt16(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToInt32_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToUInt32_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToInt64_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToUInt64_IFormatProvider = function(this1,provider) {
	return system.Convert.ToUInt32(this1);
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToSingle_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ToDouble_IFormatProvider = function(this1,provider) {
	return this1;
};
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.toString = function(this1) {
	switch(this1) {
	case 0:
		return "None";
	case 1:
		return "Element";
	case 2:
		return "Attribute";
	case 3:
		return "Text";
	case 4:
		return "CDATA";
	case 5:
		return "EntityReference";
	case 6:
		return "Entity";
	case 7:
		return "ProcessingInstruction";
	case 8:
		return "Comment";
	case 9:
		return "Document";
	case 10:
		return "DocumentType";
	case 11:
		return "DocumentFragment";
	case 12:
		return "Notation";
	case 13:
		return "Whitespace";
	case 14:
		return "SignificantWhitespace";
	case 15:
		return "EndElement";
	case 16:
		return "EndEntity";
	case 17:
		return "XmlDeclaration";
	}
	return "";
};
alphaTab.xml.XmlParser = $hx_exports["alphaTab"]["xml"]["XmlParser"] = function() {
};
alphaTab.xml.XmlParser.__name__ = ["alphaTab","xml","XmlParser"];
alphaTab.xml.XmlParser.Parse = function(str,p,parent) {
	var this1 = system.Convert.ToUInt16(HxOverrides.cca(str,p));
	var this2 = this1;
	var c = this2;
	var state = 1;
	var next = 1;
	var start = 0;
	var this3 = "";
	var buf = this3;
	var escapeNext = 1;
	var xml = null;
	var aname = null;
	var nbrackets = 0;
	var attrValQuote = 0;
	while(p < str.length) {
		var this4 = system.Convert.ToUInt16(HxOverrides.cca(str,p));
		c = this4;
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				var this5 = system.Convert.ToUInt16(HxOverrides.cca(str,p + 1));
				if(this5 == 91) {
					p = p + 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected <![CDATA[",str,p));
					}
					p = p + 5;
					state = 17;
					start = p + 1;
				} else {
					var tmp;
					var this6 = system.Convert.ToUInt16(HxOverrides.cca(str,p + 1));
					if(!(this6 == 68)) {
						var this7 = system.Convert.ToUInt16(HxOverrides.cca(str,p + 1));
						tmp = this7 == 100;
					} else {
						tmp = true;
					}
					if(tmp) {
						if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
							throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected <!DOCTYPE",str,p));
						}
						p = p + 8;
						state = 16;
						start = p + 1;
					} else {
						var tmp1;
						var this8 = system.Convert.ToUInt16(HxOverrides.cca(str,p + 1));
						if(!(this8 != 45)) {
							var this9 = system.Convert.ToUInt16(HxOverrides.cca(str,p + 2));
							tmp1 = this9 != 45;
						} else {
							tmp1 = true;
						}
						if(tmp1) {
							throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected <!--",str,p));
						} else {
							p = p + 2;
							state = 15;
							start = p + 1;
						}
					}
				}
				break;
			case 47:
				if(parent == null) {
					throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!alphaTab.xml.XmlParser.IsValidChar(c)) {
				if(p == start) {
					throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected node name",str,p));
				}
				xml = new alphaTab.xml.XmlNode();
				xml.NodeType = 1;
				xml.LocalName = HxOverrides.substr(str,start,p - start);
				parent.AddChild(xml);
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!alphaTab.xml.XmlParser.IsValidChar(c)) {
				if(start == p) {
					throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected attribute name",str,p));
				}
				var tmp2 = HxOverrides.substr(str,start,p - start);
				aname = tmp2;
				if(xml.Attributes.hasOwnProperty(aname)) {
					throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				var this10 = "";
				buf = this10;
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
			}
			break;
		case 8:
			if(c == 38) {
				buf += Std.string(HxOverrides.substr(str,start,p - start));
				state = 18;
				escapeNext = 8;
				start = p + 1;
			} else if(c == attrValQuote) {
				buf += Std.string(HxOverrides.substr(str,start,p - start));
				var val = buf;
				var this11 = "";
				buf = this11;
				xml.Attributes[aname] = val;
				state = 0;
				next = 4;
			}
			break;
		case 9:
			p = alphaTab.xml.XmlParser.Parse(str,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!alphaTab.xml.XmlParser.IsValidChar(c)) {
				if(start == p) {
					throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(v != parent.LocalName) {
					var tmp3 = "Expected </" + parent.LocalName + ">";
					throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException(tmp3,str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				return p;
			} else {
				throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				buf += Std.string(HxOverrides.substr(str,start,p - start));
				var child = new alphaTab.xml.XmlNode();
				child.NodeType = 3;
				child.Value = buf;
				var this12 = "";
				buf = this12;
				parent.AddChild(child);
				state = 0;
				next = 2;
			} else if(c == 38) {
				buf += Std.string(HxOverrides.substr(str,start,p - start));
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			var tmp4;
			if(c == 63) {
				var this13 = system.Convert.ToUInt16(HxOverrides.cca(str,p + 1));
				tmp4 = this13 == 62;
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				++p;
				state = 1;
			}
			break;
		case 15:
			var tmp5;
			var tmp6;
			if(c == 45) {
				var this14 = system.Convert.ToUInt16(HxOverrides.cca(str,p + 1));
				tmp6 = this14 == 45;
			} else {
				tmp6 = false;
			}
			if(tmp6) {
				var this15 = system.Convert.ToUInt16(HxOverrides.cca(str,p + 2));
				tmp5 = this15 == 62;
			} else {
				tmp5 = false;
			}
			if(tmp5) {
				p = p + 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				var node = new alphaTab.xml.XmlNode();
				node.NodeType = 10;
				node.Value = HxOverrides.substr(str,start,p - start);
				parent.AddChild(node);
				state = 1;
			}
			break;
		case 17:
			var tmp7;
			var tmp8;
			if(c == 93) {
				var this16 = system.Convert.ToUInt16(HxOverrides.cca(str,p + 1));
				tmp8 = this16 == 93;
			} else {
				tmp8 = false;
			}
			if(tmp8) {
				var this17 = system.Convert.ToUInt16(HxOverrides.cca(str,p + 2));
				tmp7 = this17 == 62;
			} else {
				tmp7 = false;
			}
			if(tmp7) {
				var child1 = new alphaTab.xml.XmlNode();
				child1.NodeType = 4;
				child1.Value = HxOverrides.substr(str,start,p - start);
				parent.AddChild(child1);
				p = p + 2;
				state = 1;
			}
			break;
		case 18:
			var this18 = system.Convert.ToUInt16(59);
			if(c == this18) {
				var s = HxOverrides.substr(str,start,p - start);
				var this19 = system.Convert.ToUInt16(HxOverrides.cca(s,0));
				if(this19 == 35) {
					var code;
					var this20 = system.Convert.ToUInt16(HxOverrides.cca(s,1));
					if(this20 == 120) {
						code = alphaTab.platform.Platform.ParseInt("0" + HxOverrides.substr(s,1,s.length - 1));
					} else {
						code = alphaTab.platform.Platform.ParseInt(HxOverrides.substr(s,1,s.length - 1));
					}
					buf += String.fromCharCode(code);
				} else if(alphaTab.xml.XmlParser.Escapes.hasOwnProperty(s)) {
					buf += Std.string(alphaTab.xml.XmlParser.Escapes[s]);
				} else {
					buf += Std.string("&" + s + ";");
				}
				start = p + 1;
				state = escapeNext;
			} else if(!alphaTab.xml.XmlParser.IsValidChar(c) && c != 35) {
				buf += Std.string("&");
				buf += Std.string(HxOverrides.substr(str,start,p - start));
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		default:
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start) {
			buf += Std.string(HxOverrides.substr(str,start,p - start));
			var node1 = new alphaTab.xml.XmlNode();
			node1.NodeType = 3;
			node1.Value = buf;
			parent.AddChild(node1);
		}
		return p;
	}
	if(state == 18 && escapeNext == 13) {
		buf += Std.string("&");
		buf += Std.string(HxOverrides.substr(str,start,p - start));
		var node2 = new alphaTab.xml.XmlNode();
		node2.NodeType = 3;
		node2.Value = buf;
		parent.AddChild(node2);
		return p;
	}
	throw new js._Boot.HaxeError(new alphaTab.xml.XmlException().XmlException("Unexpected end",str,p));
};
alphaTab.xml.XmlParser.IsValidChar = function(c) {
	if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95)) {
		return c == 45;
	} else {
		return true;
	}
};
alphaTab.xml.XmlParser.prototype = {
	__class__: alphaTab.xml.XmlParser
};
alphaTab.xml.XmlParser_XmlState = $hx_exports["alphaTab"]["xml"]["XmlParser_XmlState"] = function() {
};
alphaTab.xml.XmlParser_XmlState.__name__ = ["alphaTab","xml","XmlParser_XmlState"];
alphaTab.xml.XmlParser_XmlState.prototype = {
	__class__: alphaTab.xml.XmlParser_XmlState
};
haxe.IMap = function() { };
haxe.IMap.__name__ = ["haxe","IMap"];
haxe._Int64 = {};
haxe._Int64.___Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe._Int64.___Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe._Int64.___Int64.prototype = {
	__class__: haxe._Int64.___Int64
};
haxe.crypto = {};
haxe.crypto.Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe.crypto.Adler32.__name__ = ["haxe","crypto","Adler32"];
haxe.crypto.Adler32.read = function(i) {
	var a = new haxe.crypto.Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe.crypto.Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g1 = pos;
		var _g = pos + len;
		while(_g1 < _g) {
			var p = _g1++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe.crypto.Adler32
};
haxe.ds = {};
haxe.ds.IntMap = function() {
	this.h = { };
};
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [haxe.IMap];
haxe.ds.IntMap.prototype = {
	__class__: haxe.ds.IntMap
};
haxe.io.Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe.io.Bytes.__name__ = ["haxe","io","Bytes"];
haxe.io.Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe.io.Bytes
};
haxe.io.BytesBuffer = function() {
	this.b = [];
};
haxe.io.BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe.io.BytesBuffer.prototype = {
	getBytes: function() {
		var bytes = new haxe.io.Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe.io.BytesBuffer
};
haxe.io.Eof = function() {
};
haxe.io.Eof.__name__ = ["haxe","io","Eof"];
haxe.io.Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe.io.Eof
};
haxe.io.Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe.io.Error.Blocked = ["Blocked",0];
haxe.io.Error.Blocked.toString = $estr;
haxe.io.Error.Blocked.__enum__ = haxe.io.Error;
haxe.io.Error.Overflow = ["Overflow",1];
haxe.io.Error.Overflow.toString = $estr;
haxe.io.Error.Overflow.__enum__ = haxe.io.Error;
haxe.io.Error.OutsideBounds = ["OutsideBounds",2];
haxe.io.Error.OutsideBounds.toString = $estr;
haxe.io.Error.OutsideBounds.__enum__ = haxe.io.Error;
haxe.io.Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe.io.Error; $x.toString = $estr; return $x; };
haxe.io.FPHelper = function() { };
haxe.io.FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe.io.FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe.io.FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe.io.FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe.io.FPHelper.doubleToI64 = function(v) {
	var i64 = haxe.io.FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
haxe.zip = {};
haxe.zip.ExtraField = { __ename__ : true, __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"] };
haxe.zip.ExtraField.FUnknown = function(tag,bytes) { var $x = ["FUnknown",0,tag,bytes]; $x.__enum__ = haxe.zip.ExtraField; $x.toString = $estr; return $x; };
haxe.zip.ExtraField.FInfoZipUnicodePath = function(name,crc) { var $x = ["FInfoZipUnicodePath",1,name,crc]; $x.__enum__ = haxe.zip.ExtraField; $x.toString = $estr; return $x; };
haxe.zip.ExtraField.FUtf8 = ["FUtf8",2];
haxe.zip.ExtraField.FUtf8.toString = $estr;
haxe.zip.ExtraField.FUtf8.__enum__ = haxe.zip.ExtraField;
haxe.zip.Huffman = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"] };
haxe.zip.Huffman.Found = function(i) { var $x = ["Found",0,i]; $x.__enum__ = haxe.zip.Huffman; $x.toString = $estr; return $x; };
haxe.zip.Huffman.NeedBit = function(left,right) { var $x = ["NeedBit",1,left,right]; $x.__enum__ = haxe.zip.Huffman; $x.toString = $estr; return $x; };
haxe.zip.Huffman.NeedBits = function(n,table) { var $x = ["NeedBits",2,n,table]; $x.__enum__ = haxe.zip.Huffman; $x.toString = $estr; return $x; };
haxe.zip.HuffTools = function() {
};
haxe.zip.HuffTools.__name__ = ["haxe","zip","HuffTools"];
haxe.zip.HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t[1]) {
		case 0:
			return 0;
		case 1:
			var b = t[3];
			var a = t[2];
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js._Boot.HaxeError("assert");
			break;
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t[1] == 1) {
				var b = t[3];
				var a = t[2];
				return haxe.zip.Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js._Boot.HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g1 = 0;
		var _g = size;
		while(_g1 < _g) {
			var i = _g1++;
			table.push(haxe.zip.Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe.zip.Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t[1] == 1) {
			var b = t[3];
			var a = t[2];
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js._Boot.HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe.zip.Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe.zip.Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js._Boot.HaxeError("Invalid huffman");
		}
		var _g1 = 0;
		var _g = maxbits;
		while(_g1 < _g) {
			var i = _g1++;
			counts.push(0);
			tmp.push(0);
		}
		var _g11 = 0;
		var _g2 = nlengths;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js._Boot.HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g12 = 1;
		var _g3 = maxbits - 1;
		while(_g12 < _g3) {
			var i2 = _g12++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe.ds.IntMap();
		var _g13 = 0;
		var _g4 = nlengths;
		while(_g13 < _g4) {
			var i3 = _g13++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe.zip.Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe.zip.HuffTools
};
haxe.zip._InflateImpl = {};
haxe.zip._InflateImpl.Window = function(hasCrc) {
	this.buffer = new haxe.io.Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe.crypto.Adler32();
	}
};
haxe.zip._InflateImpl.Window.__name__ = ["haxe","zip","_InflateImpl","Window"];
haxe.zip._InflateImpl.Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe.io.Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe.zip._InflateImpl.Window
};
haxe.zip._InflateImpl.State = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"] };
haxe.zip._InflateImpl.State.Head = ["Head",0];
haxe.zip._InflateImpl.State.Head.toString = $estr;
haxe.zip._InflateImpl.State.Head.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Block = ["Block",1];
haxe.zip._InflateImpl.State.Block.toString = $estr;
haxe.zip._InflateImpl.State.Block.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.CData = ["CData",2];
haxe.zip._InflateImpl.State.CData.toString = $estr;
haxe.zip._InflateImpl.State.CData.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Flat = ["Flat",3];
haxe.zip._InflateImpl.State.Flat.toString = $estr;
haxe.zip._InflateImpl.State.Flat.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Crc = ["Crc",4];
haxe.zip._InflateImpl.State.Crc.toString = $estr;
haxe.zip._InflateImpl.State.Crc.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Dist = ["Dist",5];
haxe.zip._InflateImpl.State.Dist.toString = $estr;
haxe.zip._InflateImpl.State.Dist.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.DistOne = ["DistOne",6];
haxe.zip._InflateImpl.State.DistOne.toString = $estr;
haxe.zip._InflateImpl.State.DistOne.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip._InflateImpl.State.Done = ["Done",7];
haxe.zip._InflateImpl.State.Done.toString = $estr;
haxe.zip._InflateImpl.State.Done.__enum__ = haxe.zip._InflateImpl.State;
haxe.zip.InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this["final"] = false;
	this.htools = new haxe.zip.HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe.zip._InflateImpl.State.Head : haxe.zip._InflateImpl.State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 19) {
		var i1 = _g++;
		this.lengths.push(-1);
	}
	this.window = new haxe.zip._InflateImpl.Window(crc);
};
haxe.zip.InflateImpl.__name__ = ["haxe","zip","InflateImpl"];
haxe.zip.InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe.zip.InflateImpl.FIXED_HUFFMAN != null) {
			return haxe.zip.InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe.zip.InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe.zip.InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h[1]) {
		case 0:
			var n = h[2];
			return n;
		case 1:
			var b = h[3];
			var a = h[2];
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h[3];
			var n1 = h[2];
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				break;
			default:
				throw new js._Boot.HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		var _g = this.state;
		switch(_g[1]) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js._Boot.HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js._Boot.HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js._Boot.HaxeError("Unsupported dictionary");
			}
			this.state = haxe.zip._InflateImpl.State.Block;
			return true;
		case 1:
			this["final"] = this.getBit();
			var _g1 = this.getBits(2);
			switch(_g1) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				this.state = haxe.zip._InflateImpl.State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe.zip._InflateImpl.State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g11 = 0;
				var _g2 = hclen;
				while(_g11 < _g2) {
					var i = _g11++;
					this.lengths[haxe.zip.InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g3 = hclen;
				while(_g3 < 19) {
					var i1 = _g3++;
					this.lengths[haxe.zip.InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g12 = 0;
				var _g4 = hlit + hdist;
				while(_g12 < _g4) {
					var i2 = _g12++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe.zip._InflateImpl.State.CData;
				return true;
			default:
				throw new js._Boot.HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this["final"] ? haxe.zip._InflateImpl.State.Crc : haxe.zip._InflateImpl.State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				this.len = haxe.zip.InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				this.dist = haxe.zip.InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js._Boot.HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe.zip._InflateImpl.State.DistOne : haxe.zip._InflateImpl.State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this["final"] ? haxe.zip._InflateImpl.State.Crc : haxe.zip._InflateImpl.State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe.zip._InflateImpl.State.Done;
				return true;
			}
			var crc = haxe.crypto.Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js._Boot.HaxeError("Invalid CRC");
			}
			this.state = haxe.zip._InflateImpl.State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe.zip._InflateImpl.State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe.zip._InflateImpl.State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe.zip.InflateImpl
};
haxe.zip.Reader = function(i) {
	this.i = i;
};
haxe.zip.Reader.__name__ = ["haxe","zip","Reader"];
haxe.zip.Reader.prototype = {
	readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new List();
		while(length > 0) {
			if(length < 4) {
				throw new js._Boot.HaxeError("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw new js._Boot.HaxeError("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe.io.BytesBuffer();
					data.b.push(version);
					var src = this.i.read(len - 1);
					var b1 = data.b;
					var b2 = src.b;
					var _g1 = 0;
					var _g = src.length;
					while(_g1 < _g) {
						var i = _g1++;
						data.b.push(b2[i]);
					}
					fields.add(haxe.zip.ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe.zip.ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe.zip.ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw new js._Boot.HaxeError("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		if((flags & 63473) != 0) {
			throw new js._Boot.HaxeError("Unsupported flags " + flags);
		}
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw new js._Boot.HaxeError("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe.zip.ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.crc32 == null) {
				if(e.compressed) {
					var bufSize = 65536;
					if(tmp == null) {
						tmp = new haxe.io.Bytes(new ArrayBuffer(bufSize));
					}
					var out = new haxe.io.BytesBuffer();
					var z = new haxe.zip.InflateImpl(this.i,false,false);
					while(true) {
						var n = z.readBytes(tmp,0,bufSize);
						if(n < 0 || n > tmp.length) {
							throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
						}
						var b1 = out.b;
						var b2 = tmp.b;
						var _g1 = 0;
						var _g = n;
						while(_g1 < _g) {
							var i = _g1++;
							out.b.push(b2[i]);
						}
						if(n < bufSize) {
							break;
						}
					}
					e.data = out.getBytes();
				} else {
					e.data = this.i.read(e.dataSize);
				}
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe.zip.Reader
};
js._Boot = {};
js._Boot.HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js._Boot.HaxeError);
	}
};
js._Boot.HaxeError.__name__ = ["js","_Boot","HaxeError"];
js._Boot.HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js._Boot.HaxeError(val);
	}
};
js._Boot.HaxeError.__super__ = Error;
js._Boot.HaxeError.prototype = $extend(Error.prototype,{
	__class__: js._Boot.HaxeError
});
js.html = {};
js.html.compat = {};
js.html.compat.ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js.html.compat.ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js.html.compat.ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js.html.compat.ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js.html.compat.ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js.html.compat.ArrayBuffer
};
js.html.compat.DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js._Boot.HaxeError(haxe.io.Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
js.html.compat.DataView.__name__ = ["js","html","compat","DataView"];
js.html.compat.DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe.io.FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe.io.FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe.io.FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe.io.FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js.html.compat.DataView
};
js.html.compat.Float32Array = function() { };
js.html.compat.Float32Array.__name__ = ["js","html","compat","Float32Array"];
js.html.compat.Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js.html.compat.ArrayBuffer(_g2);
	} else if(js.Boot.__instanceof(arg1,js.html.compat.ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe.io.FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe.io.FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js.html.compat.ArrayBuffer(buffer1);
	} else {
		throw new js._Boot.HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js.html.compat.Float32Array._subarray;
	arr.set = js.html.compat.Float32Array._set;
	return arr;
};
js.html.compat.Float32Array._set = function(arg,offset) {
	if(js.Boot.__instanceof(arg.buffer,js.html.compat.ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js._Boot.HaxeError("TODO");
	}
};
js.html.compat.Float32Array._subarray = function(start,end) {
	var a = js.html.compat.Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
js.html.compat.Float64Array = function() { };
js.html.compat.Float64Array.__name__ = ["js","html","compat","Float64Array"];
js.html.compat.Float64Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 3;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js.html.compat.ArrayBuffer(_g2);
	} else if(js.Boot.__instanceof(arg1,js.html.compat.ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 3;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val1 = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			var val2 = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe.io.FPHelper.i64ToDouble(val1,val2));
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var v = haxe.io.FPHelper.doubleToI64(f);
			var i3 = v.low;
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
			var i4 = v.high;
			buffer1.push(i4 & 255);
			buffer1.push(i4 >> 8 & 255);
			buffer1.push(i4 >> 16 & 255);
			buffer1.push(i4 >>> 24);
		}
		arr.byteLength = arr.length << 3;
		arr.byteOffset = 0;
		arr.buffer = new js.html.compat.ArrayBuffer(buffer1);
	} else {
		throw new js._Boot.HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js.html.compat.Float64Array._subarray;
	arr.set = js.html.compat.Float64Array._set;
	return arr;
};
js.html.compat.Float64Array._set = function(arg,offset) {
	if(js.Boot.__instanceof(arg.buffer,js.html.compat.ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js._Boot.HaxeError("TODO");
	}
};
js.html.compat.Float64Array._subarray = function(start,end) {
	var a = js.html.compat.Float64Array._new(this.slice(start,end));
	a.byteOffset = start * 8;
	return a;
};
js.html.compat.Uint8Array = function() { };
js.html.compat.Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js.html.compat.Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js.html.compat.ArrayBuffer(arr);
	} else if(js.Boot.__instanceof(arg1,js.html.compat.ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js.html.compat.ArrayBuffer(arr);
	} else {
		throw new js._Boot.HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js.html.compat.Uint8Array._subarray;
	arr.set = js.html.compat.Uint8Array._set;
	return arr;
};
js.html.compat.Uint8Array._set = function(arg,offset) {
	if(js.Boot.__instanceof(arg.buffer,js.html.compat.ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js._Boot.HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js._Boot.HaxeError("TODO");
	}
};
js.html.compat.Uint8Array._subarray = function(start,end) {
	var a = js.html.compat.Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
system.collections = {};
system.collections.generic = {};
system.collections.generic.IEnumerable = function() { };
system.collections.generic.IEnumerable.__name__ = ["system","collections","generic","IEnumerable"];
system._CsString = {};
system._CsString.CsString_Impl_ = {};
system._CsString.CsString_Impl_.__name__ = ["system","_CsString","CsString_Impl_"];
system._CsString.CsString_Impl_.Split_CharArray = function(this1,chars) {
	var strings = [];
	var startPos = 0;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		var cc = HxOverrides.cca(this1,i);
		if(chars.indexOf(cc) >= 0) {
			var endPos = i;
			if(endPos < startPos) {
				strings.push("");
			} else {
				strings.push(this1.substring(startPos,endPos));
			}
			startPos = i + 1;
		}
	}
	if(startPos < this1.length) {
		strings.push(this1.substring(startPos,this1.length));
	}
	return strings;
};
system._EventAction2 = {};
system._EventAction2.EventAction2_Impl_ = {};
system._EventAction2.EventAction2_Impl_.__name__ = ["system","_EventAction2","EventAction2_Impl_"];
system._EventAction2.EventAction2_Impl_.add = function(lhs,rhs) {
	if(lhs == null) {
		var this1 = rhs == null ? null : [rhs];
		lhs = this1;
	} else {
		lhs.push(rhs);
	}
	return lhs;
};
system._EventAction2.EventAction2_Impl_.sub = function(lhs,rhs) {
	var raw = lhs;
	var index = raw.indexOf(rhs);
	if(index != -1) {
		raw.splice(index,1);
		if(raw.length == 0) {
			return null;
		}
	}
	return lhs;
};
system._EventAction2.EventAction2_Impl_.Invoke = function(this1,p1,p2) {
	if(this1 == null) {
		return;
	}
	var _g = 0;
	while(_g < this1.length) {
		var x = this1[_g];
		++_g;
		x(p1,p2);
	}
};
system.FormatException = function() {
	system.Exception.call(this);
};
system.FormatException.__name__ = ["system","FormatException"];
system.FormatException.__super__ = system.Exception;
system.FormatException.prototype = $extend(system.Exception.prototype,{
	__class__: system.FormatException
});
system.IFormatProvider = function() { };
system.IFormatProvider.__name__ = ["system","IFormatProvider"];
system._Int32 = {};
system._Int32.Int32_Impl_ = {};
system._Int32.Int32_Impl_.__name__ = ["system","_Int32","Int32_Impl_"];
system._Int32.Int32_Impl_.CompareTo_Int32 = function(this1,other) {
	if(this1 < other) {
		return -1;
	}
	if(this1 > other) {
		return 1;
	}
	return 0;
};
system.Int32ArrayIterator = function(array) {
	this._array = array;
	this._i = 0;
};
system.Int32ArrayIterator.__name__ = ["system","Int32ArrayIterator"];
system.Int32ArrayIterator.prototype = {
	hasNext: function() {
		return this._i < this._array.length;
	}
	,next: function() {
		return this._array[this._i++];
	}
	,__class__: system.Int32ArrayIterator
};
system.InvalidCastException = function(message) {
	if(message == null) {
		message = "";
	}
	system.Exception.call(this);
	this.Exception_CsString(message);
};
system.InvalidCastException.__name__ = ["system","InvalidCastException"];
system.InvalidCastException.__super__ = system.Exception;
system.InvalidCastException.prototype = $extend(system.Exception.prototype,{
	__class__: system.InvalidCastException
});
system.collections.generic.IterableEnumerable = function(i) {
	this._iterable = i;
};
system.collections.generic.IterableEnumerable.__name__ = ["system","collections","generic","IterableEnumerable"];
system.collections.generic.IterableEnumerable.__interfaces__ = [system.collections.generic.IEnumerable];
system.collections.generic.IterableEnumerable.prototype = {
	__class__: system.collections.generic.IterableEnumerable
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
alphaTab.util.Logger.LogLevel = 0;
alphaTab.util.Logger.LogLevel = 2;
alphaTab.Environment.ScriptFile = null;
alphaTab.Environment.IsFontLoaded = false;
alphaTab.Environment.RenderEngines = null;
alphaTab.Environment.LayoutEngines = null;
alphaTab.Environment.StaveProfiles = null;
alphaTab.Environment.Init();
alphaTab.model.Tuning._sevenStrings = null;
alphaTab.model.Tuning._sixStrings = null;
alphaTab.model.Tuning._fiveStrings = null;
alphaTab.model.Tuning._fourStrings = null;
alphaTab.model.Tuning._defaultTunings = null;
alphaTab.model.Tuning.Initialize();
alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup = null;
alphaTab.platform.javaScript.AlphaSynthFlashOutput.NextId = 0;
var this1 = {}
alphaTab.platform.javaScript.AlphaSynthFlashOutput.Lookup = this1;
alphaTab.rendering.glyphs.ScoreBeatGlyph.NormalKeys = null;
alphaTab.rendering.glyphs.ScoreBeatGlyph.XKeys = null;
var this1 = {}
alphaTab.rendering.glyphs.ScoreBeatGlyph.NormalKeys = this1;
var normalKeyNotes = new Int32Array([32,34,35,36,38,39,40,41,43,45,47,48,50,55,56,58,60,61]);
var i = 0;
while(i < normalKeyNotes.length) {
	alphaTab.rendering.glyphs.ScoreBeatGlyph.NormalKeys[normalKeyNotes[i]] = true;
	++i;
}
var this2 = {}
alphaTab.rendering.glyphs.ScoreBeatGlyph.XKeys = this2;
var xKeyNotes = new Int32Array([31,33,37,42,44,54,62,63,64,65,66]);
var i1 = 0;
while(i1 < xKeyNotes.length) {
	alphaTab.rendering.glyphs.ScoreBeatGlyph.XKeys[xKeyNotes[i1]] = true;
	++i1;
}
alphaTab.xml.XmlParser.Escapes = null;
var this1 = {}
alphaTab.xml.XmlParser.Escapes = this1;
alphaTab.xml.XmlParser.Escapes["lt"] = "<";
alphaTab.xml.XmlParser.Escapes["gt"] = ">";
alphaTab.xml.XmlParser.Escapes["amp"] = "&";
alphaTab.xml.XmlParser.Escapes["quot"] = "\"";
alphaTab.xml.XmlParser.Escapes["apos"] = "'";
var ArrayBuffer = $global.ArrayBuffer || js.html.compat.ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js.html.compat.ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js.html.compat.DataView;
var Float32Array = $global.Float32Array || js.html.compat.Float32Array._new;
var Float64Array = $global.Float64Array || ($global.Float32Array ? "notsupported" : null) || js.html.compat.Float64Array._new;
var Uint8Array = $global.Uint8Array || js.html.compat.Uint8Array._new;
alphaTab.platform.svg.SvgCanvas.BlurCorrection = 0;
alphaTab.platform.model.Color.BlackRgb = "#000000";
alphaTab.platform.Platform.IsLittleEndian = true;
system.Convert._conversionBuffer = new ArrayBuffer(8);
system.Convert._int8Buffer = new Int8Array(system.Convert._conversionBuffer);
system.Convert._uint8Buffer = new Uint8Array(system.Convert._conversionBuffer);
system.Convert._int16Buffer = new Int16Array(system.Convert._conversionBuffer);
system.Convert._uint16Buffer = new Uint16Array(system.Convert._conversionBuffer);
system.Convert._int32Buffer = new Int32Array(system.Convert._conversionBuffer);
system.Convert._uint32Buffer = new Uint32Array(system.Convert._conversionBuffer);
js.Boot.__toStr = ({ }).toString;
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPrefix = "alphaSynth.";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdInitialize = "alphaSynth." + "initialize";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetLogLevel = "alphaSynth." + "setLogLevel";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetMasterVolume = "alphaSynth." + "setMasterVolume";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetMetronomeVolume = "alphaSynth." + "setMetronomeVolume";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetPlaybackSpeed = "alphaSynth." + "setPlaybackSpeed";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetTickPosition = "alphaSynth." + "setTickPosition";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetTimePosition = "alphaSynth." + "setTimePosition";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetPlaybackRange = "alphaSynth." + "setPlaybackRange";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetIsLooping = "alphaSynth." + "setIsLooping";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPlay = "alphaSynth." + "play";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPause = "alphaSynth." + "pause";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPlayPause = "alphaSynth." + "playPause";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdStop = "alphaSynth." + "stop";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdLoadSoundFontBytes = "alphaSynth." + "loadSoundFontBytes";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdLoadMidi = "alphaSynth." + "loadMidi";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetChannelMute = "alphaSynth." + "setChannelMute";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetChannelSolo = "alphaSynth." + "setChannelSolo";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetChannelVolume = "alphaSynth." + "setChannelVolume";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSetChannelProgram = "alphaSynth." + "setChannelProgram";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdResetChannelStates = "alphaSynth." + "resetChannelStates";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdReady = "alphaSynth." + "ready";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdReadyForPlayback = "alphaSynth." + "readyForPlayback";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPositionChanged = "alphaSynth." + "positionChanged";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdPlayerStateChanged = "alphaSynth." + "playerStateChanged";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdFinished = "alphaSynth." + "finished";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSoundFontLoaded = "alphaSynth." + "soundFontLoaded";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdSoundFontLoadFailed = "alphaSynth." + "soundFontLoadFailed";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdMidiLoaded = "alphaSynth." + "midiLoaded";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdMidiLoadFailed = "alphaSynth." + "midiLoadFailed";
alphaTab.platform.javaScript.AlphaSynthWebWorker.CmdLog = "alphaSynth." + "log";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputPrefix = "alphaSynth." + "output.";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputSequencerFinished = "alphaSynth." + "output." + "sequencerFinished";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputAddSamples = "alphaSynth." + "output." + "addSamples";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputPlay = "alphaSynth." + "output." + "play";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputPause = "alphaSynth." + "output." + "pause";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputResetSamples = "alphaSynth." + "output." + "resetSamples";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputSampleRequest = "alphaSynth." + "output." + "sampleRequest";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputFinished = "alphaSynth." + "output." + "finished";
alphaTab.platform.javaScript.AlphaSynthWorkerSynthOutput.CmdOutputSamplesPlayed = "alphaSynth." + "output." + "samplesPlayed";
alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSine = new alphaTab.audio.synth.bank.components.generators.SineGenerator(new alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor());
alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSaw = new alphaTab.audio.synth.bank.components.generators.SawGenerator(new alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor());
alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultSquare = new alphaTab.audio.synth.bank.components.generators.SquareGenerator(new alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor());
alphaTab.audio.synth.bank.components.generators.DefaultGenerators.DefaultTriangle = new alphaTab.audio.synth.bank.components.generators.TriangleGenerator(new alphaTab.audio.synth.bank.descriptors.GeneratorDescriptor());
alphaTab.rendering.layout.PageViewLayout.PagePadding = new Float32Array([40,40,40,40]);
alphaTab.rendering.layout.PageViewLayout.GroupSpacing = 20;
alphaTab.rendering.layout.HorizontalScreenLayout.PagePadding = new Float32Array([20,20,20,20]);
alphaTab.rendering.layout.HorizontalScreenLayout.GroupSpacing = 20;
alphaTab.Environment.StaveProfileScoreTab = "score-tab";
alphaTab.Environment.StaveProfileTab = "tab";
alphaTab.Environment.StaveProfileTabMixed = "tab-mixed";
alphaTab.Environment.StaveProfileScore = "score";
alphaTab.audio.MidiUtils.QuarterTime = 960;
alphaTab.audio.MidiUtils.PercussionChannel = 9;
alphaTab.audio.MidiUtils.MinVelocity = 15;
alphaTab.audio.MidiUtils.VelocityIncrement = 16;
alphaTab.audio.generator.MidiFileGenerator.DefaultMetronomeKey = 37;
alphaTab.audio.generator.MidiFileGenerator.DefaultDurationDead = 30;
alphaTab.audio.generator.MidiFileGenerator.DefaultDurationPalmMute = 80;
alphaTab.audio.generator.MidiFileGenerator.DefaultBend = 64;
alphaTab.audio.generator.MidiFileGenerator.DefaultBendSemitone = 2.75;
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.Paused = 0;
alphaTab.audio.synth._PlayerState.PlayerState_Impl_.Playing = 1;
alphaTab.audio.synth.bank.PatchBank.DrumBank = 128;
alphaTab.audio.synth.bank.PatchBank.BankSize = 128;
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.Delay = 0;
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.Attack = 1;
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.Hold = 2;
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.Decay = 3;
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.Sustain = 4;
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.Release = 5;
alphaTab.audio.synth.bank.components._EnvelopeState.EnvelopeState_Impl_.None = 6;
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.None = 0;
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.BiquadLowpass = 1;
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.BiquadHighpass = 2;
alphaTab.audio.synth.bank.components._FilterType.FilterType_Impl_.OnePoleLowpass = 3;
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.Delay = 0;
alphaTab.audio.synth.bank.components._LfoState.LfoState_Impl_.Sustain = 1;
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.Neg3dBCenter = 0;
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.Neg6dBCenter = 1;
alphaTab.audio.synth.bank.components._PanFormulaEnum.PanFormulaEnum_Impl_.ZeroCenter = 2;
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.PreLoop = 0;
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.Loop = 1;
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.PostLoop = 2;
alphaTab.audio.synth.bank.components.generators._GeneratorState.GeneratorState_Impl_.Finished = 3;
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.None = 0;
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.Linear = 1;
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.Cosine = 2;
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.CubicSpline = 3;
alphaTab.audio.synth.bank.components.generators._Interpolation.Interpolation_Impl_.Sinc = 4;
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.NoLoop = 0;
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.OneShot = 1;
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.Continuous = 2;
alphaTab.audio.synth.bank.components.generators._LoopMode.LoopMode_Impl_.LoopUntilNoteOff = 3;
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.Sine = 0;
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.Square = 1;
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.Saw = 2;
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.Triangle = 3;
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.SampleData = 4;
alphaTab.audio.synth.bank.descriptors._Waveform.Waveform_Impl_.WhiteNoise = 5;
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ChannelKeyVelocity = 0;
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.ChannelKey = 1;
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.KeyVelocity = 2;
alphaTab.audio.synth.bank.patch._IntervalType.IntervalType_Impl_.Key = 3;
alphaTab.audio.synth.midi.MidiHelper.MicroSecondsPerMinute = 60000000;
alphaTab.audio.synth.midi.MidiHelper.MinChannel = 0;
alphaTab.audio.synth.midi.MidiHelper.MaxChannel = 15;
alphaTab.audio.synth.midi.MidiHelper.DrumChannel = 9;
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.TicksPerBeat = 0;
alphaTab.audio.synth.midi._MidiTimeFormat.MidiTimeFormat_Impl_.FramesPerSecond = 1;
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.SingleTrack = 0;
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.MultiTrack = 1;
alphaTab.audio.synth.midi._MidiTrackFormat.MidiTrackFormat_Impl_.MultiSong = 2;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.BankSelectCoarse = 0;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ModulationCoarse = 1;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.BreathControllerCoarse = 2;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.FootControllerCoarse = 4;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.PortamentoTimeCoarse = 5;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.DataEntryCoarse = 6;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.VolumeCoarse = 7;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.BalanceCoarse = 8;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.PanCoarse = 10;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ExpressionControllerCoarse = 11;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.EffectControl1Coarse = 12;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.EffectControl2Coarse = 13;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.GeneralPurposeSlider1 = 16;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.GeneralPurposeSlider2 = 17;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.GeneralPurposeSlider3 = 18;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.GeneralPurposeSlider4 = 19;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.BankSelectFine = 32;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ModulationFine = 33;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.BreathControllerFine = 34;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.FootControllerFine = 36;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.PortamentoTimeFine = 37;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.DataEntryFine = 38;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.VolumeFine = 39;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.BalanceFine = 40;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.PanFine = 42;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ExpressionControllerFine = 43;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.EffectControl1Fine = 44;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.EffectControl2Fine = 45;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.HoldPedal = 64;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.Portamento = 65;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.SostenutoPedal = 66;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.SoftPedal = 67;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.LegatoPedal = 68;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.Hold2Pedal = 69;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.SoundVariation = 70;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.SoundTimbre = 71;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.SoundReleaseTime = 72;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.SoundAttackTime = 73;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.SoundBrightness = 74;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.SoundControl6 = 75;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.SoundControl7 = 76;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.SoundControl8 = 77;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.SoundControl9 = 78;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.SoundControl10 = 79;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.GeneralPurposeButton1 = 80;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.GeneralPurposeButton2 = 81;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.GeneralPurposeButton3 = 82;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.GeneralPurposeButton4 = 83;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.EffectsLevel = 91;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.TremuloLevel = 92;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ChorusLevel = 93;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.CelesteLevel = 94;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.PhaseLevel = 95;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.DataButtonIncrement = 96;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.DataButtonDecrement = 97;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.NonRegisteredParameterFine = 98;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.NonRegisteredParameterCourse = 99;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.RegisteredParameterFine = 100;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.RegisteredParameterCourse = 101;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.AllSoundOff = 120;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.ResetControllers = 121;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.LocalKeyboard = 122;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.AllNotesOff = 123;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.OmniModeOff = 124;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.OmniModeOn = 125;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.MonoMode = 126;
alphaTab.audio.synth.midi.event._ControllerTypeEnum.ControllerTypeEnum_Impl_.PolyMode = 127;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.SequenceNumber = 0;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.TextEvent = 1;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.CopyrightNotice = 2;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.SequenceOrTrackName = 3;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.InstrumentName = 4;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.LyricText = 5;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.MarkerText = 6;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.CuePoint = 7;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.PatchName = 8;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.PortName = 9;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.MidiChannel = 32;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.MidiPort = 33;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.EndOfTrack = 47;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.Tempo = 81;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.SmpteOffset = 84;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.TimeSignature = 88;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.KeySignature = 89;
alphaTab.audio.synth.midi.event._MetaEventTypeEnum.MetaEventTypeEnum_Impl_.SequencerSpecific = 127;
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.NoteOff = 128;
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.NoteOn = 144;
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.NoteAftertouch = 160;
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.Controller = 176;
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ProgramChange = 192;
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.ChannelAftertouch = 208;
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.PitchBend = 224;
alphaTab.audio.synth.midi.event._MidiEventTypeEnum.MidiEventTypeEnum_Impl_.Meta = 255;
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.SystemExclusive = 240;
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.MtcQuarterFrame = 241;
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.SongPosition = 242;
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.SongSelect = 243;
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.TuneRequest = 246;
alphaTab.audio.synth.midi.event._SystemCommonTypeEnum.SystemCommonTypeEnum_Impl_.SystemExclusive2 = 247;
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.MinToMax = 0;
alphaTab.audio.synth.sf2._DirectionEnum.DirectionEnum_Impl_.MaxToMin = 1;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.StartAddressOffset = 0;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.EndAddressOffset = 1;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.StartLoopAddressOffset = 2;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.EndLoopAddressOffset = 3;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.StartAddressCoarseOffset = 4;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ModulationLFOToPitch = 5;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.VibratoLFOToPitch = 6;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ModulationEnvelopeToPitch = 7;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.InitialFilterCutoffFrequency = 8;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.InitialFilterQ = 9;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ModulationLFOToFilterCutoffFrequency = 10;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ModulationEnvelopeToFilterCutoffFrequency = 11;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.EndAddressCoarseOffset = 12;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ModulationLFOToVolume = 13;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Unused1 = 14;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ChorusEffectsSend = 15;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ReverbEffectsSend = 16;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Pan = 17;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Unused2 = 18;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Unused3 = 19;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Unused4 = 20;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.DelayModulationLFO = 21;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.FrequencyModulationLFO = 22;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.DelayVibratoLFO = 23;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.FrequencyVibratoLFO = 24;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.DelayModulationEnvelope = 25;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.AttackModulationEnvelope = 26;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.HoldModulationEnvelope = 27;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.DecayModulationEnvelope = 28;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.SustainModulationEnvelope = 29;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ReleaseModulationEnvelope = 30;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.KeyNumberToModulationEnvelopeHold = 31;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.KeyNumberToModulationEnvelopeDecay = 32;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.DelayVolumeEnvelope = 33;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.AttackVolumeEnvelope = 34;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.HoldVolumeEnvelope = 35;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.DecayVolumeEnvelope = 36;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.SustainVolumeEnvelope = 37;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ReleaseVolumeEnvelope = 38;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.KeyNumberToVolumeEnvelopeHold = 39;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.KeyNumberToVolumeEnvelopeDecay = 40;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Instrument = 41;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Reserved1 = 42;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.KeyRange = 43;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.VelocityRange = 44;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.StartLoopAddressCoarseOffset = 45;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.KeyNumber = 46;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Velocity = 47;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.InitialAttenuation = 48;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Reserved2 = 49;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.EndLoopAddressCoarseOffset = 50;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.CoarseTune = 51;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.FineTune = 52;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.SampleID = 53;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.SampleModes = 54;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Reserved3 = 55;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ScaleTuning = 56;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.ExclusiveClass = 57;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.OverridingRootKey = 58;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.Unused5 = 59;
alphaTab.audio.synth.sf2._GeneratorEnum.GeneratorEnum_Impl_.UnusedEnd = 60;
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.Unipolar = 0;
alphaTab.audio.synth.sf2._PolarityEnum.PolarityEnum_Impl_.Bipolar = 1;
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.MonoSample = 1;
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.RightSample = 2;
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.LeftSample = 4;
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.LinkedSample = 8;
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.OggVobis = 16;
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.RomMonoSample = 32769;
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.RomRightSample = 32770;
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.RomLeftSample = 32772;
alphaTab.audio.synth.sf2._SFSampleLink.SFSampleLink_Impl_.RomLinkedSample = 32776;
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.Linear = 0;
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.Concave = 1;
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.Convex = 2;
alphaTab.audio.synth.sf2._SourceTypeEnum.SourceTypeEnum_Impl_.Switch = 3;
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.Linear = 0;
alphaTab.audio.synth.sf2._TransformEnum.TransformEnum_Impl_.AbsoluteValue = 2;
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.Stopped = 0;
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.Stopping = 1;
alphaTab.audio.synth.synthesis._VoiceStateEnum.VoiceStateEnum_Impl_.Playing = 2;
alphaTab.audio.synth.util.SynthConstants.InterpolationMode = 1;
alphaTab.audio.synth.util.SynthConstants.AudioChannels = 2;
alphaTab.audio.synth.util.SynthConstants.Pi = 3.14159265358979;
alphaTab.audio.synth.util.SynthConstants.TwoPi = 2.0 * 3.14159265358979;
alphaTab.audio.synth.util.SynthConstants.HalfPi = 3.14159265358979 / 2.0;
alphaTab.audio.synth.util.SynthConstants.InverseSqrtOfTwo = 0.707106781186;
alphaTab.audio.synth.util.SynthConstants.DefaultLfoFrequency = 8.0;
alphaTab.audio.synth.util.SynthConstants.DefaultModDepth = 100;
alphaTab.audio.synth.util.SynthConstants.DefaultPolyphony = 40;
alphaTab.audio.synth.util.SynthConstants.MinPolyphony = 5;
alphaTab.audio.synth.util.SynthConstants.MaxPolyphony = 250;
alphaTab.audio.synth.util.SynthConstants.DefaultBlockSize = 64;
alphaTab.audio.synth.util.SynthConstants.MaxBufferSize = 0.05;
alphaTab.audio.synth.util.SynthConstants.MinBufferSize = 0.001;
alphaTab.audio.synth.util.SynthConstants.DenormLimit = 1e-38;
alphaTab.audio.synth.util.SynthConstants.NonAudible = 1e-5;
alphaTab.audio.synth.util.SynthConstants.SincWidth = 16;
alphaTab.audio.synth.util.SynthConstants.SincResolution = 64;
alphaTab.audio.synth.util.SynthConstants.MaxVoiceComponents = 4;
alphaTab.audio.synth.util.SynthConstants.DefaultChannelCount = 17;
alphaTab.audio.synth.util.SynthConstants.DefaultKeyCount = 128;
alphaTab.audio.synth.util.SynthConstants.DefaultMixGain = 0.35;
alphaTab.audio.synth.util.SynthConstants.MinVolume = 0;
alphaTab.audio.synth.util.SynthConstants.MaxVolume = 10;
alphaTab.audio.synth.util.SynthConstants.MinProgram = 0;
alphaTab.audio.synth.util.SynthConstants.MaxProgram = 127;
alphaTab.audio.synth.util.SynthConstants.MinPlaybackSpeed = 0.125;
alphaTab.audio.synth.util.SynthConstants.MaxPlaybackSpeed = 8;
alphaTab.importer.AlphaTexImporter.Eof = 0;
alphaTab.importer.AlphaTexImporter.TrackChannels = new Int32Array([0,1]);
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.No = 0;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Eof = 1;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Number = 2;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.DoubleDot = 3;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Dot = 4;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.String = 5;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Tuning = 6;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.LParensis = 7;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.RParensis = 8;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.LBrace = 9;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.RBrace = 10;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Pipe = 11;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.MetaCommand = 12;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.Multiply = 13;
alphaTab.importer._AlphaTexSymbols.AlphaTexSymbols_Impl_.LowerThan = 14;
alphaTab.importer.Gp3To5Importer.VersionString = "FICHIER GUITAR PRO ";
alphaTab.importer.Gp3To5Importer.BendStep = 25;
alphaTab.importer.GpifParser.InvalidId = "-1";
alphaTab.importer.GpifParser.BendPointPositionFactor = 0.6;
alphaTab.importer.GpifParser.BendPointValueFactor = 0.04;
alphaTab.importer.GpxFileSystem.HeaderBcFs = "BCFS";
alphaTab.importer.GpxFileSystem.HeaderBcFz = "BCFZ";
alphaTab.importer.GpxFileSystem.ScoreGpif = "score.gpif";
alphaTab.importer.MusicXmlImporter.MergePartGroupsSetting = "musicXMLMergePartGroups";
alphaTab.io.BitReader.ByteSize = 8;
alphaTab.model._AccentuationType.AccentuationType_Impl_.None = 0;
alphaTab.model._AccentuationType.AccentuationType_Impl_.Normal = 1;
alphaTab.model._AccentuationType.AccentuationType_Impl_.Heavy = 2;
alphaTab.model._AccidentalType.AccidentalType_Impl_.None = 0;
alphaTab.model._AccidentalType.AccidentalType_Impl_.Natural = 1;
alphaTab.model._AccidentalType.AccidentalType_Impl_.Sharp = 2;
alphaTab.model._AccidentalType.AccidentalType_Impl_.Flat = 3;
alphaTab.model._AutomationType.AutomationType_Impl_.Tempo = 0;
alphaTab.model._AutomationType.AutomationType_Impl_.Volume = 1;
alphaTab.model._AutomationType.AutomationType_Impl_.Instrument = 2;
alphaTab.model._AutomationType.AutomationType_Impl_.Balance = 3;
alphaTab.model.Bar.GlobalBarId = 0;
alphaTab.model.Beat.WhammyBarMaxPosition = 60;
alphaTab.model.Beat.WhammyBarMaxValue = 24;
alphaTab.model.Beat.GlobalBeatId = 0;
alphaTab.model.BendPoint.MaxPosition = 60;
alphaTab.model.BendPoint.MaxValue = 12;
alphaTab.model._BendType.BendType_Impl_.None = 0;
alphaTab.model._BendType.BendType_Impl_.Custom = 1;
alphaTab.model._BendType.BendType_Impl_.Bend = 2;
alphaTab.model._BendType.BendType_Impl_.Release = 3;
alphaTab.model._BendType.BendType_Impl_.BendRelease = 4;
alphaTab.model._BendType.BendType_Impl_.Hold = 5;
alphaTab.model._BendType.BendType_Impl_.Prebend = 6;
alphaTab.model._BendType.BendType_Impl_.PrebendBend = 7;
alphaTab.model._BendType.BendType_Impl_.PrebendRelease = 8;
alphaTab.model._BrushType.BrushType_Impl_.None = 0;
alphaTab.model._BrushType.BrushType_Impl_.BrushUp = 1;
alphaTab.model._BrushType.BrushType_Impl_.BrushDown = 2;
alphaTab.model._BrushType.BrushType_Impl_.ArpeggioUp = 3;
alphaTab.model._BrushType.BrushType_Impl_.ArpeggioDown = 4;
alphaTab.model._Clef.Clef_Impl_.Neutral = 0;
alphaTab.model._Clef.Clef_Impl_.C3 = 1;
alphaTab.model._Clef.Clef_Impl_.C4 = 2;
alphaTab.model._Clef.Clef_Impl_.F4 = 3;
alphaTab.model._Clef.Clef_Impl_.G2 = 4;
alphaTab.model._ClefOttavia.ClefOttavia_Impl_._15ma = 0;
alphaTab.model._ClefOttavia.ClefOttavia_Impl_._8va = 1;
alphaTab.model._ClefOttavia.ClefOttavia_Impl_.Regular = 2;
alphaTab.model._ClefOttavia.ClefOttavia_Impl_._8vb = 3;
alphaTab.model._ClefOttavia.ClefOttavia_Impl_._15mb = 4;
alphaTab.model._CrescendoType.CrescendoType_Impl_.None = 0;
alphaTab.model._CrescendoType.CrescendoType_Impl_.Crescendo = 1;
alphaTab.model._CrescendoType.CrescendoType_Impl_.Decrescendo = 2;
alphaTab.model._Duration.Duration_Impl_.QuadrupleWhole = -4;
alphaTab.model._Duration.Duration_Impl_.DoubleWhole = -2;
alphaTab.model._Duration.Duration_Impl_.Whole = 1;
alphaTab.model._Duration.Duration_Impl_.Half = 2;
alphaTab.model._Duration.Duration_Impl_.Quarter = 4;
alphaTab.model._Duration.Duration_Impl_.Eighth = 8;
alphaTab.model._Duration.Duration_Impl_.Sixteenth = 16;
alphaTab.model._Duration.Duration_Impl_.ThirtySecond = 32;
alphaTab.model._Duration.Duration_Impl_.SixtyFourth = 64;
alphaTab.model._Duration.Duration_Impl_.OneHundredTwentyEighth = 128;
alphaTab.model._Duration.Duration_Impl_.TwoHundredFiftySixth = 256;
alphaTab.model._DynamicValue.DynamicValue_Impl_.PPP = 0;
alphaTab.model._DynamicValue.DynamicValue_Impl_.PP = 1;
alphaTab.model._DynamicValue.DynamicValue_Impl_.P = 2;
alphaTab.model._DynamicValue.DynamicValue_Impl_.MP = 3;
alphaTab.model._DynamicValue.DynamicValue_Impl_.MF = 4;
alphaTab.model._DynamicValue.DynamicValue_Impl_.F = 5;
alphaTab.model._DynamicValue.DynamicValue_Impl_.FF = 6;
alphaTab.model._DynamicValue.DynamicValue_Impl_.FFF = 7;
alphaTab.model._Fingers.Fingers_Impl_.Unknown = -2;
alphaTab.model._Fingers.Fingers_Impl_.NoOrDead = -1;
alphaTab.model._Fingers.Fingers_Impl_.Thumb = 0;
alphaTab.model._Fingers.Fingers_Impl_.IndexFinger = 1;
alphaTab.model._Fingers.Fingers_Impl_.MiddleFinger = 2;
alphaTab.model._Fingers.Fingers_Impl_.AnnularFinger = 3;
alphaTab.model._Fingers.Fingers_Impl_.LittleFinger = 4;
alphaTab.model._GraceType.GraceType_Impl_.None = 0;
alphaTab.model._GraceType.GraceType_Impl_.OnBeat = 1;
alphaTab.model._GraceType.GraceType_Impl_.BeforeBeat = 2;
alphaTab.model._HarmonicType.HarmonicType_Impl_.None = 0;
alphaTab.model._HarmonicType.HarmonicType_Impl_.Natural = 1;
alphaTab.model._HarmonicType.HarmonicType_Impl_.Artificial = 2;
alphaTab.model._HarmonicType.HarmonicType_Impl_.Pinch = 3;
alphaTab.model._HarmonicType.HarmonicType_Impl_.Tap = 4;
alphaTab.model._HarmonicType.HarmonicType_Impl_.Semi = 5;
alphaTab.model._HarmonicType.HarmonicType_Impl_.Feedback = 6;
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.Major = 0;
alphaTab.model._KeySignatureType.KeySignatureType_Impl_.Minor = 1;
alphaTab.model.Lyrics.CharCodeLF = 10;
alphaTab.model.Lyrics.CharCodeTab = 9;
alphaTab.model.Lyrics.CharCodeCR = 13;
alphaTab.model.Lyrics.CharCodeSpace = 32;
alphaTab.model.Lyrics.CharCodeBrackedClose = 93;
alphaTab.model.Lyrics.CharCodeBrackedOpen = 91;
alphaTab.model.Lyrics.CharCodeDash = 45;
alphaTab.model.Lyrics_LyricsState.IGNORE_SPACES = 0;
alphaTab.model.Lyrics_LyricsState.BEGIN = 1;
alphaTab.model.Lyrics_LyricsState.TEXT = 2;
alphaTab.model.Lyrics_LyricsState.COMMENT = 3;
alphaTab.model.Lyrics_LyricsState.DASH = 4;
alphaTab.model.MasterBar.MaxAlternateEndings = 8;
alphaTab.model.Note.GlobalNoteId = 0;
alphaTab.model.Note.MaxOffsetForSameLineSearch = 3;
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.Default = 0;
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.SwapAccidentals = 1;
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ForceNatural = 2;
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ForceSharp = 3;
alphaTab.model._NoteAccidentalMode.NoteAccidentalMode_Impl_.ForceFlat = 4;
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.None = 0;
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.Up = 1;
alphaTab.model._PickStrokeType.PickStrokeType_Impl_.Down = 2;
alphaTab.model._SlideType.SlideType_Impl_.None = 0;
alphaTab.model._SlideType.SlideType_Impl_.Shift = 1;
alphaTab.model._SlideType.SlideType_Impl_.Legato = 2;
alphaTab.model._SlideType.SlideType_Impl_.IntoFromBelow = 3;
alphaTab.model._SlideType.SlideType_Impl_.IntoFromAbove = 4;
alphaTab.model._SlideType.SlideType_Impl_.OutUp = 5;
alphaTab.model._SlideType.SlideType_Impl_.OutDown = 6;
alphaTab.model._StaffKind.StaffKind_Impl_.Tablature = 0;
alphaTab.model._StaffKind.StaffKind_Impl_.Score = 1;
alphaTab.model._StaffKind.StaffKind_Impl_.Percussion = 2;
alphaTab.model._StaffKind.StaffKind_Impl_.Mixed = 3;
alphaTab.model.Track.ShortNameMaxLength = 10;
alphaTab.model._TripletFeel.TripletFeel_Impl_.NoTripletFeel = 0;
alphaTab.model._TripletFeel.TripletFeel_Impl_.Triplet16th = 1;
alphaTab.model._TripletFeel.TripletFeel_Impl_.Triplet8th = 2;
alphaTab.model._TripletFeel.TripletFeel_Impl_.Dotted16th = 3;
alphaTab.model._TripletFeel.TripletFeel_Impl_.Dotted8th = 4;
alphaTab.model._TripletFeel.TripletFeel_Impl_.Scottish16th = 5;
alphaTab.model._TripletFeel.TripletFeel_Impl_.Scottish8th = 6;
alphaTab.model._VibratoType.VibratoType_Impl_.None = 0;
alphaTab.model._VibratoType.VibratoType_Impl_.Slight = 1;
alphaTab.model._VibratoType.VibratoType_Impl_.Wide = 2;
alphaTab.platform.javaScript.AlphaSynthFlashOutput.PreferredSampleRate = 44100;
alphaTab.platform.javaScript.AlphaSynthFlashOutput.Id = "alphaSynthFlashPlayer";
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.BufferSize = 4096;
alphaTab.platform.javaScript.AlphaSynthWebAudioOutput.BufferCount = 10;
alphaTab.platform.model._FontStyle.FontStyle_Impl_.Plain = 0;
alphaTab.platform.model._FontStyle.FontStyle_Impl_.Bold = 1;
alphaTab.platform.model._FontStyle.FontStyle_Impl_.Italic = 2;
alphaTab.platform.model._TextAlign.TextAlign_Impl_.Left = 0;
alphaTab.platform.model._TextAlign.TextAlign_Impl_.Center = 1;
alphaTab.platform.model._TextAlign.TextAlign_Impl_.Right = 2;
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.Top = 0;
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.Middle = 1;
alphaTab.platform.model._TextBaseline.TextBaseline_Impl_.Bottom = 2;
alphaTab.platform.svg.FontSizes.TimesNewRoman = new Uint8Array([3,4,5,6,6,9,9,2,4,4,6,6,3,4,3,3,6,6,6,6,6,6,6,6,6,6,3,3,6,6,6,5,10,8,7,7,8,7,6,7,8,4,4,8,7,10,8,8,7,8,7,5,8,8,7,11,8,8,7,4,3,4,5,6,4,5,5,5,5,5,4,5,6,3,3,6,3,9,6,6,6,5,4,4,4,5,6,7,6,6,5,5,2,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,6,6,6,6,2,5,4,8,4,6,6,0,8,6,4,6,3,3,4,5,5,4,4,3,3,6,8,8,8,5,8,8,8,8,8,8,11,7,7,7,7,7,4,4,4,4,8,8,8,8,8,8,8,6,8,8,8,8,8,8,6,5,5,5,5,5,5,5,8,5,5,5,5,5,3,3,3,3,6,6,6,6,6,6,6,6,6,5,5,5,5,6,6]);
alphaTab.platform.svg.FontSizes.Arial11Pt = new Uint8Array([3,3,4,6,6,10,7,2,4,4,4,6,3,4,3,3,6,6,6,6,6,6,6,6,6,6,3,3,6,6,6,6,11,7,7,8,8,7,7,9,8,3,6,7,6,9,8,9,7,9,8,7,7,8,7,10,7,7,7,3,3,3,5,6,4,6,6,6,6,6,3,6,6,2,2,6,2,9,6,6,6,6,4,6,3,6,6,8,6,6,6,4,3,4,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,6,6,6,6,3,6,4,8,4,6,6,0,8,6,4,6,4,4,4,6,6,4,4,4,4,6,9,9,9,7,7,7,7,7,7,7,11,8,7,7,7,7,3,3,3,3,8,8,9,9,9,9,9,6,9,8,8,8,8,7,7,7,6,6,6,6,6,6,10,6,6,6,6,6,3,3,3,3,6,6,6,6,6,6,6,6,7,6,6,6,6,6,6]);
alphaTab.platform.svg.FontSizes.ControlChars = 32;
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.TimesNewRoman = 0;
alphaTab.platform.svg._SupportedFonts.SupportedFonts_Impl_.Arial = 1;
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.PreNotes = 0;
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.OnNotes = 1;
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.PostNotes = 2;
alphaTab.rendering._BeatXPosition.BeatXPosition_Impl_.EndBeat = 3;
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.SinglePreBeat = 0;
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.SingleOnBeat = 1;
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.GroupedBeforeBeat = 2;
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.GroupedOnBeat = 3;
alphaTab.rendering._EffectBarGlyphSizing.EffectBarGlyphSizing_Impl_.FullBar = 4;
alphaTab.rendering.ScoreBarRenderer.StaffId = "score";
alphaTab.rendering.ScoreBarRenderer.SharpKsSteps = new Int32Array([1,4,0,3,6,2,5]);
alphaTab.rendering.ScoreBarRenderer.FlatKsSteps = new Int32Array([5,2,6,3,7,4,8]);
alphaTab.rendering.ScoreBarRenderer.LineSpacing = 8;
alphaTab.rendering.ScoreBarRenderer.StemWidth = 1.3;
alphaTab.rendering.TabBarRenderer.StaffId = "tab";
alphaTab.rendering.TabBarRenderer.LineSpacing = 10;
alphaTab.rendering.glyphs.AccidentalGroupGlyph.NonReserved = -3000;
alphaTab.rendering.glyphs.AlternateEndingsGlyph.Padding = 3;
alphaTab.rendering.glyphs.BendGlyph.ArrowSize = 6;
alphaTab.rendering.glyphs.BendGlyph.DashSize = 3;
alphaTab.rendering.glyphs.LineRangedGlyph.LineSpacing = 3;
alphaTab.rendering.glyphs.LineRangedGlyph.LineTopPadding = 8;
alphaTab.rendering.glyphs.LineRangedGlyph.LineTopOffset = 6;
alphaTab.rendering.glyphs.LineRangedGlyph.LineSize = 8;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.None = -1;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefG = 57424;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefC = 57436;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefF = 57442;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefNeutral = 57449;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefTab = 57453;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.ClefTabSmall = 57454;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestQuadrupleWhole = 58593;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestDoubleWhole = 58594;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestWhole = 58595;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestHalf = 58596;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestQuarter = 58597;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestEighth = 58598;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestSixteenth = 58599;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestThirtySecond = 58600;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestSixtyFourth = 58601;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestOneHundredTwentyEighth = 58602;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.RestTwoHundredFiftySixth = 58603;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.GraceUp = 57815;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.GraceDown = 57816;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Trill = 58726;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num0 = 57472;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num1 = 57473;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num2 = 57474;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num3 = 57475;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num4 = 57476;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num5 = 57477;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num6 = 57478;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num7 = 57479;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num8 = 57480;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Num9 = 57481;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TimeSignatureCommon = 57482;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TimeSignatureCutCommon = 57483;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteQuadrupleWhole = 57505;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteDoubleWhole = 57504;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteWhole = 57506;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHalf = 57507;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteQuarter = 57508;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteDead = 57514;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHarmonic = 57564;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteRideCymbal = 57566;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHiHat = 57523;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteSideStick = 57513;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteHiHatHalf = 57591;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteChineseCymbal = 57593;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpEighth = 57920;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownEighth = 57921;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpSixteenth = 57922;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownSixteenth = 57923;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpThirtySecond = 57924;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownThirtySecond = 57925;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpSixtyFourth = 57926;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownSixtyFourth = 57927;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpOneHundredTwentyEighth = 57928;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownOneHundredTwentyEighth = 57929;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterUpTwoHundredFiftySixth = 57930;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.FooterDownTwoHundredFiftySixth = 57931;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicPPP = 58666;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicPP = 58667;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicP = 58656;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicMP = 58668;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicMF = 58669;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicF = 58658;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicFF = 58671;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.DynamicFFF = 58672;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Accentuation = 58528;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.HeavyAccentuation = 58540;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.WaveHorizontal = 60068;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.PickStrokeDown = 58896;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.PickStrokeUp = 58898;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TremoloPickingThirtySecond = 57890;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TremoloPickingSixteenth = 57889;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.TremoloPickingEighth = 57888;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.Tempo = 57813;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.NoteEighth = 57815;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalFlat = 57952;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalNatural = 57953;
alphaTab.rendering.glyphs._MusicFontSymbol.MusicFontSymbol_Impl_.AccidentalSharp = 57954;
alphaTab.rendering.glyphs.NoteHeadGlyph.GraceScale = 0.75;
alphaTab.rendering.glyphs.NoteHeadGlyph.NoteHeadHeight = 9;
alphaTab.rendering.glyphs.TripletFeelGlyph.NoteScale = 0.40;
alphaTab.rendering.glyphs.TripletFeelGlyph.NoteHeight = 12;
alphaTab.rendering.glyphs.TripletFeelGlyph.NoteSeparation = 12;
alphaTab.rendering.glyphs.TripletFeelGlyph.BarHeight = 2;
alphaTab.rendering.glyphs.TripletFeelGlyph.BarSeparation = 3;
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.Full = 0;
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.PartialLeft = 1;
alphaTab.rendering.glyphs._TripletFeelGlyph_BarType.TripletFeelGlyph_BarType_Impl_.PartialRight = 2;
alphaTab.rendering.glyphs.VoiceContainerGlyph.KeySizeBeat = "Beat";
alphaTab.rendering.glyphs.WhammyBarGlyph.WhammyMaxOffset = 60.0;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.None = 0;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Title = 1;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.SubTitle = 2;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Artist = 4;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Album = 8;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Words = 16;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Music = 32;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.WordsAndMusic = 64;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.Copyright = 128;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.PageNumber = 256;
alphaTab.rendering.layout._HeaderFooterElements.HeaderFooterElements_Impl_.All = 511;
alphaTab.rendering.staves.BarLayoutingInfo.MinDuration = 30;
alphaTab.rendering.staves.BarLayoutingInfo.MinDurationWidth = 10;
alphaTab.rendering.staves.StaveGroup.AccoladeLabelSpacing = 10;
alphaTab.rendering.utils.AccidentalHelper.KeySignatureLookup = [[true,true,true,true,true,true,true,true,true,true,true,true],[true,true,true,true,true,false,true,true,true,true,true,true],[false,true,true,true,true,false,true,true,true,true,true,true],[false,true,true,true,true,false,false,false,true,true,true,true],[false,false,false,true,true,false,false,false,true,true,true,true],[false,false,false,true,true,false,false,false,false,false,true,true],[false,false,false,false,false,false,false,false,false,false,true,true],[false,false,false,false,false,false,false,false,false,false,false,false],[false,false,false,false,false,true,true,false,false,false,false,false],[true,true,false,false,false,true,true,false,false,false,false,false],[true,true,false,false,false,true,true,true,true,false,false,false],[true,true,true,true,false,true,true,true,true,false,false,false],[true,true,true,true,false,true,true,true,true,true,true,false],[true,true,true,true,true,true,true,true,true,true,true,false],[true,true,true,true,true,true,true,true,true,true,true,true]];
alphaTab.rendering.utils.AccidentalHelper.AccidentalNotes = [false,true,false,true,false,false,true,false,true,false,true,false];
alphaTab.rendering.utils.AccidentalHelper.StepsPerOctave = 7;
alphaTab.rendering.utils.AccidentalHelper.OctaveSteps = new Int32Array([40,34,32,28,40]);
alphaTab.rendering.utils.AccidentalHelper.SharpNoteSteps = new Int32Array([0,0,1,1,2,3,3,4,4,5,5,6]);
alphaTab.rendering.utils.AccidentalHelper.FlatNoteSteps = new Int32Array([0,1,1,2,2,3,4,4,5,5,6,6]);
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.Up = 0;
alphaTab.rendering.utils._BeamDirection.BeamDirection_Impl_.Down = 1;
alphaTab.rendering.utils.BeamingHelper.ScoreMiddleKeys = new Int32Array([60,60,57,50,71]);
alphaTab.rendering.utils.PercussionMapper.ElementVariationToMidi = [new Int32Array([35,35,35]),new Int32Array([38,38,37]),new Int32Array([56,56,56]),new Int32Array([56,56,56]),new Int32Array([56,56,56]),new Int32Array([41,41,41]),new Int32Array([43,43,43]),new Int32Array([45,45,45]),new Int32Array([47,47,47]),new Int32Array([48,48,48]),new Int32Array([42,46,46]),new Int32Array([44,44,44]),new Int32Array([49,49,49]),new Int32Array([57,57,57]),new Int32Array([55,55,55]),new Int32Array([51,59,53]),new Int32Array([52,52,52])];
alphaTab.util._LogLevel.LogLevel_Impl_.None = 0;
alphaTab.util._LogLevel.LogLevel_Impl_.Debug = 1;
alphaTab.util._LogLevel.LogLevel_Impl_.Info = 2;
alphaTab.util._LogLevel.LogLevel_Impl_.Warning = 3;
alphaTab.util._LogLevel.LogLevel_Impl_.Error = 4;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.None = 0;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Element = 1;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Attribute = 2;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Text = 3;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.CDATA = 4;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.EntityReference = 5;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Entity = 6;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.ProcessingInstruction = 7;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Comment = 8;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Document = 9;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.DocumentType = 10;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.DocumentFragment = 11;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Notation = 12;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.Whitespace = 13;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.SignificantWhitespace = 14;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.EndElement = 15;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.EndEntity = 16;
alphaTab.xml._XmlNodeType.XmlNodeType_Impl_.XmlDeclaration = 17;
alphaTab.xml.XmlParser.CharCodeLF = 10;
alphaTab.xml.XmlParser.CharCodeTab = 9;
alphaTab.xml.XmlParser.CharCodeCR = 13;
alphaTab.xml.XmlParser.CharCodeSpace = 32;
alphaTab.xml.XmlParser.CharCodeLowerThan = 60;
alphaTab.xml.XmlParser.CharCodeAmp = 38;
alphaTab.xml.XmlParser.CharCodeBrackedClose = 93;
alphaTab.xml.XmlParser.CharCodeBrackedOpen = 91;
alphaTab.xml.XmlParser.CharCodeGreaterThan = 62;
alphaTab.xml.XmlParser.CharCodeExclamation = 33;
alphaTab.xml.XmlParser.CharCodeUpperD = 68;
alphaTab.xml.XmlParser.CharCodeLowerD = 100;
alphaTab.xml.XmlParser.CharCodeMinus = 45;
alphaTab.xml.XmlParser.CharCodeQuestion = 63;
alphaTab.xml.XmlParser.CharCodeSlash = 47;
alphaTab.xml.XmlParser.CharCodeEquals = 61;
alphaTab.xml.XmlParser.CharCodeDoubleQuote = 34;
alphaTab.xml.XmlParser.CharCodeSingleQuote = 39;
alphaTab.xml.XmlParser.CharCodeSharp = 35;
alphaTab.xml.XmlParser.CharCodeLowerX = 120;
alphaTab.xml.XmlParser.CharCodeLowerA = 97;
alphaTab.xml.XmlParser.CharCodeLowerZ = 122;
alphaTab.xml.XmlParser.CharCodeUpperA = 65;
alphaTab.xml.XmlParser.CharCodeUpperZ = 90;
alphaTab.xml.XmlParser.CharCode0 = 48;
alphaTab.xml.XmlParser.CharCode9 = 57;
alphaTab.xml.XmlParser.CharCodeColon = 58;
alphaTab.xml.XmlParser.CharCodeDot = 46;
alphaTab.xml.XmlParser.CharCodeUnderscore = 95;
alphaTab.xml.XmlParser_XmlState.IGNORE_SPACES = 0;
alphaTab.xml.XmlParser_XmlState.BEGIN = 1;
alphaTab.xml.XmlParser_XmlState.BEGIN_NODE = 2;
alphaTab.xml.XmlParser_XmlState.TAG_NAME = 3;
alphaTab.xml.XmlParser_XmlState.BODY = 4;
alphaTab.xml.XmlParser_XmlState.ATTRIB_NAME = 5;
alphaTab.xml.XmlParser_XmlState.EQUALS = 6;
alphaTab.xml.XmlParser_XmlState.ATTVAL_BEGIN = 7;
alphaTab.xml.XmlParser_XmlState.ATTRIB_VAL = 8;
alphaTab.xml.XmlParser_XmlState.CHILDS = 9;
alphaTab.xml.XmlParser_XmlState.CLOSE = 10;
alphaTab.xml.XmlParser_XmlState.WAIT_END = 11;
alphaTab.xml.XmlParser_XmlState.WAIT_END_RET = 12;
alphaTab.xml.XmlParser_XmlState.PCDATA = 13;
alphaTab.xml.XmlParser_XmlState.HEADER = 14;
alphaTab.xml.XmlParser_XmlState.COMMENT = 15;
alphaTab.xml.XmlParser_XmlState.DOCTYPE = 16;
alphaTab.xml.XmlParser_XmlState.CDATA = 17;
alphaTab.xml.XmlParser_XmlState.ESCAPE = 18;
haxe.io.FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe._Int64.___Int64(0,0);
	$r = this1;
	return $r;
}(this));
haxe.zip.InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe.zip.InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe.zip.InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe.zip.InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe.zip.InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
js.html.compat.Float32Array.BYTES_PER_ELEMENT = 4;
js.html.compat.Float64Array.BYTES_PER_ELEMENT = 8;
js.html.compat.Uint8Array.BYTES_PER_ELEMENT = 1;
alphaTab.Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
