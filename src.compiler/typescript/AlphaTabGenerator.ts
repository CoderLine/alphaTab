import * as ts from 'typescript';
import cloneEmit from './CloneEmitter';
import serializerEmit from './SerializerEmitter';
import transpiler from '../TranspilerBase';
import * as path from 'path';
import * as fs from 'fs';

transpiler([{
    name: 'Clone',
    emit: cloneEmit
}, {
    name: 'Serializer',
    emit: serializerEmit
}]);

// Write version file
import { version } from '../../package.json';
const fileHandle = fs.openSync('src/generated/VersionInfo.ts', 'w');
fs.writeSync(fileHandle, '// <auto-generated>\n');
fs.writeSync(fileHandle, '// This code was auto-generated.\n');
fs.writeSync(fileHandle, '// Changes to this file may cause incorrect behavior and will be lost if\n');
fs.writeSync(fileHandle, '// the code is regenerated.\n');
fs.writeSync(fileHandle, '// </auto-generated>\n');
fs.writeSync(fileHandle, 'export class VersionInfo {\n');
fs.writeSync(fileHandle, `    public static readonly version:string = '${version}';\n`);
fs.writeSync(fileHandle, `    public static readonly date:string = '${new Date().toISOString()}';\n`);
fs.writeSync(fileHandle, '}\n');
ts.sys.exit(ts.ExitStatus.Success);