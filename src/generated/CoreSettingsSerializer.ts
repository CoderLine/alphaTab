// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { CoreSettings } from "@src/CoreSettings";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { LogLevel } from "@src/LogLevel";
export class CoreSettingsSerializer {
    public static fromJson(obj: CoreSettings, reader: IJsonReader): void {
        if (reader.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (reader.nextProperty()) {
            this.setProperty(obj, reader.readPropertyName().toLowerCase(), reader);
        } 
    }
    public static toJson(obj: CoreSettings | null, writer: IJsonWriter): void {
        if (!obj) {
            writer.writeNull();
            return;
        } 
        writer.writeStartObject(); 
        writer.writePropertyName("scriptFile"); 
        writer.writeString(obj.scriptFile); 
        writer.writePropertyName("fontDirectory"); 
        writer.writeString(obj.fontDirectory); 
        writer.writePropertyName("file"); 
        writer.writeString(obj.file); 
        writer.writePropertyName("tex"); 
        writer.writeBoolean(obj.tex); 
        writer.writePropertyName("visibilityCheckInterval"); 
        writer.writeNumber(obj.visibilityCheckInterval); 
        writer.writePropertyName("enableLazyLoading"); 
        writer.writeBoolean(obj.enableLazyLoading); 
        writer.writePropertyName("engine"); 
        writer.writeString(obj.engine); 
        writer.writePropertyName("logLevel"); 
        writer.writeEnum(obj.logLevel); 
        writer.writePropertyName("useWorkers"); 
        writer.writeBoolean(obj.useWorkers); 
        writer.writePropertyName("includeNoteBounds"); 
        writer.writeBoolean(obj.includeNoteBounds); 
        writer.writeEndObject(); 
    }
    public static setProperty(obj: CoreSettings, property: string, reader: IJsonReader): boolean {
        switch (property) {
            case "scriptfile":
                obj.scriptFile = reader.readString();
                return true;
            case "fontdirectory":
                obj.fontDirectory = reader.readString();
                return true;
            case "file":
                obj.file = reader.readString();
                return true;
            case "tex":
                obj.tex = (reader.readBoolean()!);
                return true;
            case "visibilitycheckinterval":
                obj.visibilityCheckInterval = (reader.readNumber()!);
                return true;
            case "enablelazyloading":
                obj.enableLazyLoading = (reader.readBoolean()!);
                return true;
            case "engine":
                obj.engine = (reader.readString()!);
                return true;
            case "loglevel":
                obj.logLevel = (reader.readEnum<LogLevel>(LogLevel)!);
                return true;
            case "useworkers":
                obj.useWorkers = (reader.readBoolean()!);
                return true;
            case "includenotebounds":
                obj.includeNoteBounds = (reader.readBoolean()!);
                return true;
        } 
        return false; 
    }
}

