// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { CoreSettings } from "@src/CoreSettings";
import { LogLevel } from "@src/LogLevel";
export class CoreSettingsSerializer {
    public static fromJson(json: any): CoreSettings {
        const obj = new CoreSettings(); 
        this.fillFromJson(obj, json); 
        return obj; 
    }
    public static fillFromJson(obj: CoreSettings, json: any): void {
        if (json) {
            for (const $k in json) {
                this.setProperty(obj, $k.toLowerCase(), json[$k]);
            }
        } 
    }
    public static toJson(obj: CoreSettings | null): any {
        if (!obj) {
            return null;
        } 
        const json: any = {}; 
        this.fillToJson(obj, json); 
        return json; 
    }
    public static fillToJson(obj: CoreSettings, json: any): void {
        json.scriptFile = obj.scriptFile; 
        json.fontDirectory = obj.fontDirectory; 
        json.file = obj.file; 
        json.tex = obj.tex; 
        json.tracks = obj.tracks; 
        json.visibilityCheckInterval = obj.visibilityCheckInterval; 
        json.enableLazyLoading = obj.enableLazyLoading; 
        json.engine = obj.engine; 
        json.logLevel = obj.logLevel; 
        json.useWorkers = obj.useWorkers; 
        json.includeNoteBounds = obj.includeNoteBounds; 
    }
    public static setProperty(obj: CoreSettings, property: string, value: any): boolean {
        switch (property) {
            case "scriptfile":
                obj.scriptFile = value;
                return true;
            case "fontdirectory":
                obj.fontDirectory = value;
                return true;
            case "file":
                obj.file = value;
                return true;
            case "tex":
                obj.tex = value;
                return true;
            case "tracks":
                obj.tracks = value;
                return true;
            case "visibilitycheckinterval":
                obj.visibilityCheckInterval = value;
                return true;
            case "enablelazyloading":
                obj.enableLazyLoading = value;
                return true;
            case "engine":
                obj.engine = value;
                return true;
            case "loglevel":
                obj.logLevel = isNaN(parseInt(value)) ? LogLevel[Object.keys(LogLevel).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof LogLevel] : parseInt(value);
                return true;
            case "useworkers":
                obj.useWorkers = value;
                return true;
            case "includenotebounds":
                obj.includeNoteBounds = value;
                return true;
        } 
        return false; 
    }
}

