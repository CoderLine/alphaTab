// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { CoreSettings } from "@src/CoreSettings";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { LogLevel } from "@src/LogLevel";
export class CoreSettingsSerializer {
    public static fromJson(obj: CoreSettings, r: IJsonReader): void {
        if (r.currentValueType === JsonValueType.Null) {
            return;
        } 
        r.startObject(); 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
        r.endObject(); 
    }
    public static toJson(obj: CoreSettings | null, w: IJsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.string(obj.scriptFile, "scriptFile"); 
        w.string(obj.fontDirectory, "fontDirectory"); 
        w.string(obj.file, "file"); 
        w.boolean(obj.tex, "tex"); 
        w.number(obj.visibilityCheckInterval, "visibilityCheckInterval"); 
        w.boolean(obj.enableLazyLoading, "enableLazyLoading"); 
        w.string(obj.engine, "engine"); 
        w.enum(obj.logLevel, "logLevel"); 
        w.boolean(obj.useWorkers, "useWorkers"); 
        w.boolean(obj.includeNoteBounds, "includeNoteBounds"); 
        w.endObject(); 
    }
    public static setProperty(obj: CoreSettings, property: string, r: IJsonReader): boolean {
        switch (property) {
            case "scriptfile":
                obj.scriptFile = r.string();
                return true;
            case "fontdirectory":
                obj.fontDirectory = r.string();
                return true;
            case "file":
                obj.file = r.string();
                return true;
            case "tex":
                obj.tex = (r.boolean()!);
                return true;
            case "visibilitycheckinterval":
                obj.visibilityCheckInterval = (r.number()!);
                return true;
            case "enablelazyloading":
                obj.enableLazyLoading = (r.boolean()!);
                return true;
            case "engine":
                obj.engine = (r.string()!);
                return true;
            case "loglevel":
                obj.logLevel = (r.enum<LogLevel>(LogLevel)!);
                return true;
            case "useworkers":
                obj.useWorkers = (r.boolean()!);
                return true;
            case "includenotebounds":
                obj.includeNoteBounds = (r.boolean()!);
                return true;
        } 
        return false; 
    }
}

