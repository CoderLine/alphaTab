// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { CoreSettings } from "@src/CoreSettings";
import { JsonHelper } from "@src/io/JsonHelper";
import { IReadable } from "@src/io/IReadable";
import { IWriteable } from "@src/io/IWriteable";
import { IOHelper } from "@src/io/IOHelper";
import { LogLevel } from "@src/LogLevel";
export class CoreSettingsSerializer {
    public static fromJson(obj: CoreSettings, m: unknown): void {
        if (!m) {
            return;
        } 
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v)); 
    }
    public static toJson(obj: CoreSettings | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        } 
        const o = new Map<string, unknown>(); 
        /*@target web*/
        o.set("scriptfile", obj.scriptFile); 
        /*@target web*/
        o.set("fontdirectory", obj.fontDirectory); 
        /*@target web*/
        o.set("file", obj.file); 
        /*@target web*/
        o.set("tex", obj.tex); 
        /*@target web*/
        o.set("tracks", obj.tracks); 
        o.set("enablelazyloading", obj.enableLazyLoading); 
        o.set("engine", obj.engine); 
        o.set("loglevel", obj.logLevel as number); 
        o.set("useworkers", obj.useWorkers); 
        o.set("includenotebounds", obj.includeNoteBounds); 
        return o; 
    }
    public static fromBinary(obj: CoreSettings, r: IReadable): CoreSettings {
        if (IOHelper.readNull(r)) {
            return obj;
        } 
        /*@target web*/
        if (!IOHelper.readNull(r)) {
            obj.scriptFile = IOHelper.readString(r);
        } 
        /*@target web*/
        if (!IOHelper.readNull(r)) {
            obj.fontDirectory = IOHelper.readString(r);
        } 
        /*@target web*/
        if (!IOHelper.readNull(r)) {
            obj.file = IOHelper.readString(r);
        } 
        /*@target web*/
        obj.tex = IOHelper.readBoolean(r); 
        /*@target web*/
        obj.tracks = IOHelper.readUnknown(r); 
        obj.enableLazyLoading = IOHelper.readBoolean(r); 
        obj.engine = IOHelper.readString(r); 
        obj.logLevel = JsonHelper.parseEnum<LogLevel>(IOHelper.readInt32LE(r), LogLevel)!; 
        obj.useWorkers = IOHelper.readBoolean(r); 
        obj.includeNoteBounds = IOHelper.readBoolean(r); 
        return obj; 
    }
    public static toBinary(obj: CoreSettings | null, w: IWriteable): void {
        if (!obj) {
            IOHelper.writeNull(w);
            return;
        } 
        IOHelper.writeNotNull(w); 
        /*@target web*/
        IOHelper.writeBoolean(w, obj.tex); 
        /*@target web*/
        IOHelper.writeUnknown(w, obj.tracks); 
        IOHelper.writeBoolean(w, obj.enableLazyLoading); 
        IOHelper.writeString(w, obj.engine); 
        IOHelper.writeInt32LE(w, obj.logLevel as number); 
        IOHelper.writeBoolean(w, obj.useWorkers); 
        IOHelper.writeBoolean(w, obj.includeNoteBounds); 
    }
    public static setProperty(obj: CoreSettings, property: string, v: unknown): boolean {
        switch (property) {
            /*@target web*/
            case "scriptfile":
                obj.scriptFile = v as string | null;
                return true;
            /*@target web*/
            case "fontdirectory":
                obj.fontDirectory = v as string | null;
                return true;
            /*@target web*/
            case "file":
                obj.file = v as string | null;
                return true;
            /*@target web*/
            case "tex":
                obj.tex = v! as boolean;
                return true;
            /*@target web*/
            case "tracks":
                obj.tracks = v! as unknown;
                return true;
            case "enablelazyloading":
                obj.enableLazyLoading = v! as boolean;
                return true;
            case "engine":
                obj.engine = v! as string;
                return true;
            case "loglevel":
                obj.logLevel = JsonHelper.parseEnum<LogLevel>(v, LogLevel)!;
                return true;
            case "useworkers":
                obj.useWorkers = v! as boolean;
                return true;
            case "includenotebounds":
                obj.includeNoteBounds = v! as boolean;
                return true;
        } 
        return false; 
    }
}

