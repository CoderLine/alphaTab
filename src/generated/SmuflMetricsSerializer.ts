// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { SmuflMetrics } from "@src/SmuflMetrics";
import { JsonHelper } from "@src/io/JsonHelper";
import { SmuflStemInfoSerializer } from "@src/generated/SmuflStemInfoSerializer";
import { MusicFontSymbol } from "@src/model/MusicFontSymbol";
import { SmuflStemInfo } from "@src/SmuflMetrics";
import { Duration } from "@src/model/Duration";
export class SmuflMetricsSerializer {
    public static fromJson(obj: SmuflMetrics, m: unknown): void {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => SmuflMetricsSerializer.setProperty(obj, k.toLowerCase(), v));
    }
    public static toJson(obj: SmuflMetrics | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        }
        const o = new Map<string, unknown>();
        o.set("musicfontsize", obj.musicFontSize);
        o.set("onestaffspace", obj.oneStaffSpace);
        o.set("tablinespacing", obj.tabLineSpacing);
        o.set("arrowshaftthickness", obj.arrowShaftThickness);
        o.set("barlineseparation", obj.barlineSeparation);
        o.set("beamspacing", obj.beamSpacing);
        o.set("beamthickness", obj.beamThickness);
        o.set("bracketthickness", obj.bracketThickness);
        o.set("dashedbarlinedashlength", obj.dashedBarlineDashLength);
        o.set("dashedbarlinegaplength", obj.dashedBarlineGapLength);
        o.set("dashedbarlinethickness", obj.dashedBarlineThickness);
        o.set("hairpinthickness", obj.hairpinThickness);
        o.set("legerlinethickness", obj.legerLineThickness);
        o.set("legerlineextension", obj.legerLineExtension);
        o.set("pedallinethickness", obj.pedalLineThickness);
        o.set("repeatbarlinedotseparation", obj.repeatBarlineDotSeparation);
        o.set("repeatendinglinethickness", obj.repeatEndingLineThickness);
        o.set("slurmidpointthickness", obj.slurMidpointThickness);
        o.set("stafflinethickness", obj.staffLineThickness);
        o.set("stemthickness", obj.stemThickness);
        o.set("thickbarlinethickness", obj.thickBarlineThickness);
        o.set("thinbarlinethickness", obj.thinBarlineThickness);
        o.set("thinthickbarlineseparation", obj.thinThickBarlineSeparation);
        o.set("tiemidpointthickness", obj.tieMidpointThickness);
        o.set("tupletbracketthickness", obj.tupletBracketThickness);
        o.set("effectbandseparation", obj.effectBandSeparation);
        o.set("numberedbarrendererbarsize", obj.numberedBarRendererBarSize);
        o.set("numberedbarrendererbarspacing", obj.numberedBarRendererBarSpacing);
        o.set("numbereddashglyphpadding", obj.numberedDashGlyphPadding);
        o.set("numbereddashglyphwidth", obj.numberedDashGlyphWidth);
        o.set("linerangedglyphdashgap", obj.lineRangedGlyphDashGap);
        o.set("linerangedglyphdashsize", obj.lineRangedGlyphDashSize);
        o.set("prenoteeffectpadding", obj.preNoteEffectPadding);
        o.set("postnoteeffectpadding", obj.postNoteEffectPadding);
        o.set("stringnumbercirclepadding", obj.stringNumberCirclePadding);
        o.set("rowcontainerpadding", obj.rowContainerPadding);
        o.set("effectspacing", obj.effectSpacing);
        o.set("alternateendingspadding", obj.alternateEndingsPadding);
        o.set("sustainpedallinepadding", obj.sustainPedalLinePadding);
        o.set("tieheight", obj.tieHeight);
        o.set("beattimerpadding", obj.beatTimerPadding);
        o.set("bendnoteheadelementpadding", obj.bendNoteHeadElementPadding);
        o.set("ghostparenthesiswidth", obj.ghostParenthesisWidth);
        o.set("brokenbeamwidth", obj.brokenBeamWidth);
        o.set("tabwhammytextpadding", obj.tabWhammyTextPadding);
        o.set("tabwhammyperhalfheight", obj.tabWhammyPerHalfHeight);
        o.set("tabwhammydashsize", obj.tabWhammyDashSize);
        o.set("songbookwhammydipheight", obj.songBookWhammyDipHeight);
        o.set("deadslappedlinewidth", obj.deadSlappedLineWidth);
        o.set("lefthandtabtiewidth", obj.leftHandTabTieWidth);
        o.set("tabbenddashsize", obj.tabBendDashSize);
        o.set("tabbendpervalueheight", obj.tabBendPerValueHeight);
        o.set("simpleslidewidth", obj.simpleSlideWidth);
        o.set("simpleslideheight", obj.simpleSlideHeight);
        {
            const m = new Map<string, unknown>();
            o.set("stemup", m);
            for (const [k, v] of obj.stemUp!) {
                m.set(k.toString(), SmuflStemInfoSerializer.toJson(v));
            }
        }
        {
            const m = new Map<string, unknown>();
            o.set("stemdown", m);
            for (const [k, v] of obj.stemDown!) {
                m.set(k.toString(), SmuflStemInfoSerializer.toJson(v));
            }
        }
        {
            const m = new Map<string, unknown>();
            o.set("repeatoffsetx", m);
            for (const [k, v] of obj.repeatOffsetX!) {
                m.set(k.toString(), v);
            }
        }
        o.set("standardstemlength", obj.standardStemLength);
        {
            const m = new Map<string, unknown>();
            o.set("stemflagoffsets", m);
            for (const [k, v] of obj.stemFlagOffsets!) {
                m.set(k.toString(), v);
            }
        }
        {
            const m = new Map<string, unknown>();
            o.set("glyphtop", m);
            for (const [k, v] of obj.glyphTop!) {
                m.set(k.toString(), v);
            }
        }
        {
            const m = new Map<string, unknown>();
            o.set("glyphbottom", m);
            for (const [k, v] of obj.glyphBottom!) {
                m.set(k.toString(), v);
            }
        }
        {
            const m = new Map<string, unknown>();
            o.set("glyphwidths", m);
            for (const [k, v] of obj.glyphWidths!) {
                m.set(k.toString(), v);
            }
        }
        {
            const m = new Map<string, unknown>();
            o.set("glyphheights", m);
            for (const [k, v] of obj.glyphHeights!) {
                m.set(k.toString(), v);
            }
        }
        o.set("temponotescale", obj.tempoNoteScale);
        o.set("tuningglyphcirclenumberscale", obj.tuningGlyphCircleNumberScale);
        o.set("tuningglyphstringcolumnscale", obj.tuningGlyphStringColumnScale);
        o.set("tripletfeelnotescale", obj.tripletFeelNoteScale);
        o.set("tripletfeeltupletscale", obj.tripletFeelTupletScale);
        o.set("tripletfeelheight", obj.tripletFeelHeight);
        o.set("tripletfeelypadding", obj.tripletFeelYPadding);
        o.set("tripletfeelbracketsheighttoy", obj.tripletFeelBracketsHeightToY);
        o.set("tripletfeelleftnotexpadding", obj.tripletFeelLeftNoteXPadding);
        o.set("tripletfeelrightnotexpadding", obj.tripletFeelRightNoteXPadding);
        o.set("tripletfeelcircleoffset", obj.tripletFeelCircleOffset);
        o.set("tripletfeelcirclesize", obj.tripletFeelCircleSize);
        o.set("tripletfeelequalsoffsetx", obj.tripletFeelEqualsOffsetX);
        o.set("tripletfeelequalsoffsety", obj.tripletFeelEqualsOffsetY);
        o.set("tripletfeelaugmentationoffsetx", obj.tripletFeelAugmentationOffsetX);
        o.set("tripletfeelcloseparenthesisoffsetx", obj.tripletFeelCloseParenthesisOffsetX);
        o.set("chorddiagrampaddingx", obj.chordDiagramPaddingX);
        o.set("chorddiagrampaddingy", obj.chordDiagramPaddingY);
        o.set("chorddiagramcircleradius", obj.chordDiagramCircleRadius);
        o.set("chorddiagramstringspacing", obj.chordDiagramStringSpacing);
        o.set("chorddiagramfretspacing", obj.chordDiagramFretSpacing);
        o.set("chorddiagramnutheight", obj.chordDiagramNutHeight);
        o.set("chorddiagramfretheight", obj.chordDiagramFretHeight);
        return o;
    }
    public static setProperty(obj: SmuflMetrics, property: string, v: unknown): boolean {
        switch (property) {
            case "musicfontsize":
                obj.musicFontSize = v! as number;
                return true;
            case "onestaffspace":
                obj.oneStaffSpace = v! as number;
                return true;
            case "tablinespacing":
                obj.tabLineSpacing = v! as number;
                return true;
            case "arrowshaftthickness":
                obj.arrowShaftThickness = v! as number;
                return true;
            case "barlineseparation":
                obj.barlineSeparation = v! as number;
                return true;
            case "beamspacing":
                obj.beamSpacing = v! as number;
                return true;
            case "beamthickness":
                obj.beamThickness = v! as number;
                return true;
            case "bracketthickness":
                obj.bracketThickness = v! as number;
                return true;
            case "dashedbarlinedashlength":
                obj.dashedBarlineDashLength = v! as number;
                return true;
            case "dashedbarlinegaplength":
                obj.dashedBarlineGapLength = v! as number;
                return true;
            case "dashedbarlinethickness":
                obj.dashedBarlineThickness = v! as number;
                return true;
            case "hairpinthickness":
                obj.hairpinThickness = v! as number;
                return true;
            case "legerlinethickness":
                obj.legerLineThickness = v! as number;
                return true;
            case "legerlineextension":
                obj.legerLineExtension = v! as number;
                return true;
            case "pedallinethickness":
                obj.pedalLineThickness = v! as number;
                return true;
            case "repeatbarlinedotseparation":
                obj.repeatBarlineDotSeparation = v! as number;
                return true;
            case "repeatendinglinethickness":
                obj.repeatEndingLineThickness = v! as number;
                return true;
            case "slurmidpointthickness":
                obj.slurMidpointThickness = v! as number;
                return true;
            case "stafflinethickness":
                obj.staffLineThickness = v! as number;
                return true;
            case "stemthickness":
                obj.stemThickness = v! as number;
                return true;
            case "thickbarlinethickness":
                obj.thickBarlineThickness = v! as number;
                return true;
            case "thinbarlinethickness":
                obj.thinBarlineThickness = v! as number;
                return true;
            case "thinthickbarlineseparation":
                obj.thinThickBarlineSeparation = v! as number;
                return true;
            case "tiemidpointthickness":
                obj.tieMidpointThickness = v! as number;
                return true;
            case "tupletbracketthickness":
                obj.tupletBracketThickness = v! as number;
                return true;
            case "effectbandseparation":
                obj.effectBandSeparation = v! as number;
                return true;
            case "numberedbarrendererbarsize":
                obj.numberedBarRendererBarSize = v! as number;
                return true;
            case "numberedbarrendererbarspacing":
                obj.numberedBarRendererBarSpacing = v! as number;
                return true;
            case "numbereddashglyphpadding":
                obj.numberedDashGlyphPadding = v! as number;
                return true;
            case "numbereddashglyphwidth":
                obj.numberedDashGlyphWidth = v! as number;
                return true;
            case "linerangedglyphdashgap":
                obj.lineRangedGlyphDashGap = v! as number;
                return true;
            case "linerangedglyphdashsize":
                obj.lineRangedGlyphDashSize = v! as number;
                return true;
            case "prenoteeffectpadding":
                obj.preNoteEffectPadding = v! as number;
                return true;
            case "postnoteeffectpadding":
                obj.postNoteEffectPadding = v! as number;
                return true;
            case "stringnumbercirclepadding":
                obj.stringNumberCirclePadding = v! as number;
                return true;
            case "rowcontainerpadding":
                obj.rowContainerPadding = v! as number;
                return true;
            case "effectspacing":
                obj.effectSpacing = v! as number;
                return true;
            case "alternateendingspadding":
                obj.alternateEndingsPadding = v! as number;
                return true;
            case "sustainpedallinepadding":
                obj.sustainPedalLinePadding = v! as number;
                return true;
            case "tieheight":
                obj.tieHeight = v! as number;
                return true;
            case "beattimerpadding":
                obj.beatTimerPadding = v! as number;
                return true;
            case "bendnoteheadelementpadding":
                obj.bendNoteHeadElementPadding = v! as number;
                return true;
            case "ghostparenthesiswidth":
                obj.ghostParenthesisWidth = v! as number;
                return true;
            case "brokenbeamwidth":
                obj.brokenBeamWidth = v! as number;
                return true;
            case "tabwhammytextpadding":
                obj.tabWhammyTextPadding = v! as number;
                return true;
            case "tabwhammyperhalfheight":
                obj.tabWhammyPerHalfHeight = v! as number;
                return true;
            case "tabwhammydashsize":
                obj.tabWhammyDashSize = v! as number;
                return true;
            case "songbookwhammydipheight":
                obj.songBookWhammyDipHeight = v! as number;
                return true;
            case "deadslappedlinewidth":
                obj.deadSlappedLineWidth = v! as number;
                return true;
            case "lefthandtabtiewidth":
                obj.leftHandTabTieWidth = v! as number;
                return true;
            case "tabbenddashsize":
                obj.tabBendDashSize = v! as number;
                return true;
            case "tabbendpervalueheight":
                obj.tabBendPerValueHeight = v! as number;
                return true;
            case "simpleslidewidth":
                obj.simpleSlideWidth = v! as number;
                return true;
            case "simpleslideheight":
                obj.simpleSlideHeight = v! as number;
                return true;
            case "stemup":
                obj.stemUp = new Map<MusicFontSymbol, SmuflStemInfo>();
                JsonHelper.forEach(v, (v, k) => {
                    const i = new SmuflStemInfo();
                    SmuflStemInfoSerializer.fromJson(i, v as Map<string, unknown>);
                    obj.stemUp.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, i);
                });
                return true;
            case "stemdown":
                obj.stemDown = new Map<MusicFontSymbol, SmuflStemInfo>();
                JsonHelper.forEach(v, (v, k) => {
                    const i = new SmuflStemInfo();
                    SmuflStemInfoSerializer.fromJson(i, v as Map<string, unknown>);
                    obj.stemDown.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, i);
                });
                return true;
            case "repeatoffsetx":
                obj.repeatOffsetX = new Map<MusicFontSymbol, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.repeatOffsetX.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, v as number);
                });
                return true;
            case "standardstemlength":
                obj.standardStemLength = v! as number;
                return true;
            case "stemflagoffsets":
                obj.stemFlagOffsets = new Map<Duration, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.stemFlagOffsets.set(JsonHelper.parseEnum<Duration>(k, Duration)!, v as number);
                });
                return true;
            case "glyphtop":
                obj.glyphTop = new Map<MusicFontSymbol, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.glyphTop.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, v as number);
                });
                return true;
            case "glyphbottom":
                obj.glyphBottom = new Map<MusicFontSymbol, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.glyphBottom.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, v as number);
                });
                return true;
            case "glyphwidths":
                obj.glyphWidths = new Map<MusicFontSymbol, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.glyphWidths.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, v as number);
                });
                return true;
            case "glyphheights":
                obj.glyphHeights = new Map<MusicFontSymbol, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.glyphHeights.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, v as number);
                });
                return true;
            case "temponotescale":
                obj.tempoNoteScale = v! as number;
                return true;
            case "tuningglyphcirclenumberscale":
                obj.tuningGlyphCircleNumberScale = v! as number;
                return true;
            case "tuningglyphstringcolumnscale":
                obj.tuningGlyphStringColumnScale = v! as number;
                return true;
            case "tripletfeelnotescale":
                obj.tripletFeelNoteScale = v! as number;
                return true;
            case "tripletfeeltupletscale":
                obj.tripletFeelTupletScale = v! as number;
                return true;
            case "tripletfeelheight":
                obj.tripletFeelHeight = v! as number;
                return true;
            case "tripletfeelypadding":
                obj.tripletFeelYPadding = v! as number;
                return true;
            case "tripletfeelbracketsheighttoy":
                obj.tripletFeelBracketsHeightToY = v! as number;
                return true;
            case "tripletfeelleftnotexpadding":
                obj.tripletFeelLeftNoteXPadding = v! as number;
                return true;
            case "tripletfeelrightnotexpadding":
                obj.tripletFeelRightNoteXPadding = v! as number;
                return true;
            case "tripletfeelcircleoffset":
                obj.tripletFeelCircleOffset = v! as number;
                return true;
            case "tripletfeelcirclesize":
                obj.tripletFeelCircleSize = v! as number;
                return true;
            case "tripletfeelequalsoffsetx":
                obj.tripletFeelEqualsOffsetX = v! as number;
                return true;
            case "tripletfeelequalsoffsety":
                obj.tripletFeelEqualsOffsetY = v! as number;
                return true;
            case "tripletfeelaugmentationoffsetx":
                obj.tripletFeelAugmentationOffsetX = v! as number;
                return true;
            case "tripletfeelcloseparenthesisoffsetx":
                obj.tripletFeelCloseParenthesisOffsetX = v! as number;
                return true;
            case "chorddiagrampaddingx":
                obj.chordDiagramPaddingX = v! as number;
                return true;
            case "chorddiagrampaddingy":
                obj.chordDiagramPaddingY = v! as number;
                return true;
            case "chorddiagramcircleradius":
                obj.chordDiagramCircleRadius = v! as number;
                return true;
            case "chorddiagramstringspacing":
                obj.chordDiagramStringSpacing = v! as number;
                return true;
            case "chorddiagramfretspacing":
                obj.chordDiagramFretSpacing = v! as number;
                return true;
            case "chorddiagramnutheight":
                obj.chordDiagramNutHeight = v! as number;
                return true;
            case "chorddiagramfretheight":
                obj.chordDiagramFretHeight = v! as number;
                return true;
        }
        return false;
    }
}
