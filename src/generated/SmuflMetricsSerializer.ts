// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { SmuflMetrics } from "@src/SmuflMetrics";
import { JsonHelper } from "@src/io/JsonHelper";
import { SmuflStemInfoSerializer } from "@src/generated/SmuflStemInfoSerializer";
import { Duration } from "@src/model/Duration";
import { MusicFontSymbol } from "@src/model/MusicFontSymbol";
import { SmuflStemInfo } from "@src/SmuflMetrics";
export class SmuflMetricsSerializer {
    public static fromJson(obj: SmuflMetrics, m: unknown): void {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => SmuflMetricsSerializer.setProperty(obj, k.toLowerCase(), v));
    }
    public static toJson(obj: SmuflMetrics | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        }
        const o = new Map<string, unknown>();
        o.set("musicfontsize", obj.musicFontSize);
        o.set("onestaffspace", obj.oneStaffSpace);
        o.set("tablinespacing", obj.tabLineSpacing);
        o.set("barlineseparation", obj.barlineSeparation);
        o.set("beamspacing", obj.beamSpacing);
        o.set("beamthickness", obj.beamThickness);
        o.set("dashedbarlinedashlength", obj.dashedBarlineDashLength);
        o.set("dashedbarlinegaplength", obj.dashedBarlineGapLength);
        o.set("dashedbarlinethickness", obj.dashedBarlineThickness);
        o.set("legerlinethickness", obj.legerLineThickness);
        o.set("legerlineextension", obj.legerLineExtension);
        o.set("repeatbarlinedotseparation", obj.repeatBarlineDotSeparation);
        o.set("repeatendinglinethickness", obj.repeatEndingLineThickness);
        o.set("stafflinethickness", obj.staffLineThickness);
        o.set("stemthickness", obj.stemThickness);
        o.set("thickbarlinethickness", obj.thickBarlineThickness);
        o.set("thinbarlinethickness", obj.thinBarlineThickness);
        o.set("thinthickbarlineseparation", obj.thinThickBarlineSeparation);
        o.set("effectbandseparation", obj.effectBandSeparation);
        o.set("tabnumberspacepadding", obj.tabNumberSpacePadding);
        o.set("numberedbarrendererbarsize", obj.numberedBarRendererBarSize);
        o.set("numberedbarrendererbarspacing", obj.numberedBarRendererBarSpacing);
        o.set("directionscontainerpadding", obj.directionsContainerPadding);
        o.set("lefthandtappingpadding", obj.leftHandTappingPadding);
        o.set("multibarrestpadding", obj.multiBarRestPadding);
        o.set("trilltextpadding", obj.trillTextPadding);
        o.set("numberedbeatpostaccidentalpadding", obj.numberedBeatPostAccidentalPadding);
        o.set("rowcontainerpadding", obj.rowContainerPadding);
        o.set("scorebeatghostspace", obj.scoreBeatGhostSpace);
        o.set("scoreprenotepadding", obj.scorePreNotePadding);
        o.set("scoreprefingeringpadding", obj.scorePreFingeringPadding);
        o.set("scorepreaccidentalpadding", obj.scorePreAccidentalPadding);
        o.set("scorebendendpadding", obj.scoreBendEndPadding);
        o.set("scorebendholdoffset", obj.scoreBendHoldOffset);
        o.set("scorebendholdsize", obj.scoreBendHoldSize);
        o.set("scorehelpernotesendpadding", obj.scoreHelperNotesEndPadding);
        o.set("scorehelpernotesendpadding2", obj.scoreHelperNotesEndPadding2);
        o.set("scorenotebeloweffectspacing", obj.scoreNoteBelowEffectSpacing);
        o.set("tuplettextmargin", obj.tupletTextMargin);
        o.set("tabclefleftpadding", obj.tabClefLeftPadding);
        o.set("alternateendingspaddingx", obj.alternateEndingsPaddingX);
        o.set("alternateendingspaddingy", obj.alternateEndingsPaddingY);
        o.set("alternateendingscloselinepadding", obj.alternateEndingsCloseLinePadding);
        o.set("beattimerpaddingx", obj.beatTimerPaddingX);
        o.set("beattimerpaddingy", obj.beatTimerPaddingY);
        o.set("beattimermarginy", obj.beatTimerMarginY);
        o.set("bendnoteheadelementpadding", obj.bendNoteHeadElementPadding);
        o.set("circleglyphpadding", obj.circleGlyphPadding);
        o.set("scoreslidelineendpadding", obj.scoreSlideLineEndPadding);
        o.set("scoreslidelineoffsetx", obj.scoreSlideLineOffsetX);
        o.set("scoreslidelineoffsety", obj.scoreSlideLineOffsetY);
        o.set("scorewhammysimpledippadding", obj.scoreWhammySimpleDipPadding);
        o.set("scorewhammysongbookpadding", obj.scoreWhammySongBookPadding);
        o.set("slashnoteheadeffectspacing", obj.slashNoteHeadEffectSpacing);
        o.set("tabprenotespadding", obj.tabPreNotesPadding);
        o.set("tabnotechordeffectspacing", obj.tabNoteChordEffectSpacing);
        o.set("tabwhammysimpledippadding", obj.tabWhammySimpleDipPadding);
        o.set("tabwhammytextpadding", obj.tabWhammyTextPadding);
        o.set("linerangedglyphspacing", obj.lineRangedGlyphSpacing);
        o.set("linerangedglyphtoppadding", obj.lineRangedGlyphTopPadding);
        o.set("linerangedglyphtopoffset", obj.lineRangedGlyphTopOffset);
        o.set("linerangedglyphsize", obj.lineRangedGlyphSize);
        o.set("ottavalinesize", obj.ottavaLineSize);
        o.set("ottavalinespacing", obj.ottavaLineSpacing);
        o.set("ottavapaddingy", obj.ottavaPaddingY);
        o.set("numbereddashglyphpadding", obj.numberedDashGlyphPadding);
        o.set("stringnumbercirclepadding", obj.stringNumberCirclePadding);
        o.set("sustainpedaltextlinepadding", obj.sustainPedalTextLinePadding);
        o.set("sustainpedalstarlinepadding", obj.sustainPedalStarLinePadding);
        o.set("timesignatureghostparenthesisleftpadding", obj.timeSignatureGhostParenthesisLeftPadding);
        o.set("timesignatureghostparenthesisrightpadding", obj.timeSignatureGhostParenthesisRightPadding);
        o.set("tabbrusharpeggiooffset", obj.tabBrushArpeggioOffset);
        o.set("pictedgeofcymbaloffsetx", obj.pictEdgeOfCymbalOffsetX);
        o.set("arpeggioxoffset", obj.arpeggioXOffset);
        o.set("noteornamentbottomoffset", obj.noteOrnamentBottomOffset);
        o.set("numberedbeatnoteytoppadding", obj.numberedBeatNoteYTopPadding);
        o.set("slashbeatnoteytoppadding", obj.slashBeatNoteYTopPadding);
        o.set("tupletoffset", obj.tupletOffset);
        o.set("tabclefoffsetx", obj.tabClefOffsetX);
        o.set("tabnoteytopoffset", obj.tabNoteYTopOffset);
        o.set("accentuationpadding", obj.accentuationPadding);
        o.set("articstaccatoabovepaddingx", obj.articStaccatoAbovePaddingX);
        o.set("articstaccatoabovepaddingy", obj.articStaccatoAbovePaddingY);
        o.set("bartempovaluepadding", obj.barTempoValuePadding);
        o.set("gracebeatpadding", obj.graceBeatPadding);
        o.set("gracebeatpostbeatstretch", obj.graceBeatPostBeatStretch);
        {
            const m = new Map<string, unknown>();
            o.set("scoretremolooffsetup", m);
            for (const [k, v] of obj.scoreTremoloOffsetUp!) {
                m.set(k.toString(), v);
            }
        }
        o.set("scoretremolooffsetupother", obj.scoreTremoloOffsetUpOther);
        {
            const m = new Map<string, unknown>();
            o.set("scoretremolooffsetdown", m);
            for (const [k, v] of obj.scoreTremoloOffsetDown!) {
                m.set(k.toString(), v);
            }
        }
        o.set("scoretremolooffsetdownother", obj.scoreTremoloOffsetDownOther);
        {
            const m = new Map<string, unknown>();
            o.set("tabtremolooffsetx", m);
            for (const [k, v] of obj.tabTremoloOffsetX!) {
                m.set(k.toString(), v);
            }
        }
        o.set("tabtremoloxdefault", obj.tabTremoloXDefault);
        o.set("tabprebendpadding", obj.tabPreBendPadding);
        o.set("tabbendlabelyoffset", obj.tabBendLabelYOffset);
        o.set("tabslideoffsetx", obj.tabSlideOffsetX);
        {
            const m = new Map<string, unknown>();
            o.set("stemup", m);
            for (const [k, v] of obj.stemUp!) {
                m.set(k.toString(), SmuflStemInfoSerializer.toJson(v));
            }
        }
        {
            const m = new Map<string, unknown>();
            o.set("stemdown", m);
            for (const [k, v] of obj.stemDown!) {
                m.set(k.toString(), SmuflStemInfoSerializer.toJson(v));
            }
        }
        {
            const m = new Map<string, unknown>();
            o.set("repeatoffsetx", m);
            for (const [k, v] of obj.repeatOffsetX!) {
                m.set(k.toString(), v);
            }
        }
        o.set("deadslappedlinewidth", obj.deadSlappedLineWidth);
        o.set("targetdirectionglyphheight", obj.targetDirectionGlyphHeight);
        o.set("flagwidth", obj.flagWidth);
        o.set("ghostparenthesissize", obj.ghostParenthesisSize);
        o.set("lefthandtappingcirclescale", obj.leftHandTappingCircleScale);
        o.set("multibarrestwidth", obj.multiBarRestWidth);
        o.set("numberednoteheadwidth", obj.numberedNoteHeadWidth);
        o.set("numberednoteheadheight", obj.numberedNoteHeadHeight);
        o.set("numberedtieemptysize", obj.numberedTieEmptySize);
        o.set("arpeggiowidth", obj.arpeggioWidth);
        o.set("arpeggioarrowsize", obj.arpeggioArrowSize);
        o.set("crescendoheight", obj.crescendoHeight);
        o.set("bartempoheight", obj.barTempoHeight);
        o.set("numbereddashglyphwidth", obj.numberedDashGlyphWidth);
        o.set("similemarksimplewidth", obj.simileMarkSimpleWidth);
        o.set("similemarkdoublewidth", obj.simileMarkDoubleWidth);
        o.set("tupletsize", obj.tupletSize);
        o.set("graceflagsizex", obj.graceFlagSizeX);
        o.set("graceflagsizey", obj.graceFlagSizeY);
        o.set("flagstemsize", obj.flagStemSize);
        o.set("brokenbaroffset", obj.brokenBarOffset);
        o.set("scorebarrendererbeammaxdistance", obj.scoreBarRendererBeamMaxDistance);
        o.set("accidentalheight", obj.accidentalHeight);
        o.set("dottedbarlinecircleradius", obj.dottedBarLineCircleRadius);
        o.set("beatpaddingflageighthandabove", obj.beatPaddingFlagEighthAndAbove);
        o.set("beatpaddingonehundredandabove", obj.beatPaddingOneHundredAndAbove);
        o.set("barnumbermarginpaddingright", obj.barNumberMarginPaddingRight);
        o.set("scoreslidelinesizex", obj.scoreSlideLineSizeX);
        o.set("slashtieemptyheight", obj.slashTieEmptyHeight);
        o.set("slashtieemptywidth", obj.slashTieEmptyWidth);
        o.set("sustainpedallinewidth", obj.sustainPedalLineWidth);
        o.set("tabbendarrowsize", obj.tabBendArrowSize);
        o.set("tabbenddashsize", obj.tabBendDashSize);
        o.set("tabbendbendvalueheight", obj.tabBendBendValueHeight);
        o.set("tabbrushwidth", obj.tabBrushWidth);
        o.set("tabbrusharrowsize", obj.tabBrushArrowSize);
        o.set("tabrestinvisiblewidth", obj.tabRestInvisibleWidth);
        o.set("tabslidesizex", obj.tabSlideSizeX);
        o.set("tabslidesizey", obj.tabSlideSizeY);
        o.set("tabtieemptyheight", obj.tabTieEmptyHeight);
        o.set("tabtieemptywidth", obj.tabTieEmptyWidth);
        o.set("tabwhammyperhalfsize", obj.tabWhammyPerHalfSize);
        o.set("tabwhammydashsize", obj.tabWhammyDashSize);
        o.set("tiesize", obj.tieSize);
        o.set("tieheight", obj.tieHeight);
        o.set("bendslurheight", obj.bendSlurHeight);
        o.set("timesignaturenumberheight", obj.timeSignatureNumberHeight);
        {
            const m = new Map<string, unknown>();
            o.set("barstemsizes", m);
            for (const [k, v] of obj.barStemSizes!) {
                m.set(k.toString(), v);
            }
        }
        {
            const m = new Map<string, unknown>();
            o.set("glyphtop", m);
            for (const [k, v] of obj.glyphTop!) {
                m.set(k.toString(), v);
            }
        }
        {
            const m = new Map<string, unknown>();
            o.set("glyphbottom", m);
            for (const [k, v] of obj.glyphBottom!) {
                m.set(k.toString(), v);
            }
        }
        {
            const m = new Map<string, unknown>();
            o.set("glyphwidths", m);
            for (const [k, v] of obj.glyphWidths!) {
                m.set(k.toString(), v);
            }
        }
        {
            const m = new Map<string, unknown>();
            o.set("glyphheights", m);
            for (const [k, v] of obj.glyphHeights!) {
                m.set(k.toString(), v);
            }
        }
        o.set("chorddiagrampaddingx", obj.chordDiagramPaddingX);
        o.set("chorddiagrampaddingy", obj.chordDiagramPaddingY);
        o.set("chorddiagramcircleradius", obj.chordDiagramCircleRadius);
        o.set("chorddiagramstringspacing", obj.chordDiagramStringSpacing);
        o.set("chorddiagramfretspacing", obj.chordDiagramFretSpacing);
        o.set("chorddiagramnutheight", obj.chordDiagramNutHeight);
        o.set("chorddiagramfretheight", obj.chordDiagramFretHeight);
        o.set("targetdirectionglyphscale", obj.targetDirectionGlyphScale);
        o.set("dynamicsscale", obj.dynamicsScale);
        o.set("numberedkeysignaturescale", obj.numberedKeySignatureScale);
        o.set("ottavascale", obj.ottavaScale);
        o.set("pictedgeofcymbalscale", obj.pictEdgeOfCymbalScale);
        o.set("trillloopheighttoy", obj.trillLoopHeightToY);
        o.set("bartemposymbolyscale", obj.barTempoSymbolYScale);
        o.set("bartemposymbolscale", obj.barTempoSymbolScale);
        o.set("tuningglyphcirclenumberscale", obj.tuningGlyphCircleNumberScale);
        o.set("tuningglyphrowheight", obj.tuningGlyphRowHeight);
        o.set("tuningglyphtextpadding", obj.tuningGlyphTextPadding);
        o.set("tuningglyphstringcolumnwidth", obj.tuningGlyphStringColumnWidth);
        o.set("tuningglyphendpaddingx", obj.tuningGlyphEndPaddingX);
        o.set("tripletfeelnotescale", obj.tripletFeelNoteScale);
        o.set("tripletfeeltupletscale", obj.tripletFeelTupletScale);
        o.set("tripletfeelheight", obj.tripletFeelHeight);
        o.set("tripletfeelypadding", obj.tripletFeelYPadding);
        o.set("tripletfeelbracketsheighttoy", obj.tripletFeelBracketsHeightToY);
        o.set("tripletfeelleftnotexpadding", obj.tripletFeelLeftNoteXPadding);
        o.set("tripletfeelrightnotexpadding", obj.tripletFeelRightNoteXPadding);
        o.set("tripletfeelcircleoffset", obj.tripletFeelCircleOffset);
        o.set("tripletfeelcirclesize", obj.tripletFeelCircleSize);
        o.set("tripletfeelequalsoffsetx", obj.tripletFeelEqualsOffsetX);
        o.set("tripletfeelequalsoffsety", obj.tripletFeelEqualsOffsetY);
        o.set("tripletfeelaugmentationoffsetx", obj.tripletFeelAugmentationOffsetX);
        o.set("tripletfeelcloseparenthesisoffsetx", obj.tripletFeelCloseParenthesisOffsetX);
        o.set("scoreinfofontsizetoheight", obj.scoreInfoFontSizeToHeight);
        o.set("scorewhammyfontsizetooverflow", obj.scoreWhammyFontSizeToOverflow);
        o.set("linebarrendereroverflowfontsitetopadding", obj.lineBarRendererOverflowFontSiteToPadding);
        o.set("linebarrenderertupletfontsitetopadding", obj.lineBarRendererTupletFontSiteToPadding);
        o.set("chorddiagramfonttorow", obj.chordDiagramFontToRow);
        o.set("jumpdirectionfontsizetoheight", obj.jumpDirectionFontSizeToHeight);
        o.set("tabbendfontsizetoheight", obj.tabBendFontSizeToHeight);
        o.set("tabbendfontsizetopadding", obj.tabBendFontSizeToPadding);
        o.set("bartempotextpaddingscale", obj.barTempoTextPaddingScale);
        return o;
    }
    public static setProperty(obj: SmuflMetrics, property: string, v: unknown): boolean {
        switch (property) {
            case "musicfontsize":
                obj.musicFontSize = v! as number;
                return true;
            case "onestaffspace":
                obj.oneStaffSpace = v! as number;
                return true;
            case "tablinespacing":
                obj.tabLineSpacing = v! as number;
                return true;
            case "barlineseparation":
                obj.barlineSeparation = v! as number;
                return true;
            case "beamspacing":
                obj.beamSpacing = v! as number;
                return true;
            case "beamthickness":
                obj.beamThickness = v! as number;
                return true;
            case "dashedbarlinedashlength":
                obj.dashedBarlineDashLength = v! as number;
                return true;
            case "dashedbarlinegaplength":
                obj.dashedBarlineGapLength = v! as number;
                return true;
            case "dashedbarlinethickness":
                obj.dashedBarlineThickness = v! as number;
                return true;
            case "legerlinethickness":
                obj.legerLineThickness = v! as number;
                return true;
            case "legerlineextension":
                obj.legerLineExtension = v! as number;
                return true;
            case "repeatbarlinedotseparation":
                obj.repeatBarlineDotSeparation = v! as number;
                return true;
            case "repeatendinglinethickness":
                obj.repeatEndingLineThickness = v! as number;
                return true;
            case "stafflinethickness":
                obj.staffLineThickness = v! as number;
                return true;
            case "stemthickness":
                obj.stemThickness = v! as number;
                return true;
            case "thickbarlinethickness":
                obj.thickBarlineThickness = v! as number;
                return true;
            case "thinbarlinethickness":
                obj.thinBarlineThickness = v! as number;
                return true;
            case "thinthickbarlineseparation":
                obj.thinThickBarlineSeparation = v! as number;
                return true;
            case "effectbandseparation":
                obj.effectBandSeparation = v! as number;
                return true;
            case "tabnumberspacepadding":
                obj.tabNumberSpacePadding = v! as number;
                return true;
            case "numberedbarrendererbarsize":
                obj.numberedBarRendererBarSize = v! as number;
                return true;
            case "numberedbarrendererbarspacing":
                obj.numberedBarRendererBarSpacing = v! as number;
                return true;
            case "directionscontainerpadding":
                obj.directionsContainerPadding = v! as number;
                return true;
            case "lefthandtappingpadding":
                obj.leftHandTappingPadding = v! as number;
                return true;
            case "multibarrestpadding":
                obj.multiBarRestPadding = v! as number;
                return true;
            case "trilltextpadding":
                obj.trillTextPadding = v! as number;
                return true;
            case "numberedbeatpostaccidentalpadding":
                obj.numberedBeatPostAccidentalPadding = v! as number;
                return true;
            case "rowcontainerpadding":
                obj.rowContainerPadding = v! as number;
                return true;
            case "scorebeatghostspace":
                obj.scoreBeatGhostSpace = v! as number;
                return true;
            case "scoreprenotepadding":
                obj.scorePreNotePadding = v! as number;
                return true;
            case "scoreprefingeringpadding":
                obj.scorePreFingeringPadding = v! as number;
                return true;
            case "scorepreaccidentalpadding":
                obj.scorePreAccidentalPadding = v! as number;
                return true;
            case "scorebendendpadding":
                obj.scoreBendEndPadding = v! as number;
                return true;
            case "scorebendholdoffset":
                obj.scoreBendHoldOffset = v! as number;
                return true;
            case "scorebendholdsize":
                obj.scoreBendHoldSize = v! as number;
                return true;
            case "scorehelpernotesendpadding":
                obj.scoreHelperNotesEndPadding = v! as number;
                return true;
            case "scorehelpernotesendpadding2":
                obj.scoreHelperNotesEndPadding2 = v! as number;
                return true;
            case "scorenotebeloweffectspacing":
                obj.scoreNoteBelowEffectSpacing = v! as number;
                return true;
            case "tuplettextmargin":
                obj.tupletTextMargin = v! as number;
                return true;
            case "tabclefleftpadding":
                obj.tabClefLeftPadding = v! as number;
                return true;
            case "alternateendingspaddingx":
                obj.alternateEndingsPaddingX = v! as number;
                return true;
            case "alternateendingspaddingy":
                obj.alternateEndingsPaddingY = v! as number;
                return true;
            case "alternateendingscloselinepadding":
                obj.alternateEndingsCloseLinePadding = v! as number;
                return true;
            case "beattimerpaddingx":
                obj.beatTimerPaddingX = v! as number;
                return true;
            case "beattimerpaddingy":
                obj.beatTimerPaddingY = v! as number;
                return true;
            case "beattimermarginy":
                obj.beatTimerMarginY = v! as number;
                return true;
            case "bendnoteheadelementpadding":
                obj.bendNoteHeadElementPadding = v! as number;
                return true;
            case "circleglyphpadding":
                obj.circleGlyphPadding = v! as number;
                return true;
            case "scoreslidelineendpadding":
                obj.scoreSlideLineEndPadding = v! as number;
                return true;
            case "scoreslidelineoffsetx":
                obj.scoreSlideLineOffsetX = v! as number;
                return true;
            case "scoreslidelineoffsety":
                obj.scoreSlideLineOffsetY = v! as number;
                return true;
            case "scorewhammysimpledippadding":
                obj.scoreWhammySimpleDipPadding = v! as number;
                return true;
            case "scorewhammysongbookpadding":
                obj.scoreWhammySongBookPadding = v! as number;
                return true;
            case "slashnoteheadeffectspacing":
                obj.slashNoteHeadEffectSpacing = v! as number;
                return true;
            case "tabprenotespadding":
                obj.tabPreNotesPadding = v! as number;
                return true;
            case "tabnotechordeffectspacing":
                obj.tabNoteChordEffectSpacing = v! as number;
                return true;
            case "tabwhammysimpledippadding":
                obj.tabWhammySimpleDipPadding = v! as number;
                return true;
            case "tabwhammytextpadding":
                obj.tabWhammyTextPadding = v! as number;
                return true;
            case "linerangedglyphspacing":
                obj.lineRangedGlyphSpacing = v! as number;
                return true;
            case "linerangedglyphtoppadding":
                obj.lineRangedGlyphTopPadding = v! as number;
                return true;
            case "linerangedglyphtopoffset":
                obj.lineRangedGlyphTopOffset = v! as number;
                return true;
            case "linerangedglyphsize":
                obj.lineRangedGlyphSize = v! as number;
                return true;
            case "ottavalinesize":
                obj.ottavaLineSize = v! as number;
                return true;
            case "ottavalinespacing":
                obj.ottavaLineSpacing = v! as number;
                return true;
            case "ottavapaddingy":
                obj.ottavaPaddingY = v! as number;
                return true;
            case "numbereddashglyphpadding":
                obj.numberedDashGlyphPadding = v! as number;
                return true;
            case "stringnumbercirclepadding":
                obj.stringNumberCirclePadding = v! as number;
                return true;
            case "sustainpedaltextlinepadding":
                obj.sustainPedalTextLinePadding = v! as number;
                return true;
            case "sustainpedalstarlinepadding":
                obj.sustainPedalStarLinePadding = v! as number;
                return true;
            case "timesignatureghostparenthesisleftpadding":
                obj.timeSignatureGhostParenthesisLeftPadding = v! as number;
                return true;
            case "timesignatureghostparenthesisrightpadding":
                obj.timeSignatureGhostParenthesisRightPadding = v! as number;
                return true;
            case "tabbrusharpeggiooffset":
                obj.tabBrushArpeggioOffset = v! as number;
                return true;
            case "pictedgeofcymbaloffsetx":
                obj.pictEdgeOfCymbalOffsetX = v! as number;
                return true;
            case "arpeggioxoffset":
                obj.arpeggioXOffset = v! as number;
                return true;
            case "noteornamentbottomoffset":
                obj.noteOrnamentBottomOffset = v! as number;
                return true;
            case "numberedbeatnoteytoppadding":
                obj.numberedBeatNoteYTopPadding = v! as number;
                return true;
            case "slashbeatnoteytoppadding":
                obj.slashBeatNoteYTopPadding = v! as number;
                return true;
            case "tupletoffset":
                obj.tupletOffset = v! as number;
                return true;
            case "tabclefoffsetx":
                obj.tabClefOffsetX = v! as number;
                return true;
            case "tabnoteytopoffset":
                obj.tabNoteYTopOffset = v! as number;
                return true;
            case "accentuationpadding":
                obj.accentuationPadding = v! as number;
                return true;
            case "articstaccatoabovepaddingx":
                obj.articStaccatoAbovePaddingX = v! as number;
                return true;
            case "articstaccatoabovepaddingy":
                obj.articStaccatoAbovePaddingY = v! as number;
                return true;
            case "bartempovaluepadding":
                obj.barTempoValuePadding = v! as number;
                return true;
            case "gracebeatpadding":
                obj.graceBeatPadding = v! as number;
                return true;
            case "gracebeatpostbeatstretch":
                obj.graceBeatPostBeatStretch = v! as number;
                return true;
            case "scoretremolooffsetup":
                obj.scoreTremoloOffsetUp = new Map<Duration, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.scoreTremoloOffsetUp.set(JsonHelper.parseEnum<Duration>(k, Duration)!, v as number);
                });
                return true;
            case "scoretremolooffsetupother":
                obj.scoreTremoloOffsetUpOther = v! as number;
                return true;
            case "scoretremolooffsetdown":
                obj.scoreTremoloOffsetDown = new Map<Duration, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.scoreTremoloOffsetDown.set(JsonHelper.parseEnum<Duration>(k, Duration)!, v as number);
                });
                return true;
            case "scoretremolooffsetdownother":
                obj.scoreTremoloOffsetDownOther = v! as number;
                return true;
            case "tabtremolooffsetx":
                obj.tabTremoloOffsetX = new Map<Duration, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.tabTremoloOffsetX.set(JsonHelper.parseEnum<Duration>(k, Duration)!, v as number);
                });
                return true;
            case "tabtremoloxdefault":
                obj.tabTremoloXDefault = v! as number;
                return true;
            case "tabprebendpadding":
                obj.tabPreBendPadding = v! as number;
                return true;
            case "tabbendlabelyoffset":
                obj.tabBendLabelYOffset = v! as number;
                return true;
            case "tabslideoffsetx":
                obj.tabSlideOffsetX = v! as number;
                return true;
            case "stemup":
                obj.stemUp = new Map<MusicFontSymbol, SmuflStemInfo>();
                JsonHelper.forEach(v, (v, k) => {
                    const i = new SmuflStemInfo();
                    SmuflStemInfoSerializer.fromJson(i, v as Map<string, unknown>);
                    obj.stemUp.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, i);
                });
                return true;
            case "stemdown":
                obj.stemDown = new Map<MusicFontSymbol, SmuflStemInfo>();
                JsonHelper.forEach(v, (v, k) => {
                    const i = new SmuflStemInfo();
                    SmuflStemInfoSerializer.fromJson(i, v as Map<string, unknown>);
                    obj.stemDown.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, i);
                });
                return true;
            case "repeatoffsetx":
                obj.repeatOffsetX = new Map<MusicFontSymbol, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.repeatOffsetX.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, v as number);
                });
                return true;
            case "deadslappedlinewidth":
                obj.deadSlappedLineWidth = v! as number;
                return true;
            case "targetdirectionglyphheight":
                obj.targetDirectionGlyphHeight = v! as number;
                return true;
            case "flagwidth":
                obj.flagWidth = v! as number;
                return true;
            case "ghostparenthesissize":
                obj.ghostParenthesisSize = v! as number;
                return true;
            case "lefthandtappingcirclescale":
                obj.leftHandTappingCircleScale = v! as number;
                return true;
            case "multibarrestwidth":
                obj.multiBarRestWidth = v! as number;
                return true;
            case "numberednoteheadwidth":
                obj.numberedNoteHeadWidth = v! as number;
                return true;
            case "numberednoteheadheight":
                obj.numberedNoteHeadHeight = v! as number;
                return true;
            case "numberedtieemptysize":
                obj.numberedTieEmptySize = v! as number;
                return true;
            case "arpeggiowidth":
                obj.arpeggioWidth = v! as number;
                return true;
            case "arpeggioarrowsize":
                obj.arpeggioArrowSize = v! as number;
                return true;
            case "crescendoheight":
                obj.crescendoHeight = v! as number;
                return true;
            case "bartempoheight":
                obj.barTempoHeight = v! as number;
                return true;
            case "numbereddashglyphwidth":
                obj.numberedDashGlyphWidth = v! as number;
                return true;
            case "similemarksimplewidth":
                obj.simileMarkSimpleWidth = v! as number;
                return true;
            case "similemarkdoublewidth":
                obj.simileMarkDoubleWidth = v! as number;
                return true;
            case "tupletsize":
                obj.tupletSize = v! as number;
                return true;
            case "graceflagsizex":
                obj.graceFlagSizeX = v! as number;
                return true;
            case "graceflagsizey":
                obj.graceFlagSizeY = v! as number;
                return true;
            case "flagstemsize":
                obj.flagStemSize = v! as number;
                return true;
            case "brokenbaroffset":
                obj.brokenBarOffset = v! as number;
                return true;
            case "scorebarrendererbeammaxdistance":
                obj.scoreBarRendererBeamMaxDistance = v! as number;
                return true;
            case "accidentalheight":
                obj.accidentalHeight = v! as number;
                return true;
            case "dottedbarlinecircleradius":
                obj.dottedBarLineCircleRadius = v! as number;
                return true;
            case "beatpaddingflageighthandabove":
                obj.beatPaddingFlagEighthAndAbove = v! as number;
                return true;
            case "beatpaddingonehundredandabove":
                obj.beatPaddingOneHundredAndAbove = v! as number;
                return true;
            case "barnumbermarginpaddingright":
                obj.barNumberMarginPaddingRight = v! as number;
                return true;
            case "scoreslidelinesizex":
                obj.scoreSlideLineSizeX = v! as number;
                return true;
            case "slashtieemptyheight":
                obj.slashTieEmptyHeight = v! as number;
                return true;
            case "slashtieemptywidth":
                obj.slashTieEmptyWidth = v! as number;
                return true;
            case "sustainpedallinewidth":
                obj.sustainPedalLineWidth = v! as number;
                return true;
            case "tabbendarrowsize":
                obj.tabBendArrowSize = v! as number;
                return true;
            case "tabbenddashsize":
                obj.tabBendDashSize = v! as number;
                return true;
            case "tabbendbendvalueheight":
                obj.tabBendBendValueHeight = v! as number;
                return true;
            case "tabbrushwidth":
                obj.tabBrushWidth = v! as number;
                return true;
            case "tabbrusharrowsize":
                obj.tabBrushArrowSize = v! as number;
                return true;
            case "tabrestinvisiblewidth":
                obj.tabRestInvisibleWidth = v! as number;
                return true;
            case "tabslidesizex":
                obj.tabSlideSizeX = v! as number;
                return true;
            case "tabslidesizey":
                obj.tabSlideSizeY = v! as number;
                return true;
            case "tabtieemptyheight":
                obj.tabTieEmptyHeight = v! as number;
                return true;
            case "tabtieemptywidth":
                obj.tabTieEmptyWidth = v! as number;
                return true;
            case "tabwhammyperhalfsize":
                obj.tabWhammyPerHalfSize = v! as number;
                return true;
            case "tabwhammydashsize":
                obj.tabWhammyDashSize = v! as number;
                return true;
            case "tiesize":
                obj.tieSize = v! as number;
                return true;
            case "tieheight":
                obj.tieHeight = v! as number;
                return true;
            case "bendslurheight":
                obj.bendSlurHeight = v! as number;
                return true;
            case "timesignaturenumberheight":
                obj.timeSignatureNumberHeight = v! as number;
                return true;
            case "barstemsizes":
                obj.barStemSizes = new Map<Duration, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.barStemSizes.set(JsonHelper.parseEnum<Duration>(k, Duration)!, v as number);
                });
                return true;
            case "glyphtop":
                obj.glyphTop = new Map<MusicFontSymbol, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.glyphTop.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, v as number);
                });
                return true;
            case "glyphbottom":
                obj.glyphBottom = new Map<MusicFontSymbol, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.glyphBottom.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, v as number);
                });
                return true;
            case "glyphwidths":
                obj.glyphWidths = new Map<MusicFontSymbol, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.glyphWidths.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, v as number);
                });
                return true;
            case "glyphheights":
                obj.glyphHeights = new Map<MusicFontSymbol, number>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.glyphHeights.set(JsonHelper.parseEnum<MusicFontSymbol>(k, MusicFontSymbol)!, v as number);
                });
                return true;
            case "chorddiagrampaddingx":
                obj.chordDiagramPaddingX = v! as number;
                return true;
            case "chorddiagrampaddingy":
                obj.chordDiagramPaddingY = v! as number;
                return true;
            case "chorddiagramcircleradius":
                obj.chordDiagramCircleRadius = v! as number;
                return true;
            case "chorddiagramstringspacing":
                obj.chordDiagramStringSpacing = v! as number;
                return true;
            case "chorddiagramfretspacing":
                obj.chordDiagramFretSpacing = v! as number;
                return true;
            case "chorddiagramnutheight":
                obj.chordDiagramNutHeight = v! as number;
                return true;
            case "chorddiagramfretheight":
                obj.chordDiagramFretHeight = v! as number;
                return true;
            case "targetdirectionglyphscale":
                obj.targetDirectionGlyphScale = v! as number;
                return true;
            case "dynamicsscale":
                obj.dynamicsScale = v! as number;
                return true;
            case "numberedkeysignaturescale":
                obj.numberedKeySignatureScale = v! as number;
                return true;
            case "ottavascale":
                obj.ottavaScale = v! as number;
                return true;
            case "pictedgeofcymbalscale":
                obj.pictEdgeOfCymbalScale = v! as number;
                return true;
            case "trillloopheighttoy":
                obj.trillLoopHeightToY = v! as number;
                return true;
            case "bartemposymbolyscale":
                obj.barTempoSymbolYScale = v! as number;
                return true;
            case "bartemposymbolscale":
                obj.barTempoSymbolScale = v! as number;
                return true;
            case "tuningglyphcirclenumberscale":
                obj.tuningGlyphCircleNumberScale = v! as number;
                return true;
            case "tuningglyphrowheight":
                obj.tuningGlyphRowHeight = v! as number;
                return true;
            case "tuningglyphtextpadding":
                obj.tuningGlyphTextPadding = v! as number;
                return true;
            case "tuningglyphstringcolumnwidth":
                obj.tuningGlyphStringColumnWidth = v! as number;
                return true;
            case "tuningglyphendpaddingx":
                obj.tuningGlyphEndPaddingX = v! as number;
                return true;
            case "tripletfeelnotescale":
                obj.tripletFeelNoteScale = v! as number;
                return true;
            case "tripletfeeltupletscale":
                obj.tripletFeelTupletScale = v! as number;
                return true;
            case "tripletfeelheight":
                obj.tripletFeelHeight = v! as number;
                return true;
            case "tripletfeelypadding":
                obj.tripletFeelYPadding = v! as number;
                return true;
            case "tripletfeelbracketsheighttoy":
                obj.tripletFeelBracketsHeightToY = v! as number;
                return true;
            case "tripletfeelleftnotexpadding":
                obj.tripletFeelLeftNoteXPadding = v! as number;
                return true;
            case "tripletfeelrightnotexpadding":
                obj.tripletFeelRightNoteXPadding = v! as number;
                return true;
            case "tripletfeelcircleoffset":
                obj.tripletFeelCircleOffset = v! as number;
                return true;
            case "tripletfeelcirclesize":
                obj.tripletFeelCircleSize = v! as number;
                return true;
            case "tripletfeelequalsoffsetx":
                obj.tripletFeelEqualsOffsetX = v! as number;
                return true;
            case "tripletfeelequalsoffsety":
                obj.tripletFeelEqualsOffsetY = v! as number;
                return true;
            case "tripletfeelaugmentationoffsetx":
                obj.tripletFeelAugmentationOffsetX = v! as number;
                return true;
            case "tripletfeelcloseparenthesisoffsetx":
                obj.tripletFeelCloseParenthesisOffsetX = v! as number;
                return true;
            case "scoreinfofontsizetoheight":
                obj.scoreInfoFontSizeToHeight = v! as number;
                return true;
            case "scorewhammyfontsizetooverflow":
                obj.scoreWhammyFontSizeToOverflow = v! as number;
                return true;
            case "linebarrendereroverflowfontsitetopadding":
                obj.lineBarRendererOverflowFontSiteToPadding = v! as number;
                return true;
            case "linebarrenderertupletfontsitetopadding":
                obj.lineBarRendererTupletFontSiteToPadding = v! as number;
                return true;
            case "chorddiagramfonttorow":
                obj.chordDiagramFontToRow = v! as number;
                return true;
            case "jumpdirectionfontsizetoheight":
                obj.jumpDirectionFontSizeToHeight = v! as number;
                return true;
            case "tabbendfontsizetoheight":
                obj.tabBendFontSizeToHeight = v! as number;
                return true;
            case "tabbendfontsizetopadding":
                obj.tabBendFontSizeToPadding = v! as number;
                return true;
            case "bartempotextpaddingscale":
                obj.barTempoTextPaddingScale = v! as number;
                return true;
        }
        return false;
    }
}
