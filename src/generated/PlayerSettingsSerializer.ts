// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { PlayerSettings } from "@src/PlayerSettings";
import { JsonHelper } from "@src/io/JsonHelper";
import { VibratoPlaybackSettingsSerializer } from "@src/generated/VibratoPlaybackSettingsSerializer";
import { SlidePlaybackSettingsSerializer } from "@src/generated/SlidePlaybackSettingsSerializer";
import { IReadable } from "@src/io/IReadable";
import { IWriteable } from "@src/io/IWriteable";
import { IOHelper } from "@src/io/IOHelper";
import { ScrollMode } from "@src/PlayerSettings";
export class PlayerSettingsSerializer {
    public static fromJson(obj: PlayerSettings, m: unknown): void {
        if (!m) {
            return;
        } 
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v)); 
    }
    public static toJson(obj: PlayerSettings | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        } 
        const o = new Map<string, unknown>(); 
        o.set("soundfont", obj.soundFont); 
        o.set("scrollelement", obj.scrollElement); 
        o.set("enableplayer", obj.enablePlayer); 
        o.set("enablecursor", obj.enableCursor); 
        o.set("enableanimatedbeatcursor", obj.enableAnimatedBeatCursor); 
        o.set("enableelementhighlighting", obj.enableElementHighlighting); 
        o.set("enableuserinteraction", obj.enableUserInteraction); 
        o.set("scrolloffsetx", obj.scrollOffsetX); 
        o.set("scrolloffsety", obj.scrollOffsetY); 
        o.set("scrollmode", obj.scrollMode as number); 
        o.set("scrollspeed", obj.scrollSpeed); 
        /*@target web*/
        o.set("nativebrowsersmoothscroll", obj.nativeBrowserSmoothScroll); 
        o.set("songbookbendduration", obj.songBookBendDuration); 
        o.set("songbookdipduration", obj.songBookDipDuration); 
        o.set("vibrato", VibratoPlaybackSettingsSerializer.toJson(obj.vibrato)); 
        o.set("slide", SlidePlaybackSettingsSerializer.toJson(obj.slide)); 
        o.set("playtripletfeel", obj.playTripletFeel); 
        return o; 
    }
    public static fromBinary(o: PlayerSettings | null, r: IReadable): PlayerSettings | null {
        if (IOHelper.readNull(r)) {
            return null;
        } 
        const obj = o != null ? o : new PlayerSettings(); 
        if (!IOHelper.readNull(r)) {
            obj.soundFont = IOHelper.readString(r);
        } 
        obj.scrollElement = IOHelper.readString(r); 
        obj.enablePlayer = IOHelper.readBoolean(r); 
        obj.enableCursor = IOHelper.readBoolean(r); 
        obj.enableAnimatedBeatCursor = IOHelper.readBoolean(r); 
        obj.enableElementHighlighting = IOHelper.readBoolean(r); 
        obj.enableUserInteraction = IOHelper.readBoolean(r); 
        obj.scrollOffsetX = IOHelper.readNumber(r); 
        obj.scrollOffsetY = IOHelper.readNumber(r); 
        obj.scrollMode = JsonHelper.parseEnum<ScrollMode>(IOHelper.readInt32LE(r), ScrollMode)!; 
        obj.scrollSpeed = IOHelper.readNumber(r); 
        /*@target web*/
        obj.nativeBrowserSmoothScroll = IOHelper.readBoolean(r); 
        obj.songBookBendDuration = IOHelper.readNumber(r); 
        obj.songBookDipDuration = IOHelper.readNumber(r); 
        obj.vibrato = VibratoPlaybackSettingsSerializer.fromBinary(obj.vibrato, r); 
        obj.slide = SlidePlaybackSettingsSerializer.fromBinary(obj.slide, r); 
        obj.playTripletFeel = IOHelper.readBoolean(r); 
        return obj; 
    }
    public static toBinary(obj: PlayerSettings | null, w: IWriteable): void {
        if (!obj) {
            IOHelper.writeNull(w);
            return;
        } 
        IOHelper.writeNotNull(w); 
        IOHelper.writeString(w, obj.scrollElement); 
        IOHelper.writeBoolean(w, obj.enablePlayer); 
        IOHelper.writeBoolean(w, obj.enableCursor); 
        IOHelper.writeBoolean(w, obj.enableAnimatedBeatCursor); 
        IOHelper.writeBoolean(w, obj.enableElementHighlighting); 
        IOHelper.writeBoolean(w, obj.enableUserInteraction); 
        IOHelper.writeNumber(w, obj.scrollOffsetX); 
        IOHelper.writeNumber(w, obj.scrollOffsetY); 
        IOHelper.writeInt32LE(w, obj.scrollMode as number); 
        IOHelper.writeNumber(w, obj.scrollSpeed); 
        /*@target web*/
        IOHelper.writeBoolean(w, obj.nativeBrowserSmoothScroll); 
        IOHelper.writeNumber(w, obj.songBookBendDuration); 
        IOHelper.writeNumber(w, obj.songBookDipDuration); 
        VibratoPlaybackSettingsSerializer.toBinary(obj.vibrato, w); 
        SlidePlaybackSettingsSerializer.toBinary(obj.slide, w); 
        IOHelper.writeBoolean(w, obj.playTripletFeel); 
    }
    public static setProperty(obj: PlayerSettings, property: string, v: unknown): boolean {
        switch (property) {
            case "soundfont":
                obj.soundFont = v as string | null;
                return true;
            case "scrollelement":
                obj.scrollElement = v! as string;
                return true;
            case "enableplayer":
                obj.enablePlayer = v! as boolean;
                return true;
            case "enablecursor":
                obj.enableCursor = v! as boolean;
                return true;
            case "enableanimatedbeatcursor":
                obj.enableAnimatedBeatCursor = v! as boolean;
                return true;
            case "enableelementhighlighting":
                obj.enableElementHighlighting = v! as boolean;
                return true;
            case "enableuserinteraction":
                obj.enableUserInteraction = v! as boolean;
                return true;
            case "scrolloffsetx":
                obj.scrollOffsetX = v! as number;
                return true;
            case "scrolloffsety":
                obj.scrollOffsetY = v! as number;
                return true;
            case "scrollmode":
                obj.scrollMode = JsonHelper.parseEnum<ScrollMode>(v, ScrollMode)!;
                return true;
            case "scrollspeed":
                obj.scrollSpeed = v! as number;
                return true;
            /*@target web*/
            case "nativebrowsersmoothscroll":
                obj.nativeBrowserSmoothScroll = v! as boolean;
                return true;
            case "songbookbendduration":
                obj.songBookBendDuration = v! as number;
                return true;
            case "songbookdipduration":
                obj.songBookDipDuration = v! as number;
                return true;
            case "playtripletfeel":
                obj.playTripletFeel = v! as boolean;
                return true;
        } 
        if (["vibrato"].indexOf(property) >= 0) {
            VibratoPlaybackSettingsSerializer.fromJson(obj.vibrato, v as Map<string, unknown>);
            return true;
        }
        else {
            for (const c of ["vibrato"]) {
                if (property.indexOf(c) === 0) {
                    if (VibratoPlaybackSettingsSerializer.setProperty(obj.vibrato, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
        } 
        if (["slide"].indexOf(property) >= 0) {
            SlidePlaybackSettingsSerializer.fromJson(obj.slide, v as Map<string, unknown>);
            return true;
        }
        else {
            for (const c of ["slide"]) {
                if (property.indexOf(c) === 0) {
                    if (SlidePlaybackSettingsSerializer.setProperty(obj.slide, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
        } 
        return false; 
    }
}

