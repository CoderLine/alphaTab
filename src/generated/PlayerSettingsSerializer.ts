// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { PlayerSettings } from "@src/PlayerSettings";
import { ScrollMode } from "@src/PlayerSettings";
export class PlayerSettingsSerializer {
    public static fromJson(json: any): PlayerSettings {
        const obj = new PlayerSettings(); 
        this.fillFromJson(obj, json); 
        return obj; 
    }
    public static fillFromJson(obj: PlayerSettings, json: any): void {
        if (json) {
            for (const $k in json) {
                this.setProperty(obj, $k.toLowerCase(), json[$k]);
            }
        } 
    }
    public static toJson(obj: PlayerSettings | null): any {
        if (!obj) {
            return null;
        } 
        const json: any = {}; 
        this.fillToJson(obj, json); 
        return json; 
    }
    public static fillToJson(obj: PlayerSettings, json: any): void {
        json.soundFont = obj.soundFont; 
        json.scrollElement = obj.scrollElement; 
        json.enablePlayer = obj.enablePlayer; 
        json.enableCursor = obj.enableCursor; 
        json.enableUserInteraction = obj.enableUserInteraction; 
        json.scrollOffsetX = obj.scrollOffsetX; 
        json.scrollOffsetY = obj.scrollOffsetY; 
        json.scrollMode = obj.scrollMode; 
        json.scrollSpeed = obj.scrollSpeed; 
        json.songBookBendDuration = obj.songBookBendDuration; 
        json.songBookDipDuration = obj.songBookDipDuration; 
        json.playTripletFeel = obj.playTripletFeel; 
    }
    public static setProperty(obj: PlayerSettings, property: string, value: any): boolean {
        switch (property) {
            case "soundfont":
                obj.soundFont = value;
                return true;
            case "scrollelement":
                obj.scrollElement = value;
                return true;
            case "enableplayer":
                obj.enablePlayer = value;
                return true;
            case "enablecursor":
                obj.enableCursor = value;
                return true;
            case "enableuserinteraction":
                obj.enableUserInteraction = value;
                return true;
            case "scrolloffsetx":
                obj.scrollOffsetX = value;
                return true;
            case "scrolloffsety":
                obj.scrollOffsetY = value;
                return true;
            case "scrollmode":
                obj.scrollMode = isNaN(parseInt(value)) ? ScrollMode[Object.keys(ScrollMode).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof ScrollMode] : parseInt(value);
                return true;
            case "scrollspeed":
                obj.scrollSpeed = value;
                return true;
            case "songbookbendduration":
                obj.songBookBendDuration = value;
                return true;
            case "songbookdipduration":
                obj.songBookDipDuration = value;
                return true;
            case "playtripletfeel":
                obj.playTripletFeel = value;
                return true;
        } 
        return false; 
    }
}

