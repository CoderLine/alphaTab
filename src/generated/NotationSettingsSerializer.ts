// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { NotationSettings } from "@src/NotationSettings";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { NotationMode } from "@src/NotationSettings";
import { FingeringMode } from "@src/NotationSettings";
import { NotationElement } from "@src/NotationSettings";
import { TabRhythmMode } from "@src/NotationSettings";
export class NotationSettingsSerializer {
    public static fromJson(obj: NotationSettings, reader: IJsonReader): void {
        if (reader.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (reader.nextProperty()) {
            this.setProperty(obj, reader.readPropertyName().toLowerCase(), reader);
        } 
    }
    public static toJson(obj: NotationSettings | null, writer: IJsonWriter): void {
        if (!obj) {
            writer.writeNull();
            return;
        } 
        writer.writeStartObject(); 
        writer.writePropertyName("notationMode"); 
        writer.writeEnum(obj.notationMode); 
        writer.writePropertyName("fingeringMode"); 
        writer.writeEnum(obj.fingeringMode); 
        writer.writePropertyName("elements"); 
        writer.writeStartObject(); 
        obj.elements.forEach((k, v) => { writer.writePropertyName(k); v; }); 
        writer.writeEndObject(); 
        writer.writePropertyName("rhythmMode"); 
        writer.writeEnum(obj.rhythmMode); 
        writer.writePropertyName("rhythmHeight"); 
        writer.writeNumber(obj.rhythmHeight); 
        writer.writePropertyName("transpositionPitches"); 
        writer.writeNumberArray(obj.transpositionPitches); 
        writer.writePropertyName("displayTranspositionPitches"); 
        writer.writeNumberArray(obj.displayTranspositionPitches); 
        writer.writePropertyName("smallGraceTabNotes"); 
        writer.writeBoolean(obj.smallGraceTabNotes); 
        writer.writePropertyName("extendBendArrowsOnTiedNotes"); 
        writer.writeBoolean(obj.extendBendArrowsOnTiedNotes); 
        writer.writePropertyName("extendLineEffectsToBeatEnd"); 
        writer.writeBoolean(obj.extendLineEffectsToBeatEnd); 
        writer.writePropertyName("slurHeight"); 
        writer.writeNumber(obj.slurHeight); 
        writer.writeEndObject(); 
    }
    public static setProperty(obj: NotationSettings, property: string, reader: IJsonReader): boolean {
        switch (property) {
            case "notationmode":
                obj.notationMode = (reader.readEnum<NotationMode>(NotationMode)!);
                return true;
            case "fingeringmode":
                obj.fingeringMode = (reader.readEnum<FingeringMode>(FingeringMode)!);
                return true;
            case "elements":
                obj.elements = new Map<NotationElement, boolean>();
                for (let __mk in value)
                    if (value.hasOwnProperty(__mk))
                        obj.elements.set(reader.readEnum<NotationElement>(NotationElement), value[__mk]);
                return true;
            case "rhythmmode":
                obj.rhythmMode = (reader.readEnum<TabRhythmMode>(TabRhythmMode)!);
                return true;
            case "rhythmheight":
                obj.rhythmHeight = (reader.readNumber()!);
                return true;
            case "transpositionpitches":
                obj.transpositionPitches = (reader.readNumberArray()!);
                return true;
            case "displaytranspositionpitches":
                obj.displayTranspositionPitches = (reader.readNumberArray()!);
                return true;
            case "smallgracetabnotes":
                obj.smallGraceTabNotes = (reader.readBoolean()!);
                return true;
            case "extendbendarrowsontiednotes":
                obj.extendBendArrowsOnTiedNotes = (reader.readBoolean()!);
                return true;
            case "extendlineeffectstobeatend":
                obj.extendLineEffectsToBeatEnd = (reader.readBoolean()!);
                return true;
            case "slurheight":
                obj.slurHeight = (reader.readNumber()!);
                return true;
        } 
        return false; 
    }
}

