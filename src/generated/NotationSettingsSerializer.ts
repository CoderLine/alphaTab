// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { NotationSettings } from "@src/NotationSettings";
import { JsonReader } from "@src/io/JsonReader";
import { JsonValueType } from "@src/io/JsonReader";
import { JsonWriter } from "@src/io/JsonWriter";
import { NotationMode } from "@src/NotationSettings";
import { FingeringMode } from "@src/NotationSettings";
import { NotationElement } from "@src/NotationSettings";
import { TabRhythmMode } from "@src/NotationSettings";
export class NotationSettingsSerializer {
    public static fromJson(obj: NotationSettings, r: JsonReader): void {
        if (r.currentValueType === JsonValueType.Null) {
            return;
        } 
        r.startObject(); 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
        r.endObject(); 
    }
    public static toJson(obj: NotationSettings | null, w: JsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.enum(obj.notationMode, "notationMode"); 
        w.enum(obj.fingeringMode, "fingeringMode"); 
        w.prop("elements"); 
        w.startObject(); 
        obj.elements.forEach((v, k) => { w.prop(k); w.boolean(v); }); 
        w.endObject(); 
        w.enum(obj.rhythmMode, "rhythmMode"); 
        w.number(obj.rhythmHeight, "rhythmHeight"); 
        w.numberArray(obj.transpositionPitches, "transpositionPitches"); 
        w.numberArray(obj.displayTranspositionPitches, "displayTranspositionPitches"); 
        w.boolean(obj.smallGraceTabNotes, "smallGraceTabNotes"); 
        w.boolean(obj.extendBendArrowsOnTiedNotes, "extendBendArrowsOnTiedNotes"); 
        w.boolean(obj.extendLineEffectsToBeatEnd, "extendLineEffectsToBeatEnd"); 
        w.number(obj.slurHeight, "slurHeight"); 
        w.endObject(); 
    }
    public static setProperty(obj: NotationSettings, property: string, r: JsonReader): boolean {
        switch (property) {
            case "notationmode":
                obj.notationMode = (r.enum<NotationMode>(NotationMode)!);
                return true;
            case "fingeringmode":
                obj.fingeringMode = (r.enum<FingeringMode>(FingeringMode)!);
                return true;
            case "elements":
                obj.elements = new Map<NotationElement, boolean>();
                r.startObject();
                while (r.nextProp()) {
                    obj.elements.set(r.enumProp<NotationElement>(NotationElement), (r.boolean()!));
                }
                r.endObject();
                return true;
            case "rhythmmode":
                obj.rhythmMode = (r.enum<TabRhythmMode>(TabRhythmMode)!);
                return true;
            case "rhythmheight":
                obj.rhythmHeight = (r.number()!);
                return true;
            case "transpositionpitches":
                obj.transpositionPitches = (r.numberArray()!);
                return true;
            case "displaytranspositionpitches":
                obj.displayTranspositionPitches = (r.numberArray()!);
                return true;
            case "smallgracetabnotes":
                obj.smallGraceTabNotes = (r.boolean()!);
                return true;
            case "extendbendarrowsontiednotes":
                obj.extendBendArrowsOnTiedNotes = (r.boolean()!);
                return true;
            case "extendlineeffectstobeatend":
                obj.extendLineEffectsToBeatEnd = (r.boolean()!);
                return true;
            case "slurheight":
                obj.slurHeight = (r.number()!);
                return true;
        } 
        return false; 
    }
}

