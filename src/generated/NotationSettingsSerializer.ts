// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { NotationSettings } from "@src/NotationSettings";
import { NotationMode } from "@src/NotationSettings";
import { FingeringMode } from "@src/NotationSettings";
import { NotationElement } from "@src/NotationSettings";
import { TabRhythmMode } from "@src/NotationSettings";
export class NotationSettingsSerializer {
    public static fromJson(json: any): NotationSettings {
        const obj = new NotationSettings(); 
        this.fillFromJson(obj, json); 
        return obj; 
    }
    public static fillFromJson(obj: NotationSettings, json: any): void {
        if (json) {
            for (const $k in json) {
                this.setProperty(obj, $k.toLowerCase(), json[$k]);
            }
        } 
    }
    public static toJson(obj: NotationSettings | null): any {
        if (!obj) {
            return null;
        } 
        const json: any = {}; 
        this.fillToJson(obj, json); 
        return json; 
    }
    public static fillToJson(obj: NotationSettings, json: any): void {
        json.notationMode = obj.notationMode; 
        json.fingeringMode = obj.fingeringMode; 
        json.elements = ({} as any); 
        obj.elements.forEach(($mv, $mk) => { (json.elements as any)[$mk] = $mv; }); 
        json.rhythmMode = obj.rhythmMode; 
        json.rhythmHeight = obj.rhythmHeight; 
        json.transpositionPitches = obj.transpositionPitches.slice(); 
        json.displayTranspositionPitches = obj.displayTranspositionPitches.slice(); 
        json.smallGraceTabNotes = obj.smallGraceTabNotes; 
        json.extendBendArrowsOnTiedNotes = obj.extendBendArrowsOnTiedNotes; 
        json.extendLineEffectsToBeatEnd = obj.extendLineEffectsToBeatEnd; 
        json.slurHeight = obj.slurHeight; 
    }
    public static setProperty(obj: NotationSettings, property: string, value: any): boolean {
        switch (property) {
            case "notationmode":
                obj.notationMode = isNaN(parseInt(value)) ? NotationMode[Object.keys(NotationMode).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof NotationMode] : parseInt(value);
                return true;
            case "fingeringmode":
                obj.fingeringMode = isNaN(parseInt(value)) ? FingeringMode[Object.keys(FingeringMode).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof FingeringMode] : parseInt(value);
                return true;
            case "elements":
                obj.elements = new Map<NotationElement, boolean>();
                for (let $mk in value)
                    if (value.hasOwnProperty($mk))
                        obj.elements.set(isNaN(parseInt($mk)) ? NotationElement[Object.keys(NotationElement).find($k => $k.toLowerCase() === $mk.toLowerCase()) as keyof typeof NotationElement] : parseInt($mk), value[$mk]);
                return true;
            case "rhythmmode":
                obj.rhythmMode = isNaN(parseInt(value)) ? TabRhythmMode[Object.keys(TabRhythmMode).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof TabRhythmMode] : parseInt(value);
                return true;
            case "rhythmheight":
                obj.rhythmHeight = value;
                return true;
            case "transpositionpitches":
                obj.transpositionPitches = value.slice();
                return true;
            case "displaytranspositionpitches":
                obj.displayTranspositionPitches = value.slice();
                return true;
            case "smallgracetabnotes":
                obj.smallGraceTabNotes = value;
                return true;
            case "extendbendarrowsontiednotes":
                obj.extendBendArrowsOnTiedNotes = value;
                return true;
            case "extendlineeffectstobeatend":
                obj.extendLineEffectsToBeatEnd = value;
                return true;
            case "slurheight":
                obj.slurHeight = value;
                return true;
        } 
        return false; 
    }
}

