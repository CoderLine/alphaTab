// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { NotationSettings } from "@src/NotationSettings";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { NotationMode } from "@src/NotationSettings";
import { FingeringMode } from "@src/NotationSettings";
import { NotationElement } from "@src/NotationSettings";
import { TabRhythmMode } from "@src/NotationSettings";
export class NotationSettingsSerializer {
    public static fromJson(obj: NotationSettings, r: IJsonReader): void {
        if (r.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
    }
    public static toJson(obj: NotationSettings | null, w: IJsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.prop("notationMode"); 
        w.enum(obj.notationMode); 
        w.prop("fingeringMode"); 
        w.enum(obj.fingeringMode); 
        w.prop("elements"); 
        w.startObject(); 
        obj.elements.forEach((v, k) => { w.prop(k); w.boolean(v); }); 
        w.endObject(); 
        w.prop("rhythmMode"); 
        w.enum(obj.rhythmMode); 
        w.prop("rhythmHeight"); 
        w.number(obj.rhythmHeight); 
        w.prop("transpositionPitches"); 
        w.numberArray(obj.transpositionPitches); 
        w.prop("displayTranspositionPitches"); 
        w.numberArray(obj.displayTranspositionPitches); 
        w.prop("smallGraceTabNotes"); 
        w.boolean(obj.smallGraceTabNotes); 
        w.prop("extendBendArrowsOnTiedNotes"); 
        w.boolean(obj.extendBendArrowsOnTiedNotes); 
        w.prop("extendLineEffectsToBeatEnd"); 
        w.boolean(obj.extendLineEffectsToBeatEnd); 
        w.prop("slurHeight"); 
        w.number(obj.slurHeight); 
        w.endObject(); 
    }
    public static setProperty(obj: NotationSettings, property: string, r: IJsonReader): boolean {
        switch (property) {
            case "notationmode":
                obj.notationMode = (r.enum<NotationMode>(NotationMode)!);
                return true;
            case "fingeringmode":
                obj.fingeringMode = (r.enum<FingeringMode>(FingeringMode)!);
                return true;
            case "elements":
                obj.elements = new Map<NotationElement, boolean>();
                while (r.nextProp()) {
                    obj.elements.set(r.enumProp<NotationElement>(NotationElement), (r.boolean()!));
                }
                return true;
            case "rhythmmode":
                obj.rhythmMode = (r.enum<TabRhythmMode>(TabRhythmMode)!);
                return true;
            case "rhythmheight":
                obj.rhythmHeight = (r.number()!);
                return true;
            case "transpositionpitches":
                obj.transpositionPitches = (r.numberArray()!);
                return true;
            case "displaytranspositionpitches":
                obj.displayTranspositionPitches = (r.numberArray()!);
                return true;
            case "smallgracetabnotes":
                obj.smallGraceTabNotes = (r.boolean()!);
                return true;
            case "extendbendarrowsontiednotes":
                obj.extendBendArrowsOnTiedNotes = (r.boolean()!);
                return true;
            case "extendlineeffectstobeatend":
                obj.extendLineEffectsToBeatEnd = (r.boolean()!);
                return true;
            case "slurheight":
                obj.slurHeight = (r.number()!);
                return true;
        } 
        return false; 
    }
}

