// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Chord } from "@src/model/Chord";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
export class ChordSerializer {
    public static fromJson(obj: Chord, r: IJsonReader): void {
        if (r.currentValueType === JsonValueType.Null) {
            return;
        } 
        r.startObject(); 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
        r.endObject(); 
    }
    public static toJson(obj: Chord | null, w: IJsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.string(obj.name, "name"); 
        w.number(obj.firstFret, "firstFret"); 
        w.numberArray(obj.strings, "strings"); 
        w.numberArray(obj.barreFrets, "barreFrets"); 
        w.boolean(obj.showName, "showName"); 
        w.boolean(obj.showDiagram, "showDiagram"); 
        w.boolean(obj.showFingering, "showFingering"); 
        w.endObject(); 
    }
    public static setProperty(obj: Chord, property: string, r: IJsonReader): boolean {
        switch (property) {
            case "name":
                obj.name = (r.string()!);
                return true;
            case "firstfret":
                obj.firstFret = (r.number()!);
                return true;
            case "strings":
                obj.strings = (r.numberArray()!);
                return true;
            case "barrefrets":
                obj.barreFrets = (r.numberArray()!);
                return true;
            case "showname":
                obj.showName = (r.boolean()!);
                return true;
            case "showdiagram":
                obj.showDiagram = (r.boolean()!);
                return true;
            case "showfingering":
                obj.showFingering = (r.boolean()!);
                return true;
        } 
        return false; 
    }
}

