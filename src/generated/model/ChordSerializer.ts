// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Chord } from "@src/model/Chord";
import { JsonHelper } from "@src/io/JsonHelper";
import { IReadable } from "@src/io/IReadable";
import { IWriteable } from "@src/io/IWriteable";
import { IOHelper } from "@src/io/IOHelper";
export class ChordSerializer {
    public static fromJson(obj: Chord, m: unknown): void {
        if (!m) {
            return;
        } 
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v)); 
    }
    public static toJson(obj: Chord | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        } 
        const o = new Map<string, unknown>(); 
        o.set("name", obj.name); 
        o.set("firstfret", obj.firstFret); 
        o.set("strings", obj.strings); 
        o.set("barrefrets", obj.barreFrets); 
        o.set("showname", obj.showName); 
        o.set("showdiagram", obj.showDiagram); 
        o.set("showfingering", obj.showFingering); 
        return o; 
    }
    public static fromBinary(obj: Chord, r: IReadable): Chord {
        if (IOHelper.readNull(r)) {
            return obj;
        } 
        obj.name = IOHelper.readString(r); 
        obj.firstFret = IOHelper.readNumber(r); 
        obj.strings = IOHelper.readNumberArray(r); 
        obj.barreFrets = IOHelper.readNumberArray(r); 
        obj.showName = IOHelper.readBoolean(r); 
        obj.showDiagram = IOHelper.readBoolean(r); 
        obj.showFingering = IOHelper.readBoolean(r); 
        return obj; 
    }
    public static toBinary(obj: Chord | null, w: IWriteable): void {
        if (!obj) {
            IOHelper.writeNull(w);
            return;
        } 
        IOHelper.writeNotNull(w); 
        IOHelper.writeString(w, obj.name); 
        IOHelper.writeNumber(w, obj.firstFret); 
        IOHelper.writeNumberArray(w, obj.strings); 
        IOHelper.writeNumberArray(w, obj.barreFrets); 
        IOHelper.writeBoolean(w, obj.showName); 
        IOHelper.writeBoolean(w, obj.showDiagram); 
        IOHelper.writeBoolean(w, obj.showFingering); 
    }
    public static setProperty(obj: Chord, property: string, v: unknown): boolean {
        switch (property) {
            case "name":
                obj.name = v! as string;
                return true;
            case "firstfret":
                obj.firstFret = v! as number;
                return true;
            case "strings":
                obj.strings = v! as number[];
                return true;
            case "barrefrets":
                obj.barreFrets = v! as number[];
                return true;
            case "showname":
                obj.showName = v! as boolean;
                return true;
            case "showdiagram":
                obj.showDiagram = v! as boolean;
                return true;
            case "showfingering":
                obj.showFingering = v! as boolean;
                return true;
        } 
        return false; 
    }
}

