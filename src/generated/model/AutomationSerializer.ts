// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Automation } from "@src/model/Automation";
import { JsonHelper } from "@src/io/JsonHelper";
import { AutomationType } from "@src/model/Automation";
export class AutomationSerializer {
    public static fromJson(obj: Automation, m: unknown): void {
        if (!m) {
            return;
        } 
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v)); 
    }
    public static toJson(obj: Automation | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        } 
        const o = new Map<string, unknown>(); 
        o.set("isLinear", obj.isLinear); 
        o.set("type", (obj.type as number)); 
        o.set("value", obj.value); 
        o.set("ratioPosition", obj.ratioPosition); 
        o.set("text", obj.text); 
        return o; 
    }
    public static setProperty(obj: Automation, property: string, v: unknown): boolean {
        switch (property) {
            case "islinear":
                obj.isLinear = (v as boolean);
                return true;
            case "type":
                obj.type = (JsonHelper.parseEnum<AutomationType>(v, AutomationType)!);
                return true;
            case "value":
                obj.value = (v as number);
                return true;
            case "ratioposition":
                obj.ratioPosition = (v as number);
                return true;
            case "text":
                obj.text = (v as string);
                return true;
        } 
        return false; 
    }
}

