// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Beat } from "@src/model/Beat";
import { JsonReader } from "@src/io/JsonReader";
import { JsonValueType } from "@src/io/JsonReader";
import { JsonWriter } from "@src/io/JsonWriter";
import { NoteSerializer } from "@src/generated/model/NoteSerializer";
import { AutomationSerializer } from "@src/generated/model/AutomationSerializer";
import { BendPointSerializer } from "@src/generated/model/BendPointSerializer";
import { Note } from "@src/model/Note";
import { BendStyle } from "@src/model/BendStyle";
import { Ottavia } from "@src/model/Ottavia";
import { Duration } from "@src/model/Duration";
import { Automation } from "@src/model/Automation";
import { BrushType } from "@src/model/BrushType";
import { WhammyType } from "@src/model/WhammyType";
import { BendPoint } from "@src/model/BendPoint";
import { VibratoType } from "@src/model/VibratoType";
import { GraceType } from "@src/model/GraceType";
import { PickStroke } from "@src/model/PickStroke";
import { CrescendoType } from "@src/model/CrescendoType";
import { DynamicValue } from "@src/model/DynamicValue";
import { BeamDirection } from "@src/rendering/utils/BeamDirection";
import { BeatBeamingMode } from "@src/model/Beat";
export class BeatSerializer {
    public static fromJson(obj: Beat, r: JsonReader): void {
        if (r.currentValueType === JsonValueType.Null) {
            return;
        } 
        r.startObject(); 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
        r.endObject(); 
    }
    public static toJson(obj: Beat | null, w: JsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.number(obj.id, "id"); 
        w.number(obj.index, "index"); 
        w.prop("notes"); 
        w.startArray(); 
        for (const i of obj.notes) {
            NoteSerializer.toJson(i, w);
        } 
        w.endArray(); 
        w.boolean(obj.isEmpty, "isEmpty"); 
        w.enum(obj.whammyStyle, "whammyStyle"); 
        w.enum(obj.ottava, "ottava"); 
        w.boolean(obj.isLegatoOrigin, "isLegatoOrigin"); 
        w.enum(obj.duration, "duration"); 
        w.prop("automations"); 
        w.startArray(); 
        for (const i of obj.automations) {
            AutomationSerializer.toJson(i, w);
        } 
        w.endArray(); 
        w.number(obj.dots, "dots"); 
        w.boolean(obj.fadeIn, "fadeIn"); 
        w.stringArray(obj.lyrics, "lyrics"); 
        w.boolean(obj.hasRasgueado, "hasRasgueado"); 
        w.boolean(obj.pop, "pop"); 
        w.boolean(obj.slap, "slap"); 
        w.boolean(obj.tap, "tap"); 
        w.string(obj.text, "text"); 
        w.enum(obj.brushType, "brushType"); 
        w.number(obj.brushDuration, "brushDuration"); 
        w.number(obj.tupletDenominator, "tupletDenominator"); 
        w.number(obj.tupletNumerator, "tupletNumerator"); 
        w.boolean(obj.isContinuedWhammy, "isContinuedWhammy"); 
        w.enum(obj.whammyBarType, "whammyBarType"); 
        w.prop("whammyBarPoints"); 
        w.startArray(); 
        for (const i of obj.whammyBarPoints) {
            BendPointSerializer.toJson(i, w);
        } 
        w.endArray(); 
        w.enum(obj.vibrato, "vibrato"); 
        w.string(obj.chordId, "chordId"); 
        w.enum(obj.graceType, "graceType"); 
        w.enum(obj.pickStroke, "pickStroke"); 
        w.enum(obj.tremoloSpeed, "tremoloSpeed"); 
        w.enum(obj.crescendo, "crescendo"); 
        w.number(obj.displayStart, "displayStart"); 
        w.number(obj.playbackStart, "playbackStart"); 
        w.number(obj.displayDuration, "displayDuration"); 
        w.number(obj.playbackDuration, "playbackDuration"); 
        w.enum(obj.dynamics, "dynamics"); 
        w.boolean(obj.invertBeamDirection, "invertBeamDirection"); 
        w.enum(obj.preferredBeamDirection, "preferredBeamDirection"); 
        w.boolean(obj.isEffectSlurOrigin, "isEffectSlurOrigin"); 
        w.enum(obj.beamingMode, "beamingMode"); 
        w.endObject(); 
    }
    public static setProperty(obj: Beat, property: string, r: JsonReader): boolean {
        switch (property) {
            case "id":
                obj.id = (r.number()!);
                return true;
            case "index":
                obj.index = (r.number()!);
                return true;
            case "notes":
                obj.notes = [];
                r.startArray();
                while (r.nextItem()) {
                    const i = new Note();
                    NoteSerializer.fromJson(i, r)
                    obj.addNote(i);
                }
                r.endArray();
                return true;
            case "isempty":
                obj.isEmpty = (r.boolean()!);
                return true;
            case "whammystyle":
                obj.whammyStyle = (r.enum<BendStyle>(BendStyle)!);
                return true;
            case "ottava":
                obj.ottava = (r.enum<Ottavia>(Ottavia)!);
                return true;
            case "islegatoorigin":
                obj.isLegatoOrigin = (r.boolean()!);
                return true;
            case "duration":
                obj.duration = (r.enum<Duration>(Duration)!);
                return true;
            case "automations":
                obj.automations = [];
                r.startArray();
                while (r.nextItem()) {
                    const i = new Automation();
                    AutomationSerializer.fromJson(i, r)
                    obj.automations.push(i);
                }
                r.endArray();
                return true;
            case "dots":
                obj.dots = (r.number()!);
                return true;
            case "fadein":
                obj.fadeIn = (r.boolean()!);
                return true;
            case "lyrics":
                obj.lyrics = r.stringArray();
                return true;
            case "hasrasgueado":
                obj.hasRasgueado = (r.boolean()!);
                return true;
            case "pop":
                obj.pop = (r.boolean()!);
                return true;
            case "slap":
                obj.slap = (r.boolean()!);
                return true;
            case "tap":
                obj.tap = (r.boolean()!);
                return true;
            case "text":
                obj.text = r.string();
                return true;
            case "brushtype":
                obj.brushType = (r.enum<BrushType>(BrushType)!);
                return true;
            case "brushduration":
                obj.brushDuration = (r.number()!);
                return true;
            case "tupletdenominator":
                obj.tupletDenominator = (r.number()!);
                return true;
            case "tupletnumerator":
                obj.tupletNumerator = (r.number()!);
                return true;
            case "iscontinuedwhammy":
                obj.isContinuedWhammy = (r.boolean()!);
                return true;
            case "whammybartype":
                obj.whammyBarType = (r.enum<WhammyType>(WhammyType)!);
                return true;
            case "whammybarpoints":
                obj.whammyBarPoints = [];
                r.startArray();
                while (r.nextItem()) {
                    const i = new BendPoint();
                    BendPointSerializer.fromJson(i, r)
                    obj.addWhammyBarPoint(i);
                }
                r.endArray();
                return true;
            case "vibrato":
                obj.vibrato = (r.enum<VibratoType>(VibratoType)!);
                return true;
            case "chordid":
                obj.chordId = r.string();
                return true;
            case "gracetype":
                obj.graceType = (r.enum<GraceType>(GraceType)!);
                return true;
            case "pickstroke":
                obj.pickStroke = (r.enum<PickStroke>(PickStroke)!);
                return true;
            case "tremolospeed":
                obj.tremoloSpeed = r.enum<Duration>(Duration);
                return true;
            case "crescendo":
                obj.crescendo = (r.enum<CrescendoType>(CrescendoType)!);
                return true;
            case "displaystart":
                obj.displayStart = (r.number()!);
                return true;
            case "playbackstart":
                obj.playbackStart = (r.number()!);
                return true;
            case "displayduration":
                obj.displayDuration = (r.number()!);
                return true;
            case "playbackduration":
                obj.playbackDuration = (r.number()!);
                return true;
            case "dynamics":
                obj.dynamics = (r.enum<DynamicValue>(DynamicValue)!);
                return true;
            case "invertbeamdirection":
                obj.invertBeamDirection = (r.boolean()!);
                return true;
            case "preferredbeamdirection":
                obj.preferredBeamDirection = r.enum<BeamDirection>(BeamDirection);
                return true;
            case "iseffectslurorigin":
                obj.isEffectSlurOrigin = (r.boolean()!);
                return true;
            case "beamingmode":
                obj.beamingMode = (r.enum<BeatBeamingMode>(BeatBeamingMode)!);
                return true;
        } 
        return false; 
    }
}

