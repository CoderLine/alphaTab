// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Beat } from "@src/model/Beat";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { NoteSerializer } from "@src/generated/model/NoteSerializer";
import { AutomationSerializer } from "@src/generated/model/AutomationSerializer";
import { BendPointSerializer } from "@src/generated/model/BendPointSerializer";
import { Note } from "@src/model/Note";
import { BendStyle } from "@src/model/BendStyle";
import { Ottavia } from "@src/model/Ottavia";
import { Duration } from "@src/model/Duration";
import { Automation } from "@src/model/Automation";
import { BrushType } from "@src/model/BrushType";
import { WhammyType } from "@src/model/WhammyType";
import { BendPoint } from "@src/model/BendPoint";
import { VibratoType } from "@src/model/VibratoType";
import { GraceType } from "@src/model/GraceType";
import { PickStroke } from "@src/model/PickStroke";
import { CrescendoType } from "@src/model/CrescendoType";
import { DynamicValue } from "@src/model/DynamicValue";
import { BeamDirection } from "@src/rendering/utils/BeamDirection";
import { BeatBeamingMode } from "@src/model/Beat";
export class BeatSerializer {
    public static fromJson(obj: Beat, reader: IJsonReader): void {
        if (reader.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (reader.nextProperty()) {
            this.setProperty(obj, reader.readPropertyName().toLowerCase(), reader);
        } 
    }
    public static toJson(obj: Beat | null, writer: IJsonWriter): void {
        if (!obj) {
            writer.writeNull();
            return;
        } 
        writer.writeStartObject(); 
        writer.writePropertyName("id"); 
        writer.writeNumber(obj.id); 
        writer.writePropertyName("index"); 
        writer.writeNumber(obj.index); 
        writer.writePropertyName("notes"); 
        writer.writeStartArray(); 
        for (const i of obj.notes) {
            NoteSerializer.toJson(i, writer);
        } 
        writer.writeEndArray(); 
        writer.writePropertyName("isEmpty"); 
        writer.writeBoolean(obj.isEmpty); 
        writer.writePropertyName("whammyStyle"); 
        writer.writeEnum(obj.whammyStyle); 
        writer.writePropertyName("ottava"); 
        writer.writeEnum(obj.ottava); 
        writer.writePropertyName("isLegatoOrigin"); 
        writer.writeBoolean(obj.isLegatoOrigin); 
        writer.writePropertyName("duration"); 
        writer.writeEnum(obj.duration); 
        writer.writePropertyName("isLetRing"); 
        writer.writeBoolean(obj.isLetRing); 
        writer.writePropertyName("isPalmMute"); 
        writer.writeBoolean(obj.isPalmMute); 
        writer.writePropertyName("automations"); 
        writer.writeStartArray(); 
        for (const i of obj.automations) {
            AutomationSerializer.toJson(i, writer);
        } 
        writer.writeEndArray(); 
        writer.writePropertyName("dots"); 
        writer.writeNumber(obj.dots); 
        writer.writePropertyName("fadeIn"); 
        writer.writeBoolean(obj.fadeIn); 
        writer.writePropertyName("lyrics"); 
        writer.writeStringArray(obj.lyrics); 
        writer.writePropertyName("hasRasgueado"); 
        writer.writeBoolean(obj.hasRasgueado); 
        writer.writePropertyName("pop"); 
        writer.writeBoolean(obj.pop); 
        writer.writePropertyName("slap"); 
        writer.writeBoolean(obj.slap); 
        writer.writePropertyName("tap"); 
        writer.writeBoolean(obj.tap); 
        writer.writePropertyName("text"); 
        writer.writeString(obj.text); 
        writer.writePropertyName("brushType"); 
        writer.writeEnum(obj.brushType); 
        writer.writePropertyName("brushDuration"); 
        writer.writeNumber(obj.brushDuration); 
        writer.writePropertyName("tupletDenominator"); 
        writer.writeNumber(obj.tupletDenominator); 
        writer.writePropertyName("tupletNumerator"); 
        writer.writeNumber(obj.tupletNumerator); 
        writer.writePropertyName("isContinuedWhammy"); 
        writer.writeBoolean(obj.isContinuedWhammy); 
        writer.writePropertyName("whammyBarType"); 
        writer.writeEnum(obj.whammyBarType); 
        writer.writePropertyName("whammyBarPoints"); 
        writer.writeStartArray(); 
        for (const i of obj.whammyBarPoints) {
            BendPointSerializer.toJson(i, writer);
        } 
        writer.writeEndArray(); 
        writer.writePropertyName("vibrato"); 
        writer.writeEnum(obj.vibrato); 
        writer.writePropertyName("chordId"); 
        writer.writeString(obj.chordId); 
        writer.writePropertyName("graceType"); 
        writer.writeEnum(obj.graceType); 
        writer.writePropertyName("pickStroke"); 
        writer.writeEnum(obj.pickStroke); 
        writer.writePropertyName("tremoloSpeed"); 
        writer.writeEnum(obj.tremoloSpeed); 
        writer.writePropertyName("crescendo"); 
        writer.writeEnum(obj.crescendo); 
        writer.writePropertyName("displayStart"); 
        writer.writeNumber(obj.displayStart); 
        writer.writePropertyName("playbackStart"); 
        writer.writeNumber(obj.playbackStart); 
        writer.writePropertyName("displayDuration"); 
        writer.writeNumber(obj.displayDuration); 
        writer.writePropertyName("playbackDuration"); 
        writer.writeNumber(obj.playbackDuration); 
        writer.writePropertyName("dynamics"); 
        writer.writeEnum(obj.dynamics); 
        writer.writePropertyName("invertBeamDirection"); 
        writer.writeBoolean(obj.invertBeamDirection); 
        writer.writePropertyName("preferredBeamDirection"); 
        writer.writeEnum(obj.preferredBeamDirection); 
        writer.writePropertyName("isEffectSlurOrigin"); 
        writer.writeBoolean(obj.isEffectSlurOrigin); 
        writer.writePropertyName("beamingMode"); 
        writer.writeEnum(obj.beamingMode); 
        writer.writeEndObject(); 
    }
    public static setProperty(obj: Beat, property: string, reader: IJsonReader): boolean {
        switch (property) {
            case "id":
                obj.id = (reader.readNumber()!);
                return true;
            case "index":
                obj.index = (reader.readNumber()!);
                return true;
            case "notes":
                obj.notes = [];
                while (reader.nextArrayItem()) {
                    const i = new Note();
                    NoteSerializer.fromJson(i, reader)
                    obj.addNote(i);
                }
                return true;
            case "isempty":
                obj.isEmpty = (reader.readBoolean()!);
                return true;
            case "whammystyle":
                obj.whammyStyle = (reader.readEnum<BendStyle>(BendStyle)!);
                return true;
            case "ottava":
                obj.ottava = (reader.readEnum<Ottavia>(Ottavia)!);
                return true;
            case "islegatoorigin":
                obj.isLegatoOrigin = (reader.readBoolean()!);
                return true;
            case "duration":
                obj.duration = (reader.readEnum<Duration>(Duration)!);
                return true;
            case "isletring":
                obj.isLetRing = (reader.readBoolean()!);
                return true;
            case "ispalmmute":
                obj.isPalmMute = (reader.readBoolean()!);
                return true;
            case "automations":
                obj.automations = [];
                while (reader.nextArrayItem()) {
                    const i = new Automation();
                    AutomationSerializer.fromJson(i, reader)
                    obj.automations.push(i);
                }
                return true;
            case "dots":
                obj.dots = (reader.readNumber()!);
                return true;
            case "fadein":
                obj.fadeIn = (reader.readBoolean()!);
                return true;
            case "lyrics":
                obj.lyrics = reader.readStringArray();
                return true;
            case "hasrasgueado":
                obj.hasRasgueado = (reader.readBoolean()!);
                return true;
            case "pop":
                obj.pop = (reader.readBoolean()!);
                return true;
            case "slap":
                obj.slap = (reader.readBoolean()!);
                return true;
            case "tap":
                obj.tap = (reader.readBoolean()!);
                return true;
            case "text":
                obj.text = reader.readString();
                return true;
            case "brushtype":
                obj.brushType = (reader.readEnum<BrushType>(BrushType)!);
                return true;
            case "brushduration":
                obj.brushDuration = (reader.readNumber()!);
                return true;
            case "tupletdenominator":
                obj.tupletDenominator = (reader.readNumber()!);
                return true;
            case "tupletnumerator":
                obj.tupletNumerator = (reader.readNumber()!);
                return true;
            case "iscontinuedwhammy":
                obj.isContinuedWhammy = (reader.readBoolean()!);
                return true;
            case "whammybartype":
                obj.whammyBarType = (reader.readEnum<WhammyType>(WhammyType)!);
                return true;
            case "whammybarpoints":
                obj.whammyBarPoints = [];
                while (reader.nextArrayItem()) {
                    const i = new BendPoint();
                    BendPointSerializer.fromJson(i, reader)
                    obj.addWhammyBarPoint(i);
                }
                return true;
            case "vibrato":
                obj.vibrato = (reader.readEnum<VibratoType>(VibratoType)!);
                return true;
            case "chordid":
                obj.chordId = reader.readString();
                return true;
            case "gracetype":
                obj.graceType = (reader.readEnum<GraceType>(GraceType)!);
                return true;
            case "pickstroke":
                obj.pickStroke = (reader.readEnum<PickStroke>(PickStroke)!);
                return true;
            case "tremolospeed":
                obj.tremoloSpeed = reader.readEnum<Duration>(Duration);
                return true;
            case "crescendo":
                obj.crescendo = (reader.readEnum<CrescendoType>(CrescendoType)!);
                return true;
            case "displaystart":
                obj.displayStart = (reader.readNumber()!);
                return true;
            case "playbackstart":
                obj.playbackStart = (reader.readNumber()!);
                return true;
            case "displayduration":
                obj.displayDuration = (reader.readNumber()!);
                return true;
            case "playbackduration":
                obj.playbackDuration = (reader.readNumber()!);
                return true;
            case "dynamics":
                obj.dynamics = (reader.readEnum<DynamicValue>(DynamicValue)!);
                return true;
            case "invertbeamdirection":
                obj.invertBeamDirection = (reader.readBoolean()!);
                return true;
            case "preferredbeamdirection":
                obj.preferredBeamDirection = reader.readEnum<BeamDirection>(BeamDirection);
                return true;
            case "iseffectslurorigin":
                obj.isEffectSlurOrigin = (reader.readBoolean()!);
                return true;
            case "beamingmode":
                obj.beamingMode = (reader.readEnum<BeatBeamingMode>(BeatBeamingMode)!);
                return true;
        } 
        return false; 
    }
}

