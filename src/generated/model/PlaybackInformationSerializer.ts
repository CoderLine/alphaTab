// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { PlaybackInformation } from "@src/model/PlaybackInformation";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
export class PlaybackInformationSerializer {
    public static fromJson(obj: PlaybackInformation, reader: IJsonReader): void {
        if (reader.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (reader.nextProperty()) {
            this.setProperty(obj, reader.readPropertyName().toLowerCase(), reader);
        } 
    }
    public static toJson(obj: PlaybackInformation | null, writer: IJsonWriter): void {
        if (!obj) {
            writer.writeNull();
            return;
        } 
        writer.writeStartObject(); 
        writer.writePropertyName("volume"); 
        writer.writeNumber(obj.volume); 
        writer.writePropertyName("balance"); 
        writer.writeNumber(obj.balance); 
        writer.writePropertyName("port"); 
        writer.writeNumber(obj.port); 
        writer.writePropertyName("program"); 
        writer.writeNumber(obj.program); 
        writer.writePropertyName("primaryChannel"); 
        writer.writeNumber(obj.primaryChannel); 
        writer.writePropertyName("secondaryChannel"); 
        writer.writeNumber(obj.secondaryChannel); 
        writer.writePropertyName("isMute"); 
        writer.writeBoolean(obj.isMute); 
        writer.writePropertyName("isSolo"); 
        writer.writeBoolean(obj.isSolo); 
        writer.writeEndObject(); 
    }
    public static setProperty(obj: PlaybackInformation, property: string, reader: IJsonReader): boolean {
        switch (property) {
            case "volume":
                obj.volume = (reader.readNumber()!);
                return true;
            case "balance":
                obj.balance = (reader.readNumber()!);
                return true;
            case "port":
                obj.port = (reader.readNumber()!);
                return true;
            case "program":
                obj.program = (reader.readNumber()!);
                return true;
            case "primarychannel":
                obj.primaryChannel = (reader.readNumber()!);
                return true;
            case "secondarychannel":
                obj.secondaryChannel = (reader.readNumber()!);
                return true;
            case "ismute":
                obj.isMute = (reader.readBoolean()!);
                return true;
            case "issolo":
                obj.isSolo = (reader.readBoolean()!);
                return true;
        } 
        return false; 
    }
}

