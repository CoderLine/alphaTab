// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { PlaybackInformation } from "@src/model/PlaybackInformation";
import { JsonHelper } from "@src/io/JsonHelper";
import { IReadable } from "@src/io/IReadable";
import { EndOfReaderError } from "@src/io/IReadable";
import { IWriteable } from "@src/io/IWriteable";
import { IOHelper } from "@src/io/IOHelper";
export class PlaybackInformationSerializer {
    public static fromJson(obj: PlaybackInformation, m: unknown): void {
        if (!m) {
            return;
        } 
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v)); 
    }
    public static toJson(obj: PlaybackInformation | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        } 
        const o = new Map<string, unknown>(); 
        o.set("volume", obj.volume); 
        o.set("balance", obj.balance); 
        o.set("port", obj.port); 
        o.set("program", obj.program); 
        o.set("primarychannel", obj.primaryChannel); 
        o.set("secondarychannel", obj.secondaryChannel); 
        o.set("ismute", obj.isMute); 
        o.set("issolo", obj.isSolo); 
        return o; 
    }
    public static fromBinary(o: PlaybackInformation | null, r: IReadable): PlaybackInformation | null {
        if (IOHelper.isEof(r)) {
            throw new EndOfReaderError();
        } 
        if (IOHelper.readNull(r)) {
            return null;
        } 
        const obj = o != null ? o : new PlaybackInformation(); 
        obj.volume = IOHelper.readNumber(r); 
        obj.balance = IOHelper.readNumber(r); 
        obj.port = IOHelper.readNumber(r); 
        obj.program = IOHelper.readNumber(r); 
        obj.primaryChannel = IOHelper.readNumber(r); 
        obj.secondaryChannel = IOHelper.readNumber(r); 
        obj.isMute = IOHelper.readBoolean(r); 
        obj.isSolo = IOHelper.readBoolean(r); 
        return obj; 
    }
    public static toBinary(obj: PlaybackInformation | null, w: IWriteable): void {
        if (!obj) {
            IOHelper.writeNull(w);
            return;
        } 
        IOHelper.writeNotNull(w); 
        IOHelper.writeNumber(w, obj.volume); 
        IOHelper.writeNumber(w, obj.balance); 
        IOHelper.writeNumber(w, obj.port); 
        IOHelper.writeNumber(w, obj.program); 
        IOHelper.writeNumber(w, obj.primaryChannel); 
        IOHelper.writeNumber(w, obj.secondaryChannel); 
        IOHelper.writeBoolean(w, obj.isMute); 
        IOHelper.writeBoolean(w, obj.isSolo); 
    }
    public static setProperty(obj: PlaybackInformation, property: string, v: unknown): boolean {
        switch (property) {
            case "volume":
                obj.volume = v! as number;
                return true;
            case "balance":
                obj.balance = v! as number;
                return true;
            case "port":
                obj.port = v! as number;
                return true;
            case "program":
                obj.program = v! as number;
                return true;
            case "primarychannel":
                obj.primaryChannel = v! as number;
                return true;
            case "secondarychannel":
                obj.secondaryChannel = v! as number;
                return true;
            case "ismute":
                obj.isMute = v! as boolean;
                return true;
            case "issolo":
                obj.isSolo = v! as boolean;
                return true;
        } 
        return false; 
    }
}

