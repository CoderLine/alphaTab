// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { InstrumentArticulation } from "@src/model/InstrumentArticulation";
import { MusicFontSymbol } from "@src/model/MusicFontSymbol";
import { TextBaseline } from "@src/platform/ICanvas";
export class InstrumentArticulationSerializer {
    public static fromJson(json: any): InstrumentArticulation {
        const obj = new InstrumentArticulation(); 
        this.fillFromJson(obj, json); 
        return obj; 
    }
    public static fillFromJson(obj: InstrumentArticulation, json: any): void {
        if (json) {
            for (const $k in json) {
                this.setProperty(obj, $k.toLowerCase(), json[$k]);
            }
        } 
    }
    public static toJson(obj: InstrumentArticulation | null): any {
        if (!obj) {
            return null;
        } 
        const json: any = {}; 
        this.fillToJson(obj, json); 
        return json; 
    }
    public static fillToJson(obj: InstrumentArticulation, json: any): void {
        json.staffLine = obj.staffLine; 
        json.noteHeadDefault = obj.noteHeadDefault; 
        json.noteHeadHalf = obj.noteHeadHalf; 
        json.noteHeadWhole = obj.noteHeadWhole; 
        json.techniqueSymbol = obj.techniqueSymbol; 
        json.techniqueSymbolPlacement = obj.techniqueSymbolPlacement; 
        json.outputMidiNumber = obj.outputMidiNumber; 
    }
    public static setProperty(obj: InstrumentArticulation, property: string, value: any): boolean {
        switch (property) {
            case "staffline":
                obj.staffLine = value;
                return true;
            case "noteheaddefault":
                obj.noteHeadDefault = isNaN(parseInt(value)) ? MusicFontSymbol[Object.keys(MusicFontSymbol).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof MusicFontSymbol] : parseInt(value);
                return true;
            case "noteheadhalf":
                obj.noteHeadHalf = isNaN(parseInt(value)) ? MusicFontSymbol[Object.keys(MusicFontSymbol).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof MusicFontSymbol] : parseInt(value);
                return true;
            case "noteheadwhole":
                obj.noteHeadWhole = isNaN(parseInt(value)) ? MusicFontSymbol[Object.keys(MusicFontSymbol).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof MusicFontSymbol] : parseInt(value);
                return true;
            case "techniquesymbol":
                obj.techniqueSymbol = isNaN(parseInt(value)) ? MusicFontSymbol[Object.keys(MusicFontSymbol).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof MusicFontSymbol] : parseInt(value);
                return true;
            case "techniquesymbolplacement":
                obj.techniqueSymbolPlacement = isNaN(parseInt(value)) ? TextBaseline[Object.keys(TextBaseline).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof TextBaseline] : parseInt(value);
                return true;
            case "outputmidinumber":
                obj.outputMidiNumber = value;
                return true;
        } 
        return false; 
    }
}

