// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { InstrumentArticulation } from "@src/model/InstrumentArticulation";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { MusicFontSymbol } from "@src/model/MusicFontSymbol";
import { TextBaseline } from "@src/platform/ICanvas";
export class InstrumentArticulationSerializer {
    public static fromJson(obj: InstrumentArticulation, r: IJsonReader): void {
        if (r.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
    }
    public static toJson(obj: InstrumentArticulation | null, w: IJsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.prop("staffLine"); 
        w.number(obj.staffLine); 
        w.prop("noteHeadDefault"); 
        w.enum(obj.noteHeadDefault); 
        w.prop("noteHeadHalf"); 
        w.enum(obj.noteHeadHalf); 
        w.prop("noteHeadWhole"); 
        w.enum(obj.noteHeadWhole); 
        w.prop("techniqueSymbol"); 
        w.enum(obj.techniqueSymbol); 
        w.prop("techniqueSymbolPlacement"); 
        w.enum(obj.techniqueSymbolPlacement); 
        w.prop("outputMidiNumber"); 
        w.number(obj.outputMidiNumber); 
        w.endObject(); 
    }
    public static setProperty(obj: InstrumentArticulation, property: string, r: IJsonReader): boolean {
        switch (property) {
            case "staffline":
                obj.staffLine = (r.number()!);
                return true;
            case "noteheaddefault":
                obj.noteHeadDefault = (r.enum<MusicFontSymbol>(MusicFontSymbol)!);
                return true;
            case "noteheadhalf":
                obj.noteHeadHalf = (r.enum<MusicFontSymbol>(MusicFontSymbol)!);
                return true;
            case "noteheadwhole":
                obj.noteHeadWhole = (r.enum<MusicFontSymbol>(MusicFontSymbol)!);
                return true;
            case "techniquesymbol":
                obj.techniqueSymbol = (r.enum<MusicFontSymbol>(MusicFontSymbol)!);
                return true;
            case "techniquesymbolplacement":
                obj.techniqueSymbolPlacement = (r.enum<TextBaseline>(TextBaseline)!);
                return true;
            case "outputmidinumber":
                obj.outputMidiNumber = (r.number()!);
                return true;
        } 
        return false; 
    }
}

