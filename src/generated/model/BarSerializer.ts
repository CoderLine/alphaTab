// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Bar } from "@src/model/Bar";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { VoiceSerializer } from "@src/generated/model/VoiceSerializer";
import { Clef } from "@src/model/Clef";
import { Ottavia } from "@src/model/Ottavia";
import { Voice } from "@src/model/Voice";
import { SimileMark } from "@src/model/SimileMark";
export class BarSerializer {
    public static fromJson(obj: Bar, reader: IJsonReader): void {
        if (reader.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (reader.nextProperty()) {
            this.setProperty(obj, reader.readPropertyName().toLowerCase(), reader);
        } 
    }
    public static toJson(obj: Bar | null, writer: IJsonWriter): void {
        if (!obj) {
            writer.writeNull();
            return;
        } 
        writer.writeStartObject(); 
        writer.writePropertyName("id"); 
        writer.writeNumber(obj.id); 
        writer.writePropertyName("index"); 
        writer.writeNumber(obj.index); 
        writer.writePropertyName("clef"); 
        writer.writeEnum(obj.clef); 
        writer.writePropertyName("clefOttava"); 
        writer.writeEnum(obj.clefOttava); 
        writer.writePropertyName("voices"); 
        writer.writeStartArray(); 
        for (const i of obj.voices) {
            VoiceSerializer.toJson(i, writer);
        } 
        writer.writeEndArray(); 
        writer.writePropertyName("simileMark"); 
        writer.writeEnum(obj.simileMark); 
        writer.writeEndObject(); 
    }
    public static setProperty(obj: Bar, property: string, reader: IJsonReader): boolean {
        switch (property) {
            case "id":
                obj.id = (reader.readNumber()!);
                return true;
            case "index":
                obj.index = (reader.readNumber()!);
                return true;
            case "clef":
                obj.clef = (reader.readEnum<Clef>(Clef)!);
                return true;
            case "clefottava":
                obj.clefOttava = (reader.readEnum<Ottavia>(Ottavia)!);
                return true;
            case "voices":
                obj.voices = [];
                while (reader.nextArrayItem()) {
                    const i = new Voice();
                    VoiceSerializer.fromJson(i, reader)
                    obj.addVoice(i);
                }
                return true;
            case "similemark":
                obj.simileMark = (reader.readEnum<SimileMark>(SimileMark)!);
                return true;
        } 
        return false; 
    }
}

