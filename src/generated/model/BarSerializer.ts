// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Bar } from "@src/model/Bar";
import { JsonHelper } from "@src/io/JsonHelper";
import { VoiceSerializer } from "@src/generated/model/VoiceSerializer";
import { IReadable } from "@src/io/IReadable";
import { Voice } from "@src/model/Voice";
import { IWriteable } from "@src/io/IWriteable";
import { IOHelper } from "@src/io/IOHelper";
import { Clef } from "@src/model/Clef";
import { Ottavia } from "@src/model/Ottavia";
import { SimileMark } from "@src/model/SimileMark";
export class BarSerializer {
    public static fromJson(obj: Bar, m: unknown): void {
        if (!m) {
            return;
        } 
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v)); 
    }
    public static toJson(obj: Bar | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        } 
        const o = new Map<string, unknown>(); 
        o.set("id", obj.id); 
        o.set("clef", obj.clef as number); 
        o.set("clefottava", obj.clefOttava as number); 
        o.set("voices", obj.voices.map(i => VoiceSerializer.toJson(i))); 
        o.set("similemark", obj.simileMark as number); 
        return o; 
    }
    public static fromBinary(obj: Bar, r: IReadable): Bar {
        if (IOHelper.readNull(r)) {
            return obj;
        } 
        obj.id = IOHelper.readNumber(r); 
        obj.clef = JsonHelper.parseEnum<Clef>(IOHelper.readInt32LE(r), Clef)!; 
        obj.clefOttava = JsonHelper.parseEnum<Ottavia>(IOHelper.readInt32LE(r), Ottavia)!; 
        {
            obj.voices = [];
            const length = IOHelper.readInt32LE(r);
            for (let i = 0;i < length;i++) {
                const it = new Voice();
                VoiceSerializer.fromBinary(it, r);
                obj.addVoice(it);
            }
        } 
        obj.simileMark = JsonHelper.parseEnum<SimileMark>(IOHelper.readInt32LE(r), SimileMark)!; 
        return obj; 
    }
    public static toBinary(obj: Bar | null, w: IWriteable): void {
        if (!obj) {
            IOHelper.writeNull(w);
            return;
        } 
        IOHelper.writeNotNull(w); 
        IOHelper.writeNumber(w, obj.id); 
        IOHelper.writeInt32LE(w, obj.clef as number); 
        IOHelper.writeInt32LE(w, obj.clefOttava as number); 
        IOHelper.writeInt32LE(w, obj.voices.length); 
        for (const i of obj.voices) {
            VoiceSerializer.toBinary(i, w);
        } 
        IOHelper.writeInt32LE(w, obj.simileMark as number); 
    }
    public static setProperty(obj: Bar, property: string, v: unknown): boolean {
        switch (property) {
            case "id":
                obj.id = v! as number;
                return true;
            case "clef":
                obj.clef = JsonHelper.parseEnum<Clef>(v, Clef)!;
                return true;
            case "clefottava":
                obj.clefOttava = JsonHelper.parseEnum<Ottavia>(v, Ottavia)!;
                return true;
            case "voices":
                obj.voices = [];
                for (const o of (v as (Map<string, unknown> | null)[])) {
                    const i = new Voice();
                    VoiceSerializer.fromJson(i, o);
                    obj.addVoice(i);
                }
                return true;
            case "similemark":
                obj.simileMark = JsonHelper.parseEnum<SimileMark>(v, SimileMark)!;
                return true;
        } 
        return false; 
    }
}

