// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Bar } from "@src/model/Bar";
import { JsonHelper } from "@src/io/JsonHelper";
import { VoiceSerializer } from "@src/generated/model/VoiceSerializer";
import { SustainPedalMarkerSerializer } from "@src/generated/model/SustainPedalMarkerSerializer";
import { BarStyleSerializer } from "@src/generated/model/BarStyleSerializer";
import { Clef } from "@src/model/Clef";
import { Ottavia } from "@src/model/Ottavia";
import { Voice } from "@src/model/Voice";
import { SimileMark } from "@src/model/SimileMark";
import { SustainPedalMarker } from "@src/model/Bar";
import { BarLineStyle } from "@src/model/Bar";
import { BarStyle } from "@src/model/Bar";
export class BarSerializer {
    public static fromJson(obj: Bar, m: unknown): void {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => BarSerializer.setProperty(obj, k, v));
    }
    public static toJson(obj: Bar | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        }
        const o = new Map<string, unknown>();
        o.set("id", obj.id);
        o.set("clef", obj.clef as number);
        o.set("clefottava", obj.clefOttava as number);
        o.set("voices", obj.voices.map(i => VoiceSerializer.toJson(i)));
        o.set("similemark", obj.simileMark as number);
        o.set("displayscale", obj.displayScale);
        o.set("displaywidth", obj.displayWidth);
        o.set("sustainpedals", obj.sustainPedals.map(i => SustainPedalMarkerSerializer.toJson(i)));
        o.set("barlineleft", obj.barLineLeft as number);
        o.set("barlineright", obj.barLineRight as number);
        if (obj.style) {
            o.set("style", BarStyleSerializer.toJson(obj.style));
        }
        return o;
    }
    public static setProperty(obj: Bar, property: string, v: unknown): boolean {
        switch (property) {
            case "id":
                obj.id = v! as number;
                return true;
            case "clef":
                obj.clef = JsonHelper.parseEnum<Clef>(v, Clef)!;
                return true;
            case "clefottava":
                obj.clefOttava = JsonHelper.parseEnum<Ottavia>(v, Ottavia)!;
                return true;
            case "voices":
                obj.voices = [];
                for (const o of (v as (Map<string, unknown> | null)[])) {
                    const i = new Voice();
                    VoiceSerializer.fromJson(i, o);
                    obj.addVoice(i);
                }
                return true;
            case "similemark":
                obj.simileMark = JsonHelper.parseEnum<SimileMark>(v, SimileMark)!;
                return true;
            case "displayscale":
                obj.displayScale = v! as number;
                return true;
            case "displaywidth":
                obj.displayWidth = v! as number;
                return true;
            case "sustainpedals":
                obj.sustainPedals = [];
                for (const o of (v as (Map<string, unknown> | null)[])) {
                    const i = new SustainPedalMarker();
                    SustainPedalMarkerSerializer.fromJson(i, o);
                    obj.sustainPedals.push(i);
                }
                return true;
            case "barlineleft":
                obj.barLineLeft = JsonHelper.parseEnum<BarLineStyle>(v, BarLineStyle)!;
                return true;
            case "barlineright":
                obj.barLineRight = JsonHelper.parseEnum<BarLineStyle>(v, BarLineStyle)!;
                return true;
            case "style":
                if (v) {
                    obj.style = new BarStyle();
                    BarStyleSerializer.fromJson(obj.style, v);
                }
                else {
                    obj.style = undefined;
                }
                return true;
        }
        return false;
    }
}
