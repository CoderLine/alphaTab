// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Bar } from "@src/model/Bar";
import { VoiceSerializer } from "@src/generated/model/VoiceSerializer";
import { Clef } from "@src/model/Clef";
import { Ottavia } from "@src/model/Ottavia";
import { SimileMark } from "@src/model/SimileMark";
export class BarSerializer {
    public static fromJson(json: any): Bar {
        const obj = new Bar(); 
        this.fillFromJson(obj, json); 
        return obj; 
    }
    public static fillFromJson(obj: Bar, json: any): void {
        if (json) {
            for (const $k in json) {
                this.setProperty(obj, $k.toLowerCase(), json[$k]);
            }
        } 
    }
    public static toJson(obj: Bar | null): any {
        if (!obj) {
            return null;
        } 
        const json: any = {}; 
        this.fillToJson(obj, json); 
        return json; 
    }
    public static fillToJson(obj: Bar, json: any): void {
        json.id = obj.id; 
        json.index = obj.index; 
        json.clef = obj.clef; 
        json.clefOttava = obj.clefOttava; 
        json.voices = obj.voices.map($li => VoiceSerializer.toJson($li)); 
        json.simileMark = obj.simileMark; 
    }
    public static setProperty(obj: Bar, property: string, value: any): boolean {
        switch (property) {
            case "id":
                obj.id = value;
                return true;
            case "index":
                obj.index = value;
                return true;
            case "clef":
                obj.clef = isNaN(parseInt(value)) ? Clef[Object.keys(Clef).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof Clef] : parseInt(value);
                return true;
            case "clefottava":
                obj.clefOttava = isNaN(parseInt(value)) ? Ottavia[Object.keys(Ottavia).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof Ottavia] : parseInt(value);
                return true;
            case "voices":
                obj.voices = [];
                for (const $li of value)
                    obj.addVoice(VoiceSerializer.fromJson($li));
                return true;
            case "similemark":
                obj.simileMark = isNaN(parseInt(value)) ? SimileMark[Object.keys(SimileMark).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof SimileMark] : parseInt(value);
                return true;
        } 
        return false; 
    }
}

