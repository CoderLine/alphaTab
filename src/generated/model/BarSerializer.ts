// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Bar } from "@src/model/Bar";
import { JsonReader } from "@src/io/JsonReader";
import { JsonValueType } from "@src/io/JsonReader";
import { JsonWriter } from "@src/io/JsonWriter";
import { VoiceSerializer } from "@src/generated/model/VoiceSerializer";
import { Clef } from "@src/model/Clef";
import { Ottavia } from "@src/model/Ottavia";
import { Voice } from "@src/model/Voice";
import { SimileMark } from "@src/model/SimileMark";
export class BarSerializer {
    public static fromJson(obj: Bar, r: JsonReader): void {
        if (r.currentValueType === JsonValueType.Null) {
            return;
        } 
        r.startObject(); 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
        r.endObject(); 
    }
    public static toJson(obj: Bar | null, w: JsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.number(obj.id, "id"); 
        w.number(obj.index, "index"); 
        w.enum(obj.clef, "clef"); 
        w.enum(obj.clefOttava, "clefOttava"); 
        w.prop("voices"); 
        w.startArray(); 
        for (const i of obj.voices) {
            VoiceSerializer.toJson(i, w);
        } 
        w.endArray(); 
        w.enum(obj.simileMark, "simileMark"); 
        w.endObject(); 
    }
    public static setProperty(obj: Bar, property: string, r: JsonReader): boolean {
        switch (property) {
            case "id":
                obj.id = (r.number()!);
                return true;
            case "index":
                obj.index = (r.number()!);
                return true;
            case "clef":
                obj.clef = (r.enum<Clef>(Clef)!);
                return true;
            case "clefottava":
                obj.clefOttava = (r.enum<Ottavia>(Ottavia)!);
                return true;
            case "voices":
                obj.voices = [];
                r.startArray();
                while (r.nextItem()) {
                    const i = new Voice();
                    VoiceSerializer.fromJson(i, r)
                    obj.addVoice(i);
                }
                r.endArray();
                return true;
            case "similemark":
                obj.simileMark = (r.enum<SimileMark>(SimileMark)!);
                return true;
        } 
        return false; 
    }
}

