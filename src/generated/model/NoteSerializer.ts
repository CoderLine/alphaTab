// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Note } from "@src/model/Note";
import { JsonReader } from "@src/io/JsonReader";
import { JsonValueType } from "@src/io/JsonReader";
import { JsonWriter } from "@src/io/JsonWriter";
import { BendPointSerializer } from "@src/generated/model/BendPointSerializer";
import { AccentuationType } from "@src/model/AccentuationType";
import { BendType } from "@src/model/BendType";
import { BendStyle } from "@src/model/BendStyle";
import { BendPoint } from "@src/model/BendPoint";
import { HarmonicType } from "@src/model/HarmonicType";
import { SlideInType } from "@src/model/SlideInType";
import { SlideOutType } from "@src/model/SlideOutType";
import { VibratoType } from "@src/model/VibratoType";
import { Fingers } from "@src/model/Fingers";
import { Duration } from "@src/model/Duration";
import { NoteAccidentalMode } from "@src/model/NoteAccidentalMode";
import { DynamicValue } from "@src/model/DynamicValue";
export class NoteSerializer {
    public static fromJson(obj: Note, r: JsonReader): void {
        if (r.currentValueType === JsonValueType.Null) {
            return;
        } 
        r.startObject(); 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
        r.endObject(); 
    }
    public static toJson(obj: Note | null, w: JsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.number(obj.id, "id"); 
        w.number(obj.index, "index"); 
        w.enum(obj.accentuated, "accentuated"); 
        w.enum(obj.bendType, "bendType"); 
        w.enum(obj.bendStyle, "bendStyle"); 
        w.boolean(obj.isContinuedBend, "isContinuedBend"); 
        w.prop("bendPoints"); 
        w.startArray(); 
        for (const i of obj.bendPoints) {
            BendPointSerializer.toJson(i, w);
        } 
        w.endArray(); 
        w.number(obj.fret, "fret"); 
        w.number(obj.string, "string"); 
        w.number(obj.octave, "octave"); 
        w.number(obj.tone, "tone"); 
        w.number(obj.percussionArticulation, "percussionArticulation"); 
        w.boolean(obj.isVisible, "isVisible"); 
        w.boolean(obj.isLeftHandTapped, "isLeftHandTapped"); 
        w.boolean(obj.isHammerPullOrigin, "isHammerPullOrigin"); 
        w.number(obj.hammerPullOriginNoteId, "hammerPullOriginNoteId"); 
        w.number(obj.hammerPullDestinationNoteId, "hammerPullDestinationNoteId"); 
        w.boolean(obj.isSlurDestination, "isSlurDestination"); 
        w.number(obj.slurOriginNoteId, "slurOriginNoteId"); 
        w.number(obj.slurDestinationNoteId, "slurDestinationNoteId"); 
        w.enum(obj.harmonicType, "harmonicType"); 
        w.number(obj.harmonicValue, "harmonicValue"); 
        w.boolean(obj.isGhost, "isGhost"); 
        w.boolean(obj.isLetRing, "isLetRing"); 
        w.boolean(obj.isPalmMute, "isPalmMute"); 
        w.boolean(obj.isDead, "isDead"); 
        w.boolean(obj.isStaccato, "isStaccato"); 
        w.enum(obj.slideInType, "slideInType"); 
        w.enum(obj.slideOutType, "slideOutType"); 
        w.enum(obj.vibrato, "vibrato"); 
        w.number(obj.tieOriginNoteId, "tieOriginNoteId"); 
        w.number(obj.tieDestinationNoteId, "tieDestinationNoteId"); 
        w.boolean(obj.isTieDestination, "isTieDestination"); 
        w.enum(obj.leftHandFinger, "leftHandFinger"); 
        w.enum(obj.rightHandFinger, "rightHandFinger"); 
        w.boolean(obj.isFingering, "isFingering"); 
        w.number(obj.trillValue, "trillValue"); 
        w.enum(obj.trillSpeed, "trillSpeed"); 
        w.number(obj.durationPercent, "durationPercent"); 
        w.enum(obj.accidentalMode, "accidentalMode"); 
        w.enum(obj.dynamics, "dynamics"); 
        w.boolean(obj.isEffectSlurOrigin, "isEffectSlurOrigin"); 
        w.boolean(obj.hasEffectSlur, "hasEffectSlur"); 
        w.endObject(); 
    }
    public static setProperty(obj: Note, property: string, r: JsonReader): boolean {
        switch (property) {
            case "id":
                obj.id = (r.number()!);
                return true;
            case "index":
                obj.index = (r.number()!);
                return true;
            case "accentuated":
                obj.accentuated = (r.enum<AccentuationType>(AccentuationType)!);
                return true;
            case "bendtype":
                obj.bendType = (r.enum<BendType>(BendType)!);
                return true;
            case "bendstyle":
                obj.bendStyle = (r.enum<BendStyle>(BendStyle)!);
                return true;
            case "iscontinuedbend":
                obj.isContinuedBend = (r.boolean()!);
                return true;
            case "bendpoints":
                obj.bendPoints = [];
                r.startArray();
                while (r.nextItem()) {
                    const i = new BendPoint();
                    BendPointSerializer.fromJson(i, r)
                    obj.addBendPoint(i);
                }
                r.endArray();
                return true;
            case "fret":
                obj.fret = (r.number()!);
                return true;
            case "string":
                obj.string = (r.number()!);
                return true;
            case "octave":
                obj.octave = (r.number()!);
                return true;
            case "tone":
                obj.tone = (r.number()!);
                return true;
            case "percussionarticulation":
                obj.percussionArticulation = (r.number()!);
                return true;
            case "isvisible":
                obj.isVisible = (r.boolean()!);
                return true;
            case "islefthandtapped":
                obj.isLeftHandTapped = (r.boolean()!);
                return true;
            case "ishammerpullorigin":
                obj.isHammerPullOrigin = (r.boolean()!);
                return true;
            case "hammerpulloriginnoteid":
                obj.hammerPullOriginNoteId = (r.number()!);
                return true;
            case "hammerpulldestinationnoteid":
                obj.hammerPullDestinationNoteId = (r.number()!);
                return true;
            case "isslurdestination":
                obj.isSlurDestination = (r.boolean()!);
                return true;
            case "sluroriginnoteid":
                obj.slurOriginNoteId = (r.number()!);
                return true;
            case "slurdestinationnoteid":
                obj.slurDestinationNoteId = (r.number()!);
                return true;
            case "harmonictype":
                obj.harmonicType = (r.enum<HarmonicType>(HarmonicType)!);
                return true;
            case "harmonicvalue":
                obj.harmonicValue = (r.number()!);
                return true;
            case "isghost":
                obj.isGhost = (r.boolean()!);
                return true;
            case "isletring":
                obj.isLetRing = (r.boolean()!);
                return true;
            case "ispalmmute":
                obj.isPalmMute = (r.boolean()!);
                return true;
            case "isdead":
                obj.isDead = (r.boolean()!);
                return true;
            case "isstaccato":
                obj.isStaccato = (r.boolean()!);
                return true;
            case "slideintype":
                obj.slideInType = (r.enum<SlideInType>(SlideInType)!);
                return true;
            case "slideouttype":
                obj.slideOutType = (r.enum<SlideOutType>(SlideOutType)!);
                return true;
            case "vibrato":
                obj.vibrato = (r.enum<VibratoType>(VibratoType)!);
                return true;
            case "tieoriginnoteid":
                obj.tieOriginNoteId = (r.number()!);
                return true;
            case "tiedestinationnoteid":
                obj.tieDestinationNoteId = (r.number()!);
                return true;
            case "istiedestination":
                obj.isTieDestination = (r.boolean()!);
                return true;
            case "lefthandfinger":
                obj.leftHandFinger = (r.enum<Fingers>(Fingers)!);
                return true;
            case "righthandfinger":
                obj.rightHandFinger = (r.enum<Fingers>(Fingers)!);
                return true;
            case "isfingering":
                obj.isFingering = (r.boolean()!);
                return true;
            case "trillvalue":
                obj.trillValue = (r.number()!);
                return true;
            case "trillspeed":
                obj.trillSpeed = (r.enum<Duration>(Duration)!);
                return true;
            case "durationpercent":
                obj.durationPercent = (r.number()!);
                return true;
            case "accidentalmode":
                obj.accidentalMode = (r.enum<NoteAccidentalMode>(NoteAccidentalMode)!);
                return true;
            case "dynamics":
                obj.dynamics = (r.enum<DynamicValue>(DynamicValue)!);
                return true;
            case "iseffectslurorigin":
                obj.isEffectSlurOrigin = (r.boolean()!);
                return true;
            case "haseffectslur":
                obj.hasEffectSlur = (r.boolean()!);
                return true;
        } 
        return false; 
    }
}

