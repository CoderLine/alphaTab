// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Note } from "@src/model/Note";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { BendPointSerializer } from "@src/generated/model/BendPointSerializer";
import { AccentuationType } from "@src/model/AccentuationType";
import { BendType } from "@src/model/BendType";
import { BendStyle } from "@src/model/BendStyle";
import { BendPoint } from "@src/model/BendPoint";
import { HarmonicType } from "@src/model/HarmonicType";
import { SlideInType } from "@src/model/SlideInType";
import { SlideOutType } from "@src/model/SlideOutType";
import { VibratoType } from "@src/model/VibratoType";
import { Fingers } from "@src/model/Fingers";
import { Duration } from "@src/model/Duration";
import { NoteAccidentalMode } from "@src/model/NoteAccidentalMode";
import { DynamicValue } from "@src/model/DynamicValue";
export class NoteSerializer {
    public static fromJson(obj: Note, reader: IJsonReader): void {
        if (reader.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (reader.nextProperty()) {
            this.setProperty(obj, reader.readPropertyName().toLowerCase(), reader);
        } 
    }
    public static toJson(obj: Note | null, writer: IJsonWriter): void {
        if (!obj) {
            writer.writeNull();
            return;
        } 
        writer.writeStartObject(); 
        writer.writePropertyName("id"); 
        writer.writeNumber(obj.id); 
        writer.writePropertyName("index"); 
        writer.writeNumber(obj.index); 
        writer.writePropertyName("accentuated"); 
        writer.writeEnum(obj.accentuated); 
        writer.writePropertyName("bendType"); 
        writer.writeEnum(obj.bendType); 
        writer.writePropertyName("bendStyle"); 
        writer.writeEnum(obj.bendStyle); 
        writer.writePropertyName("isContinuedBend"); 
        writer.writeBoolean(obj.isContinuedBend); 
        writer.writePropertyName("bendPoints"); 
        writer.writeStartArray(); 
        for (const i of obj.bendPoints) {
            BendPointSerializer.toJson(i, writer);
        } 
        writer.writeEndArray(); 
        writer.writePropertyName("fret"); 
        writer.writeNumber(obj.fret); 
        writer.writePropertyName("string"); 
        writer.writeNumber(obj.string); 
        writer.writePropertyName("octave"); 
        writer.writeNumber(obj.octave); 
        writer.writePropertyName("tone"); 
        writer.writeNumber(obj.tone); 
        writer.writePropertyName("percussionArticulation"); 
        writer.writeNumber(obj.percussionArticulation); 
        writer.writePropertyName("isVisible"); 
        writer.writeBoolean(obj.isVisible); 
        writer.writePropertyName("isLeftHandTapped"); 
        writer.writeBoolean(obj.isLeftHandTapped); 
        writer.writePropertyName("isHammerPullOrigin"); 
        writer.writeBoolean(obj.isHammerPullOrigin); 
        writer.writePropertyName("hammerPullOriginNoteId"); 
        writer.writeNumber(obj.hammerPullOriginNoteId); 
        writer.writePropertyName("hammerPullDestinationNoteId"); 
        writer.writeNumber(obj.hammerPullDestinationNoteId); 
        writer.writePropertyName("isSlurDestination"); 
        writer.writeBoolean(obj.isSlurDestination); 
        writer.writePropertyName("slurOriginNoteId"); 
        writer.writeNumber(obj.slurOriginNoteId); 
        writer.writePropertyName("slurDestinationNoteId"); 
        writer.writeNumber(obj.slurDestinationNoteId); 
        writer.writePropertyName("harmonicType"); 
        writer.writeEnum(obj.harmonicType); 
        writer.writePropertyName("harmonicValue"); 
        writer.writeNumber(obj.harmonicValue); 
        writer.writePropertyName("isGhost"); 
        writer.writeBoolean(obj.isGhost); 
        writer.writePropertyName("isLetRing"); 
        writer.writeBoolean(obj.isLetRing); 
        writer.writePropertyName("isPalmMute"); 
        writer.writeBoolean(obj.isPalmMute); 
        writer.writePropertyName("isDead"); 
        writer.writeBoolean(obj.isDead); 
        writer.writePropertyName("isStaccato"); 
        writer.writeBoolean(obj.isStaccato); 
        writer.writePropertyName("slideInType"); 
        writer.writeEnum(obj.slideInType); 
        writer.writePropertyName("slideOutType"); 
        writer.writeEnum(obj.slideOutType); 
        writer.writePropertyName("vibrato"); 
        writer.writeEnum(obj.vibrato); 
        writer.writePropertyName("tieOriginNoteId"); 
        writer.writeNumber(obj.tieOriginNoteId); 
        writer.writePropertyName("tieDestinationNoteId"); 
        writer.writeNumber(obj.tieDestinationNoteId); 
        writer.writePropertyName("isTieDestination"); 
        writer.writeBoolean(obj.isTieDestination); 
        writer.writePropertyName("leftHandFinger"); 
        writer.writeEnum(obj.leftHandFinger); 
        writer.writePropertyName("rightHandFinger"); 
        writer.writeEnum(obj.rightHandFinger); 
        writer.writePropertyName("isFingering"); 
        writer.writeBoolean(obj.isFingering); 
        writer.writePropertyName("trillValue"); 
        writer.writeNumber(obj.trillValue); 
        writer.writePropertyName("trillSpeed"); 
        writer.writeEnum(obj.trillSpeed); 
        writer.writePropertyName("durationPercent"); 
        writer.writeNumber(obj.durationPercent); 
        writer.writePropertyName("accidentalMode"); 
        writer.writeEnum(obj.accidentalMode); 
        writer.writePropertyName("dynamics"); 
        writer.writeEnum(obj.dynamics); 
        writer.writePropertyName("isEffectSlurOrigin"); 
        writer.writeBoolean(obj.isEffectSlurOrigin); 
        writer.writePropertyName("hasEffectSlur"); 
        writer.writeBoolean(obj.hasEffectSlur); 
        writer.writeEndObject(); 
    }
    public static setProperty(obj: Note, property: string, reader: IJsonReader): boolean {
        switch (property) {
            case "id":
                obj.id = (reader.readNumber()!);
                return true;
            case "index":
                obj.index = (reader.readNumber()!);
                return true;
            case "accentuated":
                obj.accentuated = (reader.readEnum<AccentuationType>(AccentuationType)!);
                return true;
            case "bendtype":
                obj.bendType = (reader.readEnum<BendType>(BendType)!);
                return true;
            case "bendstyle":
                obj.bendStyle = (reader.readEnum<BendStyle>(BendStyle)!);
                return true;
            case "iscontinuedbend":
                obj.isContinuedBend = (reader.readBoolean()!);
                return true;
            case "bendpoints":
                obj.bendPoints = [];
                while (reader.nextArrayItem()) {
                    const i = new BendPoint();
                    BendPointSerializer.fromJson(i, reader)
                    obj.bendPoints.push(i);
                }
                return true;
            case "fret":
                obj.fret = (reader.readNumber()!);
                return true;
            case "string":
                obj.string = (reader.readNumber()!);
                return true;
            case "octave":
                obj.octave = (reader.readNumber()!);
                return true;
            case "tone":
                obj.tone = (reader.readNumber()!);
                return true;
            case "percussionarticulation":
                obj.percussionArticulation = (reader.readNumber()!);
                return true;
            case "isvisible":
                obj.isVisible = (reader.readBoolean()!);
                return true;
            case "islefthandtapped":
                obj.isLeftHandTapped = (reader.readBoolean()!);
                return true;
            case "ishammerpullorigin":
                obj.isHammerPullOrigin = (reader.readBoolean()!);
                return true;
            case "hammerpulloriginnoteid":
                obj.hammerPullOriginNoteId = (reader.readNumber()!);
                return true;
            case "hammerpulldestinationnoteid":
                obj.hammerPullDestinationNoteId = (reader.readNumber()!);
                return true;
            case "isslurdestination":
                obj.isSlurDestination = (reader.readBoolean()!);
                return true;
            case "sluroriginnoteid":
                obj.slurOriginNoteId = (reader.readNumber()!);
                return true;
            case "slurdestinationnoteid":
                obj.slurDestinationNoteId = (reader.readNumber()!);
                return true;
            case "harmonictype":
                obj.harmonicType = (reader.readEnum<HarmonicType>(HarmonicType)!);
                return true;
            case "harmonicvalue":
                obj.harmonicValue = (reader.readNumber()!);
                return true;
            case "isghost":
                obj.isGhost = (reader.readBoolean()!);
                return true;
            case "isletring":
                obj.isLetRing = (reader.readBoolean()!);
                return true;
            case "ispalmmute":
                obj.isPalmMute = (reader.readBoolean()!);
                return true;
            case "isdead":
                obj.isDead = (reader.readBoolean()!);
                return true;
            case "isstaccato":
                obj.isStaccato = (reader.readBoolean()!);
                return true;
            case "slideintype":
                obj.slideInType = (reader.readEnum<SlideInType>(SlideInType)!);
                return true;
            case "slideouttype":
                obj.slideOutType = (reader.readEnum<SlideOutType>(SlideOutType)!);
                return true;
            case "vibrato":
                obj.vibrato = (reader.readEnum<VibratoType>(VibratoType)!);
                return true;
            case "tieoriginnoteid":
                obj.tieOriginNoteId = (reader.readNumber()!);
                return true;
            case "tiedestinationnoteid":
                obj.tieDestinationNoteId = (reader.readNumber()!);
                return true;
            case "istiedestination":
                obj.isTieDestination = (reader.readBoolean()!);
                return true;
            case "lefthandfinger":
                obj.leftHandFinger = (reader.readEnum<Fingers>(Fingers)!);
                return true;
            case "righthandfinger":
                obj.rightHandFinger = (reader.readEnum<Fingers>(Fingers)!);
                return true;
            case "isfingering":
                obj.isFingering = (reader.readBoolean()!);
                return true;
            case "trillvalue":
                obj.trillValue = (reader.readNumber()!);
                return true;
            case "trillspeed":
                obj.trillSpeed = (reader.readEnum<Duration>(Duration)!);
                return true;
            case "durationpercent":
                obj.durationPercent = (reader.readNumber()!);
                return true;
            case "accidentalmode":
                obj.accidentalMode = (reader.readEnum<NoteAccidentalMode>(NoteAccidentalMode)!);
                return true;
            case "dynamics":
                obj.dynamics = (reader.readEnum<DynamicValue>(DynamicValue)!);
                return true;
            case "iseffectslurorigin":
                obj.isEffectSlurOrigin = (reader.readBoolean()!);
                return true;
            case "haseffectslur":
                obj.hasEffectSlur = (reader.readBoolean()!);
                return true;
        } 
        return false; 
    }
}

