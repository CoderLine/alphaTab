// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Note } from "@src/model/Note";
import { JsonHelper } from "@src/io/JsonHelper";
import { BendPointSerializer } from "@src/generated/model/BendPointSerializer";
import { IReadable } from "@src/io/IReadable";
import { BendPoint } from "@src/model/BendPoint";
import { IWriteable } from "@src/io/IWriteable";
import { IOHelper } from "@src/io/IOHelper";
import { AccentuationType } from "@src/model/AccentuationType";
import { BendType } from "@src/model/BendType";
import { BendStyle } from "@src/model/BendStyle";
import { HarmonicType } from "@src/model/HarmonicType";
import { SlideInType } from "@src/model/SlideInType";
import { SlideOutType } from "@src/model/SlideOutType";
import { VibratoType } from "@src/model/VibratoType";
import { Fingers } from "@src/model/Fingers";
import { Duration } from "@src/model/Duration";
import { NoteAccidentalMode } from "@src/model/NoteAccidentalMode";
import { DynamicValue } from "@src/model/DynamicValue";
export class NoteSerializer {
    public static fromJson(obj: Note, m: unknown): void {
        if (!m) {
            return;
        } 
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v)); 
    }
    public static toJson(obj: Note | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        } 
        const o = new Map<string, unknown>(); 
        o.set("id", obj.id); 
        o.set("accentuated", obj.accentuated as number); 
        o.set("bendtype", obj.bendType as number); 
        o.set("bendstyle", obj.bendStyle as number); 
        o.set("iscontinuedbend", obj.isContinuedBend); 
        o.set("bendpoints", obj.bendPoints.map(i => BendPointSerializer.toJson(i))); 
        o.set("fret", obj.fret); 
        o.set("string", obj.string); 
        o.set("octave", obj.octave); 
        o.set("tone", obj.tone); 
        o.set("percussionarticulation", obj.percussionArticulation); 
        o.set("isvisible", obj.isVisible); 
        o.set("islefthandtapped", obj.isLeftHandTapped); 
        o.set("ishammerpullorigin", obj.isHammerPullOrigin); 
        o.set("hammerpulloriginnoteid", obj.hammerPullOriginNoteId); 
        o.set("hammerpulldestinationnoteid", obj.hammerPullDestinationNoteId); 
        o.set("isslurdestination", obj.isSlurDestination); 
        o.set("sluroriginnoteid", obj.slurOriginNoteId); 
        o.set("slurdestinationnoteid", obj.slurDestinationNoteId); 
        o.set("harmonictype", obj.harmonicType as number); 
        o.set("harmonicvalue", obj.harmonicValue); 
        o.set("isghost", obj.isGhost); 
        o.set("isletring", obj.isLetRing); 
        o.set("ispalmmute", obj.isPalmMute); 
        o.set("isdead", obj.isDead); 
        o.set("isstaccato", obj.isStaccato); 
        o.set("slideintype", obj.slideInType as number); 
        o.set("slideouttype", obj.slideOutType as number); 
        o.set("vibrato", obj.vibrato as number); 
        o.set("tieoriginnoteid", obj.tieOriginNoteId); 
        o.set("tiedestinationnoteid", obj.tieDestinationNoteId); 
        o.set("istiedestination", obj.isTieDestination); 
        o.set("lefthandfinger", obj.leftHandFinger as number); 
        o.set("righthandfinger", obj.rightHandFinger as number); 
        o.set("isfingering", obj.isFingering); 
        o.set("trillvalue", obj.trillValue); 
        o.set("trillspeed", obj.trillSpeed as number); 
        o.set("durationpercent", obj.durationPercent); 
        o.set("accidentalmode", obj.accidentalMode as number); 
        o.set("dynamics", obj.dynamics as number); 
        return o; 
    }
    public static fromBinary(obj: Note, r: IReadable): Note {
        if (IOHelper.readNull(r)) {
            return obj;
        } 
        obj.id = IOHelper.readNumber(r); 
        obj.accentuated = JsonHelper.parseEnum<AccentuationType>(IOHelper.readInt32LE(r), AccentuationType)!; 
        obj.bendType = JsonHelper.parseEnum<BendType>(IOHelper.readInt32LE(r), BendType)!; 
        obj.bendStyle = JsonHelper.parseEnum<BendStyle>(IOHelper.readInt32LE(r), BendStyle)!; 
        obj.isContinuedBend = IOHelper.readBoolean(r); 
        {
            obj.bendPoints = [];
            const length = IOHelper.readInt32LE(r);
            for (let i = 0;i < length;i++) {
                const it = new BendPoint();
                BendPointSerializer.fromBinary(it, r);
                obj.addBendPoint(it);
            }
        } 
        obj.fret = IOHelper.readNumber(r); 
        obj.string = IOHelper.readNumber(r); 
        obj.octave = IOHelper.readNumber(r); 
        obj.tone = IOHelper.readNumber(r); 
        obj.percussionArticulation = IOHelper.readNumber(r); 
        obj.isVisible = IOHelper.readBoolean(r); 
        obj.isLeftHandTapped = IOHelper.readBoolean(r); 
        obj.isHammerPullOrigin = IOHelper.readBoolean(r); 
        obj.hammerPullOriginNoteId = IOHelper.readNumber(r); 
        obj.hammerPullDestinationNoteId = IOHelper.readNumber(r); 
        obj.isSlurDestination = IOHelper.readBoolean(r); 
        obj.slurOriginNoteId = IOHelper.readNumber(r); 
        obj.slurDestinationNoteId = IOHelper.readNumber(r); 
        obj.harmonicType = JsonHelper.parseEnum<HarmonicType>(IOHelper.readInt32LE(r), HarmonicType)!; 
        obj.harmonicValue = IOHelper.readNumber(r); 
        obj.isGhost = IOHelper.readBoolean(r); 
        obj.isLetRing = IOHelper.readBoolean(r); 
        obj.isPalmMute = IOHelper.readBoolean(r); 
        obj.isDead = IOHelper.readBoolean(r); 
        obj.isStaccato = IOHelper.readBoolean(r); 
        obj.slideInType = JsonHelper.parseEnum<SlideInType>(IOHelper.readInt32LE(r), SlideInType)!; 
        obj.slideOutType = JsonHelper.parseEnum<SlideOutType>(IOHelper.readInt32LE(r), SlideOutType)!; 
        obj.vibrato = JsonHelper.parseEnum<VibratoType>(IOHelper.readInt32LE(r), VibratoType)!; 
        obj.tieOriginNoteId = IOHelper.readNumber(r); 
        obj.tieDestinationNoteId = IOHelper.readNumber(r); 
        obj.isTieDestination = IOHelper.readBoolean(r); 
        obj.leftHandFinger = JsonHelper.parseEnum<Fingers>(IOHelper.readInt32LE(r), Fingers)!; 
        obj.rightHandFinger = JsonHelper.parseEnum<Fingers>(IOHelper.readInt32LE(r), Fingers)!; 
        obj.isFingering = IOHelper.readBoolean(r); 
        obj.trillValue = IOHelper.readNumber(r); 
        obj.trillSpeed = JsonHelper.parseEnum<Duration>(IOHelper.readInt32LE(r), Duration)!; 
        obj.durationPercent = IOHelper.readNumber(r); 
        obj.accidentalMode = JsonHelper.parseEnum<NoteAccidentalMode>(IOHelper.readInt32LE(r), NoteAccidentalMode)!; 
        obj.dynamics = JsonHelper.parseEnum<DynamicValue>(IOHelper.readInt32LE(r), DynamicValue)!; 
        return obj; 
    }
    public static toBinary(obj: Note | null, w: IWriteable): void {
        if (!obj) {
            IOHelper.writeNull(w);
            return;
        } 
        IOHelper.writeNotNull(w); 
        IOHelper.writeNumber(w, obj.id); 
        IOHelper.writeInt32LE(w, obj.accentuated as number); 
        IOHelper.writeInt32LE(w, obj.bendType as number); 
        IOHelper.writeInt32LE(w, obj.bendStyle as number); 
        IOHelper.writeBoolean(w, obj.isContinuedBend); 
        IOHelper.writeInt32LE(w, obj.bendPoints.length); 
        for (const i of obj.bendPoints) {
            BendPointSerializer.toBinary(i, w);
        } 
        IOHelper.writeNumber(w, obj.fret); 
        IOHelper.writeNumber(w, obj.string); 
        IOHelper.writeNumber(w, obj.octave); 
        IOHelper.writeNumber(w, obj.tone); 
        IOHelper.writeNumber(w, obj.percussionArticulation); 
        IOHelper.writeBoolean(w, obj.isVisible); 
        IOHelper.writeBoolean(w, obj.isLeftHandTapped); 
        IOHelper.writeBoolean(w, obj.isHammerPullOrigin); 
        IOHelper.writeNumber(w, obj.hammerPullOriginNoteId); 
        IOHelper.writeNumber(w, obj.hammerPullDestinationNoteId); 
        IOHelper.writeBoolean(w, obj.isSlurDestination); 
        IOHelper.writeNumber(w, obj.slurOriginNoteId); 
        IOHelper.writeNumber(w, obj.slurDestinationNoteId); 
        IOHelper.writeInt32LE(w, obj.harmonicType as number); 
        IOHelper.writeNumber(w, obj.harmonicValue); 
        IOHelper.writeBoolean(w, obj.isGhost); 
        IOHelper.writeBoolean(w, obj.isLetRing); 
        IOHelper.writeBoolean(w, obj.isPalmMute); 
        IOHelper.writeBoolean(w, obj.isDead); 
        IOHelper.writeBoolean(w, obj.isStaccato); 
        IOHelper.writeInt32LE(w, obj.slideInType as number); 
        IOHelper.writeInt32LE(w, obj.slideOutType as number); 
        IOHelper.writeInt32LE(w, obj.vibrato as number); 
        IOHelper.writeNumber(w, obj.tieOriginNoteId); 
        IOHelper.writeNumber(w, obj.tieDestinationNoteId); 
        IOHelper.writeBoolean(w, obj.isTieDestination); 
        IOHelper.writeInt32LE(w, obj.leftHandFinger as number); 
        IOHelper.writeInt32LE(w, obj.rightHandFinger as number); 
        IOHelper.writeBoolean(w, obj.isFingering); 
        IOHelper.writeNumber(w, obj.trillValue); 
        IOHelper.writeInt32LE(w, obj.trillSpeed as number); 
        IOHelper.writeNumber(w, obj.durationPercent); 
        IOHelper.writeInt32LE(w, obj.accidentalMode as number); 
        IOHelper.writeInt32LE(w, obj.dynamics as number); 
    }
    public static setProperty(obj: Note, property: string, v: unknown): boolean {
        switch (property) {
            case "id":
                obj.id = v! as number;
                return true;
            case "accentuated":
                obj.accentuated = JsonHelper.parseEnum<AccentuationType>(v, AccentuationType)!;
                return true;
            case "bendtype":
                obj.bendType = JsonHelper.parseEnum<BendType>(v, BendType)!;
                return true;
            case "bendstyle":
                obj.bendStyle = JsonHelper.parseEnum<BendStyle>(v, BendStyle)!;
                return true;
            case "iscontinuedbend":
                obj.isContinuedBend = v! as boolean;
                return true;
            case "bendpoints":
                obj.bendPoints = [];
                for (const o of (v as (Map<string, unknown> | null)[])) {
                    const i = new BendPoint();
                    BendPointSerializer.fromJson(i, o);
                    obj.addBendPoint(i);
                }
                return true;
            case "fret":
                obj.fret = v! as number;
                return true;
            case "string":
                obj.string = v! as number;
                return true;
            case "octave":
                obj.octave = v! as number;
                return true;
            case "tone":
                obj.tone = v! as number;
                return true;
            case "percussionarticulation":
                obj.percussionArticulation = v! as number;
                return true;
            case "isvisible":
                obj.isVisible = v! as boolean;
                return true;
            case "islefthandtapped":
                obj.isLeftHandTapped = v! as boolean;
                return true;
            case "ishammerpullorigin":
                obj.isHammerPullOrigin = v! as boolean;
                return true;
            case "hammerpulloriginnoteid":
                obj.hammerPullOriginNoteId = v! as number;
                return true;
            case "hammerpulldestinationnoteid":
                obj.hammerPullDestinationNoteId = v! as number;
                return true;
            case "isslurdestination":
                obj.isSlurDestination = v! as boolean;
                return true;
            case "sluroriginnoteid":
                obj.slurOriginNoteId = v! as number;
                return true;
            case "slurdestinationnoteid":
                obj.slurDestinationNoteId = v! as number;
                return true;
            case "harmonictype":
                obj.harmonicType = JsonHelper.parseEnum<HarmonicType>(v, HarmonicType)!;
                return true;
            case "harmonicvalue":
                obj.harmonicValue = v! as number;
                return true;
            case "isghost":
                obj.isGhost = v! as boolean;
                return true;
            case "isletring":
                obj.isLetRing = v! as boolean;
                return true;
            case "ispalmmute":
                obj.isPalmMute = v! as boolean;
                return true;
            case "isdead":
                obj.isDead = v! as boolean;
                return true;
            case "isstaccato":
                obj.isStaccato = v! as boolean;
                return true;
            case "slideintype":
                obj.slideInType = JsonHelper.parseEnum<SlideInType>(v, SlideInType)!;
                return true;
            case "slideouttype":
                obj.slideOutType = JsonHelper.parseEnum<SlideOutType>(v, SlideOutType)!;
                return true;
            case "vibrato":
                obj.vibrato = JsonHelper.parseEnum<VibratoType>(v, VibratoType)!;
                return true;
            case "tieoriginnoteid":
                obj.tieOriginNoteId = v! as number;
                return true;
            case "tiedestinationnoteid":
                obj.tieDestinationNoteId = v! as number;
                return true;
            case "istiedestination":
                obj.isTieDestination = v! as boolean;
                return true;
            case "lefthandfinger":
                obj.leftHandFinger = JsonHelper.parseEnum<Fingers>(v, Fingers)!;
                return true;
            case "righthandfinger":
                obj.rightHandFinger = JsonHelper.parseEnum<Fingers>(v, Fingers)!;
                return true;
            case "isfingering":
                obj.isFingering = v! as boolean;
                return true;
            case "trillvalue":
                obj.trillValue = v! as number;
                return true;
            case "trillspeed":
                obj.trillSpeed = JsonHelper.parseEnum<Duration>(v, Duration)!;
                return true;
            case "durationpercent":
                obj.durationPercent = v! as number;
                return true;
            case "accidentalmode":
                obj.accidentalMode = JsonHelper.parseEnum<NoteAccidentalMode>(v, NoteAccidentalMode)!;
                return true;
            case "dynamics":
                obj.dynamics = JsonHelper.parseEnum<DynamicValue>(v, DynamicValue)!;
                return true;
        } 
        return false; 
    }
}

