// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Voice } from "@src/model/Voice";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { BeatSerializer } from "@src/generated/model/BeatSerializer";
import { Beat } from "@src/model/Beat";
export class VoiceSerializer {
    public static fromJson(obj: Voice, r: IJsonReader): void {
        if (r.currentValueType === JsonValueType.Null) {
            return;
        } 
        r.startObject(); 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
        r.endObject(); 
    }
    public static toJson(obj: Voice | null, w: IJsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.number(obj.index, "index"); 
        w.prop("beats"); 
        w.startArray(); 
        for (const i of obj.beats) {
            BeatSerializer.toJson(i, w);
        } 
        w.endArray(); 
        w.boolean(obj.isEmpty, "isEmpty"); 
        w.endObject(); 
    }
    public static setProperty(obj: Voice, property: string, r: IJsonReader): boolean {
        switch (property) {
            case "index":
                obj.index = (r.number()!);
                return true;
            case "beats":
                obj.beats = [];
                r.startArray();
                while (r.nextItem()) {
                    const i = new Beat();
                    BeatSerializer.fromJson(i, r)
                    obj.addBeat(i);
                }
                r.endArray();
                return true;
            case "isempty":
                obj.isEmpty = (r.boolean()!);
                return true;
        } 
        return false; 
    }
}

