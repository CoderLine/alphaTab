// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Voice } from "@src/model/Voice";
import { JsonHelper } from "@src/io/JsonHelper";
import { BeatSerializer } from "@src/generated/model/BeatSerializer";
import { Beat } from "@src/model/Beat";
export class VoiceSerializer {
    public static fromJson(obj: Voice, m: unknown): void {
        if (!m) {
            return;
        } 
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v)); 
    }
    public static toJson(obj: Voice | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        } 
        const o = new Map<string, unknown>(); 
        o.set("id", obj.id); 
        o.set("beats", obj.beats.map(i => BeatSerializer.toJson(i))); 
        o.set("isEmpty", obj.isEmpty); 
        return o; 
    }
    public static setProperty(obj: Voice, property: string, v: unknown): boolean {
        switch (property) {
            case "id":
                obj.id = (v as number);
                return true;
            case "beats":
                obj.beats = [];
                for (const o of (v as (Map<string, unknown> | null)[])) {
                    const i = new Beat();
                    BeatSerializer.fromJson(i, o)
                    obj.addBeat(i);
                }
                return true;
            case "isempty":
                obj.isEmpty = (v as boolean);
                return true;
        } 
        return false; 
    }
}

