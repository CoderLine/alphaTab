// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Voice } from "@src/model/Voice";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { BeatSerializer } from "@src/generated/model/BeatSerializer";
export class VoiceSerializer {
    public static fromJson(obj: Voice, reader: IJsonReader): void {
        if (reader.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (reader.nextProperty()) {
            this.setProperty(obj, reader.readPropertyName().toLowerCase(), reader);
        } 
    }
    public static toJson(obj: Voice | null, writer: IJsonWriter): void {
        if (!obj) {
            writer.writeNull();
            return;
        } 
        writer.writeStartObject(); 
        writer.writePropertyName("index"); 
        writer.writeNumber(obj.index); 
        writer.writePropertyName("beats"); 
        writer.writeStartArray(); 
        for (const i of obj.beats) {
            BeatSerializer.toJson(i, writer);
        } 
        writer.writeEndArray(); 
        writer.writePropertyName("isEmpty"); 
        writer.writeBoolean(obj.isEmpty); 
        writer.writeEndObject(); 
    }
    public static setProperty(obj: Voice, property: string, reader: IJsonReader): boolean {
        switch (property) {
            case "index":
                obj.index = (reader.readNumber()!);
                return true;
            case "beats":
                obj.beats = [];
                for (const __li of value)
                    obj.addBeat(BeatSerializer.fromJson(i, j));
                return true;
            case "isempty":
                obj.isEmpty = (reader.readBoolean()!);
                return true;
        } 
        return false; 
    }
}

