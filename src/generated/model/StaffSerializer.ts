// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Staff } from "@src/model/Staff";
import { JsonReader } from "@src/io/JsonReader";
import { JsonValueType } from "@src/io/JsonReader";
import { JsonWriter } from "@src/io/JsonWriter";
import { BarSerializer } from "@src/generated/model/BarSerializer";
import { ChordSerializer } from "@src/generated/model/ChordSerializer";
import { Bar } from "@src/model/Bar";
import { Chord } from "@src/model/Chord";
export class StaffSerializer {
    public static fromJson(obj: Staff, r: JsonReader): void {
        if (r.currentValueType === JsonValueType.Null) {
            return;
        } 
        r.startObject(); 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
        r.endObject(); 
    }
    public static toJson(obj: Staff | null, w: JsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.number(obj.index, "index"); 
        w.prop("bars"); 
        w.startArray(); 
        for (const i of obj.bars) {
            BarSerializer.toJson(i, w);
        } 
        w.endArray(); 
        w.prop("chords"); 
        w.startObject(); 
        obj.chords.forEach((v, k) => { w.prop(k); ChordSerializer.toJson(v, w); }); 
        w.endObject(); 
        w.number(obj.capo, "capo"); 
        w.number(obj.transpositionPitch, "transpositionPitch"); 
        w.number(obj.displayTranspositionPitch, "displayTranspositionPitch"); 
        w.numberArray(obj.tuning, "tuning"); 
        w.string(obj.tuningName, "tuningName"); 
        w.boolean(obj.showTablature, "showTablature"); 
        w.boolean(obj.showStandardNotation, "showStandardNotation"); 
        w.boolean(obj.isPercussion, "isPercussion"); 
        w.number(obj.standardNotationLineCount, "standardNotationLineCount"); 
        w.endObject(); 
    }
    public static setProperty(obj: Staff, property: string, r: JsonReader): boolean {
        switch (property) {
            case "index":
                obj.index = (r.number()!);
                return true;
            case "bars":
                obj.bars = [];
                r.startArray();
                while (r.nextItem()) {
                    const i = new Bar();
                    BarSerializer.fromJson(i, r)
                    obj.addBar(i);
                }
                r.endArray();
                return true;
            case "chords":
                obj.chords = new Map<string, Chord>();
                r.startObject();
                while (r.nextProp()) {
                    const i = new Chord();
                    ChordSerializer.fromJson(i, r);
                    obj.addChord(r.prop(), i);
                }
                r.endObject();
                return true;
            case "capo":
                obj.capo = (r.number()!);
                return true;
            case "transpositionpitch":
                obj.transpositionPitch = (r.number()!);
                return true;
            case "displaytranspositionpitch":
                obj.displayTranspositionPitch = (r.number()!);
                return true;
            case "tuning":
                obj.tuning = (r.numberArray()!);
                return true;
            case "tuningname":
                obj.tuningName = (r.string()!);
                return true;
            case "showtablature":
                obj.showTablature = (r.boolean()!);
                return true;
            case "showstandardnotation":
                obj.showStandardNotation = (r.boolean()!);
                return true;
            case "ispercussion":
                obj.isPercussion = (r.boolean()!);
                return true;
            case "standardnotationlinecount":
                obj.standardNotationLineCount = (r.number()!);
                return true;
        } 
        return false; 
    }
}

