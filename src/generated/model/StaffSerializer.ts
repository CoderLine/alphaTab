// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Staff } from "@src/model/Staff";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { BarSerializer } from "@src/generated/model/BarSerializer";
import { ChordSerializer } from "@src/generated/model/ChordSerializer";
import { Chord } from "@src/model/Chord";
export class StaffSerializer {
    public static fromJson(obj: Staff, reader: IJsonReader): void {
        if (reader.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (reader.nextProperty()) {
            this.setProperty(obj, reader.readPropertyName().toLowerCase(), reader);
        } 
    }
    public static toJson(obj: Staff | null, writer: IJsonWriter): void {
        if (!obj) {
            writer.writeNull();
            return;
        } 
        writer.writeStartObject(); 
        writer.writePropertyName("index"); 
        writer.writeNumber(obj.index); 
        writer.writePropertyName("bars"); 
        writer.writeStartArray(); 
        for (const i of obj.bars) {
            BarSerializer.toJson(i, writer);
        } 
        writer.writeEndArray(); 
        writer.writePropertyName("chords"); 
        writer.writeStartObject(); 
        obj.chords.forEach((k, v) => { writer.writePropertyName(k); ChordSerializer.toJson(m); }); 
        writer.writeEndObject(); 
        writer.writePropertyName("capo"); 
        writer.writeNumber(obj.capo); 
        writer.writePropertyName("transpositionPitch"); 
        writer.writeNumber(obj.transpositionPitch); 
        writer.writePropertyName("displayTranspositionPitch"); 
        writer.writeNumber(obj.displayTranspositionPitch); 
        writer.writePropertyName("tuning"); 
        writer.writeNumberArray(obj.tuning); 
        writer.writePropertyName("tuningName"); 
        writer.writeString(obj.tuningName); 
        writer.writePropertyName("showTablature"); 
        writer.writeBoolean(obj.showTablature); 
        writer.writePropertyName("showStandardNotation"); 
        writer.writeBoolean(obj.showStandardNotation); 
        writer.writePropertyName("isPercussion"); 
        writer.writeBoolean(obj.isPercussion); 
        writer.writePropertyName("standardNotationLineCount"); 
        writer.writeNumber(obj.standardNotationLineCount); 
        writer.writeEndObject(); 
    }
    public static setProperty(obj: Staff, property: string, reader: IJsonReader): boolean {
        switch (property) {
            case "index":
                obj.index = (reader.readNumber()!);
                return true;
            case "bars":
                obj.bars = [];
                for (const __li of value)
                    obj.addBar(BarSerializer.fromJson(i, j));
                return true;
            case "chords":
                obj.chords = new Map<string, Chord>();
                for (let __mk in value)
                    if (value.hasOwnProperty(__mk))
                        obj.addChord(__mk, ChordSerializer.fromJson(value[__mk]));
                return true;
            case "capo":
                obj.capo = (reader.readNumber()!);
                return true;
            case "transpositionpitch":
                obj.transpositionPitch = (reader.readNumber()!);
                return true;
            case "displaytranspositionpitch":
                obj.displayTranspositionPitch = (reader.readNumber()!);
                return true;
            case "tuning":
                obj.tuning = (reader.readNumberArray()!);
                return true;
            case "tuningname":
                obj.tuningName = (reader.readString()!);
                return true;
            case "showtablature":
                obj.showTablature = (reader.readBoolean()!);
                return true;
            case "showstandardnotation":
                obj.showStandardNotation = (reader.readBoolean()!);
                return true;
            case "ispercussion":
                obj.isPercussion = (reader.readBoolean()!);
                return true;
            case "standardnotationlinecount":
                obj.standardNotationLineCount = (reader.readNumber()!);
                return true;
        } 
        return false; 
    }
}

