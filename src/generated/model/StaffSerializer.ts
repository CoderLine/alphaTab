// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Staff } from "@src/model/Staff";
import { BarSerializer } from "@src/generated/model/BarSerializer";
import { ChordSerializer } from "@src/generated/model/ChordSerializer";
import { Chord } from "@src/model/Chord";
export class StaffSerializer {
    public static fromJson(json: any): Staff {
        const obj = new Staff(); 
        this.fillFromJson(obj, json); 
        return obj; 
    }
    public static fillFromJson(obj: Staff, json: any): void {
        if (json) {
            for (const $k in json) {
                this.setProperty(obj, $k.toLowerCase(), json[$k]);
            }
        } 
    }
    public static toJson(obj: Staff | null): any {
        if (!obj) {
            return null;
        } 
        const json: any = {}; 
        this.fillToJson(obj, json); 
        return json; 
    }
    public static fillToJson(obj: Staff, json: any): void {
        json.index = obj.index; 
        json.bars = obj.bars.map($li => BarSerializer.toJson($li)); 
        json.chords = ({} as any); 
        obj.chords.forEach(($mv, $mk) => { (json.chords as any)[$mk] = ChordSerializer.toJson($mv); }); 
        json.capo = obj.capo; 
        json.transpositionPitch = obj.transpositionPitch; 
        json.displayTranspositionPitch = obj.displayTranspositionPitch; 
        json.tuning = obj.tuning.slice(); 
        json.tuningName = obj.tuningName; 
        json.showTablature = obj.showTablature; 
        json.showStandardNotation = obj.showStandardNotation; 
        json.isPercussion = obj.isPercussion; 
        json.standardNotationLineCount = obj.standardNotationLineCount; 
    }
    public static setProperty(obj: Staff, property: string, value: any): boolean {
        switch (property) {
            case "index":
                obj.index = value;
                return true;
            case "bars":
                obj.bars = [];
                for (const $li of value)
                    obj.addBar(BarSerializer.fromJson($li));
                return true;
            case "chords":
                obj.chords = new Map<string, Chord>();
                for (let $mk in value)
                    if (value.hasOwnProperty($mk))
                        obj.addChord($mk, ChordSerializer.fromJson(value[$mk]));
                return true;
            case "capo":
                obj.capo = value;
                return true;
            case "transpositionpitch":
                obj.transpositionPitch = value;
                return true;
            case "displaytranspositionpitch":
                obj.displayTranspositionPitch = value;
                return true;
            case "tuning":
                obj.tuning = value.slice();
                return true;
            case "tuningname":
                obj.tuningName = value;
                return true;
            case "showtablature":
                obj.showTablature = value;
                return true;
            case "showstandardnotation":
                obj.showStandardNotation = value;
                return true;
            case "ispercussion":
                obj.isPercussion = value;
                return true;
            case "standardnotationlinecount":
                obj.standardNotationLineCount = value;
                return true;
        } 
        return false; 
    }
}

