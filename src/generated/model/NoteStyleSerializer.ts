// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { NoteStyle } from "@src/model/Note";
import { JsonHelper } from "@src/io/JsonHelper";
import { MusicFontSymbol } from "@src/model/MusicFontSymbol";
import { NoteSubElement } from "@src/model/Note";
import { Color } from "@src/model/Color";
export class NoteStyleSerializer {
    public static fromJson(obj: NoteStyle, m: unknown): void {
        if (!m) {
            return;
        }
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v));
    }
    public static toJson(obj: NoteStyle | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        }
        const o = new Map<string, unknown>();
        o.set("notehead", obj.noteHead as number | undefined);
        o.set("noteheadcenteronstem", obj.noteHeadCenterOnStem);
        {
            const m = new Map<string, unknown>();
            o.set("colors", m);
            for (const [k, v] of obj.colors!) {
                m.set(k.toString(), Color.toJson(v));
            }
        }
        return o;
    }
    public static setProperty(obj: NoteStyle, property: string, v: unknown): boolean {
        switch (property) {
            case "notehead":
                obj.noteHead = JsonHelper.parseEnum<MusicFontSymbol>(v, MusicFontSymbol);
                return true;
            case "noteheadcenteronstem":
                obj.noteHeadCenterOnStem = v as boolean | undefined;
                return true;
            case "colors":
                obj.colors = new Map<NoteSubElement, Color | null>();
                JsonHelper.forEach(v, (v, k) => {
                    obj.colors.set(JsonHelper.parseEnum<NoteSubElement>(k, NoteSubElement)!, Color.fromJson(v));
                });
                return true;
        }
        return false;
    }
}
