// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Track } from "@src/model/Track";
import { StaffSerializer } from "@src/generated/model/StaffSerializer";
import { PlaybackInformationSerializer } from "@src/generated/model/PlaybackInformationSerializer";
import { Color } from "@src/model/Color";
import { InstrumentArticulationSerializer } from "@src/generated/model/InstrumentArticulationSerializer";
import { PlaybackInformation } from "@src/model/PlaybackInformation";
export class TrackSerializer {
    public static fromJson(json: any): Track {
        const obj = new Track(); 
        this.fillFromJson(obj, json); 
        return obj; 
    }
    public static fillFromJson(obj: Track, json: any): void {
        if (json) {
            for (const $k in json) {
                this.setProperty(obj, $k.toLowerCase(), json[$k]);
            }
        } 
    }
    public static toJson(obj: Track | null): any {
        if (!obj) {
            return null;
        } 
        const json: any = {}; 
        this.fillToJson(obj, json); 
        return json; 
    }
    public static fillToJson(obj: Track, json: any): void {
        json.index = obj.index; 
        json.staves = obj.staves.map($li => StaffSerializer.toJson($li)); 
        if (json.playbackInfo) {
            PlaybackInformationSerializer.fillToJson(obj.playbackInfo, json.playbackInfo);
        }
        else {
            json.playbackInfo = (PlaybackInformationSerializer.toJson(obj.playbackInfo)!);
        } 
        json.color = (Color.toJson(obj.color)!); 
        json.name = obj.name; 
        json.shortName = obj.shortName; 
        json.percussionArticulations = obj.percussionArticulations.map($li => InstrumentArticulationSerializer.toJson($li)); 
    }
    public static setProperty(obj: Track, property: string, value: any): boolean {
        switch (property) {
            case "index":
                obj.index = value;
                return true;
            case "staves":
                obj.staves = [];
                for (const $li of value)
                    obj.addStaff(StaffSerializer.fromJson($li));
                return true;
            case "color":
                obj.color = (Color.fromJson(value)!);
                return true;
            case "name":
                obj.name = value;
                return true;
            case "shortname":
                obj.shortName = value;
                return true;
            case "percussionarticulations":
                obj.percussionArticulations = [];
                for (const $li of value)
                    obj.percussionArticulations.push(InstrumentArticulationSerializer.fromJson($li));
                return true;
        } 
        if (["playbackinfo"].indexOf(property) >= 0) {
            if (obj.playbackInfo)
                PlaybackInformationSerializer.fillFromJson(obj.playbackInfo, value);
            else
                obj.playbackInfo = PlaybackInformationSerializer.fromJson(value);
            return true;
        }
        else {
            for (const $c of ["playbackinfo"])
                if (property.indexOf($c) === 0) {
                    if (!obj.playbackInfo) {
                        obj.playbackInfo = new PlaybackInformation();
                    }
                    if (PlaybackInformationSerializer.setProperty(obj.playbackInfo, property.substring($c.length), value)) {
                        return true;
                    }
                }
        } 
        return false; 
    }
}

