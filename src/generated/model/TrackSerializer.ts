// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Track } from "@src/model/Track";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { StaffSerializer } from "@src/generated/model/StaffSerializer";
import { PlaybackInformationSerializer } from "@src/generated/model/PlaybackInformationSerializer";
import { Color } from "@src/model/Color";
import { InstrumentArticulationSerializer } from "@src/generated/model/InstrumentArticulationSerializer";
import { Staff } from "@src/model/Staff";
import { InstrumentArticulation } from "@src/model/InstrumentArticulation";
export class TrackSerializer {
    public static fromJson(obj: Track, reader: IJsonReader): void {
        if (reader.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (reader.nextProperty()) {
            this.setProperty(obj, reader.readPropertyName().toLowerCase(), reader);
        } 
    }
    public static toJson(obj: Track | null, writer: IJsonWriter): void {
        if (!obj) {
            writer.writeNull();
            return;
        } 
        writer.writeStartObject(); 
        writer.writePropertyName("index"); 
        writer.writeNumber(obj.index); 
        writer.writePropertyName("staves"); 
        writer.writeStartArray(); 
        for (const i of obj.staves) {
            StaffSerializer.toJson(i, writer);
        } 
        writer.writeEndArray(); 
        writer.writePropertyName("playbackInfo"); 
        PlaybackInformationSerializer.toJson(obj.playbackInfo, writer); 
        writer.writePropertyName("color"); 
        Color.toJson(obj.color, writer); 
        writer.writePropertyName("name"); 
        writer.writeString(obj.name); 
        writer.writePropertyName("shortName"); 
        writer.writeString(obj.shortName); 
        writer.writePropertyName("percussionArticulations"); 
        writer.writeStartArray(); 
        for (const i of obj.percussionArticulations) {
            InstrumentArticulationSerializer.toJson(i, writer);
        } 
        writer.writeEndArray(); 
        writer.writeEndObject(); 
    }
    public static setProperty(obj: Track, property: string, reader: IJsonReader): boolean {
        switch (property) {
            case "index":
                obj.index = (reader.readNumber()!);
                return true;
            case "staves":
                obj.staves = [];
                while (reader.nextArrayItem()) {
                    const i = new Staff();
                    StaffSerializer.fromJson(i, reader)
                    obj.addStaff(i);
                }
                return true;
            case "color":
                obj.color = (Color.fromJson(reader)!);
                return true;
            case "name":
                obj.name = (reader.readString()!);
                return true;
            case "shortname":
                obj.shortName = (reader.readString()!);
                return true;
            case "percussionarticulations":
                obj.percussionArticulations = [];
                while (reader.nextArrayItem()) {
                    const i = new InstrumentArticulation();
                    InstrumentArticulationSerializer.fromJson(i, reader)
                    obj.percussionArticulations.push(i);
                }
                return true;
        } 
        if (["playbackinfo"].indexOf(property) >= 0) {
            PlaybackInformationSerializer.fromJson(obj.playbackInfo, reader);
            return true;
        } 
        return false; 
    }
}

