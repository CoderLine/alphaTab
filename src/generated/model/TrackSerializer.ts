// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Track } from "@src/model/Track";
import { JsonHelper } from "@src/io/JsonHelper";
import { StaffSerializer } from "@src/generated/model/StaffSerializer";
import { PlaybackInformationSerializer } from "@src/generated/model/PlaybackInformationSerializer";
import { Color } from "@src/model/Color";
import { InstrumentArticulationSerializer } from "@src/generated/model/InstrumentArticulationSerializer";
import { IReadable } from "@src/io/IReadable";
import { Staff } from "@src/model/Staff";
import { InstrumentArticulation } from "@src/model/InstrumentArticulation";
import { IWriteable } from "@src/io/IWriteable";
import { IOHelper } from "@src/io/IOHelper";
export class TrackSerializer {
    public static fromJson(obj: Track, m: unknown): void {
        if (!m) {
            return;
        } 
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k, v)); 
    }
    public static toJson(obj: Track | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        } 
        const o = new Map<string, unknown>(); 
        o.set("staves", obj.staves.map(i => StaffSerializer.toJson(i))); 
        o.set("playbackinfo", PlaybackInformationSerializer.toJson(obj.playbackInfo)); 
        o.set("color", Color.toJson(obj.color)); 
        o.set("name", obj.name); 
        o.set("shortname", obj.shortName); 
        o.set("percussionarticulations", obj.percussionArticulations.map(i => InstrumentArticulationSerializer.toJson(i))); 
        return o; 
    }
    public static fromBinary(o: Track | null, r: IReadable): Track | null {
        if (IOHelper.readNull(r)) {
            return null;
        } 
        const obj = o != null ? o : new Track(); 
        {
            obj.staves = [];
            const length = IOHelper.readInt32LE(r);
            for (let i = 0;i < length;i++) {
                const it = new Staff();
                StaffSerializer.fromBinary(it, r);
                obj.addStaff(it);
            }
        } 
        obj.playbackInfo = PlaybackInformationSerializer.fromBinary(obj.playbackInfo, r); 
        obj.color = Color.fromBinary(r)!; 
        obj.name = IOHelper.readString(r); 
        obj.shortName = IOHelper.readString(r); 
        {
            obj.percussionArticulations = [];
            const length = IOHelper.readInt32LE(r);
            for (let i = 0;i < length;i++) {
                const it = new InstrumentArticulation();
                InstrumentArticulationSerializer.fromBinary(it, r);
                obj.percussionArticulations.push(it);
            }
        } 
        return obj; 
    }
    public static toBinary(obj: Track | null, w: IWriteable): void {
        if (!obj) {
            IOHelper.writeNull(w);
            return;
        } 
        IOHelper.writeNotNull(w); 
        IOHelper.writeInt32LE(w, obj.staves.length); 
        for (const i of obj.staves) {
            StaffSerializer.toBinary(i, w);
        } 
        PlaybackInformationSerializer.toBinary(obj.playbackInfo, w); 
        Color.toBinary(obj.color, w); 
        IOHelper.writeString(w, obj.name); 
        IOHelper.writeString(w, obj.shortName); 
        IOHelper.writeInt32LE(w, obj.percussionArticulations.length); 
        for (const i of obj.percussionArticulations) {
            InstrumentArticulationSerializer.toBinary(i, w);
        } 
    }
    public static setProperty(obj: Track, property: string, v: unknown): boolean {
        switch (property) {
            case "staves":
                obj.staves = [];
                for (const o of (v as (Map<string, unknown> | null)[])) {
                    const i = new Staff();
                    StaffSerializer.fromJson(i, o);
                    obj.addStaff(i);
                }
                return true;
            case "color":
                obj.color = Color.fromJson(v)!;
                return true;
            case "name":
                obj.name = v! as string;
                return true;
            case "shortname":
                obj.shortName = v! as string;
                return true;
            case "percussionarticulations":
                obj.percussionArticulations = [];
                for (const o of (v as (Map<string, unknown> | null)[])) {
                    const i = new InstrumentArticulation();
                    InstrumentArticulationSerializer.fromJson(i, o);
                    obj.percussionArticulations.push(i);
                }
                return true;
        } 
        if (["playbackinfo"].indexOf(property) >= 0) {
            PlaybackInformationSerializer.fromJson(obj.playbackInfo, v as Map<string, unknown>);
            return true;
        } 
        return false; 
    }
}

