// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Score } from "@src/model/Score";
import { MasterBarSerializer } from "@src/generated/model/MasterBarSerializer";
import { TrackSerializer } from "@src/generated/model/TrackSerializer";
import { RenderStylesheetSerializer } from "@src/generated/model/RenderStylesheetSerializer";
import { RenderStylesheet } from "@src/model/RenderStylesheet";
export class ScoreSerializer {
    public static fromJson(json: any): Score {
        const obj = new Score(); 
        this.fillFromJson(obj, json); 
        return obj; 
    }
    public static fillFromJson(obj: Score, json: any): void {
        if (json) {
            for (const $k in json) {
                this.setProperty(obj, $k.toLowerCase(), json[$k]);
            }
        } 
    }
    public static toJson(obj: Score | null): any {
        if (!obj) {
            return null;
        } 
        const json: any = {}; 
        this.fillToJson(obj, json); 
        return json; 
    }
    public static fillToJson(obj: Score, json: any): void {
        json.album = obj.album; 
        json.artist = obj.artist; 
        json.copyright = obj.copyright; 
        json.instructions = obj.instructions; 
        json.music = obj.music; 
        json.notices = obj.notices; 
        json.subTitle = obj.subTitle; 
        json.title = obj.title; 
        json.words = obj.words; 
        json.tab = obj.tab; 
        json.tempo = obj.tempo; 
        json.tempoLabel = obj.tempoLabel; 
        json.masterBars = obj.masterBars.map($li => MasterBarSerializer.toJson($li)); 
        json.tracks = obj.tracks.map($li => TrackSerializer.toJson($li)); 
        if (json.stylesheet) {
            RenderStylesheetSerializer.fillToJson(obj.stylesheet, json.stylesheet);
        }
        else {
            json.stylesheet = (RenderStylesheetSerializer.toJson(obj.stylesheet)!);
        } 
    }
    public static setProperty(obj: Score, property: string, value: any): boolean {
        switch (property) {
            case "album":
                obj.album = value;
                return true;
            case "artist":
                obj.artist = value;
                return true;
            case "copyright":
                obj.copyright = value;
                return true;
            case "instructions":
                obj.instructions = value;
                return true;
            case "music":
                obj.music = value;
                return true;
            case "notices":
                obj.notices = value;
                return true;
            case "subtitle":
                obj.subTitle = value;
                return true;
            case "title":
                obj.title = value;
                return true;
            case "words":
                obj.words = value;
                return true;
            case "tab":
                obj.tab = value;
                return true;
            case "tempo":
                obj.tempo = value;
                return true;
            case "tempolabel":
                obj.tempoLabel = value;
                return true;
            case "masterbars":
                obj.masterBars = [];
                for (const $li of value)
                    obj.addMasterBar(MasterBarSerializer.fromJson($li));
                return true;
            case "tracks":
                obj.tracks = [];
                for (const $li of value)
                    obj.addTrack(TrackSerializer.fromJson($li));
                return true;
        } 
        if (["stylesheet"].indexOf(property) >= 0) {
            if (obj.stylesheet)
                RenderStylesheetSerializer.fillFromJson(obj.stylesheet, value);
            else
                obj.stylesheet = RenderStylesheetSerializer.fromJson(value);
            return true;
        }
        else {
            for (const $c of ["stylesheet"])
                if (property.indexOf($c) === 0) {
                    if (!obj.stylesheet) {
                        obj.stylesheet = new RenderStylesheet();
                    }
                    if (RenderStylesheetSerializer.setProperty(obj.stylesheet, property.substring($c.length), value)) {
                        return true;
                    }
                }
        } 
        return false; 
    }
}

