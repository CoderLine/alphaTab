// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Score } from "@src/model/Score";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { MasterBarSerializer } from "@src/generated/model/MasterBarSerializer";
import { TrackSerializer } from "@src/generated/model/TrackSerializer";
import { RenderStylesheetSerializer } from "@src/generated/model/RenderStylesheetSerializer";
import { MasterBar } from "@src/model/MasterBar";
import { Track } from "@src/model/Track";
export class ScoreSerializer {
    public static fromJson(obj: Score, reader: IJsonReader): void {
        if (reader.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (reader.nextProperty()) {
            this.setProperty(obj, reader.readPropertyName().toLowerCase(), reader);
        } 
    }
    public static toJson(obj: Score | null, writer: IJsonWriter): void {
        if (!obj) {
            writer.writeNull();
            return;
        } 
        writer.writeStartObject(); 
        writer.writePropertyName("album"); 
        writer.writeString(obj.album); 
        writer.writePropertyName("artist"); 
        writer.writeString(obj.artist); 
        writer.writePropertyName("copyright"); 
        writer.writeString(obj.copyright); 
        writer.writePropertyName("instructions"); 
        writer.writeString(obj.instructions); 
        writer.writePropertyName("music"); 
        writer.writeString(obj.music); 
        writer.writePropertyName("notices"); 
        writer.writeString(obj.notices); 
        writer.writePropertyName("subTitle"); 
        writer.writeString(obj.subTitle); 
        writer.writePropertyName("title"); 
        writer.writeString(obj.title); 
        writer.writePropertyName("words"); 
        writer.writeString(obj.words); 
        writer.writePropertyName("tab"); 
        writer.writeString(obj.tab); 
        writer.writePropertyName("tempo"); 
        writer.writeNumber(obj.tempo); 
        writer.writePropertyName("tempoLabel"); 
        writer.writeString(obj.tempoLabel); 
        writer.writePropertyName("masterBars"); 
        writer.writeStartArray(); 
        for (const i of obj.masterBars) {
            MasterBarSerializer.toJson(i, writer);
        } 
        writer.writeEndArray(); 
        writer.writePropertyName("tracks"); 
        writer.writeStartArray(); 
        for (const i of obj.tracks) {
            TrackSerializer.toJson(i, writer);
        } 
        writer.writeEndArray(); 
        writer.writePropertyName("stylesheet"); 
        RenderStylesheetSerializer.toJson(obj.stylesheet, writer); 
        writer.writeEndObject(); 
    }
    public static setProperty(obj: Score, property: string, reader: IJsonReader): boolean {
        switch (property) {
            case "album":
                obj.album = (reader.readString()!);
                return true;
            case "artist":
                obj.artist = (reader.readString()!);
                return true;
            case "copyright":
                obj.copyright = (reader.readString()!);
                return true;
            case "instructions":
                obj.instructions = (reader.readString()!);
                return true;
            case "music":
                obj.music = (reader.readString()!);
                return true;
            case "notices":
                obj.notices = (reader.readString()!);
                return true;
            case "subtitle":
                obj.subTitle = (reader.readString()!);
                return true;
            case "title":
                obj.title = (reader.readString()!);
                return true;
            case "words":
                obj.words = (reader.readString()!);
                return true;
            case "tab":
                obj.tab = (reader.readString()!);
                return true;
            case "tempo":
                obj.tempo = (reader.readNumber()!);
                return true;
            case "tempolabel":
                obj.tempoLabel = (reader.readString()!);
                return true;
            case "masterbars":
                obj.masterBars = [];
                while (reader.nextArrayItem()) {
                    const i = new MasterBar();
                    MasterBarSerializer.fromJson(i, reader)
                    obj.addMasterBar(i);
                }
                return true;
            case "tracks":
                obj.tracks = [];
                while (reader.nextArrayItem()) {
                    const i = new Track();
                    TrackSerializer.fromJson(i, reader)
                    obj.addTrack(i);
                }
                return true;
        } 
        if (["stylesheet"].indexOf(property) >= 0) {
            RenderStylesheetSerializer.fromJson(obj.stylesheet, reader);
            return true;
        } 
        return false; 
    }
}

