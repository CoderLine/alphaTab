// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Score } from "@src/model/Score";
import { JsonReader } from "@src/io/JsonReader";
import { JsonValueType } from "@src/io/JsonReader";
import { JsonWriter } from "@src/io/JsonWriter";
import { MasterBarSerializer } from "@src/generated/model/MasterBarSerializer";
import { TrackSerializer } from "@src/generated/model/TrackSerializer";
import { RenderStylesheetSerializer } from "@src/generated/model/RenderStylesheetSerializer";
import { MasterBar } from "@src/model/MasterBar";
import { Track } from "@src/model/Track";
export class ScoreSerializer {
    public static fromJson(obj: Score, r: JsonReader): void {
        if (r.currentValueType === JsonValueType.Null) {
            return;
        } 
        r.startObject(); 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
        r.endObject(); 
    }
    public static toJson(obj: Score | null, w: JsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.string(obj.album, "album"); 
        w.string(obj.artist, "artist"); 
        w.string(obj.copyright, "copyright"); 
        w.string(obj.instructions, "instructions"); 
        w.string(obj.music, "music"); 
        w.string(obj.notices, "notices"); 
        w.string(obj.subTitle, "subTitle"); 
        w.string(obj.title, "title"); 
        w.string(obj.words, "words"); 
        w.string(obj.tab, "tab"); 
        w.number(obj.tempo, "tempo"); 
        w.string(obj.tempoLabel, "tempoLabel"); 
        w.prop("masterBars"); 
        w.startArray(); 
        for (const i of obj.masterBars) {
            MasterBarSerializer.toJson(i, w);
        } 
        w.endArray(); 
        w.prop("tracks"); 
        w.startArray(); 
        for (const i of obj.tracks) {
            TrackSerializer.toJson(i, w);
        } 
        w.endArray(); 
        w.prop("stylesheet"); 
        RenderStylesheetSerializer.toJson(obj.stylesheet, w); 
        w.endObject(); 
    }
    public static setProperty(obj: Score, property: string, r: JsonReader): boolean {
        switch (property) {
            case "album":
                obj.album = (r.string()!);
                return true;
            case "artist":
                obj.artist = (r.string()!);
                return true;
            case "copyright":
                obj.copyright = (r.string()!);
                return true;
            case "instructions":
                obj.instructions = (r.string()!);
                return true;
            case "music":
                obj.music = (r.string()!);
                return true;
            case "notices":
                obj.notices = (r.string()!);
                return true;
            case "subtitle":
                obj.subTitle = (r.string()!);
                return true;
            case "title":
                obj.title = (r.string()!);
                return true;
            case "words":
                obj.words = (r.string()!);
                return true;
            case "tab":
                obj.tab = (r.string()!);
                return true;
            case "tempo":
                obj.tempo = (r.number()!);
                return true;
            case "tempolabel":
                obj.tempoLabel = (r.string()!);
                return true;
            case "masterbars":
                obj.masterBars = [];
                r.startArray();
                while (r.nextItem()) {
                    const i = new MasterBar();
                    MasterBarSerializer.fromJson(i, r)
                    obj.addMasterBar(i);
                }
                r.endArray();
                return true;
            case "tracks":
                obj.tracks = [];
                r.startArray();
                while (r.nextItem()) {
                    const i = new Track();
                    TrackSerializer.fromJson(i, r)
                    obj.addTrack(i);
                }
                r.endArray();
                return true;
        } 
        if (["stylesheet"].indexOf(property) >= 0) {
            RenderStylesheetSerializer.fromJson(obj.stylesheet, r);
            return true;
        } 
        return false; 
    }
}

