// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { DisplaySettings } from "@src/DisplaySettings";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { RenderingResourcesSerializer } from "@src/generated/RenderingResourcesSerializer";
import { LayoutMode } from "@src/DisplaySettings";
import { StaveProfile } from "@src/DisplaySettings";
export class DisplaySettingsSerializer {
    public static fromJson(obj: DisplaySettings, r: IJsonReader): void {
        if (r.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
    }
    public static toJson(obj: DisplaySettings | null, w: IJsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.prop("scale"); 
        w.number(obj.scale); 
        w.prop("stretchForce"); 
        w.number(obj.stretchForce); 
        w.prop("layoutMode"); 
        w.enum(obj.layoutMode); 
        w.prop("staveProfile"); 
        w.enum(obj.staveProfile); 
        w.prop("barsPerRow"); 
        w.number(obj.barsPerRow); 
        w.prop("startBar"); 
        w.number(obj.startBar); 
        w.prop("barCount"); 
        w.number(obj.barCount); 
        w.prop("barCountPerPartial"); 
        w.number(obj.barCountPerPartial); 
        w.prop("resources"); 
        RenderingResourcesSerializer.toJson(obj.resources, w); 
        w.prop("padding"); 
        w.float32Array(obj.padding); 
        w.endObject(); 
    }
    public static setProperty(obj: DisplaySettings, property: string, r: IJsonReader): boolean {
        switch (property) {
            case "scale":
                obj.scale = (r.number()!);
                return true;
            case "stretchforce":
                obj.stretchForce = (r.number()!);
                return true;
            case "layoutmode":
                obj.layoutMode = (r.enum<LayoutMode>(LayoutMode)!);
                return true;
            case "staveprofile":
                obj.staveProfile = (r.enum<StaveProfile>(StaveProfile)!);
                return true;
            case "barsperrow":
                obj.barsPerRow = (r.number()!);
                return true;
            case "startbar":
                obj.startBar = (r.number()!);
                return true;
            case "barcount":
                obj.barCount = (r.number()!);
                return true;
            case "barcountperpartial":
                obj.barCountPerPartial = (r.number()!);
                return true;
            case "padding":
                obj.padding = r.float32Array();
                return true;
        } 
        if (["resources"].indexOf(property) >= 0) {
            RenderingResourcesSerializer.fromJson(obj.resources, r);
            return true;
        }
        else {
            for (const c of ["resources"]) {
                if (property.indexOf(c) === 0) {
                    if (RenderingResourcesSerializer.setProperty(obj.resources, property.substring(c.length), r)) {
                        return true;
                    }
                }
            }
        } 
        return false; 
    }
}

