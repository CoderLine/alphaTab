// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { DisplaySettings } from "@src/DisplaySettings";
import { RenderingResourcesSerializer } from "@src/generated/RenderingResourcesSerializer";
import { LayoutMode } from "@src/DisplaySettings";
import { StaveProfile } from "@src/DisplaySettings";
import { RenderingResources } from "@src/RenderingResources";
export class DisplaySettingsSerializer {
    public static fromJson(json: any): DisplaySettings {
        const obj = new DisplaySettings(); 
        this.fillFromJson(obj, json); 
        return obj; 
    }
    public static fillFromJson(obj: DisplaySettings, json: any): void {
        if (json) {
            for (const $k in json) {
                this.setProperty(obj, $k.toLowerCase(), json[$k]);
            }
        } 
    }
    public static toJson(obj: DisplaySettings | null): any {
        if (!obj) {
            return null;
        } 
        const json: any = {}; 
        this.fillToJson(obj, json); 
        return json; 
    }
    public static fillToJson(obj: DisplaySettings, json: any): void {
        json.scale = obj.scale; 
        json.stretchForce = obj.stretchForce; 
        json.layoutMode = obj.layoutMode; 
        json.staveProfile = obj.staveProfile; 
        json.barsPerRow = obj.barsPerRow; 
        json.startBar = obj.startBar; 
        json.barCount = obj.barCount; 
        json.barCountPerPartial = obj.barCountPerPartial; 
        if (json.resources) {
            RenderingResourcesSerializer.fillToJson(obj.resources, json.resources);
        }
        else {
            json.resources = (RenderingResourcesSerializer.toJson(obj.resources)!);
        } 
        json.padding = obj.padding ? obj.padding.slice() : null; 
    }
    public static setProperty(obj: DisplaySettings, property: string, value: any): boolean {
        switch (property) {
            case "scale":
                obj.scale = value;
                return true;
            case "stretchforce":
                obj.stretchForce = value;
                return true;
            case "layoutmode":
                obj.layoutMode = isNaN(parseInt(value)) ? LayoutMode[Object.keys(LayoutMode).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof LayoutMode] : parseInt(value);
                return true;
            case "staveprofile":
                obj.staveProfile = isNaN(parseInt(value)) ? StaveProfile[Object.keys(StaveProfile).find($k => $k.toLowerCase() === value.toLowerCase()) as keyof typeof StaveProfile] : parseInt(value);
                return true;
            case "barsperrow":
                obj.barsPerRow = value;
                return true;
            case "startbar":
                obj.startBar = value;
                return true;
            case "barcount":
                obj.barCount = value;
                return true;
            case "barcountperpartial":
                obj.barCountPerPartial = value;
                return true;
            case "padding":
                obj.padding = value ? value.slice() : null;
                return true;
        } 
        if (["resources"].indexOf(property) >= 0) {
            if (obj.resources)
                RenderingResourcesSerializer.fillFromJson(obj.resources, value);
            else
                obj.resources = RenderingResourcesSerializer.fromJson(value);
            return true;
        }
        else {
            for (const $c of ["resources"])
                if (property.indexOf($c) === 0) {
                    if (!obj.resources) {
                        obj.resources = new RenderingResources();
                    }
                    if (RenderingResourcesSerializer.setProperty(obj.resources, property.substring($c.length), value)) {
                        return true;
                    }
                }
        } 
        return false; 
    }
}

