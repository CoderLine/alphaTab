// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { DisplaySettings } from "@src/DisplaySettings";
import { JsonHelper } from "@src/io/JsonHelper";
import { RenderingResourcesSerializer } from "@src/generated/RenderingResourcesSerializer";
import { IReadable } from "@src/io/IReadable";
import { IWriteable } from "@src/io/IWriteable";
import { IOHelper } from "@src/io/IOHelper";
import { LayoutMode } from "@src/LayoutMode";
import { StaveProfile } from "@src/StaveProfile";
export class DisplaySettingsSerializer {
    public static fromJson(obj: DisplaySettings, m: unknown): void {
        if (!m) {
            return;
        } 
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v)); 
    }
    public static toJson(obj: DisplaySettings | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        } 
        const o = new Map<string, unknown>(); 
        o.set("scale", obj.scale); 
        o.set("stretchforce", obj.stretchForce); 
        o.set("layoutmode", obj.layoutMode as number); 
        o.set("staveprofile", obj.staveProfile as number); 
        o.set("barsperrow", obj.barsPerRow); 
        o.set("startbar", obj.startBar); 
        o.set("barcount", obj.barCount); 
        o.set("barcountperpartial", obj.barCountPerPartial); 
        o.set("resources", RenderingResourcesSerializer.toJson(obj.resources)); 
        o.set("padding", obj.padding); 
        return o; 
    }
    public static fromBinary(o: DisplaySettings | null, r: IReadable): DisplaySettings | null {
        if (IOHelper.readNull(r)) {
            return null;
        } 
        const obj = o != null ? o : new DisplaySettings(); 
        obj.scale = IOHelper.readNumber(r); 
        obj.stretchForce = IOHelper.readNumber(r); 
        obj.layoutMode = JsonHelper.parseEnum<LayoutMode>(IOHelper.readInt32LE(r), LayoutMode)!; 
        obj.staveProfile = JsonHelper.parseEnum<StaveProfile>(IOHelper.readInt32LE(r), StaveProfile)!; 
        obj.barsPerRow = IOHelper.readNumber(r); 
        obj.startBar = IOHelper.readNumber(r); 
        obj.barCount = IOHelper.readNumber(r); 
        obj.barCountPerPartial = IOHelper.readNumber(r); 
        obj.resources = RenderingResourcesSerializer.fromBinary(obj.resources, r); 
        if (!IOHelper.readNull(r)) {
            obj.padding = IOHelper.readNumberArray(r);
        } 
        return obj; 
    }
    public static toBinary(obj: DisplaySettings | null, w: IWriteable): void {
        if (!obj) {
            IOHelper.writeNull(w);
            return;
        } 
        IOHelper.writeNotNull(w); 
        IOHelper.writeNumber(w, obj.scale); 
        IOHelper.writeNumber(w, obj.stretchForce); 
        IOHelper.writeInt32LE(w, obj.layoutMode as number); 
        IOHelper.writeInt32LE(w, obj.staveProfile as number); 
        IOHelper.writeNumber(w, obj.barsPerRow); 
        IOHelper.writeNumber(w, obj.startBar); 
        IOHelper.writeNumber(w, obj.barCount); 
        IOHelper.writeNumber(w, obj.barCountPerPartial); 
        RenderingResourcesSerializer.toBinary(obj.resources, w); 
    }
    public static setProperty(obj: DisplaySettings, property: string, v: unknown): boolean {
        switch (property) {
            case "scale":
                obj.scale = v! as number;
                return true;
            case "stretchforce":
                obj.stretchForce = v! as number;
                return true;
            case "layoutmode":
                obj.layoutMode = JsonHelper.parseEnum<LayoutMode>(v, LayoutMode)!;
                return true;
            case "staveprofile":
                obj.staveProfile = JsonHelper.parseEnum<StaveProfile>(v, StaveProfile)!;
                return true;
            case "barsperrow":
                obj.barsPerRow = v! as number;
                return true;
            case "startbar":
                obj.startBar = v! as number;
                return true;
            case "barcount":
                obj.barCount = v! as number;
                return true;
            case "barcountperpartial":
                obj.barCountPerPartial = v! as number;
                return true;
            case "padding":
                obj.padding = v as number[] | null;
                return true;
        } 
        if (["resources"].indexOf(property) >= 0) {
            RenderingResourcesSerializer.fromJson(obj.resources, v as Map<string, unknown>);
            return true;
        }
        else {
            for (const c of ["resources"]) {
                if (property.indexOf(c) === 0) {
                    if (RenderingResourcesSerializer.setProperty(obj.resources, property.substring(c.length), v)) {
                        return true;
                    }
                }
            }
        } 
        return false; 
    }
}

