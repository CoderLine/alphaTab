// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { Settings } from "@src/Settings";
import { JsonReader } from "@src/io/JsonReader";
import { JsonValueType } from "@src/io/JsonReader";
import { JsonWriter } from "@src/io/JsonWriter";
import { CoreSettingsSerializer } from "@src/generated/CoreSettingsSerializer";
import { DisplaySettingsSerializer } from "@src/generated/DisplaySettingsSerializer";
import { NotationSettingsSerializer } from "@src/generated/NotationSettingsSerializer";
import { ImporterSettingsSerializer } from "@src/generated/ImporterSettingsSerializer";
import { PlayerSettingsSerializer } from "@src/generated/PlayerSettingsSerializer";
export class SettingsSerializer {
    public static fromJson(obj: Settings, r: JsonReader): void {
        if (r.currentValueType === JsonValueType.Null) {
            return;
        } 
        r.startObject(); 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
        r.endObject(); 
    }
    public static toJson(obj: Settings | null, w: JsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.prop("core"); 
        CoreSettingsSerializer.toJson(obj.core, w); 
        w.prop("display"); 
        DisplaySettingsSerializer.toJson(obj.display, w); 
        w.prop("notation"); 
        NotationSettingsSerializer.toJson(obj.notation, w); 
        w.prop("importer"); 
        ImporterSettingsSerializer.toJson(obj.importer, w); 
        w.prop("player"); 
        PlayerSettingsSerializer.toJson(obj.player, w); 
        w.endObject(); 
    }
    public static setProperty(obj: Settings, property: string, r: JsonReader): boolean {
        if (["core", ""].indexOf(property) >= 0) {
            CoreSettingsSerializer.fromJson(obj.core, r);
            return true;
        }
        else {
            for (const c of ["core", ""]) {
                if (property.indexOf(c) === 0) {
                    if (CoreSettingsSerializer.setProperty(obj.core, property.substring(c.length), r)) {
                        return true;
                    }
                }
            }
        } 
        if (["display", ""].indexOf(property) >= 0) {
            DisplaySettingsSerializer.fromJson(obj.display, r);
            return true;
        }
        else {
            for (const c of ["display", ""]) {
                if (property.indexOf(c) === 0) {
                    if (DisplaySettingsSerializer.setProperty(obj.display, property.substring(c.length), r)) {
                        return true;
                    }
                }
            }
        } 
        if (["notation"].indexOf(property) >= 0) {
            NotationSettingsSerializer.fromJson(obj.notation, r);
            return true;
        }
        else {
            for (const c of ["notation"]) {
                if (property.indexOf(c) === 0) {
                    if (NotationSettingsSerializer.setProperty(obj.notation, property.substring(c.length), r)) {
                        return true;
                    }
                }
            }
        } 
        if (["importer"].indexOf(property) >= 0) {
            ImporterSettingsSerializer.fromJson(obj.importer, r);
            return true;
        }
        else {
            for (const c of ["importer"]) {
                if (property.indexOf(c) === 0) {
                    if (ImporterSettingsSerializer.setProperty(obj.importer, property.substring(c.length), r)) {
                        return true;
                    }
                }
            }
        } 
        if (["player"].indexOf(property) >= 0) {
            PlayerSettingsSerializer.fromJson(obj.player, r);
            return true;
        }
        else {
            for (const c of ["player"]) {
                if (property.indexOf(c) === 0) {
                    if (PlayerSettingsSerializer.setProperty(obj.player, property.substring(c.length), r)) {
                        return true;
                    }
                }
            }
        } 
        return false; 
    }
}

