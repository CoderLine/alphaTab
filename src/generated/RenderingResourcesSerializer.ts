// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { RenderingResources } from "@src/RenderingResources";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
import { Font } from "@src/model/Font";
import { Color } from "@src/model/Color";
export class RenderingResourcesSerializer {
    public static fromJson(obj: RenderingResources, reader: IJsonReader): void {
        if (reader.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (reader.nextProperty()) {
            this.setProperty(obj, reader.readPropertyName().toLowerCase(), reader);
        } 
    }
    public static toJson(obj: RenderingResources | null, writer: IJsonWriter): void {
        if (!obj) {
            writer.writeNull();
            return;
        } 
        writer.writeStartObject(); 
        writer.writePropertyName("copyrightFont"); 
        Font.toJson(obj.copyrightFont, writer); 
        writer.writePropertyName("titleFont"); 
        Font.toJson(obj.titleFont, writer); 
        writer.writePropertyName("subTitleFont"); 
        Font.toJson(obj.subTitleFont, writer); 
        writer.writePropertyName("wordsFont"); 
        Font.toJson(obj.wordsFont, writer); 
        writer.writePropertyName("effectFont"); 
        Font.toJson(obj.effectFont, writer); 
        writer.writePropertyName("fretboardNumberFont"); 
        Font.toJson(obj.fretboardNumberFont, writer); 
        writer.writePropertyName("tablatureFont"); 
        Font.toJson(obj.tablatureFont, writer); 
        writer.writePropertyName("graceFont"); 
        Font.toJson(obj.graceFont, writer); 
        writer.writePropertyName("staffLineColor"); 
        Color.toJson(obj.staffLineColor, writer); 
        writer.writePropertyName("barSeparatorColor"); 
        Color.toJson(obj.barSeparatorColor, writer); 
        writer.writePropertyName("barNumberFont"); 
        Font.toJson(obj.barNumberFont, writer); 
        writer.writePropertyName("barNumberColor"); 
        Color.toJson(obj.barNumberColor, writer); 
        writer.writePropertyName("fingeringFont"); 
        Font.toJson(obj.fingeringFont, writer); 
        writer.writePropertyName("markerFont"); 
        Font.toJson(obj.markerFont, writer); 
        writer.writePropertyName("mainGlyphColor"); 
        Color.toJson(obj.mainGlyphColor, writer); 
        writer.writePropertyName("secondaryGlyphColor"); 
        Color.toJson(obj.secondaryGlyphColor, writer); 
        writer.writePropertyName("scoreInfoColor"); 
        Color.toJson(obj.scoreInfoColor, writer); 
        writer.writeEndObject(); 
    }
    public static setProperty(obj: RenderingResources, property: string, reader: IJsonReader): boolean {
        switch (property) {
            case "copyrightfont":
                obj.copyrightFont = (Font.fromJson(reader)!);
                return true;
            case "titlefont":
                obj.titleFont = (Font.fromJson(reader)!);
                return true;
            case "subtitlefont":
                obj.subTitleFont = (Font.fromJson(reader)!);
                return true;
            case "wordsfont":
                obj.wordsFont = (Font.fromJson(reader)!);
                return true;
            case "effectfont":
                obj.effectFont = (Font.fromJson(reader)!);
                return true;
            case "fretboardnumberfont":
                obj.fretboardNumberFont = (Font.fromJson(reader)!);
                return true;
            case "tablaturefont":
                obj.tablatureFont = (Font.fromJson(reader)!);
                return true;
            case "gracefont":
                obj.graceFont = (Font.fromJson(reader)!);
                return true;
            case "stafflinecolor":
                obj.staffLineColor = (Color.fromJson(reader)!);
                return true;
            case "barseparatorcolor":
                obj.barSeparatorColor = (Color.fromJson(reader)!);
                return true;
            case "barnumberfont":
                obj.barNumberFont = (Font.fromJson(reader)!);
                return true;
            case "barnumbercolor":
                obj.barNumberColor = (Color.fromJson(reader)!);
                return true;
            case "fingeringfont":
                obj.fingeringFont = (Font.fromJson(reader)!);
                return true;
            case "markerfont":
                obj.markerFont = (Font.fromJson(reader)!);
                return true;
            case "mainglyphcolor":
                obj.mainGlyphColor = (Color.fromJson(reader)!);
                return true;
            case "secondaryglyphcolor":
                obj.secondaryGlyphColor = (Color.fromJson(reader)!);
                return true;
            case "scoreinfocolor":
                obj.scoreInfoColor = (Color.fromJson(reader)!);
                return true;
        } 
        return false; 
    }
}

