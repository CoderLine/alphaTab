// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { RenderingResources } from "@src/RenderingResources";
import { Font } from "@src/model/Font";
import { Color } from "@src/model/Color";
export class RenderingResourcesSerializer {
    public static fromJson(json: any): RenderingResources {
        const obj = new RenderingResources(); 
        this.fillFromJson(obj, json); 
        return obj; 
    }
    public static fillFromJson(obj: RenderingResources, json: any): void {
        if (json) {
            for (const $k in json) {
                this.setProperty(obj, $k.toLowerCase(), json[$k]);
            }
        } 
    }
    public static toJson(obj: RenderingResources | null): any {
        if (!obj) {
            return null;
        } 
        const json: any = {}; 
        this.fillToJson(obj, json); 
        return json; 
    }
    public static fillToJson(obj: RenderingResources, json: any): void {
        json.copyrightFont = (Font.toJson(obj.copyrightFont)!); 
        json.titleFont = (Font.toJson(obj.titleFont)!); 
        json.subTitleFont = (Font.toJson(obj.subTitleFont)!); 
        json.wordsFont = (Font.toJson(obj.wordsFont)!); 
        json.effectFont = (Font.toJson(obj.effectFont)!); 
        json.fretboardNumberFont = (Font.toJson(obj.fretboardNumberFont)!); 
        json.tablatureFont = (Font.toJson(obj.tablatureFont)!); 
        json.graceFont = (Font.toJson(obj.graceFont)!); 
        json.staffLineColor = (Color.toJson(obj.staffLineColor)!); 
        json.barSeparatorColor = (Color.toJson(obj.barSeparatorColor)!); 
        json.barNumberFont = (Font.toJson(obj.barNumberFont)!); 
        json.barNumberColor = (Color.toJson(obj.barNumberColor)!); 
        json.fingeringFont = (Font.toJson(obj.fingeringFont)!); 
        json.markerFont = (Font.toJson(obj.markerFont)!); 
        json.mainGlyphColor = (Color.toJson(obj.mainGlyphColor)!); 
        json.secondaryGlyphColor = (Color.toJson(obj.secondaryGlyphColor)!); 
        json.scoreInfoColor = (Color.toJson(obj.scoreInfoColor)!); 
    }
    public static setProperty(obj: RenderingResources, property: string, value: any): boolean {
        switch (property) {
            case "copyrightfont":
                obj.copyrightFont = (Font.fromJson(value)!);
                return true;
            case "titlefont":
                obj.titleFont = (Font.fromJson(value)!);
                return true;
            case "subtitlefont":
                obj.subTitleFont = (Font.fromJson(value)!);
                return true;
            case "wordsfont":
                obj.wordsFont = (Font.fromJson(value)!);
                return true;
            case "effectfont":
                obj.effectFont = (Font.fromJson(value)!);
                return true;
            case "fretboardnumberfont":
                obj.fretboardNumberFont = (Font.fromJson(value)!);
                return true;
            case "tablaturefont":
                obj.tablatureFont = (Font.fromJson(value)!);
                return true;
            case "gracefont":
                obj.graceFont = (Font.fromJson(value)!);
                return true;
            case "stafflinecolor":
                obj.staffLineColor = (Color.fromJson(value)!);
                return true;
            case "barseparatorcolor":
                obj.barSeparatorColor = (Color.fromJson(value)!);
                return true;
            case "barnumberfont":
                obj.barNumberFont = (Font.fromJson(value)!);
                return true;
            case "barnumbercolor":
                obj.barNumberColor = (Color.fromJson(value)!);
                return true;
            case "fingeringfont":
                obj.fingeringFont = (Font.fromJson(value)!);
                return true;
            case "markerfont":
                obj.markerFont = (Font.fromJson(value)!);
                return true;
            case "mainglyphcolor":
                obj.mainGlyphColor = (Color.fromJson(value)!);
                return true;
            case "secondaryglyphcolor":
                obj.secondaryGlyphColor = (Color.fromJson(value)!);
                return true;
            case "scoreinfocolor":
                obj.scoreInfoColor = (Color.fromJson(value)!);
                return true;
        } 
        return false; 
    }
}

