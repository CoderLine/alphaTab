// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { MusicFontSymbol } from "@src/model/MusicFontSymbol";
import { EngravingStemInfoJson } from "@src/generated/EngravingStemInfoJson";
import { Duration } from "@src/model/Duration";
/**
 * This class holds all all spacing, thickness and scaling metrics
 * related to engraving the music notation.
 *
 * @remarks
 * While general layout settings are configurable via the display settings,
 * these settings go deeper into how the individual music symbols are scaled and aligned targeting
 * specification compliance with the Standard Music Font Layout (SMuFL).
 *
 * Unless specified differently the settings here are available {@since 1.7.0}
 *
 * If properties are marked with a SMuFl tag, it means that the values are part of the SMuFL specification
 * and should be filled from the respective metadata files shipped with the fonts or aligned generally with the specification.
 * Other properties are custom to alphaTab.
 *
 * In SmuFL Sizes and coordinates are expressed in "staff space" units which is 1/4 of the configured font size. In this data structure
 * the values are converted to pixels.
 *
 * @json
 * @json_declaration
 * @cloneable
 * @target web
 */
export interface EngravingSettingsJson {
    /**
     * The font size of the music font in pixel.
     */
    musicFontSize?: number;
    /**
     * The staff space in pixel
     * @smufl 1.4
     */
    oneStaffSpace?: number;
    /**
     * The staff space in pixel for tablature fonts. This is typically 1.5 of the standard staff space.
     * @smufl 1.4
     */
    tabLineSpacing?: number;
    /**
     * The thickness of the line used for the shaft of an arrow
     * @smufl 1.4
     */
    arrowShaftThickness?: number;
    /**
     * The default distance between multiple thin barlines when locked together, e.g. between two thin barlines making a double barline, measured from the right-hand edge of the left barline to the left-hand edge of the right barline.
     * @smufl 1.4
     */
    barlineSeparation?: number;
    /**
     * The distance between the inner edge of the primary and outer edge of subsequent secondary beams
     * @smufl 1.4
     */
    beamSpacing?: number;
    /**
     * The thickness of a beam
     * @smufl 1.4
     */
    beamThickness?: number;
    /**
     * The thickness of the vertical line of a bracket grouping staves together
     * @smufl 1.4
     */
    bracketThickness?: number;
    /**
     * The length of the dashes to be used in a dashed barline
     * @smufl 1.4
     */
    dashedBarlineDashLength?: number;
    /**
     * The length of the gap between dashes in a dashed barline
     */
    dashedBarlineGapLength?: number;
    /**
     * The thickness of a dashed barline
     * @smufl 1.4
     */
    dashedBarlineThickness?: number;
    /**
     * The thickness of a crescendo/diminuendo hairpin
     * @smufl 1.4
     */
    hairpinThickness?: number;
    /**
     * The thickness of a leger line (normally somewhat thicker than a staff line)
     * @smufl 1.4
     */
    legerLineThickness?: number;
    /**
     * The amount by which a leger line should extend either side of a notehead, scaled proportionally with the notehead's size, e.g. when scaled down as a grace note
     * @smufl 1.4
     */
    legerLineExtension?: number;
    /**
     * The thickness of the dashed line used for an octave line
     * @smufl 1.4
     */
    octaveLineThickness?: number;
    /**
     * The thickness of the line used for piano pedaling
     * @smufl 1.4
     */
    pedalLineThickness?: number;
    /**
     * The default horizontal distance between the dots and the inner barline of a repeat barline, measured from the edge of the dots to the edge of the barline.
     * @smufl 1.4
     */
    repeatBarlineDotSeparation?: number;
    /**
     * The thickness of the brackets drawn to indicate repeat endings
     * @smufl 1.4
     */
    repeatEndingLineThickness?: number;
    /**
     * The thickness of the mid-point of a slur (i.e. its thickest point)
     * @smufl 1.4
     */
    slurMidpointThickness?: number;
    /**
     * The thickness of each staff line
     * @smufl 1.4
     */
    staffLineThickness?: number;
    /**
     * The thickness of a stem
     * @smufl 1.4
     */
    stemThickness?: number;
    /**
     * The thickness of a thick barline, e.g. in a final barline or a repeat barline
     * @smufl 1.4
     */
    thickBarlineThickness?: number;
    /**
     * The thickness of a dashed barline
     * @smufl 1.4
     */
    thinBarlineThickness?: number;
    /**
     * The default distance between a pair of thin and thick barlines when locked together, e.g. between the thin and thick barlines making a final barline, or between the thick and thin barlines making a start repeat barline.
     * @smufl 1.4
     */
    thinThickBarlineSeparation?: number;
    /**
     * The thickness of the mid-point of a tie
     * @smufl 1.4
     */
    tieMidpointThickness?: number;
    /**
     * The thickness of the brackets drawn either side of tuplet numbers
     * @smufl 1.4
     */
    tupletBracketThickness?: number;
    /**
     * Holds information about where to place upwards pointing stems on glyphs.
     * @smufl 1.4
     */
    stemUp?: Map<MusicFontSymbol | keyof typeof MusicFontSymbol | Lowercase<keyof typeof MusicFontSymbol>, EngravingStemInfoJson>;
    /**
     * Holds information about where to place downwards pointing stems on glyphs.
     * @smufl 1.4
     */
    stemDown?: Map<MusicFontSymbol | keyof typeof MusicFontSymbol | Lowercase<keyof typeof MusicFontSymbol>, EngravingStemInfoJson>;
    /**
     * Holds the x-coordinate offsets for glyphs which are drawn repeatedly (like vibrato waves).
     * @smufl 1.4
     */
    repeatOffsetX?: Map<MusicFontSymbol | keyof typeof MusicFontSymbol | Lowercase<keyof typeof MusicFontSymbol>, number>;
    /**
     * The standard stem length of a quarter note.
     * @smufl 1.4
     */
    standardStemLength?: number;
    /**
     * The additional offsets stems need to have enough space for flags.
     * @smufl 1.4
     */
    stemFlagOffsets?: Map<Duration | keyof typeof Duration | Lowercase<keyof typeof Duration>, number>;
    /**
     * A lookup containing the offset from the visual top to the glyph center.
     * The glyph center is the origin coordinate at which the glyph paths start when drawn on the alphabetic baseline.
     * @smufl 1.4
     */
    glyphTop?: Map<MusicFontSymbol | keyof typeof MusicFontSymbol | Lowercase<keyof typeof MusicFontSymbol>, number>;
    /**
     * A lookup containing the offset from the glyph center to the visual bottom of the glyph.
     * The glyph center is the origin coordinate at which the glyph paths start when drawn on the alphabetic baseline.
     * @smufl 1.4
     */
    glyphBottom?: Map<MusicFontSymbol | keyof typeof MusicFontSymbol | Lowercase<keyof typeof MusicFontSymbol>, number>;
    /**
     * A lookup for the widths of the visual bounding box for the glyphs.
     * @smufl 1.4
     */
    glyphWidths?: Map<MusicFontSymbol | keyof typeof MusicFontSymbol | Lowercase<keyof typeof MusicFontSymbol>, number>;
    /**
     * A lookup for the heights of the visual bounding box for the glyphs.
     * @smufl 1.4
     */
    glyphHeights?: Map<MusicFontSymbol | keyof typeof MusicFontSymbol | Lowercase<keyof typeof MusicFontSymbol>, number>;
    /**
     * The size of the bars drawn in numbered notation to indicate the durations.
     */
    numberedBarRendererBarSize?: number;
    /**
     * The spacing between the bars drawn in numbered notation to indicate the durations.
     */
    numberedBarRendererBarSpacing?: number;
    /**
     * The size of the dashed drawn in numbered notation to indicate the durations.
     */
    numberedDashGlyphPadding?: number;
    /**
     * The width of the dashed drawn in numbered notation to indicate the durations.
     */
    numberedDashGlyphWidth?: number;
    /**
     * The gap between dashes on line ranged glyphs (like let-ring)
     */
    lineRangedGlyphDashGap?: number;
    /**
     * The size between dashes on line ranged glyphs (like let-ring)
     */
    lineRangedGlyphDashSize?: number;
    /**
     * The padding between effects and glyphs placed before the note heads, e.g. accidentals or brushes
     */
    preNoteEffectPadding?: number;
    /**
     * The padding between effects and glyphs placed after the note heads, e.g. slides or bends
     */
    postNoteEffectPadding?: number;
    /**
     * The padding between effects and glyphs placed above/blow the note heads e.g. staccato
     */
    onNoteEffectPadding?: number;
    /**
     * The padding between the circles around string numbers.
     */
    stringNumberCirclePadding?: number;
    /**
     * The outer padding for glyphs arranged in a grid like fashion, like the tunings and chord diagrams.
     */
    rowContainerPadding?: number;
    /**
     * The innter gap for glyphs arranged in a grid like fashion, like the tunings and chord diagrams.
     */
    rowContainerGap?: number;
    /**
     * The padding used for aligning the alternate ending brackets and texts.
     */
    alternateEndingsPadding?: number;
    /**
     * The padding between the sustain pedal glyphs and lines.
     */
    sustainPedalLinePadding?: number;
    /**
     * The height of ties.
     */
    tieHeight?: number;
    /**
     * The padding between the border and text of beat timers.
     */
    beatTimerPadding?: number;
    /**
     * The additional padding applied to helper note heads shown on bends.
     */
    bendNoteHeadElementPadding?: number;
    /**
     * The width of the parenthesis shown on ghost notes and free time time signatures.
     */
    ghostParenthesisWidth?: number;
    /**
     * The padding between the parenthesis and wrapped elements on ghost notes and free time time signatures
     */
    ghostParenthesisPadding?: number;
    /**
     * The width of broken beams e.g. when combining a 32nd and 16th note
     */
    brokenBeamWidth?: number;
    /**
     * The padding between the text and whammy lines.
     */
    tabWhammyTextPadding?: number;
    /**
     * The height applied per half-note whammy.
     */
    tabWhammyPerHalfHeight?: number;
    /**
     * The size of the dashes on whammys (e.g. on holds)
     */
    tabWhammyDashSize?: number;
    /**
     * The height of simple dip whammys when using the songbook mode.
     */
    songBookWhammyDipHeight?: number;
    /**
     * The width of the lines drawn for dead slapped beats.
     */
    deadSlappedLineWidth?: number;
    /**
     * The width of ties drawn for left-hand-tapped notes.
     */
    leftHandTabTieWidth?: number;
    /**
     * The size of the dashes on bends (e.g. on holds)
     */
    tabBendDashSize?: number;
    /**
     * The height applied per quarter-note.
     */
    tabBendPerValueHeight?: number;
    /**
     * The padding applied between the line and text of bends.
     */
    tabBendLabelPadding?: number;
    /**
     * The width of simple slides like slide out down which do slide to a defined target note.
     */
    simpleSlideWidth?: number;
    /**
     * The height of simple slides like slide out down which do slide to a defined target note.
     */
    simpleSlideHeight?: number;
    /**
     * The horizontal padding applied to individual chord diagrams.
     */
    chordDiagramPaddingX?: number;
    /**
     * The vertical padding applied to individual chord diagrams.
     */
    chordDiagramPaddingY?: number;
    /**
     * The spacing between strings on chord diagrams.
     */
    chordDiagramStringSpacing?: number;
    /**
     * The spacing between frets on chord diagrams.
     */
    chordDiagramFretSpacing?: number;
    /**
     * The height of the nut on chord diagrams..
     */
    chordDiagramNutHeight?: number;
    /**
     * The height of the individual fret lines.
     */
    chordDiagramFretHeight?: number;
    /**
     * The width of all other lines drawn on chord diagrams.
     */
    chordDiagramLineWidth?: number;
    /**
     * The padding between the bracket lines and numbers of tuplets
     */
    tripletFeelBracketPadding?: number;
    /**
     * The horizontal padding between individual accidentals when multiple ones are applied.
     */
    accidentalPadding?: number;
    /**
     * The padding between glyphs shown before any beats e.g. clefs and time signatures
     */
    preBeatGlyphSpacing?: number;
    /**
     * The relative scale of the note drawn on tempo markers
     */
    tempoNoteScale?: number;
    /**
     * The scale of string numbers shown on tuning glyphs.
     */
    tuningGlyphCircleNumberScale?: number;
    /**
     * The scale factor applied to the width of the columns of string on tuning glyphs.
     */
    tuningGlyphStringColumnScale?: number;
    /**
     * The padding between rows of strings on tuning glyphs.
     */
    tuningGlyphStringRowPadding?: number;
    /**
     * The relative scale of any directions glyphs drawn like coda or segno.
     */
    directionsScale?: number;
}
