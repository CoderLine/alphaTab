// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { VibratoPlaybackSettings } from "@src/PlayerSettings";
import { JsonHelper } from "@src/io/JsonHelper";
import { IReadable } from "@src/io/IReadable";
import { EndOfReaderError } from "@src/io/IReadable";
import { IWriteable } from "@src/io/IWriteable";
import { IOHelper } from "@src/io/IOHelper";
export class VibratoPlaybackSettingsSerializer {
    public static fromJson(obj: VibratoPlaybackSettings, m: unknown): void {
        if (!m) {
            return;
        } 
        JsonHelper.forEach(m, (v, k) => this.setProperty(obj, k.toLowerCase(), v)); 
    }
    public static toJson(obj: VibratoPlaybackSettings | null): Map<string, unknown> | null {
        if (!obj) {
            return null;
        } 
        const o = new Map<string, unknown>(); 
        o.set("notewidelength", obj.noteWideLength); 
        o.set("notewideamplitude", obj.noteWideAmplitude); 
        o.set("noteslightlength", obj.noteSlightLength); 
        o.set("noteslightamplitude", obj.noteSlightAmplitude); 
        o.set("beatwidelength", obj.beatWideLength); 
        o.set("beatwideamplitude", obj.beatWideAmplitude); 
        o.set("beatslightlength", obj.beatSlightLength); 
        o.set("beatslightamplitude", obj.beatSlightAmplitude); 
        return o; 
    }
    public static fromBinary(o: VibratoPlaybackSettings | null, r: IReadable): VibratoPlaybackSettings | null {
        if (IOHelper.isEof(r)) {
            throw new EndOfReaderError();
        } 
        if (IOHelper.readNull(r)) {
            return null;
        } 
        const obj = o != null ? o : new VibratoPlaybackSettings(); 
        obj.noteWideLength = IOHelper.readNumber(r); 
        obj.noteWideAmplitude = IOHelper.readNumber(r); 
        obj.noteSlightLength = IOHelper.readNumber(r); 
        obj.noteSlightAmplitude = IOHelper.readNumber(r); 
        obj.beatWideLength = IOHelper.readNumber(r); 
        obj.beatWideAmplitude = IOHelper.readNumber(r); 
        obj.beatSlightLength = IOHelper.readNumber(r); 
        obj.beatSlightAmplitude = IOHelper.readNumber(r); 
        return obj; 
    }
    public static toBinary(obj: VibratoPlaybackSettings | null, w: IWriteable): void {
        if (!obj) {
            IOHelper.writeNull(w);
            return;
        } 
        IOHelper.writeNotNull(w); 
        IOHelper.writeNumber(w, obj.noteWideLength); 
        IOHelper.writeNumber(w, obj.noteWideAmplitude); 
        IOHelper.writeNumber(w, obj.noteSlightLength); 
        IOHelper.writeNumber(w, obj.noteSlightAmplitude); 
        IOHelper.writeNumber(w, obj.beatWideLength); 
        IOHelper.writeNumber(w, obj.beatWideAmplitude); 
        IOHelper.writeNumber(w, obj.beatSlightLength); 
        IOHelper.writeNumber(w, obj.beatSlightAmplitude); 
    }
    public static setProperty(obj: VibratoPlaybackSettings, property: string, v: unknown): boolean {
        switch (property) {
            case "notewidelength":
                obj.noteWideLength = v! as number;
                return true;
            case "notewideamplitude":
                obj.noteWideAmplitude = v! as number;
                return true;
            case "noteslightlength":
                obj.noteSlightLength = v! as number;
                return true;
            case "noteslightamplitude":
                obj.noteSlightAmplitude = v! as number;
                return true;
            case "beatwidelength":
                obj.beatWideLength = v! as number;
                return true;
            case "beatwideamplitude":
                obj.beatWideAmplitude = v! as number;
                return true;
            case "beatslightlength":
                obj.beatSlightLength = v! as number;
                return true;
            case "beatslightamplitude":
                obj.beatSlightAmplitude = v! as number;
                return true;
        } 
        return false; 
    }
}

