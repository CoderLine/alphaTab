// <auto-generated>
// This code was auto-generated.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
import { VibratoPlaybackSettings } from "@src/PlayerSettings";
import { IJsonReader } from "@src/io/IJsonReader";
import { JsonValueType } from "@src/io/IJsonReader";
import { IJsonWriter } from "@src/io/IJsonWriter";
export class VibratoPlaybackSettingsSerializer {
    public static fromJson(obj: VibratoPlaybackSettings, r: IJsonReader): void {
        if (r.currentValueType !== JsonValueType.Object) {
            return;
        } 
        while (r.nextProp()) {
            this.setProperty(obj, r.prop().toLowerCase(), r);
        } 
    }
    public static toJson(obj: VibratoPlaybackSettings | null, w: IJsonWriter): void {
        if (!obj) {
            w.null();
            return;
        } 
        w.startObject(); 
        w.prop("noteWideLength"); 
        w.number(obj.noteWideLength); 
        w.prop("noteWideAmplitude"); 
        w.number(obj.noteWideAmplitude); 
        w.prop("noteSlightLength"); 
        w.number(obj.noteSlightLength); 
        w.prop("noteSlightAmplitude"); 
        w.number(obj.noteSlightAmplitude); 
        w.prop("beatWideLength"); 
        w.number(obj.beatWideLength); 
        w.prop("beatWideAmplitude"); 
        w.number(obj.beatWideAmplitude); 
        w.prop("beatSlightLength"); 
        w.number(obj.beatSlightLength); 
        w.prop("beatSlightAmplitude"); 
        w.number(obj.beatSlightAmplitude); 
        w.endObject(); 
    }
    public static setProperty(obj: VibratoPlaybackSettings, property: string, r: IJsonReader): boolean {
        switch (property) {
            case "notewidelength":
                obj.noteWideLength = (r.number()!);
                return true;
            case "notewideamplitude":
                obj.noteWideAmplitude = (r.number()!);
                return true;
            case "noteslightlength":
                obj.noteSlightLength = (r.number()!);
                return true;
            case "noteslightamplitude":
                obj.noteSlightAmplitude = (r.number()!);
                return true;
            case "beatwidelength":
                obj.beatWideLength = (r.number()!);
                return true;
            case "beatwideamplitude":
                obj.beatWideAmplitude = (r.number()!);
                return true;
            case "beatslightlength":
                obj.beatSlightLength = (r.number()!);
                return true;
            case "beatslightamplitude":
                obj.beatSlightAmplitude = (r.number()!);
                return true;
        } 
        return false; 
    }
}

