Title: Error
JsName: add_Error();remove_Error()
DomName: alphaTab.error
Description: This event is fired when an error within alphatab occurred.
ShowInSideBar: false
Since: 0.9.4
---

<h2>Description</h2>
<p>
    This event is fired when an error within alphatab occurred. Use this event as global error handler to show errors
    to end-users. Due to the asynchronous nature of alphaTab, no call to the API will directly throw an error if it fails.
    Instead a signal to this error handlers will be sent. 
</p>

<h2>Types</h2>

<table class="table table-striped table-condensed type-table">
    <tbody>    
        <tr>
            <td><code>Action&lt;string,Exception&gt; <span class="code-badge">.net</span></code></td>
        </tr>
        <tr>            
            <td><code>function(type, details) <span class="code-badge">JavaScript</span></code></td>
        </tr>   
    </tbody>
</table>

<h2>Parameters</h2>

<table class="table table-striped table-condensed type-table">
    <thead>
        <tr>
            <th>Parameters</th>
            <th>Type</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>    
        <tr>
            <td><code>type <span class="code-badge">All</span></td>
            <td><code>string</code></td>
            <td>
                The kind of error that happened, or the module that reported the error. Possible values are: 
                <ul>
                    <li><code>import</code> - An unexpected error while loading or parsing the score happened.</li>
                    <li><code>render</code> - An unexpected error during rendering happened</li>
                </ul>
            </td>
        </tr>   
        <tr>
            <td><code>details <span class="code-badge">All</span></td>
            <td><code>System.Exception</code></td>
            <td>The raw bytes containing a file supported by the score loaders.</td>
        </tr>
    </tbody>
</table>

<h2>Example - C#</h2>

<pre>
<code class="language-csharp line-numbers">
var api = new AlphaTabApi<MyControl>(...);
api.Error += (type, details) => 
{
    DisplayError(type, details);
};
</code>
</pre>


<h2>Example - JavaScript</h2>

<pre>
<code class="language-javascript line-numbers">
var api = new alphaTab.platform.javaScript.AlphaTabApi(document.querySelector('#alphaTab'));
api.add_Error(function(type, details) {
    displayError(type, details);
});
</code>
</pre>

<h2>Example - jQuery</h2>

<pre>
<code class="language-javascript line-numbers">
$('#alphaTab').on('alphaTab.error', function(e, type, details) {
    displayError(type, details);
});
</code>
</pre>

<h2>Example - HTML</h2>

<pre>
<code class="language-javaScript line-numbers">
document.querySelector('#alphaTab').addEventListener('alphaTab.error', function(e) {
    displayError(e.detail.type, e.detail.details);
}, false);
</code>
</pre>
